    ; assembly                                                                                                                                                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                 | /* bdlcc_singleconsumerqueue.t/none @ 0x410240 */
                                                                                                                                                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                                                                                                                                                 |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::SingleConsumerQueue_my_WorkData____BloombergLP::bdlf::Bind_BoundTuple1_BloombergLP::bdlcc::SingleConsumerQueue_my ()      | uint64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf_Nil_void_BloombergLP::bdlcc::SingleConsumerQueue_my_WorkData_BloombergLP::bdlf::Bind_BoundTuple1_BloombergLP::bdlcc::SingleConsumerQueue_my (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                 |     rcx = arg4;
                                                                                                                                                                                                                                                                                 |     rdx = arg3;
                                                                                                                                                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                                                                                                                                                 |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::SingleConsumerQueue<my_WorkData>*), BloombergLP::bdlf::Bind_BoundTuple1<BloombergLP::bdlcc::SingleConsumerQueue<my_WorkData>*> > >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::SingleConsumerQueue<my_WorkData>*), BloombergLP::bdlf::Bind_BoundTuple1<BloombergLP::bdlcc::SingleConsumerQueue<my_WorkData>*> > const&, BloombergLP::bslma::Allocator*) */
    0x00410240 push rbp                                                                                                                                                                                                                                                          |     
    0x00410241 push r15                                                                                                                                                                                                                                                          |     
    0x00410243 push r14                                                                                                                                                                                                                                                          |     
    0x00410245 push r13                                                                                                                                                                                                                                                          |     
    0x00410247 push r12                                                                                                                                                                                                                                                          |     
    0x00410249 push rbx                                                                                                                                                                                                                                                          |     
    0x0041024a push rax                                                                                                                                                                                                                                                          |     
    0x0041024b mov r14, rcx                                                                                                                                                                                                                                                      |     r14 = rcx;
    0x0041024e mov r12, rdx                                                                                                                                                                                                                                                      |     r12 = rdx;
    0x00410251 mov r15, rsi                                                                                                                                                                                                                                                      |     r15 = rsi;
    0x00410254 mov qword [rsp], rdi                                                                                                                                                                                                                                              |     *(rsp) = rdi;
    0x00410258 cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                      |     
                                                                                                                                                                                                                                                                                 |     if (*((rsi + 0x38)) != 0x17) {
    0x0041025d je 0x410265                                                                                                                                                                                                                                                       |         
    0x0041025f mov r13, qword [r15 + 0x18]                                                                                                                                                                                                                                       |         r13 = *((r15 + 0x18));
    0x00410263 jmp 0x410269                                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |     } else {
    0x00410265 lea r13, [r15 + 0x18]                                                                                                                                                                                                                                             |         r13 = r15 + 0x18;
                                                                                                                                                                                                                                                                                 |     }
    0x00410269 mov rbp, qword [r15 + 0x30]                                                                                                                                                                                                                                       |     rbp = *((r15 + 0x30));
    0x0041026d test r14, r14                                                                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                                                                 |     if (r14 == 0) {
    0x00410270 jne 0x410286                                                                                                                                                                                                                                                      |         
    0x00410272 mov r14, qword [rip + 0x2468bf]                                                                                                                                                                                                                                   |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00410279 test r14, r14                                                                                                                                                                                                                                                     |         
                                                                                                                                                                                                                                                                                 |         if (r14 != 0) {
    0x0041027c jne 0x410286                                                                                                                                                                                                                                                      |             goto label_0;
                                                                                                                                                                                                                                                                                 |         }
    0x0041027e call 0x414540                                                                                                                                                                                                                                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x00410283 mov r14, rax                                                                                                                                                                                                                                                      |         r14 = rax;
                                                                                                                                                                                                                                                                                 |     }
                                                                                                                                                                                                                                                                                 | label_0:
    0x00410286 mov rax, qword [r14]                                                                                                                                                                                                                                              |     rax = *(r14);
    0x00410289 mov esi, 0x48                                                                                                                                                                                                                                                     |     esi = 0x48;
    0x0041028e mov rdi, r14                                                                                                                                                                                                                                                      |     rdi = r14;
    0x00410291 call qword [rax + 0x10]                                                                                                                                                                                                                                           |     rax = uint64_t (*rax + 0x10)() ();
    0x00410294 mov rbx, rax                                                                                                                                                                                                                                                      |     rbx = rax;
    0x00410297 mov qword [rax], 0x4103b0                                                                                                                                                                                                                                         |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::SingleConsumerQueue_my_WorkData____BloombergLP::bdlf::Bind_BoundTuple1_BloombergLP::bdlcc::SingleConsumerQueue_my_WorkData_;
    0x0041029e mov rax, qword [r12]                                                                                                                                                                                                                                              |     rax = *(r12);
    0x004102a2 mov qword [rbx + 8], rax                                                                                                                                                                                                                                          |     *((rbx + 8)) = rax;
    0x004102a6 mov rax, qword [r12 + 8]                                                                                                                                                                                                                                          |     rax = *((r12 + 8));
    0x004102ab mov qword [rbx + 0x10], rax                                                                                                                                                                                                                                       |     *((rbx + 0x10)) = rax;
    0x004102af lea rdi, [rbx + 0x18]                                                                                                                                                                                                                                             |     
    0x004102b3 mov qword [rbx + 0x18], 0                                                                                                                                                                                                                                         |     *((rbx + 0x18)) = 0;
    0x004102bb mov qword [rbx + 0x40], r14                                                                                                                                                                                                                                       |     *((rbx + 0x40)) = r14;
    0x004102bf movaps xmm0, xmmword [rip + 0x2c21a]                                                                                                                                                                                                                              |     xmm0 = .comment;
    0x004102c6 movups xmmword [rbx + 0x30], xmm0                                                                                                                                                                                                                                 |     __asm ("movups xmmword [rbx + 0x30], xmm0");
    0x004102ca mov ecx, 0x43d5e9                                                                                                                                                                                                                                                 |     
    0x004102cf mov rsi, r13                                                                                                                                                                                                                                                      |     
    0x004102d2 mov rdx, rbp                                                                                                                                                                                                                                                      |     
    0x004102d5 call 0x418520                                                                                                                                                                                                                                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x18, r13, rbp, "string<...>::assign<Iter>(i,j): string too long");
    0x004102da mov edx, 0x415460                                                                                                                                                                                                                                                 |     
    0x004102df mov rdi, qword [rsp]                                                                                                                                                                                                                                              |     
    0x004102e3 mov rsi, r15                                                                                                                                                                                                                                                      |     
    0x004102e6 mov rcx, rbx                                                                                                                                                                                                                                                      |     
    0x004102e9 call 0x415b30                                                                                                                                                                                                                                                     |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x004102ee mov ebp, eax                                                                                                                                                                                                                                                      |     
    0x004102f0 test eax, eax                                                                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                                                                 |     if (eax != 0) {
    0x004102f2 je 0x41031d                                                                                                                                                                                                                                                       |         
    0x004102f4 cmp qword [rbx + 0x38], 0x17                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |         if (*((rbx + 0x38)) != 0x17) {
    0x004102f9 je 0x410309                                                                                                                                                                                                                                                       |             
    0x004102fb mov rsi, qword [rbx + 0x18]                                                                                                                                                                                                                                       |             rsi = *((rbx + 0x18));
    0x004102ff mov rdi, qword [rbx + 0x40]                                                                                                                                                                                                                                       |             rdi = *((rbx + 0x40));
    0x00410303 mov rax, qword [rdi]                                                                                                                                                                                                                                              |             rax = *(rdi);
    0x00410306 call qword [rax + 0x18]                                                                                                                                                                                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |         }
    0x00410309 mov qword [rbx + 0x30], 0xffffffffffffffff                                                                                                                                                                                                                        |         *((rbx + 0x30)) = 0xffffffffffffffff;
    0x00410311 mov rax, qword [r14]                                                                                                                                                                                                                                              |         rax = *(r14);
    0x00410314 mov rdi, r14                                                                                                                                                                                                                                                      |         rdi = r14;
    0x00410317 mov rsi, rbx                                                                                                                                                                                                                                                      |         rsi = rbx;
    0x0041031a call qword [rax + 0x18]                                                                                                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |     }
    0x0041031d mov eax, ebp                                                                                                                                                                                                                                                      |     eax = ebp;
    0x0041031f add rsp, 8                                                                                                                                                                                                                                                        |     
    0x00410323 pop rbx                                                                                                                                                                                                                                                           |     
    0x00410324 pop r12                                                                                                                                                                                                                                                           |     
    0x00410326 pop r13                                                                                                                                                                                                                                                           |     
    0x00410328 pop r14                                                                                                                                                                                                                                                           |     
    0x0041032a pop r15                                                                                                                                                                                                                                                           |     
    0x0041032c pop rbp                                                                                                                                                                                                                                                           |     
    0x0041032d ret                                                                                                                                                                                                                                                               |     return rax;
                                                                                                                                                                                                                                                                                 | }
