    ; assembly                                                                                                                                                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                 | /* bdlcc_singleconsumerqueue.t/assume @ 0x410240 */
                                                                                                                                                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                                                                                                                                                 |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::SingleConsumerQueue_my_WorkData____BloombergLP::bdlf::Bind_BoundTuple1_BloombergLP::bdlcc::SingleConsumerQueue_my ()      | int64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf_Nil_void_BloombergLP::bdlcc::SingleConsumerQueue_my_WorkData_BloombergLP::bdlf::Bind_BoundTuple1_BloombergLP::bdlcc::SingleConsumerQueue_my (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                 |     rcx = arg4;
                                                                                                                                                                                                                                                                                 |     rdx = arg3;
                                                                                                                                                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                                                                                                                                                 |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::SingleConsumerQueue<my_WorkData>*), BloombergLP::bdlf::Bind_BoundTuple1<BloombergLP::bdlcc::SingleConsumerQueue<my_WorkData>*> > >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::SingleConsumerQueue<my_WorkData>*), BloombergLP::bdlf::Bind_BoundTuple1<BloombergLP::bdlcc::SingleConsumerQueue<my_WorkData>*> > const&, BloombergLP::bslma::Allocator*) */
    0x00410240 push rbp                                                                                                                                                                                                                                                          |     
    0x00410241 push r15                                                                                                                                                                                                                                                          |     
    0x00410243 push r14                                                                                                                                                                                                                                                          |     
    0x00410245 push r13                                                                                                                                                                                                                                                          |     
    0x00410247 push r12                                                                                                                                                                                                                                                          |     
    0x00410249 push rbx                                                                                                                                                                                                                                                          |     
    0x0041024a push rax                                                                                                                                                                                                                                                          |     
    0x0041024b mov r14, rcx                                                                                                                                                                                                                                                      |     r14 = rcx;
    0x0041024e mov r12, rdx                                                                                                                                                                                                                                                      |     r12 = rdx;
    0x00410251 mov r15, rsi                                                                                                                                                                                                                                                      |     r15 = rsi;
    0x00410254 mov qword [rsp], rdi                                                                                                                                                                                                                                              |     *(rsp) = rdi;
    0x00410258 mov r13, qword [rsi + 0x30]                                                                                                                                                                                                                                       |     r13 = *((rsi + 0x30));
    0x0041025c cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                      |     
                                                                                                                                                                                                                                                                                 |     if (*((rsi + 0x38)) != 0x17) {
    0x00410261 je 0x410269                                                                                                                                                                                                                                                       |         
    0x00410263 mov rbp, qword [r15 + 0x18]                                                                                                                                                                                                                                       |         rbp = *((r15 + 0x18));
    0x00410267 jmp 0x41026d                                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |     } else {
    0x00410269 lea rbp, [r15 + 0x18]                                                                                                                                                                                                                                             |         rbp = r15 + 0x18;
                                                                                                                                                                                                                                                                                 |     }
    0x0041026d mov rax, qword [r14]                                                                                                                                                                                                                                              |     rax = *(r14);
    0x00410270 mov esi, 0x48                                                                                                                                                                                                                                                     |     esi = 0x48;
    0x00410275 mov rdi, r14                                                                                                                                                                                                                                                      |     rdi = r14;
    0x00410278 call qword [rax + 0x10]                                                                                                                                                                                                                                           |     rax = uint64_t (*rax + 0x10)() ();
    0x0041027b mov rbx, rax                                                                                                                                                                                                                                                      |     rbx = rax;
    0x0041027e mov qword [rax], 0x410390                                                                                                                                                                                                                                         |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::SingleConsumerQueue_my_WorkData____BloombergLP::bdlf::Bind_BoundTuple1_BloombergLP::bdlcc::SingleConsumerQueue_my_WorkData_;
    0x00410285 mov rax, qword [r12]                                                                                                                                                                                                                                              |     rax = *(r12);
    0x00410289 mov qword [rbx + 8], rax                                                                                                                                                                                                                                          |     *((rbx + 8)) = rax;
    0x0041028d mov rax, qword [r12 + 8]                                                                                                                                                                                                                                          |     rax = *((r12 + 8));
    0x00410292 mov qword [rbx + 0x10], rax                                                                                                                                                                                                                                       |     *((rbx + 0x10)) = rax;
    0x00410296 lea rdi, [rbx + 0x18]                                                                                                                                                                                                                                             |     
    0x0041029a mov qword [rbx + 0x18], 0                                                                                                                                                                                                                                         |     *((rbx + 0x18)) = 0;
    0x004102a2 mov qword [rbx + 0x40], r14                                                                                                                                                                                                                                       |     *((rbx + 0x40)) = r14;
    0x004102a6 movaps xmm0, xmmword [rip + 0x2c1d3]                                                                                                                                                                                                                              |     xmm0 = .comment;
    0x004102ad movups xmmword [rbx + 0x30], xmm0                                                                                                                                                                                                                                 |     __asm ("movups xmmword [rbx + 0x30], xmm0");
    0x004102b1 mov ecx, 0x43d58b                                                                                                                                                                                                                                                 |     
    0x004102b6 mov rsi, rbp                                                                                                                                                                                                                                                      |     
    0x004102b9 mov rdx, r13                                                                                                                                                                                                                                                      |     
    0x004102bc call 0x4184e0                                                                                                                                                                                                                                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x18, rbp, r13, "string<...>::assign<Iter>(i,j): string too long");
    0x004102c1 mov edx, 0x415440                                                                                                                                                                                                                                                 |     
    0x004102c6 mov rdi, qword [rsp]                                                                                                                                                                                                                                              |     
    0x004102ca mov rsi, r15                                                                                                                                                                                                                                                      |     
    0x004102cd mov rcx, rbx                                                                                                                                                                                                                                                      |     
    0x004102d0 call 0x415b10                                                                                                                                                                                                                                                     |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x004102d5 mov ebp, eax                                                                                                                                                                                                                                                      |     
    0x004102d7 test eax, eax                                                                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                                                                 |     if (eax != 0) {
    0x004102d9 je 0x410304                                                                                                                                                                                                                                                       |         
    0x004102db cmp qword [rbx + 0x38], 0x17                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |         if (*((rbx + 0x38)) != 0x17) {
    0x004102e0 je 0x4102f0                                                                                                                                                                                                                                                       |             
    0x004102e2 mov rsi, qword [rbx + 0x18]                                                                                                                                                                                                                                       |             rsi = *((rbx + 0x18));
    0x004102e6 mov rdi, qword [rbx + 0x40]                                                                                                                                                                                                                                       |             rdi = *((rbx + 0x40));
    0x004102ea mov rax, qword [rdi]                                                                                                                                                                                                                                              |             rax = *(rdi);
    0x004102ed call qword [rax + 0x18]                                                                                                                                                                                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |         }
    0x004102f0 mov qword [rbx + 0x30], 0xffffffffffffffff                                                                                                                                                                                                                        |         *((rbx + 0x30)) = 0xffffffffffffffff;
    0x004102f8 mov rax, qword [r14]                                                                                                                                                                                                                                              |         rax = *(r14);
    0x004102fb mov rdi, r14                                                                                                                                                                                                                                                      |         rdi = r14;
    0x004102fe mov rsi, rbx                                                                                                                                                                                                                                                      |         rsi = rbx;
    0x00410301 call qword [rax + 0x18]                                                                                                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |     }
    0x00410304 mov eax, ebp                                                                                                                                                                                                                                                      |     eax = ebp;
    0x00410306 add rsp, 8                                                                                                                                                                                                                                                        |     
    0x0041030a pop rbx                                                                                                                                                                                                                                                           |     
    0x0041030b pop r12                                                                                                                                                                                                                                                           |     
    0x0041030d pop r13                                                                                                                                                                                                                                                           |     
    0x0041030f pop r14                                                                                                                                                                                                                                                           |     
    0x00410311 pop r15                                                                                                                                                                                                                                                           |     
    0x00410313 pop rbp                                                                                                                                                                                                                                                           |     
    0x00410314 ret                                                                                                                                                                                                                                                               |     return rax;
                                                                                                                                                                                                                                                                                 | }
