    ; assembly                                                                                                                                                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                 | /* bdlmt_timereventscheduler.t/assume @ 0x4208c0 */
                                                                                                                                                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                                                                                                                                                 |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlmt::TimerEventScheduler___BloombergLP::bdlf::Bind_BoundTuple1_BloombergLP::bdlmt::TimerEventScheduler______unsigned_ ()       | int64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf_Nil_void_BloombergLP::bdlmt::TimerEventScheduler_BloombergLP::bdlf::Bind_BoundTuple1_BloombergLP::bdlmt::TimerEventScheduler_unsigned_ (int64_t arg3, int64_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                 |     int64_t var_18h;
                                                                                                                                                                                                                                                                                 |     uint32_t var_38h;
                                                                                                                                                                                                                                                                                 |     int64_t var_40h;
                                                                                                                                                                                                                                                                                 |     rdx = arg3;
                                                                                                                                                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                                                                                                                                                 |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlmt::TimerEventScheduler*), BloombergLP::bdlf::Bind_BoundTuple1<BloombergLP::bdlmt::TimerEventScheduler*> > >(unsigned long*, BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlmt::TimerEventScheduler*), BloombergLP::bdlf::Bind_BoundTuple1<BloombergLP::bdlmt::TimerEventScheduler*> > const&, BloombergLP::bslma::Allocator*) */
    0x004208c0 push rbp                                                                                                                                                                                                                                                          |     
    0x004208c1 push r15                                                                                                                                                                                                                                                          |     
    0x004208c3 push r14                                                                                                                                                                                                                                                          |     
    0x004208c5 push rbx                                                                                                                                                                                                                                                          |     
    0x004208c6 sub rsp, 0x48                                                                                                                                                                                                                                                     |     
    0x004208ca mov r14, rdx                                                                                                                                                                                                                                                      |     r14 = rdx;
    0x004208cd mov rbp, rsi                                                                                                                                                                                                                                                      |     
    0x004208d0 mov r15, rdi                                                                                                                                                                                                                                                      |     r15 = rdi;
    0x004208d3 mov rax, qword [rdx]                                                                                                                                                                                                                                              |     rax = *(rdx);
    0x004208d6 mov esi, 0x48                                                                                                                                                                                                                                                     |     esi = 0x48;
    0x004208db mov rdi, rdx                                                                                                                                                                                                                                                      |     rdi = rdx;
    0x004208de call qword [rax + 0x10]                                                                                                                                                                                                                                           |     rax = uint64_t (*rax + 0x10)(void, void, void) (rbx, r14, r15);
    0x004208e1 mov rbx, rax                                                                                                                                                                                                                                                      |     rbx = rax;
    0x004208e4 mov qword [rax], 0x420a40                                                                                                                                                                                                                                         |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlmt::TimerEventScheduler___BloombergLP::bdlf::Bind_BoundTuple1_BloombergLP::bdlmt::TimerEventScheduler_____::invokerFunction_voi;
    0x004208eb mov rax, qword [rbp]                                                                                                                                                                                                                                              |     rax = *(rbp);
    0x004208ef mov qword [rbx + 8], rax                                                                                                                                                                                                                                          |     *((rbx + 8)) = rax;
    0x004208f3 mov rax, qword [rbp + 8]                                                                                                                                                                                                                                          |     rax = *((rbp + 8));
    0x004208f7 mov qword [rbx + 0x10], rax                                                                                                                                                                                                                                       |     *((rbx + 0x10)) = rax;
    0x004208fb lea rdi, [rbx + 0x18]                                                                                                                                                                                                                                             |     
    0x004208ff mov qword [rbx + 0x18], 0                                                                                                                                                                                                                                         |     *((rbx + 0x18)) = 0;
    0x00420907 mov qword [rbx + 0x40], r14                                                                                                                                                                                                                                       |     *((rbx + 0x40)) = r14;
    0x0042090b movaps xmm0, xmmword [rip + 0x3297e]                                                                                                                                                                                                                              |     xmm0 = .comment;
    0x00420912 movups xmmword [rbx + 0x30], xmm0                                                                                                                                                                                                                                 |     __asm ("movups xmmword [rbx + 0x30], xmm0");
    0x00420916 mov ecx, 0x45554b                                                                                                                                                                                                                                                 |     
    0x0042091b xor esi, esi                                                                                                                                                                                                                                                      |     
    0x0042091d xor edx, edx                                                                                                                                                                                                                                                      |     
    0x0042091f call 0x42ee70                                                                                                                                                                                                                                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x18, 0, 0, "string<...>::assign<Iter>(i,j): string too long");
    0x00420924 mov rdi, rsp                                                                                                                                                                                                                                                      |     
    0x00420927 call 0x42b620                                                                                                                                                                                                                                                     |     BloombergLP::bslmt::ThreadAttributes::ThreadAttributes() (rsp);
    0x0042092c mov rsi, rsp                                                                                                                                                                                                                                                      |     
    0x0042092f mov edx, 0x42b110                                                                                                                                                                                                                                                 |     
    0x00420934 mov rdi, r15                                                                                                                                                                                                                                                      |     
    0x00420937 mov rcx, rbx                                                                                                                                                                                                                                                      |     
    0x0042093a call 0x42be20                                                                                                                                                                                                                                                     |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (r15, rsp, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0042093f mov ebp, eax                                                                                                                                                                                                                                                      |     
    0x00420941 cmp qword [rsp + 0x38], 0x17                                                                                                                                                                                                                                      |     
                                                                                                                                                                                                                                                                                 |     if (*((rsp + 0x38)) != 0x17) {
    0x00420947 je 0x420959                                                                                                                                                                                                                                                       |         
    0x00420949 mov rsi, qword [rsp + 0x18]                                                                                                                                                                                                                                       |         rsi = *((rsp + 0x18));
    0x0042094e mov rdi, qword [rsp + 0x40]                                                                                                                                                                                                                                       |         rdi = *((rsp + 0x40));
    0x00420953 mov rax, qword [rdi]                                                                                                                                                                                                                                              |         rax = *(rdi);
    0x00420956 call qword [rax + 0x18]                                                                                                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |     }
    0x00420959 test ebp, ebp                                                                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                                                                 |     if (ebp != 0) {
    0x0042095b je 0x420986                                                                                                                                                                                                                                                       |         
    0x0042095d cmp qword [rbx + 0x38], 0x17                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |         if (*((rbx + 0x38)) != 0x17) {
    0x00420962 je 0x420972                                                                                                                                                                                                                                                       |             
    0x00420964 mov rsi, qword [rbx + 0x18]                                                                                                                                                                                                                                       |             rsi = *((rbx + 0x18));
    0x00420968 mov rdi, qword [rbx + 0x40]                                                                                                                                                                                                                                       |             rdi = *((rbx + 0x40));
    0x0042096c mov rax, qword [rdi]                                                                                                                                                                                                                                              |             rax = *(rdi);
    0x0042096f call qword [rax + 0x18]                                                                                                                                                                                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |         }
    0x00420972 mov qword [rbx + 0x30], 0xffffffffffffffff                                                                                                                                                                                                                        |         *((rbx + 0x30)) = 0xffffffffffffffff;
    0x0042097a mov rax, qword [r14]                                                                                                                                                                                                                                              |         rax = *(r14);
    0x0042097d mov rdi, r14                                                                                                                                                                                                                                                      |         rdi = r14;
    0x00420980 mov rsi, rbx                                                                                                                                                                                                                                                      |         rsi = rbx;
    0x00420983 call qword [rax + 0x18]                                                                                                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |     }
    0x00420986 mov eax, ebp                                                                                                                                                                                                                                                      |     eax = ebp;
    0x00420988 add rsp, 0x48                                                                                                                                                                                                                                                     |     
    0x0042098c pop rbx                                                                                                                                                                                                                                                           |     
    0x0042098d pop r14                                                                                                                                                                                                                                                           |     
    0x0042098f pop r15                                                                                                                                                                                                                                                           |     
    0x00420991 pop rbp                                                                                                                                                                                                                                                           |     
    0x00420992 ret                                                                                                                                                                                                                                                               |     return rax;
                                                                                                                                                                                                                                                                                 | }
