    ; assembly                                                                                                                                                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                 | /* bdlmt_timereventscheduler.t/none @ 0x4214d0 */
                                                                                                                                                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                                                                                                                                                 |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlmt::TimerEventScheduler__BloombergLP::bsls::AtomicInt__BloombergLP::bsls::AtomicInt__BloombergLP::bslmt::Barrier__ ()         | uint64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf_Nil_void_BloombergLP::bdlmt::TimerEventScheduler_BloombergLP::bsls::AtomicInt_BloombergLP::bsls::AtomicInt_BloombergLP::bslmt::Barrier_ (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                 |     rcx = arg4;
                                                                                                                                                                                                                                                                                 |     rdx = arg3;
                                                                                                                                                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                                                                                                                                                 |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlmt::TimerEventScheduler*, BloombergLP::bsls::AtomicInt*, BloombergLP::bsls::AtomicInt*, BloombergLP::bslmt::Barrier*), BloombergLP::bdlf::Bind_BoundTuple4<BloombergLP::bdlmt::TimerEventScheduler*, BloombergLP::bsls::AtomicInt*, BloombergLP::bsls::AtomicInt*, BloombergLP::bslmt::Barrier*> > >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlmt::TimerEventScheduler*, BloombergLP::bsls::AtomicInt*, BloombergLP::bsls::AtomicInt*, BloombergLP::bslmt::Barrier*), BloombergLP::bdlf::Bind_BoundTuple4<BloombergLP::bdlmt::TimerEventScheduler*, BloombergLP::bsls::AtomicInt*, BloombergLP::bsls::AtomicInt*, BloombergLP::bslmt::Barrier*> > const&, BloombergLP::bslma::Allocator*) */
    0x004214d0 push rbp                                                                                                                                                                                                                                                          |     
    0x004214d1 push r15                                                                                                                                                                                                                                                          |     
    0x004214d3 push r14                                                                                                                                                                                                                                                          |     
    0x004214d5 push r13                                                                                                                                                                                                                                                          |     
    0x004214d7 push r12                                                                                                                                                                                                                                                          |     
    0x004214d9 push rbx                                                                                                                                                                                                                                                          |     
    0x004214da push rax                                                                                                                                                                                                                                                          |     
    0x004214db mov r14, rcx                                                                                                                                                                                                                                                      |     r14 = rcx;
    0x004214de mov r12, rdx                                                                                                                                                                                                                                                      |     r12 = rdx;
    0x004214e1 mov r15, rsi                                                                                                                                                                                                                                                      |     r15 = rsi;
    0x004214e4 mov qword [rsp], rdi                                                                                                                                                                                                                                              |     *(rsp) = rdi;
    0x004214e8 cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                      |     
                                                                                                                                                                                                                                                                                 |     if (*((rsi + 0x38)) != 0x17) {
    0x004214ed je 0x4214f5                                                                                                                                                                                                                                                       |         
    0x004214ef mov r13, qword [r15 + 0x18]                                                                                                                                                                                                                                       |         r13 = *((r15 + 0x18));
    0x004214f3 jmp 0x4214f9                                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |     } else {
    0x004214f5 lea r13, [r15 + 0x18]                                                                                                                                                                                                                                             |         r13 = r15 + 0x18;
                                                                                                                                                                                                                                                                                 |     }
    0x004214f9 mov rbp, qword [r15 + 0x30]                                                                                                                                                                                                                                       |     rbp = *((r15 + 0x30));
    0x004214fd test r14, r14                                                                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                                                                 |     if (r14 == 0) {
    0x00421500 jne 0x421516                                                                                                                                                                                                                                                      |         
    0x00421502 mov r14, qword [rip + 0x25751f]                                                                                                                                                                                                                                   |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00421509 test r14, r14                                                                                                                                                                                                                                                     |         
                                                                                                                                                                                                                                                                                 |         if (r14 != 0) {
    0x0042150c jne 0x421516                                                                                                                                                                                                                                                      |             goto label_0;
                                                                                                                                                                                                                                                                                 |         }
    0x0042150e call 0x42a060                                                                                                                                                                                                                                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x00421513 mov r14, rax                                                                                                                                                                                                                                                      |         r14 = rax;
                                                                                                                                                                                                                                                                                 |     }
                                                                                                                                                                                                                                                                                 | label_0:
    0x00421516 mov rax, qword [r14]                                                                                                                                                                                                                                              |     rax = *(r14);
    0x00421519 mov esi, 0x60                                                                                                                                                                                                                                                     |     esi = 0x60;
    0x0042151e mov rdi, r14                                                                                                                                                                                                                                                      |     rdi = r14;
    0x00421521 call qword [rax + 0x10]                                                                                                                                                                                                                                           |     rax = uint64_t (*rax + 0x10)() ();
    0x00421524 mov rbx, rax                                                                                                                                                                                                                                                      |     rbx = rax;
    0x00421527 mov qword [rax], 0x421650                                                                                                                                                                                                                                         |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlmt::TimerEventScheduler__BloombergLP::bsls::AtomicInt__BloombergLP::bsls::AtomicInt__BloombergLP::bslmt::Barrier___BloombergL;
    0x0042152e mov rax, qword [r12]                                                                                                                                                                                                                                              |     rax = *(r12);
    0x00421532 mov qword [rbx + 8], rax                                                                                                                                                                                                                                          |     *((rbx + 8)) = rax;
    0x00421536 mov rax, qword [r12 + 8]                                                                                                                                                                                                                                          |     rax = *((r12 + 8));
    0x0042153b mov qword [rbx + 0x10], rax                                                                                                                                                                                                                                       |     *((rbx + 0x10)) = rax;
    0x0042153f mov rax, qword [r12 + 0x10]                                                                                                                                                                                                                                       |     rax = *((r12 + 0x10));
    0x00421544 mov qword [rbx + 0x18], rax                                                                                                                                                                                                                                       |     *((rbx + 0x18)) = rax;
    0x00421548 mov rax, qword [r12 + 0x18]                                                                                                                                                                                                                                       |     rax = *((r12 + 0x18));
    0x0042154d mov qword [rbx + 0x20], rax                                                                                                                                                                                                                                       |     *((rbx + 0x20)) = rax;
    0x00421551 mov rax, qword [r12 + 0x20]                                                                                                                                                                                                                                       |     rax = *((r12 + 0x20));
    0x00421556 mov qword [rbx + 0x28], rax                                                                                                                                                                                                                                       |     *((rbx + 0x28)) = rax;
    0x0042155a lea rdi, [rbx + 0x30]                                                                                                                                                                                                                                             |     
    0x0042155e mov qword [rbx + 0x30], 0                                                                                                                                                                                                                                         |     *((rbx + 0x30)) = 0;
    0x00421566 mov qword [rbx + 0x58], r14                                                                                                                                                                                                                                       |     *((rbx + 0x58)) = r14;
    0x0042156a movaps xmm0, xmmword [rip + 0x31e7f]                                                                                                                                                                                                                              |     xmm0 = .comment;
    0x00421571 movups xmmword [rbx + 0x48], xmm0                                                                                                                                                                                                                                 |     __asm ("movups xmmword [rbx + 0x48], xmm0");
    0x00421575 mov ecx, 0x4556a7                                                                                                                                                                                                                                                 |     
    0x0042157a mov rsi, r13                                                                                                                                                                                                                                                      |     
    0x0042157d mov rdx, rbp                                                                                                                                                                                                                                                      |     
    0x00421580 call 0x42efa0                                                                                                                                                                                                                                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x30, r13, rbp, "string<...>::assign<Iter>(i,j): string too long");
    0x00421585 mov edx, 0x42b210                                                                                                                                                                                                                                                 |     
    0x0042158a mov rdi, qword [rsp]                                                                                                                                                                                                                                              |     
    0x0042158e mov rsi, r15                                                                                                                                                                                                                                                      |     
    0x00421591 mov rcx, rbx                                                                                                                                                                                                                                                      |     
    0x00421594 call 0x42bf20                                                                                                                                                                                                                                                     |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x00421599 mov ebp, eax                                                                                                                                                                                                                                                      |     
    0x0042159b test eax, eax                                                                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                                                                 |     if (eax != 0) {
    0x0042159d je 0x4215c8                                                                                                                                                                                                                                                       |         
    0x0042159f cmp qword [rbx + 0x50], 0x17                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |         if (*((rbx + 0x50)) != 0x17) {
    0x004215a4 je 0x4215b4                                                                                                                                                                                                                                                       |             
    0x004215a6 mov rsi, qword [rbx + 0x30]                                                                                                                                                                                                                                       |             rsi = *((rbx + 0x30));
    0x004215aa mov rdi, qword [rbx + 0x58]                                                                                                                                                                                                                                       |             rdi = *((rbx + 0x58));
    0x004215ae mov rax, qword [rdi]                                                                                                                                                                                                                                              |             rax = *(rdi);
    0x004215b1 call qword [rax + 0x18]                                                                                                                                                                                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |         }
    0x004215b4 mov qword [rbx + 0x48], 0xffffffffffffffff                                                                                                                                                                                                                        |         *((rbx + 0x48)) = 0xffffffffffffffff;
    0x004215bc mov rax, qword [r14]                                                                                                                                                                                                                                              |         rax = *(r14);
    0x004215bf mov rdi, r14                                                                                                                                                                                                                                                      |         rdi = r14;
    0x004215c2 mov rsi, rbx                                                                                                                                                                                                                                                      |         rsi = rbx;
    0x004215c5 call qword [rax + 0x18]                                                                                                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |     }
    0x004215c8 mov eax, ebp                                                                                                                                                                                                                                                      |     eax = ebp;
    0x004215ca add rsp, 8                                                                                                                                                                                                                                                        |     
    0x004215ce pop rbx                                                                                                                                                                                                                                                           |     
    0x004215cf pop r12                                                                                                                                                                                                                                                           |     
    0x004215d1 pop r13                                                                                                                                                                                                                                                           |     
    0x004215d3 pop r14                                                                                                                                                                                                                                                           |     
    0x004215d5 pop r15                                                                                                                                                                                                                                                           |     
    0x004215d7 pop rbp                                                                                                                                                                                                                                                           |     
    0x004215d8 ret                                                                                                                                                                                                                                                               |     return rax;
                                                                                                                                                                                                                                                                                 | }
