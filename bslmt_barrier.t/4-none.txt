    ; assembly                                                                                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                                                                                 | /* bslmt_barrier.t/none @ 0x408250 */
                                                                                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                                                                                 |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil.createWithAllocator_Case6_Waiter__unsigned_long__BloombergLP::bslmt::ThreadAttributes_const__Case6_Waiter_const__BloombergLP::bslma::Allocator_ ()         | uint64_t method_int_BloombergLP::bslmt::ThreadUtil_createWithAllocator_Case6_Waiter_unsigned_long_BloombergLP::bslmt::ThreadAttributes_const_Case6_Waiter_const_BloombergLP::bslma::Allocator_ (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                 |     rcx = arg4;
                                                                                                                                                                                                                 |     rdx = arg3;
                                                                                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                                                                                 |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<Case6_Waiter>(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, Case6_Waiter const&, BloombergLP::bslma::Allocator*) */
    0x00408250 push rbp                                                                                                                                                                                          |     
    0x00408251 push r15                                                                                                                                                                                          |     
    0x00408253 push r14                                                                                                                                                                                          |     
    0x00408255 push r13                                                                                                                                                                                          |     
    0x00408257 push r12                                                                                                                                                                                          |     
    0x00408259 push rbx                                                                                                                                                                                          |     
    0x0040825a push rax                                                                                                                                                                                          |     
    0x0040825b mov r14, rcx                                                                                                                                                                                      |     r14 = rcx;
    0x0040825e mov r12, rdx                                                                                                                                                                                      |     r12 = rdx;
    0x00408261 mov r15, rsi                                                                                                                                                                                      |     r15 = rsi;
    0x00408264 mov qword [rsp], rdi                                                                                                                                                                              |     *(rsp) = rdi;
    0x00408268 cmp qword [rsi + 0x38], 0x17                                                                                                                                                                      |     
                                                                                                                                                                                                                 |     if (*((rsi + 0x38)) != 0x17) {
    0x0040826d je 0x408275                                                                                                                                                                                       |         
    0x0040826f mov r13, qword [r15 + 0x18]                                                                                                                                                                       |         r13 = *((r15 + 0x18));
    0x00408273 jmp 0x408279                                                                                                                                                                                      |         
                                                                                                                                                                                                                 |     } else {
    0x00408275 lea r13, [r15 + 0x18]                                                                                                                                                                             |         r13 = r15 + 0x18;
                                                                                                                                                                                                                 |     }
    0x00408279 mov rbp, qword [r15 + 0x30]                                                                                                                                                                       |     rbp = *((r15 + 0x30));
    0x0040827d test r14, r14                                                                                                                                                                                     |     
                                                                                                                                                                                                                 |     if (r14 == 0) {
    0x00408280 jne 0x408296                                                                                                                                                                                      |         
    0x00408282 mov r14, qword [rip + 0x23e59f]                                                                                                                                                                   |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00408289 test r14, r14                                                                                                                                                                                     |         
                                                                                                                                                                                                                 |         if (r14 != 0) {
    0x0040828c jne 0x408296                                                                                                                                                                                      |             goto label_0;
                                                                                                                                                                                                                 |         }
    0x0040828e call 0x42ef70                                                                                                                                                                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x00408293 mov r14, rax                                                                                                                                                                                      |         r14 = rax;
                                                                                                                                                                                                                 |     }
                                                                                                                                                                                                                 | label_0:
    0x00408296 mov rax, qword [r14]                                                                                                                                                                              |     rax = *(r14);
    0x00408299 mov esi, 0x50                                                                                                                                                                                     |     esi = 0x50;
    0x0040829e mov rdi, r14                                                                                                                                                                                      |     rdi = r14;
    0x004082a1 call qword [rax + 0x10]                                                                                                                                                                           |     rax = uint64_t (*rax + 0x10)() ();
    0x004082a4 mov rbx, rax                                                                                                                                                                                      |     rbx = rax;
    0x004082a7 mov qword [rax], 0x4083c0                                                                                                                                                                         |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_Case6_Waiter_.invokerFunction_void_;
    0x004082ae movups xmm0, xmmword [r12]                                                                                                                                                                        |     __asm ("movups xmm0, xmmword [r12]");
    0x004082b3 movups xmmword [rax + 8], xmm0                                                                                                                                                                    |     __asm ("movups xmmword [rax + 8], xmm0");
    0x004082b7 mov rax, qword [r12 + 0x10]                                                                                                                                                                       |     rax = *((r12 + 0x10));
    0x004082bc mov qword [rbx + 0x18], rax                                                                                                                                                                       |     *((rbx + 0x18)) = rax;
    0x004082c0 lea rdi, [rbx + 0x20]                                                                                                                                                                             |     
    0x004082c4 mov qword [rbx + 0x20], 0                                                                                                                                                                         |     *((rbx + 0x20)) = 0;
    0x004082cc mov qword [rbx + 0x48], r14                                                                                                                                                                       |     *((rbx + 0x48)) = r14;
    0x004082d0 movaps xmm0, xmmword [rip + 0x27399]                                                                                                                                                              |     xmm0 = .comment;
    0x004082d7 movups xmmword [rbx + 0x38], xmm0                                                                                                                                                                 |     __asm ("movups xmmword [rbx + 0x38], xmm0");
    0x004082db mov ecx, 0x42fe7f                                                                                                                                                                                 |     
    0x004082e0 mov rsi, r13                                                                                                                                                                                      |     
    0x004082e3 mov rdx, rbp                                                                                                                                                                                      |     
    0x004082e6 call 0x40c030                                                                                                                                                                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x20, r13, rbp, "string<...>::assign<Iter>(i,j): string too long");
    0x004082eb mov edx, 0x4093b0                                                                                                                                                                                 |     
    0x004082f0 mov rdi, qword [rsp]                                                                                                                                                                              |     
    0x004082f4 mov rsi, r15                                                                                                                                                                                      |     
    0x004082f7 mov rcx, rbx                                                                                                                                                                                      |     
    0x004082fa call 0x409bf0                                                                                                                                                                                     |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x004082ff mov ebp, eax                                                                                                                                                                                      |     
    0x00408301 test eax, eax                                                                                                                                                                                     |     
                                                                                                                                                                                                                 |     if (eax != 0) {
    0x00408303 je 0x40832e                                                                                                                                                                                       |         
    0x00408305 cmp qword [rbx + 0x40], 0x17                                                                                                                                                                      |         
                                                                                                                                                                                                                 |         if (*((rbx + 0x40)) != 0x17) {
    0x0040830a je 0x40831a                                                                                                                                                                                       |             
    0x0040830c mov rsi, qword [rbx + 0x20]                                                                                                                                                                       |             rsi = *((rbx + 0x20));
    0x00408310 mov rdi, qword [rbx + 0x48]                                                                                                                                                                       |             rdi = *((rbx + 0x48));
    0x00408314 mov rax, qword [rdi]                                                                                                                                                                              |             rax = *(rdi);
    0x00408317 call qword [rax + 0x18]                                                                                                                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                 |         }
    0x0040831a mov qword [rbx + 0x38], 0xffffffffffffffff                                                                                                                                                        |         *((rbx + 0x38)) = 0xffffffffffffffff;
    0x00408322 mov rax, qword [r14]                                                                                                                                                                              |         rax = *(r14);
    0x00408325 mov rdi, r14                                                                                                                                                                                      |         rdi = r14;
    0x00408328 mov rsi, rbx                                                                                                                                                                                      |         rsi = rbx;
    0x0040832b call qword [rax + 0x18]                                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                 |     }
    0x0040832e mov eax, ebp                                                                                                                                                                                      |     eax = ebp;
    0x00408330 add rsp, 8                                                                                                                                                                                        |     
    0x00408334 pop rbx                                                                                                                                                                                           |     
    0x00408335 pop r12                                                                                                                                                                                           |     
    0x00408337 pop r13                                                                                                                                                                                           |     
    0x00408339 pop r14                                                                                                                                                                                           |     
    0x0040833b pop r15                                                                                                                                                                                           |     
    0x0040833d pop rbp                                                                                                                                                                                           |     
    0x0040833e ret                                                                                                                                                                                               |     return rax;
                                                                                                                                                                                                                 | }
