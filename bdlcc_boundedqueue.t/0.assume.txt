    ; assembly                                                                                                                                                                                                                                                                       | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                     | /* bdlcc_boundedqueue.t/assume @ 0x416ae0 */
                                                                                                                                                                                                                                                                                     | #include <stdint.h>
                                                                                                                                                                                                                                                                                     |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::BoundedQueue_my_WorkRequest____BloombergLP::bdlf::Bind_BoundTuple1_BloombergLP::bdlcc::BoundedQueue_my_WorkReques ()          | int64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf_Nil_void_BloombergLP::bdlcc::BoundedQueue_my_WorkRequest_BloombergLP::bdlf::Bind_BoundTuple1_BloombergLP::bdlcc::BoundedQueue_my_WorkReques (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                     |     rcx = arg4;
                                                                                                                                                                                                                                                                                     |     rdx = arg3;
                                                                                                                                                                                                                                                                                     |     rsi = arg2;
                                                                                                                                                                                                                                                                                     |     rdi = arg1;
                                                                                                                                                                                                                                                                                     |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::BoundedQueue<my_WorkRequest>*), BloombergLP::bdlf::Bind_BoundTuple1<BloombergLP::bdlcc::BoundedQueue<my_WorkRequest>*> > >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::BoundedQueue<my_WorkRequest>*), BloombergLP::bdlf::Bind_BoundTuple1<BloombergLP::bdlcc::BoundedQueue<my_WorkRequest>*> > const&, BloombergLP::bslma::Allocator*) */
    0x00416ae0 push rbp                                                                                                                                                                                                                                                              |     
    0x00416ae1 push r15                                                                                                                                                                                                                                                              |     
    0x00416ae3 push r14                                                                                                                                                                                                                                                              |     
    0x00416ae5 push r13                                                                                                                                                                                                                                                              |     
    0x00416ae7 push r12                                                                                                                                                                                                                                                              |     
    0x00416ae9 push rbx                                                                                                                                                                                                                                                              |     
    0x00416aea push rax                                                                                                                                                                                                                                                              |     
    0x00416aeb mov r14, rcx                                                                                                                                                                                                                                                          |     r14 = rcx;
    0x00416aee mov r12, rdx                                                                                                                                                                                                                                                          |     r12 = rdx;
    0x00416af1 mov r15, rsi                                                                                                                                                                                                                                                          |     r15 = rsi;
    0x00416af4 mov qword [rsp], rdi                                                                                                                                                                                                                                                  |     *(rsp) = rdi;
    0x00416af8 mov r13, qword [rsi + 0x30]                                                                                                                                                                                                                                           |     r13 = *((rsi + 0x30));
    0x00416afc cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                          |     
                                                                                                                                                                                                                                                                                     |     if (*((rsi + 0x38)) != 0x17) {
    0x00416b01 je 0x416b09                                                                                                                                                                                                                                                           |         
    0x00416b03 mov rbp, qword [r15 + 0x18]                                                                                                                                                                                                                                           |         rbp = *((r15 + 0x18));
    0x00416b07 jmp 0x416b0d                                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |     } else {
    0x00416b09 lea rbp, [r15 + 0x18]                                                                                                                                                                                                                                                 |         rbp = r15 + 0x18;
                                                                                                                                                                                                                                                                                     |     }
    0x00416b0d mov rax, qword [r14]                                                                                                                                                                                                                                                  |     rax = *(r14);
    0x00416b10 mov esi, 0x48                                                                                                                                                                                                                                                         |     esi = 0x48;
    0x00416b15 mov rdi, r14                                                                                                                                                                                                                                                          |     rdi = r14;
    0x00416b18 call qword [rax + 0x10]                                                                                                                                                                                                                                               |     rax = uint64_t (*rax + 0x10)() ();
    0x00416b1b mov rbx, rax                                                                                                                                                                                                                                                          |     rbx = rax;
    0x00416b1e mov qword [rax], 0x416c30                                                                                                                                                                                                                                             |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::BoundedQueue_my_WorkRequest____BloombergLP::bdlf::Bind_BoundTuple1_BloombergLP::bdlcc::BoundedQueue_my_WorkRequest______::i;
    0x00416b25 mov rax, qword [r12]                                                                                                                                                                                                                                                  |     rax = *(r12);
    0x00416b29 mov qword [rbx + 8], rax                                                                                                                                                                                                                                              |     *((rbx + 8)) = rax;
    0x00416b2d mov rax, qword [r12 + 8]                                                                                                                                                                                                                                              |     rax = *((r12 + 8));
    0x00416b32 mov qword [rbx + 0x10], rax                                                                                                                                                                                                                                           |     *((rbx + 0x10)) = rax;
    0x00416b36 lea rdi, [rbx + 0x18]                                                                                                                                                                                                                                                 |     
    0x00416b3a mov qword [rbx + 0x18], 0                                                                                                                                                                                                                                             |     *((rbx + 0x18)) = 0;
    0x00416b42 mov qword [rbx + 0x40], r14                                                                                                                                                                                                                                           |     *((rbx + 0x40)) = r14;
    0x00416b46 movaps xmm0, xmmword [rip + 0x29f53]                                                                                                                                                                                                                                  |     xmm0 = .comment;
    0x00416b4d movups xmmword [rbx + 0x30], xmm0                                                                                                                                                                                                                                     |     __asm ("movups xmmword [rbx + 0x30], xmm0");
    0x00416b51 mov ecx, 0x441e07                                                                                                                                                                                                                                                     |     
    0x00416b56 mov rsi, rbp                                                                                                                                                                                                                                                          |     
    0x00416b59 mov rdx, r13                                                                                                                                                                                                                                                          |     
    0x00416b5c call 0x41caf0                                                                                                                                                                                                                                                         |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x18, rbp, r13, "string<...>::assign<Iter>(i,j): string too long");
    0x00416b61 mov edx, 0x419a50                                                                                                                                                                                                                                                     |     
    0x00416b66 mov rdi, qword [rsp]                                                                                                                                                                                                                                                  |     
    0x00416b6a mov rsi, r15                                                                                                                                                                                                                                                          |     
    0x00416b6d mov rcx, rbx                                                                                                                                                                                                                                                          |     
    0x00416b70 call 0x41a120                                                                                                                                                                                                                                                         |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x00416b75 mov ebp, eax                                                                                                                                                                                                                                                          |     
    0x00416b77 test eax, eax                                                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                                                     |     if (eax != 0) {
    0x00416b79 je 0x416ba4                                                                                                                                                                                                                                                           |         
    0x00416b7b cmp qword [rbx + 0x38], 0x17                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |         if (*((rbx + 0x38)) != 0x17) {
    0x00416b80 je 0x416b90                                                                                                                                                                                                                                                           |             
    0x00416b82 mov rsi, qword [rbx + 0x18]                                                                                                                                                                                                                                           |             rsi = *((rbx + 0x18));
    0x00416b86 mov rdi, qword [rbx + 0x40]                                                                                                                                                                                                                                           |             rdi = *((rbx + 0x40));
    0x00416b8a mov rax, qword [rdi]                                                                                                                                                                                                                                                  |             rax = *(rdi);
    0x00416b8d call qword [rax + 0x18]                                                                                                                                                                                                                                               |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |         }
    0x00416b90 mov qword [rbx + 0x30], 0xffffffffffffffff                                                                                                                                                                                                                            |         *((rbx + 0x30)) = 0xffffffffffffffff;
    0x00416b98 mov rax, qword [r14]                                                                                                                                                                                                                                                  |         rax = *(r14);
    0x00416b9b mov rdi, r14                                                                                                                                                                                                                                                          |         rdi = r14;
    0x00416b9e mov rsi, rbx                                                                                                                                                                                                                                                          |         rsi = rbx;
    0x00416ba1 call qword [rax + 0x18]                                                                                                                                                                                                                                               |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |     }
    0x00416ba4 mov eax, ebp                                                                                                                                                                                                                                                          |     eax = ebp;
    0x00416ba6 add rsp, 8                                                                                                                                                                                                                                                            |     
    0x00416baa pop rbx                                                                                                                                                                                                                                                               |     
    0x00416bab pop r12                                                                                                                                                                                                                                                               |     
    0x00416bad pop r13                                                                                                                                                                                                                                                               |     
    0x00416baf pop r14                                                                                                                                                                                                                                                               |     
    0x00416bb1 pop r15                                                                                                                                                                                                                                                               |     
    0x00416bb3 pop rbp                                                                                                                                                                                                                                                               |     
    0x00416bb4 ret                                                                                                                                                                                                                                                                   |     return rax;
                                                                                                                                                                                                                                                                                     | }
