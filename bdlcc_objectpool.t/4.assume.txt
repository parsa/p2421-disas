    ; assembly                                                                                                                                           | /* r2dec pseudo code output */
                                                                                                                                                         | /* bdlcc_objectpool.t/assume @ 0x412460 */
                                                                                                                                                         | #include <stdint.h>
                                                                                                                                                         |  
    ; (fcn) sym._ZN11BloombergLP5bslmt10ThreadUtil19createWithAllocatorINS_4bdlf4BindINS_5bslmf3NilEPFvPNS_5bdlcc10ObjectPoolIN12_GLOBAL__N_11 ()        | int64_t ZN11BloombergLP5bslmt10ThreadUtil19createWithAllocatorINS_4bdlf4BindINS_5bslmf3NilEPFvPNS_5bdlcc10ObjectPoolIN12_GLOBAL_N_11 (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                         |     rcx = arg4;
                                                                                                                                                         |     rdx = arg3;
                                                                                                                                                         |     rsi = arg2;
                                                                                                                                                         |     rdi = arg1;
    0x00412460 push rbp                                                                                                                                  |     
    0x00412461 push r15                                                                                                                                  |     
    0x00412463 push r14                                                                                                                                  |     
    0x00412465 push r13                                                                                                                                  |     
    0x00412467 push r12                                                                                                                                  |     
    0x00412469 push rbx                                                                                                                                  |     
    0x0041246a push rax                                                                                                                                  |     
    0x0041246b mov r14, rcx                                                                                                                              |     r14 = rcx;
    0x0041246e mov r12, rdx                                                                                                                              |     r12 = rdx;
    0x00412471 mov r15, rsi                                                                                                                              |     r15 = rsi;
    0x00412474 mov qword [rsp], rdi                                                                                                                      |     *(rsp) = rdi;
    0x00412478 mov r13, qword [rsi + 0x30]                                                                                                               |     r13 = *((rsi + 0x30));
    0x0041247c cmp qword [rsi + 0x38], 0x17                                                                                                              |     
                                                                                                                                                         |     if (*((rsi + 0x38)) != 0x17) {
    0x00412481 je 0x412489                                                                                                                               |         
    0x00412483 mov rbp, qword [r15 + 0x18]                                                                                                               |         rbp = *((r15 + 0x18));
    0x00412487 jmp 0x41248d                                                                                                                              |         
                                                                                                                                                         |     } else {
    0x00412489 lea rbp, [r15 + 0x18]                                                                                                                     |         rbp = r15 + 0x18;
                                                                                                                                                         |     }
    0x0041248d mov rax, qword [r14]                                                                                                                      |     rax = *(r14);
    0x00412490 mov esi, 0x58                                                                                                                             |     esi = 0x58;
    0x00412495 mov rdi, r14                                                                                                                              |     rdi = r14;
    0x00412498 call qword [rax + 0x10]                                                                                                                   |     rax = uint64_t (*rax + 0x10)() ();
    0x0041249b mov rbx, rax                                                                                                                              |     rbx = rax;
    0x0041249e mov qword [rax], 0x4125c0                                                                                                                 |     *(rax) = sym._ZN11BloombergLP5bslmt24EntryPointFunctorAdapterINS_4bdlf4BindINS_5bslmf3NilEPFvPNS_5bdlcc10ObjectPoolIN12_GLOBAL__N_110Case13;
    0x004124a5 mov rax, qword [r12]                                                                                                                      |     rax = *(r12);
    0x004124a9 mov qword [rbx + 8], rax                                                                                                                  |     *((rbx + 8)) = rax;
    0x004124ad mov rax, qword [r12 + 8]                                                                                                                  |     rax = *((r12 + 8));
    0x004124b2 mov qword [rbx + 0x10], rax                                                                                                               |     *((rbx + 0x10)) = rax;
    0x004124b6 mov rax, qword [r12 + 0x10]                                                                                                               |     rax = *((r12 + 0x10));
    0x004124bb mov qword [rbx + 0x18], rax                                                                                                               |     *((rbx + 0x18)) = rax;
    0x004124bf mov eax, dword [r12 + 0x18]                                                                                                               |     eax = *((r12 + 0x18));
    0x004124c4 mov dword [rbx + 0x20], eax                                                                                                               |     *((rbx + 0x20)) = eax;
    0x004124c7 lea rdi, [rbx + 0x28]                                                                                                                     |     
    0x004124cb mov qword [rbx + 0x28], 0                                                                                                                 |     *((rbx + 0x28)) = 0;
    0x004124d3 mov qword [rbx + 0x50], r14                                                                                                               |     *((rbx + 0x50)) = r14;
    0x004124d7 movaps xmm0, xmmword [rip + 0x2c382]                                                                                                      |     xmm0 = .comment;
    0x004124de movups xmmword [rbx + 0x40], xmm0                                                                                                         |     __asm ("movups xmmword [rbx + 0x40], xmm0");
    0x004124e2 mov ecx, 0x44167d                                                                                                                         |     
    0x004124e7 mov rsi, rbp                                                                                                                              |     
    0x004124ea mov rdx, r13                                                                                                                              |     
    0x004124ed call 0x41b0a0                                                                                                                             |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x28, rbp, r13, "string<...>::assign<Iter>(i,j): string too long");
    0x004124f2 mov edx, 0x417c20                                                                                                                         |     
    0x004124f7 mov rdi, qword [rsp]                                                                                                                      |     
    0x004124fb mov rsi, r15                                                                                                                              |     
    0x004124fe mov rcx, rbx                                                                                                                              |     
    0x00412501 call 0x418670                                                                                                                             |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x00412506 mov ebp, eax                                                                                                                              |     
    0x00412508 test eax, eax                                                                                                                             |     
                                                                                                                                                         |     if (eax != 0) {
    0x0041250a je 0x412535                                                                                                                               |         
    0x0041250c cmp qword [rbx + 0x48], 0x17                                                                                                              |         
                                                                                                                                                         |         if (*((rbx + 0x48)) != 0x17) {
    0x00412511 je 0x412521                                                                                                                               |             
    0x00412513 mov rsi, qword [rbx + 0x28]                                                                                                               |             rsi = *((rbx + 0x28));
    0x00412517 mov rdi, qword [rbx + 0x50]                                                                                                               |             rdi = *((rbx + 0x50));
    0x0041251b mov rax, qword [rdi]                                                                                                                      |             rax = *(rdi);
    0x0041251e call qword [rax + 0x18]                                                                                                                   |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                         |         }
    0x00412521 mov qword [rbx + 0x40], 0xffffffffffffffff                                                                                                |         *((rbx + 0x40)) = 0xffffffffffffffff;
    0x00412529 mov rax, qword [r14]                                                                                                                      |         rax = *(r14);
    0x0041252c mov rdi, r14                                                                                                                              |         rdi = r14;
    0x0041252f mov rsi, rbx                                                                                                                              |         rsi = rbx;
    0x00412532 call qword [rax + 0x18]                                                                                                                   |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                         |     }
    0x00412535 mov eax, ebp                                                                                                                              |     eax = ebp;
    0x00412537 add rsp, 8                                                                                                                                |     
    0x0041253b pop rbx                                                                                                                                   |     
    0x0041253c pop r12                                                                                                                                   |     
    0x0041253e pop r13                                                                                                                                   |     
    0x00412540 pop r14                                                                                                                                   |     
    0x00412542 pop r15                                                                                                                                   |     
    0x00412544 pop rbp                                                                                                                                   |     
    0x00412545 ret                                                                                                                                       |     return rax;
                                                                                                                                                         | }
