    ; assembly                                                                                                                                           | /* r2dec pseudo code output */
                                                                                                                                                         | /* bdlcc_objectpool.t/none @ 0x412480 */
                                                                                                                                                         | #include <stdint.h>
                                                                                                                                                         |  
    ; (fcn) sym._ZN11BloombergLP5bslmt10ThreadUtil19createWithAllocatorINS_4bdlf4BindINS_5bslmf3NilEPFvPNS_5bdlcc10ObjectPoolIN12_GLOBAL__N_11 ()        | uint64_t ZN11BloombergLP5bslmt10ThreadUtil19createWithAllocatorINS_4bdlf4BindINS_5bslmf3NilEPFvPNS_5bdlcc10ObjectPoolIN12_GLOBAL_N_11 (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                         |     rcx = arg4;
                                                                                                                                                         |     rdx = arg3;
                                                                                                                                                         |     rsi = arg2;
                                                                                                                                                         |     rdi = arg1;
    0x00412480 push rbp                                                                                                                                  |     
    0x00412481 push r15                                                                                                                                  |     
    0x00412483 push r14                                                                                                                                  |     
    0x00412485 push r13                                                                                                                                  |     
    0x00412487 push r12                                                                                                                                  |     
    0x00412489 push rbx                                                                                                                                  |     
    0x0041248a push rax                                                                                                                                  |     
    0x0041248b mov r14, rcx                                                                                                                              |     r14 = rcx;
    0x0041248e mov r12, rdx                                                                                                                              |     r12 = rdx;
    0x00412491 mov r15, rsi                                                                                                                              |     r15 = rsi;
    0x00412494 mov qword [rsp], rdi                                                                                                                      |     *(rsp) = rdi;
    0x00412498 cmp qword [rsi + 0x38], 0x17                                                                                                              |     
                                                                                                                                                         |     if (*((rsi + 0x38)) != 0x17) {
    0x0041249d je 0x4124a5                                                                                                                               |         
    0x0041249f mov r13, qword [r15 + 0x18]                                                                                                               |         r13 = *((r15 + 0x18));
    0x004124a3 jmp 0x4124a9                                                                                                                              |         
                                                                                                                                                         |     } else {
    0x004124a5 lea r13, [r15 + 0x18]                                                                                                                     |         r13 = r15 + 0x18;
                                                                                                                                                         |     }
    0x004124a9 mov rbp, qword [r15 + 0x30]                                                                                                               |     rbp = *((r15 + 0x30));
    0x004124ad test r14, r14                                                                                                                             |     
                                                                                                                                                         |     if (r14 == 0) {
    0x004124b0 jne 0x4124c6                                                                                                                              |         
    0x004124b2 mov r14, qword [rip + 0x24bc37]                                                                                                           |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x004124b9 test r14, r14                                                                                                                             |         
                                                                                                                                                         |         if (r14 != 0) {
    0x004124bc jne 0x4124c6                                                                                                                              |             goto label_0;
                                                                                                                                                         |         }
    0x004124be call 0x416aa0                                                                                                                             |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x004124c3 mov r14, rax                                                                                                                              |         r14 = rax;
                                                                                                                                                         |     }
                                                                                                                                                         | label_0:
    0x004124c6 mov rax, qword [r14]                                                                                                                      |     rax = *(r14);
    0x004124c9 mov esi, 0x58                                                                                                                             |     esi = 0x58;
    0x004124ce mov rdi, r14                                                                                                                              |     rdi = r14;
    0x004124d1 call qword [rax + 0x10]                                                                                                                   |     rax = uint64_t (*rax + 0x10)() ();
    0x004124d4 mov rbx, rax                                                                                                                              |     rbx = rax;
    0x004124d7 mov qword [rax], 0x412600                                                                                                                 |     *(rax) = sym._ZN11BloombergLP5bslmt24EntryPointFunctorAdapterINS_4bdlf4BindINS_5bslmf3NilEPFvPNS_5bdlcc10ObjectPoolIN12_GLOBAL__N_110Case13;
    0x004124de mov rax, qword [r12]                                                                                                                      |     rax = *(r12);
    0x004124e2 mov qword [rbx + 8], rax                                                                                                                  |     *((rbx + 8)) = rax;
    0x004124e6 mov rax, qword [r12 + 8]                                                                                                                  |     rax = *((r12 + 8));
    0x004124eb mov qword [rbx + 0x10], rax                                                                                                               |     *((rbx + 0x10)) = rax;
    0x004124ef mov rax, qword [r12 + 0x10]                                                                                                               |     rax = *((r12 + 0x10));
    0x004124f4 mov qword [rbx + 0x18], rax                                                                                                               |     *((rbx + 0x18)) = rax;
    0x004124f8 mov eax, dword [r12 + 0x18]                                                                                                               |     eax = *((r12 + 0x18));
    0x004124fd mov dword [rbx + 0x20], eax                                                                                                               |     *((rbx + 0x20)) = eax;
    0x00412500 lea rdi, [rbx + 0x28]                                                                                                                     |     
    0x00412504 mov qword [rbx + 0x28], 0                                                                                                                 |     *((rbx + 0x28)) = 0;
    0x0041250c mov qword [rbx + 0x50], r14                                                                                                               |     *((rbx + 0x50)) = r14;
    0x00412510 movaps xmm0, xmmword [rip + 0x2c409]                                                                                                      |     xmm0 = .comment;
    0x00412517 movups xmmword [rbx + 0x40], xmm0                                                                                                         |     __asm ("movups xmmword [rbx + 0x40], xmm0");
    0x0041251b mov ecx, 0x44173b                                                                                                                         |     
    0x00412520 mov rsi, r13                                                                                                                              |     
    0x00412523 mov rdx, rbp                                                                                                                              |     
    0x00412526 call 0x41b140                                                                                                                             |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x28, r13, rbp, "string<...>::assign<Iter>(i,j): string too long");
    0x0041252b mov edx, 0x417ca0                                                                                                                         |     
    0x00412530 mov rdi, qword [rsp]                                                                                                                      |     
    0x00412534 mov rsi, r15                                                                                                                              |     
    0x00412537 mov rcx, rbx                                                                                                                              |     
    0x0041253a call 0x4186f0                                                                                                                             |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0041253f mov ebp, eax                                                                                                                              |     
    0x00412541 test eax, eax                                                                                                                             |     
                                                                                                                                                         |     if (eax != 0) {
    0x00412543 je 0x41256e                                                                                                                               |         
    0x00412545 cmp qword [rbx + 0x48], 0x17                                                                                                              |         
                                                                                                                                                         |         if (*((rbx + 0x48)) != 0x17) {
    0x0041254a je 0x41255a                                                                                                                               |             
    0x0041254c mov rsi, qword [rbx + 0x28]                                                                                                               |             rsi = *((rbx + 0x28));
    0x00412550 mov rdi, qword [rbx + 0x50]                                                                                                               |             rdi = *((rbx + 0x50));
    0x00412554 mov rax, qword [rdi]                                                                                                                      |             rax = *(rdi);
    0x00412557 call qword [rax + 0x18]                                                                                                                   |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                         |         }
    0x0041255a mov qword [rbx + 0x40], 0xffffffffffffffff                                                                                                |         *((rbx + 0x40)) = 0xffffffffffffffff;
    0x00412562 mov rax, qword [r14]                                                                                                                      |         rax = *(r14);
    0x00412565 mov rdi, r14                                                                                                                              |         rdi = r14;
    0x00412568 mov rsi, rbx                                                                                                                              |         rsi = rbx;
    0x0041256b call qword [rax + 0x18]                                                                                                                   |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                         |     }
    0x0041256e mov eax, ebp                                                                                                                              |     eax = ebp;
    0x00412570 add rsp, 8                                                                                                                                |     
    0x00412574 pop rbx                                                                                                                                   |     
    0x00412575 pop r12                                                                                                                                   |     
    0x00412577 pop r13                                                                                                                                   |     
    0x00412579 pop r14                                                                                                                                   |     
    0x0041257b pop r15                                                                                                                                   |     
    0x0041257d pop rbp                                                                                                                                   |     
    0x0041257e ret                                                                                                                                       |     return rax;
                                                                                                                                                         | }
