    ; assembly                                                                                                                                                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                 | /* bdlma_concurrentfixedpool.t/assume @ 0x40a6f0 */
                                                                                                                                                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                                                                                                                                                 |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____bench::Control___BloombergLP::bdlf::Bind_BoundTuple1_bench::Control______unsigned_long__BloombergLP::bslmt::ThreadAttributes_const ()         | int64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf_Nil_void_bench::Control_BloombergLP::bdlf::Bind_BoundTuple1_bench::Control_unsigned_long_BloombergLP::bslmt::ThreadAttributes_const (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                 |     rcx = arg4;
                                                                                                                                                                                                                                                                                 |     rdx = arg3;
                                                                                                                                                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                                                                                                                                                 |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(bench::Control*), BloombergLP::bdlf::Bind_BoundTuple1<bench::Control*> > >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(bench::Control*), BloombergLP::bdlf::Bind_BoundTuple1<bench::Control*> > const&, BloombergLP::bslma::Allocator*) */
    0x0040a6f0 push rbp                                                                                                                                                                                                                                                          |     
    0x0040a6f1 push r15                                                                                                                                                                                                                                                          |     
    0x0040a6f3 push r14                                                                                                                                                                                                                                                          |     
    0x0040a6f5 push r13                                                                                                                                                                                                                                                          |     
    0x0040a6f7 push r12                                                                                                                                                                                                                                                          |     
    0x0040a6f9 push rbx                                                                                                                                                                                                                                                          |     
    0x0040a6fa push rax                                                                                                                                                                                                                                                          |     
    0x0040a6fb mov r14, rcx                                                                                                                                                                                                                                                      |     r14 = rcx;
    0x0040a6fe mov r12, rdx                                                                                                                                                                                                                                                      |     r12 = rdx;
    0x0040a701 mov r15, rsi                                                                                                                                                                                                                                                      |     r15 = rsi;
    0x0040a704 mov qword [rsp], rdi                                                                                                                                                                                                                                              |     *(rsp) = rdi;
    0x0040a708 mov r13, qword [rsi + 0x30]                                                                                                                                                                                                                                       |     r13 = *((rsi + 0x30));
    0x0040a70c cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                      |     
                                                                                                                                                                                                                                                                                 |     if (*((rsi + 0x38)) != 0x17) {
    0x0040a711 je 0x40a719                                                                                                                                                                                                                                                       |         
    0x0040a713 mov rbp, qword [r15 + 0x18]                                                                                                                                                                                                                                       |         rbp = *((r15 + 0x18));
    0x0040a717 jmp 0x40a71d                                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |     } else {
    0x0040a719 lea rbp, [r15 + 0x18]                                                                                                                                                                                                                                             |         rbp = r15 + 0x18;
                                                                                                                                                                                                                                                                                 |     }
    0x0040a71d mov rax, qword [r14]                                                                                                                                                                                                                                              |     rax = *(r14);
    0x0040a720 mov esi, 0x48                                                                                                                                                                                                                                                     |     esi = 0x48;
    0x0040a725 mov rdi, r14                                                                                                                                                                                                                                                      |     rdi = r14;
    0x0040a728 call qword [rax + 0x10]                                                                                                                                                                                                                                           |     rax = uint64_t (*rax + 0x10)() ();
    0x0040a72b mov rbx, rax                                                                                                                                                                                                                                                      |     rbx = rax;
    0x0040a72e mov qword [rax], 0x40a840                                                                                                                                                                                                                                         |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____bench::Control___BloombergLP::bdlf::Bind_BoundTuple1_bench::Control_____::invokerFunction_void_;
    0x0040a735 mov rax, qword [r12]                                                                                                                                                                                                                                              |     rax = *(r12);
    0x0040a739 mov qword [rbx + 8], rax                                                                                                                                                                                                                                          |     *((rbx + 8)) = rax;
    0x0040a73d mov rax, qword [r12 + 8]                                                                                                                                                                                                                                          |     rax = *((r12 + 8));
    0x0040a742 mov qword [rbx + 0x10], rax                                                                                                                                                                                                                                       |     *((rbx + 0x10)) = rax;
    0x0040a746 lea rdi, [rbx + 0x18]                                                                                                                                                                                                                                             |     
    0x0040a74a mov qword [rbx + 0x18], 0                                                                                                                                                                                                                                         |     *((rbx + 0x18)) = 0;
    0x0040a752 mov qword [rbx + 0x40], r14                                                                                                                                                                                                                                       |     *((rbx + 0x40)) = r14;
    0x0040a756 movaps xmm0, xmmword [rip + 0x28113]                                                                                                                                                                                                                              |     xmm0 = .comment;
    0x0040a75d movups xmmword [rbx + 0x30], xmm0                                                                                                                                                                                                                                 |     __asm ("movups xmmword [rbx + 0x30], xmm0");
    0x0040a761 mov ecx, 0x4331f5                                                                                                                                                                                                                                                 |     
    0x0040a766 mov rsi, rbp                                                                                                                                                                                                                                                      |     
    0x0040a769 mov rdx, r13                                                                                                                                                                                                                                                      |     
    0x0040a76c call 0x40f6f0                                                                                                                                                                                                                                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x18, rbp, r13, "string<...>::assign<Iter>(i,j): string too long");
    0x0040a771 mov edx, 0x40c7a0                                                                                                                                                                                                                                                 |     
    0x0040a776 mov rdi, qword [rsp]                                                                                                                                                                                                                                              |     
    0x0040a77a mov rsi, r15                                                                                                                                                                                                                                                      |     
    0x0040a77d mov rcx, rbx                                                                                                                                                                                                                                                      |     
    0x0040a780 call 0x40ce70                                                                                                                                                                                                                                                     |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0040a785 mov ebp, eax                                                                                                                                                                                                                                                      |     
    0x0040a787 test eax, eax                                                                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                                                                 |     if (eax != 0) {
    0x0040a789 je 0x40a7b4                                                                                                                                                                                                                                                       |         
    0x0040a78b cmp qword [rbx + 0x38], 0x17                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |         if (*((rbx + 0x38)) != 0x17) {
    0x0040a790 je 0x40a7a0                                                                                                                                                                                                                                                       |             
    0x0040a792 mov rsi, qword [rbx + 0x18]                                                                                                                                                                                                                                       |             rsi = *((rbx + 0x18));
    0x0040a796 mov rdi, qword [rbx + 0x40]                                                                                                                                                                                                                                       |             rdi = *((rbx + 0x40));
    0x0040a79a mov rax, qword [rdi]                                                                                                                                                                                                                                              |             rax = *(rdi);
    0x0040a79d call qword [rax + 0x18]                                                                                                                                                                                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |         }
    0x0040a7a0 mov qword [rbx + 0x30], 0xffffffffffffffff                                                                                                                                                                                                                        |         *((rbx + 0x30)) = 0xffffffffffffffff;
    0x0040a7a8 mov rax, qword [r14]                                                                                                                                                                                                                                              |         rax = *(r14);
    0x0040a7ab mov rdi, r14                                                                                                                                                                                                                                                      |         rdi = r14;
    0x0040a7ae mov rsi, rbx                                                                                                                                                                                                                                                      |         rsi = rbx;
    0x0040a7b1 call qword [rax + 0x18]                                                                                                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |     }
    0x0040a7b4 mov eax, ebp                                                                                                                                                                                                                                                      |     eax = ebp;
    0x0040a7b6 add rsp, 8                                                                                                                                                                                                                                                        |     
    0x0040a7ba pop rbx                                                                                                                                                                                                                                                           |     
    0x0040a7bb pop r12                                                                                                                                                                                                                                                           |     
    0x0040a7bd pop r13                                                                                                                                                                                                                                                           |     
    0x0040a7bf pop r14                                                                                                                                                                                                                                                           |     
    0x0040a7c1 pop r15                                                                                                                                                                                                                                                           |     
    0x0040a7c3 pop rbp                                                                                                                                                                                                                                                           |     
    0x0040a7c4 ret                                                                                                                                                                                                                                                               |     return rax;
                                                                                                                                                                                                                                                                                 | }
