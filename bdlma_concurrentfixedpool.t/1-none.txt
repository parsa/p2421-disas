    ; assembly                                                                                                                                                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                 | /* bdlma_concurrentfixedpool.t/none @ 0x40a9f0 */
                                                                                                                                                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                                                                                                                                                 |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____fill_and_release::Control___BloombergLP::bdlf::Bind_BoundTuple1_fill_and_release::Control______unsigned_long__BloombergLP::bslmt::T ()        | uint64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf_Nil_void_fill_and_release::Control_BloombergLP::bdlf::Bind_BoundTuple1_fill_and_release::Control_unsigned_long_BloombergLP::bslmt::T (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                 |     rcx = arg4;
                                                                                                                                                                                                                                                                                 |     rdx = arg3;
                                                                                                                                                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                                                                                                                                                 |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(fill_and_release::Control*), BloombergLP::bdlf::Bind_BoundTuple1<fill_and_release::Control*> > >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(fill_and_release::Control*), BloombergLP::bdlf::Bind_BoundTuple1<fill_and_release::Control*> > const&, BloombergLP::bslma::Allocator*) */
    0x0040a9f0 push rbp                                                                                                                                                                                                                                                          |     
    0x0040a9f1 push r15                                                                                                                                                                                                                                                          |     
    0x0040a9f3 push r14                                                                                                                                                                                                                                                          |     
    0x0040a9f5 push r13                                                                                                                                                                                                                                                          |     
    0x0040a9f7 push r12                                                                                                                                                                                                                                                          |     
    0x0040a9f9 push rbx                                                                                                                                                                                                                                                          |     
    0x0040a9fa push rax                                                                                                                                                                                                                                                          |     
    0x0040a9fb mov r14, rcx                                                                                                                                                                                                                                                      |     r14 = rcx;
    0x0040a9fe mov r12, rdx                                                                                                                                                                                                                                                      |     r12 = rdx;
    0x0040aa01 mov r15, rsi                                                                                                                                                                                                                                                      |     r15 = rsi;
    0x0040aa04 mov qword [rsp], rdi                                                                                                                                                                                                                                              |     *(rsp) = rdi;
    0x0040aa08 cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                      |     
                                                                                                                                                                                                                                                                                 |     if (*((rsi + 0x38)) != 0x17) {
    0x0040aa0d je 0x40aa15                                                                                                                                                                                                                                                       |         
    0x0040aa0f mov r13, qword [r15 + 0x18]                                                                                                                                                                                                                                       |         r13 = *((r15 + 0x18));
    0x0040aa13 jmp 0x40aa19                                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |     } else {
    0x0040aa15 lea r13, [r15 + 0x18]                                                                                                                                                                                                                                             |         r13 = r15 + 0x18;
                                                                                                                                                                                                                                                                                 |     }
    0x0040aa19 mov rbp, qword [r15 + 0x30]                                                                                                                                                                                                                                       |     rbp = *((r15 + 0x30));
    0x0040aa1d test r14, r14                                                                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                                                                 |     if (r14 == 0) {
    0x0040aa20 jne 0x40aa36                                                                                                                                                                                                                                                      |         
    0x0040aa22 mov r14, qword [rip + 0x2410df]                                                                                                                                                                                                                                   |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040aa29 test r14, r14                                                                                                                                                                                                                                                     |         
                                                                                                                                                                                                                                                                                 |         if (r14 != 0) {
    0x0040aa2c jne 0x40aa36                                                                                                                                                                                                                                                      |             goto label_0;
                                                                                                                                                                                                                                                                                 |         }
    0x0040aa2e call 0x40b6f0                                                                                                                                                                                                                                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x0040aa33 mov r14, rax                                                                                                                                                                                                                                                      |         r14 = rax;
                                                                                                                                                                                                                                                                                 |     }
                                                                                                                                                                                                                                                                                 | label_0:
    0x0040aa36 mov rax, qword [r14]                                                                                                                                                                                                                                              |     rax = *(r14);
    0x0040aa39 mov esi, 0x48                                                                                                                                                                                                                                                     |     esi = 0x48;
    0x0040aa3e mov rdi, r14                                                                                                                                                                                                                                                      |     rdi = r14;
    0x0040aa41 call qword [rax + 0x10]                                                                                                                                                                                                                                           |     rax = uint64_t (*rax + 0x10)() ();
    0x0040aa44 mov rbx, rax                                                                                                                                                                                                                                                      |     rbx = rax;
    0x0040aa47 mov qword [rax], 0x40ab60                                                                                                                                                                                                                                         |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____fill_and_release::Control___BloombergLP::bdlf::Bind_BoundTuple1_fill_and_release::Control_____::invokerFunction_void_;
    0x0040aa4e mov rax, qword [r12]                                                                                                                                                                                                                                              |     rax = *(r12);
    0x0040aa52 mov qword [rbx + 8], rax                                                                                                                                                                                                                                          |     *((rbx + 8)) = rax;
    0x0040aa56 mov rax, qword [r12 + 8]                                                                                                                                                                                                                                          |     rax = *((r12 + 8));
    0x0040aa5b mov qword [rbx + 0x10], rax                                                                                                                                                                                                                                       |     *((rbx + 0x10)) = rax;
    0x0040aa5f lea rdi, [rbx + 0x18]                                                                                                                                                                                                                                             |     
    0x0040aa63 mov qword [rbx + 0x18], 0                                                                                                                                                                                                                                         |     *((rbx + 0x18)) = 0;
    0x0040aa6b mov qword [rbx + 0x40], r14                                                                                                                                                                                                                                       |     *((rbx + 0x40)) = r14;
    0x0040aa6f movaps xmm0, xmmword [rip + 0x27e7a]                                                                                                                                                                                                                              |     xmm0 = .comment;
    0x0040aa76 movups xmmword [rbx + 0x30], xmm0                                                                                                                                                                                                                                 |     __asm ("movups xmmword [rbx + 0x30], xmm0");
    0x0040aa7a mov ecx, 0x433273                                                                                                                                                                                                                                                 |     
    0x0040aa7f mov rsi, r13                                                                                                                                                                                                                                                      |     
    0x0040aa82 mov rdx, rbp                                                                                                                                                                                                                                                      |     
    0x0040aa85 call 0x40f750                                                                                                                                                                                                                                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x18, r13, rbp, "string<...>::assign<Iter>(i,j): string too long");
    0x0040aa8a mov edx, 0x40c7e0                                                                                                                                                                                                                                                 |     
    0x0040aa8f mov rdi, qword [rsp]                                                                                                                                                                                                                                              |     
    0x0040aa93 mov rsi, r15                                                                                                                                                                                                                                                      |     
    0x0040aa96 mov rcx, rbx                                                                                                                                                                                                                                                      |     
    0x0040aa99 call 0x40ceb0                                                                                                                                                                                                                                                     |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0040aa9e mov ebp, eax                                                                                                                                                                                                                                                      |     
    0x0040aaa0 test eax, eax                                                                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                                                                 |     if (eax != 0) {
    0x0040aaa2 je 0x40aacd                                                                                                                                                                                                                                                       |         
    0x0040aaa4 cmp qword [rbx + 0x38], 0x17                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |         if (*((rbx + 0x38)) != 0x17) {
    0x0040aaa9 je 0x40aab9                                                                                                                                                                                                                                                       |             
    0x0040aaab mov rsi, qword [rbx + 0x18]                                                                                                                                                                                                                                       |             rsi = *((rbx + 0x18));
    0x0040aaaf mov rdi, qword [rbx + 0x40]                                                                                                                                                                                                                                       |             rdi = *((rbx + 0x40));
    0x0040aab3 mov rax, qword [rdi]                                                                                                                                                                                                                                              |             rax = *(rdi);
    0x0040aab6 call qword [rax + 0x18]                                                                                                                                                                                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |         }
    0x0040aab9 mov qword [rbx + 0x30], 0xffffffffffffffff                                                                                                                                                                                                                        |         *((rbx + 0x30)) = 0xffffffffffffffff;
    0x0040aac1 mov rax, qword [r14]                                                                                                                                                                                                                                              |         rax = *(r14);
    0x0040aac4 mov rdi, r14                                                                                                                                                                                                                                                      |         rdi = r14;
    0x0040aac7 mov rsi, rbx                                                                                                                                                                                                                                                      |         rsi = rbx;
    0x0040aaca call qword [rax + 0x18]                                                                                                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |     }
    0x0040aacd mov eax, ebp                                                                                                                                                                                                                                                      |     eax = ebp;
    0x0040aacf add rsp, 8                                                                                                                                                                                                                                                        |     
    0x0040aad3 pop rbx                                                                                                                                                                                                                                                           |     
    0x0040aad4 pop r12                                                                                                                                                                                                                                                           |     
    0x0040aad6 pop r13                                                                                                                                                                                                                                                           |     
    0x0040aad8 pop r14                                                                                                                                                                                                                                                           |     
    0x0040aada pop r15                                                                                                                                                                                                                                                           |     
    0x0040aadc pop rbp                                                                                                                                                                                                                                                           |     
    0x0040aadd ret                                                                                                                                                                                                                                                               |     return rax;
                                                                                                                                                                                                                                                                                 | }
