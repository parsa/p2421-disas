    ; assembly                                                                                                                                               | /* r2dec pseudo code output */
                                                                                                                                                             | /* bdldfp_decimalutil.t/assume @ 0x43dfd0 */
                                                                                                                                                             | #include <stdint.h>
                                                                                                                                                             |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil.createWithAllocator_void_______unsigned_long__void___const_____BloombergLP::bslma::Allocator_ ()       | int64_t method_int_BloombergLP::bslmt::ThreadUtil_createWithAllocator_void_unsigned_long_void_const_BloombergLP::bslma::Allocator_ (int64_t arg3, int64_t arg2, int64_t arg1) {
                                                                                                                                                             |     int64_t var_18h;
                                                                                                                                                             |     uint32_t var_38h;
                                                                                                                                                             |     int64_t var_40h;
                                                                                                                                                             |     rdx = arg3;
                                                                                                                                                             |     rsi = arg2;
                                                                                                                                                             |     rdi = arg1;
                                                                                                                                                             |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<void (*)()>(unsigned long*, void (* const&)(), BloombergLP::bslma::Allocator*) */
    0x0043dfd0 push rbp                                                                                                                                      |     
    0x0043dfd1 push r15                                                                                                                                      |     
    0x0043dfd3 push r14                                                                                                                                      |     
    0x0043dfd5 push rbx                                                                                                                                      |     
    0x0043dfd6 sub rsp, 0x48                                                                                                                                 |     
    0x0043dfda mov r14, rdx                                                                                                                                  |     r14 = rdx;
    0x0043dfdd mov rbp, rsi                                                                                                                                  |     
    0x0043dfe0 mov r15, rdi                                                                                                                                  |     r15 = rdi;
    0x0043dfe3 mov rax, qword [rdx]                                                                                                                          |     rax = *(rdx);
    0x0043dfe6 mov esi, 0x40                                                                                                                                 |     esi = 0x40;
    0x0043dfeb mov rdi, rdx                                                                                                                                  |     rdi = rdx;
    0x0043dfee call qword [rax + 0x10]                                                                                                                       |     rax = uint64_t (*rax + 0x10)(void, void, void) (rbx, r14, r15);
    0x0043dff1 mov rbx, rax                                                                                                                                  |     rbx = rax;
    0x0043dff4 mov qword [rax], 0x43fbc0                                                                                                                     |     *(rax) = method.BloombergLP::bslmt.EntryPointFunctorAdapter_void______::invokerFunction_void_;
    0x0043dffb mov rax, qword [rbp]                                                                                                                          |     rax = *(rbp);
    0x0043dfff mov qword [rbx + 8], rax                                                                                                                      |     *((rbx + 8)) = rax;
    0x0043e003 lea rdi, [rbx + 0x10]                                                                                                                         |     
    0x0043e007 mov qword [rbx + 0x10], 0                                                                                                                     |     *((rbx + 0x10)) = 0;
    0x0043e00f mov qword [rbx + 0x38], r14                                                                                                                   |     *((rbx + 0x38)) = r14;
    0x0043e013 movaps xmm0, xmmword [rip + 0x96356]                                                                                                          |     xmm0 = .comment;
    0x0043e01a movups xmmword [rbx + 0x28], xmm0                                                                                                             |     __asm ("movups xmmword [rbx + 0x28], xmm0");
    0x0043e01e mov ecx, 0x4d85a2                                                                                                                             |     
    0x0043e023 xor esi, esi                                                                                                                                  |     
    0x0043e025 xor edx, edx                                                                                                                                  |     
    0x0043e027 call 0x451120                                                                                                                                 |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x10, 0, 0, "string<...>::assign<Iter>(i,j): string too long");
    0x0043e02c mov rdi, rsp                                                                                                                                  |     
    0x0043e02f call 0x44d1d0                                                                                                                                 |     BloombergLP::bslmt::ThreadAttributes::ThreadAttributes() (rsp);
    0x0043e034 mov rsi, rsp                                                                                                                                  |     
    0x0043e037 mov edx, 0x44d1c0                                                                                                                             |     
    0x0043e03c mov rdi, r15                                                                                                                                  |     
    0x0043e03f mov rcx, rbx                                                                                                                                  |     
    0x0043e042 call 0x44d520                                                                                                                                 |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (r15, rsp, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0043e047 mov ebp, eax                                                                                                                                  |     
    0x0043e049 cmp qword [rsp + 0x38], 0x17                                                                                                                  |     
                                                                                                                                                             |     if (*((rsp + 0x38)) != 0x17) {
    0x0043e04f je 0x43e061                                                                                                                                   |         
    0x0043e051 mov rsi, qword [rsp + 0x18]                                                                                                                   |         rsi = *((rsp + 0x18));
    0x0043e056 mov rdi, qword [rsp + 0x40]                                                                                                                   |         rdi = *((rsp + 0x40));
    0x0043e05b mov rax, qword [rdi]                                                                                                                          |         rax = *(rdi);
    0x0043e05e call qword [rax + 0x18]                                                                                                                       |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                             |     }
    0x0043e061 test ebp, ebp                                                                                                                                 |     
                                                                                                                                                             |     if (ebp != 0) {
    0x0043e063 je 0x43e08e                                                                                                                                   |         
    0x0043e065 cmp qword [rbx + 0x30], 0x17                                                                                                                  |         
                                                                                                                                                             |         if (*((rbx + 0x30)) != 0x17) {
    0x0043e06a je 0x43e07a                                                                                                                                   |             
    0x0043e06c mov rsi, qword [rbx + 0x10]                                                                                                                   |             rsi = *((rbx + 0x10));
    0x0043e070 mov rdi, qword [rbx + 0x38]                                                                                                                   |             rdi = *((rbx + 0x38));
    0x0043e074 mov rax, qword [rdi]                                                                                                                          |             rax = *(rdi);
    0x0043e077 call qword [rax + 0x18]                                                                                                                       |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                             |         }
    0x0043e07a mov qword [rbx + 0x28], 0xffffffffffffffff                                                                                                    |         *((rbx + 0x28)) = 0xffffffffffffffff;
    0x0043e082 mov rax, qword [r14]                                                                                                                          |         rax = *(r14);
    0x0043e085 mov rdi, r14                                                                                                                                  |         rdi = r14;
    0x0043e088 mov rsi, rbx                                                                                                                                  |         rsi = rbx;
    0x0043e08b call qword [rax + 0x18]                                                                                                                       |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                             |     }
    0x0043e08e mov eax, ebp                                                                                                                                  |     eax = ebp;
    0x0043e090 add rsp, 0x48                                                                                                                                 |     
    0x0043e094 pop rbx                                                                                                                                       |     
    0x0043e095 pop r14                                                                                                                                       |     
    0x0043e097 pop r15                                                                                                                                       |     
    0x0043e099 pop rbp                                                                                                                                       |     
    0x0043e09a ret                                                                                                                                           |     return rax;
                                                                                                                                                             | }
