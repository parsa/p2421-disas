    ; assembly                                                                                                                                                                                                                                                                       | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                     | /* bdlcc_fixedqueue.t/none @ 0x41b1a0 */
                                                                                                                                                                                                                                                                                     | #include <stdint.h>
                                                                                                                                                                                                                                                                                     |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::FixedQueue_int___BloombergLP::bsls::AtomicInt___BloombergLP::bdlf::Bind_BoundTuple2_BloombergLP::bdlcc::FixedQue ()           | uint64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf_Nil_void_BloombergLP::bdlcc::FixedQueue_int_BloombergLP::bsls::AtomicInt_BloombergLP::bdlf::Bind_BoundTuple2_BloombergLP::bdlcc::FixedQue (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                     |     rcx = arg4;
                                                                                                                                                                                                                                                                                     |     rdx = arg3;
                                                                                                                                                                                                                                                                                     |     rsi = arg2;
                                                                                                                                                                                                                                                                                     |     rdi = arg1;
                                                                                                                                                                                                                                                                                     |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::FixedQueue<int>*, BloombergLP::bsls::AtomicInt*), BloombergLP::bdlf::Bind_BoundTuple2<BloombergLP::bdlcc::FixedQueue<int>*, BloombergLP::bsls::AtomicInt*> > >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::FixedQueue<int>*, BloombergLP::bsls::AtomicInt*), BloombergLP::bdlf::Bind_BoundTuple2<BloombergLP::bdlcc::FixedQueue<int>*, BloombergLP::bsls::AtomicInt*> > const&, BloombergLP::bslma::Allocator*) */
    0x0041b1a0 push rbp                                                                                                                                                                                                                                                              |     
    0x0041b1a1 push r15                                                                                                                                                                                                                                                              |     
    0x0041b1a3 push r14                                                                                                                                                                                                                                                              |     
    0x0041b1a5 push r13                                                                                                                                                                                                                                                              |     
    0x0041b1a7 push r12                                                                                                                                                                                                                                                              |     
    0x0041b1a9 push rbx                                                                                                                                                                                                                                                              |     
    0x0041b1aa push rax                                                                                                                                                                                                                                                              |     
    0x0041b1ab mov r14, rcx                                                                                                                                                                                                                                                          |     r14 = rcx;
    0x0041b1ae mov r12, rdx                                                                                                                                                                                                                                                          |     r12 = rdx;
    0x0041b1b1 mov r15, rsi                                                                                                                                                                                                                                                          |     r15 = rsi;
    0x0041b1b4 mov qword [rsp], rdi                                                                                                                                                                                                                                                  |     *(rsp) = rdi;
    0x0041b1b8 cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                          |     
                                                                                                                                                                                                                                                                                     |     if (*((rsi + 0x38)) != 0x17) {
    0x0041b1bd je 0x41b1c5                                                                                                                                                                                                                                                           |         
    0x0041b1bf mov r13, qword [r15 + 0x18]                                                                                                                                                                                                                                           |         r13 = *((r15 + 0x18));
    0x0041b1c3 jmp 0x41b1c9                                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |     } else {
    0x0041b1c5 lea r13, [r15 + 0x18]                                                                                                                                                                                                                                                 |         r13 = r15 + 0x18;
                                                                                                                                                                                                                                                                                     |     }
    0x0041b1c9 mov rbp, qword [r15 + 0x30]                                                                                                                                                                                                                                           |     rbp = *((r15 + 0x30));
    0x0041b1cd test r14, r14                                                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                                                     |     if (r14 == 0) {
    0x0041b1d0 jne 0x41b1e6                                                                                                                                                                                                                                                          |         
    0x0041b1d2 mov r14, qword [rip + 0x24ab5f]                                                                                                                                                                                                                                       |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0041b1d9 test r14, r14                                                                                                                                                                                                                                                         |         
                                                                                                                                                                                                                                                                                     |         if (r14 != 0) {
    0x0041b1dc jne 0x41b1e6                                                                                                                                                                                                                                                          |             goto label_0;
                                                                                                                                                                                                                                                                                     |         }
    0x0041b1de call 0x41ecc0                                                                                                                                                                                                                                                         |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x0041b1e3 mov r14, rax                                                                                                                                                                                                                                                          |         r14 = rax;
                                                                                                                                                                                                                                                                                     |     }
                                                                                                                                                                                                                                                                                     | label_0:
    0x0041b1e6 mov rax, qword [r14]                                                                                                                                                                                                                                                  |     rax = *(r14);
    0x0041b1e9 mov esi, 0x50                                                                                                                                                                                                                                                         |     esi = 0x50;
    0x0041b1ee mov rdi, r14                                                                                                                                                                                                                                                          |     rdi = r14;
    0x0041b1f1 call qword [rax + 0x10]                                                                                                                                                                                                                                               |     rax = uint64_t (*rax + 0x10)() ();
    0x0041b1f4 mov rbx, rax                                                                                                                                                                                                                                                          |     rbx = rax;
    0x0041b1f7 mov qword [rax], 0x41b310                                                                                                                                                                                                                                             |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::FixedQueue_int___BloombergLP::bsls::AtomicInt___BloombergLP::bdlf::Bind_BoundTuple2_BloombergLP::bdlcc::FixedQueue_int___B;
    0x0041b1fe mov rax, qword [r12]                                                                                                                                                                                                                                                  |     rax = *(r12);
    0x0041b202 mov qword [rbx + 8], rax                                                                                                                                                                                                                                              |     *((rbx + 8)) = rax;
    0x0041b206 mov rax, qword [r12 + 8]                                                                                                                                                                                                                                              |     rax = *((r12 + 8));
    0x0041b20b mov qword [rbx + 0x10], rax                                                                                                                                                                                                                                           |     *((rbx + 0x10)) = rax;
    0x0041b20f mov rax, qword [r12 + 0x10]                                                                                                                                                                                                                                           |     rax = *((r12 + 0x10));
    0x0041b214 mov qword [rbx + 0x18], rax                                                                                                                                                                                                                                           |     *((rbx + 0x18)) = rax;
    0x0041b218 lea rdi, [rbx + 0x20]                                                                                                                                                                                                                                                 |     
    0x0041b21c mov qword [rbx + 0x20], 0                                                                                                                                                                                                                                             |     *((rbx + 0x20)) = 0;
    0x0041b224 mov qword [rbx + 0x48], r14                                                                                                                                                                                                                                           |     *((rbx + 0x48)) = r14;
    0x0041b228 movaps xmm0, xmmword [rip + 0x2b4f1]                                                                                                                                                                                                                                  |     xmm0 = .comment;
    0x0041b22f movups xmmword [rbx + 0x38], xmm0                                                                                                                                                                                                                                     |     __asm ("movups xmmword [rbx + 0x38], xmm0");
    0x0041b233 mov ecx, 0x447b07                                                                                                                                                                                                                                                     |     
    0x0041b238 mov rsi, r13                                                                                                                                                                                                                                                          |     
    0x0041b23b mov rdx, rbp                                                                                                                                                                                                                                                          |     
    0x0041b23e call 0x423bc0                                                                                                                                                                                                                                                         |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x20, r13, rbp, "string<...>::assign<Iter>(i,j): string too long");
    0x0041b243 mov edx, 0x41ffa0                                                                                                                                                                                                                                                     |     
    0x0041b248 mov rdi, qword [rsp]                                                                                                                                                                                                                                                  |     
    0x0041b24c mov rsi, r15                                                                                                                                                                                                                                                          |     
    0x0041b24f mov rcx, rbx                                                                                                                                                                                                                                                          |     
    0x0041b252 call 0x4209f0                                                                                                                                                                                                                                                         |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0041b257 mov ebp, eax                                                                                                                                                                                                                                                          |     
    0x0041b259 test eax, eax                                                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                                                     |     if (eax != 0) {
    0x0041b25b je 0x41b286                                                                                                                                                                                                                                                           |         
    0x0041b25d cmp qword [rbx + 0x40], 0x17                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |         if (*((rbx + 0x40)) != 0x17) {
    0x0041b262 je 0x41b272                                                                                                                                                                                                                                                           |             
    0x0041b264 mov rsi, qword [rbx + 0x20]                                                                                                                                                                                                                                           |             rsi = *((rbx + 0x20));
    0x0041b268 mov rdi, qword [rbx + 0x48]                                                                                                                                                                                                                                           |             rdi = *((rbx + 0x48));
    0x0041b26c mov rax, qword [rdi]                                                                                                                                                                                                                                                  |             rax = *(rdi);
    0x0041b26f call qword [rax + 0x18]                                                                                                                                                                                                                                               |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |         }
    0x0041b272 mov qword [rbx + 0x38], 0xffffffffffffffff                                                                                                                                                                                                                            |         *((rbx + 0x38)) = 0xffffffffffffffff;
    0x0041b27a mov rax, qword [r14]                                                                                                                                                                                                                                                  |         rax = *(r14);
    0x0041b27d mov rdi, r14                                                                                                                                                                                                                                                          |         rdi = r14;
    0x0041b280 mov rsi, rbx                                                                                                                                                                                                                                                          |         rsi = rbx;
    0x0041b283 call qword [rax + 0x18]                                                                                                                                                                                                                                               |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |     }
    0x0041b286 mov eax, ebp                                                                                                                                                                                                                                                          |     eax = ebp;
    0x0041b288 add rsp, 8                                                                                                                                                                                                                                                            |     
    0x0041b28c pop rbx                                                                                                                                                                                                                                                               |     
    0x0041b28d pop r12                                                                                                                                                                                                                                                               |     
    0x0041b28f pop r13                                                                                                                                                                                                                                                               |     
    0x0041b291 pop r14                                                                                                                                                                                                                                                               |     
    0x0041b293 pop r15                                                                                                                                                                                                                                                               |     
    0x0041b295 pop rbp                                                                                                                                                                                                                                                               |     
    0x0041b296 ret                                                                                                                                                                                                                                                                   |     return rax;
                                                                                                                                                                                                                                                                                     | }
