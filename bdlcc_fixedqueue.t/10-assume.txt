    ; assembly                                                                                                                                                                                                                                                                       | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                     | /* bdlcc_fixedqueue.t/assume @ 0x41a010 */
                                                                                                                                                                                                                                                                                     | #include <stdint.h>
                                                                                                                                                                                                                                                                                     |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::FixedQueue_my_WorkRequest____BloombergLP::bdlf::Bind_BoundTuple1_BloombergLP::bdlcc::FixedQueue_my_WorkRequest__ ()           | int64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf_Nil_void_BloombergLP::bdlcc::FixedQueue_my_WorkRequest_BloombergLP::bdlf::Bind_BoundTuple1_BloombergLP::bdlcc::FixedQueue_my_WorkRequest_ (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                     |     rcx = arg4;
                                                                                                                                                                                                                                                                                     |     rdx = arg3;
                                                                                                                                                                                                                                                                                     |     rsi = arg2;
                                                                                                                                                                                                                                                                                     |     rdi = arg1;
                                                                                                                                                                                                                                                                                     |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::FixedQueue<my_WorkRequest>*), BloombergLP::bdlf::Bind_BoundTuple1<BloombergLP::bdlcc::FixedQueue<my_WorkRequest>*> > >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::FixedQueue<my_WorkRequest>*), BloombergLP::bdlf::Bind_BoundTuple1<BloombergLP::bdlcc::FixedQueue<my_WorkRequest>*> > const&, BloombergLP::bslma::Allocator*) */
    0x0041a010 push rbp                                                                                                                                                                                                                                                              |     
    0x0041a011 push r15                                                                                                                                                                                                                                                              |     
    0x0041a013 push r14                                                                                                                                                                                                                                                              |     
    0x0041a015 push r13                                                                                                                                                                                                                                                              |     
    0x0041a017 push r12                                                                                                                                                                                                                                                              |     
    0x0041a019 push rbx                                                                                                                                                                                                                                                              |     
    0x0041a01a push rax                                                                                                                                                                                                                                                              |     
    0x0041a01b mov r14, rcx                                                                                                                                                                                                                                                          |     r14 = rcx;
    0x0041a01e mov r12, rdx                                                                                                                                                                                                                                                          |     r12 = rdx;
    0x0041a021 mov r15, rsi                                                                                                                                                                                                                                                          |     r15 = rsi;
    0x0041a024 mov qword [rsp], rdi                                                                                                                                                                                                                                                  |     *(rsp) = rdi;
    0x0041a028 mov r13, qword [rsi + 0x30]                                                                                                                                                                                                                                           |     r13 = *((rsi + 0x30));
    0x0041a02c cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                          |     
                                                                                                                                                                                                                                                                                     |     if (*((rsi + 0x38)) != 0x17) {
    0x0041a031 je 0x41a039                                                                                                                                                                                                                                                           |         
    0x0041a033 mov rbp, qword [r15 + 0x18]                                                                                                                                                                                                                                           |         rbp = *((r15 + 0x18));
    0x0041a037 jmp 0x41a03d                                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |     } else {
    0x0041a039 lea rbp, [r15 + 0x18]                                                                                                                                                                                                                                                 |         rbp = r15 + 0x18;
                                                                                                                                                                                                                                                                                     |     }
    0x0041a03d mov rax, qword [r14]                                                                                                                                                                                                                                                  |     rax = *(r14);
    0x0041a040 mov esi, 0x48                                                                                                                                                                                                                                                         |     esi = 0x48;
    0x0041a045 mov rdi, r14                                                                                                                                                                                                                                                          |     rdi = r14;
    0x0041a048 call qword [rax + 0x10]                                                                                                                                                                                                                                               |     rax = uint64_t (*rax + 0x10)() ();
    0x0041a04b mov rbx, rax                                                                                                                                                                                                                                                          |     rbx = rax;
    0x0041a04e mov qword [rax], 0x41a160                                                                                                                                                                                                                                             |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::FixedQueue_my_WorkRequest____BloombergLP::bdlf::Bind_BoundTuple1_BloombergLP::bdlcc::FixedQueue_my_WorkRequest______::invok;
    0x0041a055 mov rax, qword [r12]                                                                                                                                                                                                                                                  |     rax = *(r12);
    0x0041a059 mov qword [rbx + 8], rax                                                                                                                                                                                                                                              |     *((rbx + 8)) = rax;
    0x0041a05d mov rax, qword [r12 + 8]                                                                                                                                                                                                                                              |     rax = *((r12 + 8));
    0x0041a062 mov qword [rbx + 0x10], rax                                                                                                                                                                                                                                           |     *((rbx + 0x10)) = rax;
    0x0041a066 lea rdi, [rbx + 0x18]                                                                                                                                                                                                                                                 |     
    0x0041a06a mov qword [rbx + 0x18], 0                                                                                                                                                                                                                                             |     *((rbx + 0x18)) = 0;
    0x0041a072 mov qword [rbx + 0x40], r14                                                                                                                                                                                                                                           |     *((rbx + 0x40)) = r14;
    0x0041a076 movaps xmm0, xmmword [rip + 0x2c493]                                                                                                                                                                                                                                  |     xmm0 = .comment;
    0x0041a07d movups xmmword [rbx + 0x30], xmm0                                                                                                                                                                                                                                     |     __asm ("movups xmmword [rbx + 0x30], xmm0");
    0x0041a081 mov ecx, 0x4478f9                                                                                                                                                                                                                                                     |     
    0x0041a086 mov rsi, rbp                                                                                                                                                                                                                                                          |     
    0x0041a089 mov rdx, r13                                                                                                                                                                                                                                                          |     
    0x0041a08c call 0x423990                                                                                                                                                                                                                                                         |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x18, rbp, r13, "string<...>::assign<Iter>(i,j): string too long");
    0x0041a091 mov edx, 0x41fda0                                                                                                                                                                                                                                                     |     
    0x0041a096 mov rdi, qword [rsp]                                                                                                                                                                                                                                                  |     
    0x0041a09a mov rsi, r15                                                                                                                                                                                                                                                          |     
    0x0041a09d mov rcx, rbx                                                                                                                                                                                                                                                          |     
    0x0041a0a0 call 0x4207f0                                                                                                                                                                                                                                                         |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0041a0a5 mov ebp, eax                                                                                                                                                                                                                                                          |     
    0x0041a0a7 test eax, eax                                                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                                                     |     if (eax != 0) {
    0x0041a0a9 je 0x41a0d4                                                                                                                                                                                                                                                           |         
    0x0041a0ab cmp qword [rbx + 0x38], 0x17                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |         if (*((rbx + 0x38)) != 0x17) {
    0x0041a0b0 je 0x41a0c0                                                                                                                                                                                                                                                           |             
    0x0041a0b2 mov rsi, qword [rbx + 0x18]                                                                                                                                                                                                                                           |             rsi = *((rbx + 0x18));
    0x0041a0b6 mov rdi, qword [rbx + 0x40]                                                                                                                                                                                                                                           |             rdi = *((rbx + 0x40));
    0x0041a0ba mov rax, qword [rdi]                                                                                                                                                                                                                                                  |             rax = *(rdi);
    0x0041a0bd call qword [rax + 0x18]                                                                                                                                                                                                                                               |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |         }
    0x0041a0c0 mov qword [rbx + 0x30], 0xffffffffffffffff                                                                                                                                                                                                                            |         *((rbx + 0x30)) = 0xffffffffffffffff;
    0x0041a0c8 mov rax, qword [r14]                                                                                                                                                                                                                                                  |         rax = *(r14);
    0x0041a0cb mov rdi, r14                                                                                                                                                                                                                                                          |         rdi = r14;
    0x0041a0ce mov rsi, rbx                                                                                                                                                                                                                                                          |         rsi = rbx;
    0x0041a0d1 call qword [rax + 0x18]                                                                                                                                                                                                                                               |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |     }
    0x0041a0d4 mov eax, ebp                                                                                                                                                                                                                                                          |     eax = ebp;
    0x0041a0d6 add rsp, 8                                                                                                                                                                                                                                                            |     
    0x0041a0da pop rbx                                                                                                                                                                                                                                                               |     
    0x0041a0db pop r12                                                                                                                                                                                                                                                               |     
    0x0041a0dd pop r13                                                                                                                                                                                                                                                               |     
    0x0041a0df pop r14                                                                                                                                                                                                                                                               |     
    0x0041a0e1 pop r15                                                                                                                                                                                                                                                               |     
    0x0041a0e3 pop rbp                                                                                                                                                                                                                                                               |     
    0x0041a0e4 ret                                                                                                                                                                                                                                                                   |     return rax;
                                                                                                                                                                                                                                                                                     | }
