    ; assembly                                                                                                                                                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                 | /* bdlcc_fixedqueue.t/assume @ 0x41bc70 */
                                                                                                                                                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                                                                                                                                                 |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::FixedQueue_int___bool_volatile___BloombergLP::bdlf::Bind_BoundTuple2_BloombergLP::bdlcc::FixedQueue_int___bool_ ()        | int64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf_Nil_void_BloombergLP::bdlcc::FixedQueue_int_bool_volatile_BloombergLP::bdlf::Bind_BoundTuple2_BloombergLP::bdlcc::FixedQueue_int_bool_ (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                 |     rcx = arg4;
                                                                                                                                                                                                                                                                                 |     rdx = arg3;
                                                                                                                                                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                                                                                                                                                 |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::FixedQueue<int>*, bool volatile*), BloombergLP::bdlf::Bind_BoundTuple2<BloombergLP::bdlcc::FixedQueue<int>*, bool volatile*> > >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::FixedQueue<int>*, bool volatile*), BloombergLP::bdlf::Bind_BoundTuple2<BloombergLP::bdlcc::FixedQueue<int>*, bool volatile*> > const&, BloombergLP::bslma::Allocator*) */
    0x0041bc70 push rbp                                                                                                                                                                                                                                                          |     
    0x0041bc71 push r15                                                                                                                                                                                                                                                          |     
    0x0041bc73 push r14                                                                                                                                                                                                                                                          |     
    0x0041bc75 push r13                                                                                                                                                                                                                                                          |     
    0x0041bc77 push r12                                                                                                                                                                                                                                                          |     
    0x0041bc79 push rbx                                                                                                                                                                                                                                                          |     
    0x0041bc7a push rax                                                                                                                                                                                                                                                          |     
    0x0041bc7b mov r14, rcx                                                                                                                                                                                                                                                      |     r14 = rcx;
    0x0041bc7e mov r12, rdx                                                                                                                                                                                                                                                      |     r12 = rdx;
    0x0041bc81 mov r15, rsi                                                                                                                                                                                                                                                      |     r15 = rsi;
    0x0041bc84 mov qword [rsp], rdi                                                                                                                                                                                                                                              |     *(rsp) = rdi;
    0x0041bc88 mov r13, qword [rsi + 0x30]                                                                                                                                                                                                                                       |     r13 = *((rsi + 0x30));
    0x0041bc8c cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                      |     
                                                                                                                                                                                                                                                                                 |     if (*((rsi + 0x38)) != 0x17) {
    0x0041bc91 je 0x41bc99                                                                                                                                                                                                                                                       |         
    0x0041bc93 mov rbp, qword [r15 + 0x18]                                                                                                                                                                                                                                       |         rbp = *((r15 + 0x18));
    0x0041bc97 jmp 0x41bc9d                                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |     } else {
    0x0041bc99 lea rbp, [r15 + 0x18]                                                                                                                                                                                                                                             |         rbp = r15 + 0x18;
                                                                                                                                                                                                                                                                                 |     }
    0x0041bc9d mov rax, qword [r14]                                                                                                                                                                                                                                              |     rax = *(r14);
    0x0041bca0 mov esi, 0x50                                                                                                                                                                                                                                                     |     esi = 0x50;
    0x0041bca5 mov rdi, r14                                                                                                                                                                                                                                                      |     rdi = r14;
    0x0041bca8 call qword [rax + 0x10]                                                                                                                                                                                                                                           |     rax = uint64_t (*rax + 0x10)() ();
    0x0041bcab mov rbx, rax                                                                                                                                                                                                                                                      |     rbx = rax;
    0x0041bcae mov qword [rax], 0x41bdd0                                                                                                                                                                                                                                         |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::FixedQueue_int___bool_volatile___BloombergLP::bdlf::Bind_BoundTuple2_BloombergLP::bdlcc::FixedQueue_int___bool_volatile__;
    0x0041bcb5 mov rax, qword [r12]                                                                                                                                                                                                                                              |     rax = *(r12);
    0x0041bcb9 mov qword [rbx + 8], rax                                                                                                                                                                                                                                          |     *((rbx + 8)) = rax;
    0x0041bcbd mov rax, qword [r12 + 8]                                                                                                                                                                                                                                          |     rax = *((r12 + 8));
    0x0041bcc2 mov qword [rbx + 0x10], rax                                                                                                                                                                                                                                       |     *((rbx + 0x10)) = rax;
    0x0041bcc6 mov rax, qword [r12 + 0x10]                                                                                                                                                                                                                                       |     rax = *((r12 + 0x10));
    0x0041bccb mov qword [rbx + 0x18], rax                                                                                                                                                                                                                                       |     *((rbx + 0x18)) = rax;
    0x0041bccf lea rdi, [rbx + 0x20]                                                                                                                                                                                                                                             |     
    0x0041bcd3 mov qword [rbx + 0x20], 0                                                                                                                                                                                                                                         |     *((rbx + 0x20)) = 0;
    0x0041bcdb mov qword [rbx + 0x48], r14                                                                                                                                                                                                                                       |     *((rbx + 0x48)) = r14;
    0x0041bcdf movaps xmm0, xmmword [rip + 0x2a82a]                                                                                                                                                                                                                              |     xmm0 = .comment;
    0x0041bce6 movups xmmword [rbx + 0x38], xmm0                                                                                                                                                                                                                                 |     __asm ("movups xmmword [rbx + 0x38], xmm0");
    0x0041bcea mov ecx, 0x4478f9                                                                                                                                                                                                                                                 |     
    0x0041bcef mov rsi, rbp                                                                                                                                                                                                                                                      |     
    0x0041bcf2 mov rdx, r13                                                                                                                                                                                                                                                      |     
    0x0041bcf5 call 0x423990                                                                                                                                                                                                                                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x20, rbp, r13, "string<...>::assign<Iter>(i,j): string too long");
    0x0041bcfa mov edx, 0x41fda0                                                                                                                                                                                                                                                 |     
    0x0041bcff mov rdi, qword [rsp]                                                                                                                                                                                                                                              |     
    0x0041bd03 mov rsi, r15                                                                                                                                                                                                                                                      |     
    0x0041bd06 mov rcx, rbx                                                                                                                                                                                                                                                      |     
    0x0041bd09 call 0x4207f0                                                                                                                                                                                                                                                     |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0041bd0e mov ebp, eax                                                                                                                                                                                                                                                      |     
    0x0041bd10 test eax, eax                                                                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                                                                 |     if (eax != 0) {
    0x0041bd12 je 0x41bd3d                                                                                                                                                                                                                                                       |         
    0x0041bd14 cmp qword [rbx + 0x40], 0x17                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |         if (*((rbx + 0x40)) != 0x17) {
    0x0041bd19 je 0x41bd29                                                                                                                                                                                                                                                       |             
    0x0041bd1b mov rsi, qword [rbx + 0x20]                                                                                                                                                                                                                                       |             rsi = *((rbx + 0x20));
    0x0041bd1f mov rdi, qword [rbx + 0x48]                                                                                                                                                                                                                                       |             rdi = *((rbx + 0x48));
    0x0041bd23 mov rax, qword [rdi]                                                                                                                                                                                                                                              |             rax = *(rdi);
    0x0041bd26 call qword [rax + 0x18]                                                                                                                                                                                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |         }
    0x0041bd29 mov qword [rbx + 0x38], 0xffffffffffffffff                                                                                                                                                                                                                        |         *((rbx + 0x38)) = 0xffffffffffffffff;
    0x0041bd31 mov rax, qword [r14]                                                                                                                                                                                                                                              |         rax = *(r14);
    0x0041bd34 mov rdi, r14                                                                                                                                                                                                                                                      |         rdi = r14;
    0x0041bd37 mov rsi, rbx                                                                                                                                                                                                                                                      |         rsi = rbx;
    0x0041bd3a call qword [rax + 0x18]                                                                                                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |     }
    0x0041bd3d mov eax, ebp                                                                                                                                                                                                                                                      |     eax = ebp;
    0x0041bd3f add rsp, 8                                                                                                                                                                                                                                                        |     
    0x0041bd43 pop rbx                                                                                                                                                                                                                                                           |     
    0x0041bd44 pop r12                                                                                                                                                                                                                                                           |     
    0x0041bd46 pop r13                                                                                                                                                                                                                                                           |     
    0x0041bd48 pop r14                                                                                                                                                                                                                                                           |     
    0x0041bd4a pop r15                                                                                                                                                                                                                                                           |     
    0x0041bd4c pop rbp                                                                                                                                                                                                                                                           |     
    0x0041bd4d ret                                                                                                                                                                                                                                                               |     return rax;
                                                                                                                                                                                                                                                                                 | }
