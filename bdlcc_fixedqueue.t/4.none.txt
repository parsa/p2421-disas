    ; assembly                                                                                                                                                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                 | /* bdlcc_fixedqueue.t/none @ 0x41bd80 */
                                                                                                                                                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                                                                                                                                                 |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::FixedQueue_int___bool_volatile___BloombergLP::bdlf::Bind_BoundTuple2_BloombergLP::bdlcc::FixedQueue_int___bool_ ()        | uint64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf_Nil_void_BloombergLP::bdlcc::FixedQueue_int_bool_volatile_BloombergLP::bdlf::Bind_BoundTuple2_BloombergLP::bdlcc::FixedQueue_int_bool_ (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                 |     rcx = arg4;
                                                                                                                                                                                                                                                                                 |     rdx = arg3;
                                                                                                                                                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                                                                                                                                                 |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::FixedQueue<int>*, bool volatile*), BloombergLP::bdlf::Bind_BoundTuple2<BloombergLP::bdlcc::FixedQueue<int>*, bool volatile*> > >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::FixedQueue<int>*, bool volatile*), BloombergLP::bdlf::Bind_BoundTuple2<BloombergLP::bdlcc::FixedQueue<int>*, bool volatile*> > const&, BloombergLP::bslma::Allocator*) */
    0x0041bd80 push rbp                                                                                                                                                                                                                                                          |     
    0x0041bd81 push r15                                                                                                                                                                                                                                                          |     
    0x0041bd83 push r14                                                                                                                                                                                                                                                          |     
    0x0041bd85 push r13                                                                                                                                                                                                                                                          |     
    0x0041bd87 push r12                                                                                                                                                                                                                                                          |     
    0x0041bd89 push rbx                                                                                                                                                                                                                                                          |     
    0x0041bd8a push rax                                                                                                                                                                                                                                                          |     
    0x0041bd8b mov r14, rcx                                                                                                                                                                                                                                                      |     r14 = rcx;
    0x0041bd8e mov r12, rdx                                                                                                                                                                                                                                                      |     r12 = rdx;
    0x0041bd91 mov r15, rsi                                                                                                                                                                                                                                                      |     r15 = rsi;
    0x0041bd94 mov qword [rsp], rdi                                                                                                                                                                                                                                              |     *(rsp) = rdi;
    0x0041bd98 cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                      |     
                                                                                                                                                                                                                                                                                 |     if (*((rsi + 0x38)) != 0x17) {
    0x0041bd9d je 0x41bda5                                                                                                                                                                                                                                                       |         
    0x0041bd9f mov r13, qword [r15 + 0x18]                                                                                                                                                                                                                                       |         r13 = *((r15 + 0x18));
    0x0041bda3 jmp 0x41bda9                                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |     } else {
    0x0041bda5 lea r13, [r15 + 0x18]                                                                                                                                                                                                                                             |         r13 = r15 + 0x18;
                                                                                                                                                                                                                                                                                 |     }
    0x0041bda9 mov rbp, qword [r15 + 0x30]                                                                                                                                                                                                                                       |     rbp = *((r15 + 0x30));
    0x0041bdad test r14, r14                                                                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                                                                 |     if (r14 == 0) {
    0x0041bdb0 jne 0x41bdc6                                                                                                                                                                                                                                                      |         
    0x0041bdb2 mov r14, qword [rip + 0x249f7f]                                                                                                                                                                                                                                   |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0041bdb9 test r14, r14                                                                                                                                                                                                                                                     |         
                                                                                                                                                                                                                                                                                 |         if (r14 != 0) {
    0x0041bdbc jne 0x41bdc6                                                                                                                                                                                                                                                      |             goto label_0;
                                                                                                                                                                                                                                                                                 |         }
    0x0041bdbe call 0x41ecc0                                                                                                                                                                                                                                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x0041bdc3 mov r14, rax                                                                                                                                                                                                                                                      |         r14 = rax;
                                                                                                                                                                                                                                                                                 |     }
                                                                                                                                                                                                                                                                                 | label_0:
    0x0041bdc6 mov rax, qword [r14]                                                                                                                                                                                                                                              |     rax = *(r14);
    0x0041bdc9 mov esi, 0x50                                                                                                                                                                                                                                                     |     esi = 0x50;
    0x0041bdce mov rdi, r14                                                                                                                                                                                                                                                      |     rdi = r14;
    0x0041bdd1 call qword [rax + 0x10]                                                                                                                                                                                                                                           |     rax = uint64_t (*rax + 0x10)() ();
    0x0041bdd4 mov rbx, rax                                                                                                                                                                                                                                                      |     rbx = rax;
    0x0041bdd7 mov qword [rax], 0x41bef0                                                                                                                                                                                                                                         |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::FixedQueue_int___bool_volatile___BloombergLP::bdlf::Bind_BoundTuple2_BloombergLP::bdlcc::FixedQueue_int___bool_volatile__;
    0x0041bdde mov rax, qword [r12]                                                                                                                                                                                                                                              |     rax = *(r12);
    0x0041bde2 mov qword [rbx + 8], rax                                                                                                                                                                                                                                          |     *((rbx + 8)) = rax;
    0x0041bde6 mov rax, qword [r12 + 8]                                                                                                                                                                                                                                          |     rax = *((r12 + 8));
    0x0041bdeb mov qword [rbx + 0x10], rax                                                                                                                                                                                                                                       |     *((rbx + 0x10)) = rax;
    0x0041bdef mov rax, qword [r12 + 0x10]                                                                                                                                                                                                                                       |     rax = *((r12 + 0x10));
    0x0041bdf4 mov qword [rbx + 0x18], rax                                                                                                                                                                                                                                       |     *((rbx + 0x18)) = rax;
    0x0041bdf8 lea rdi, [rbx + 0x20]                                                                                                                                                                                                                                             |     
    0x0041bdfc mov qword [rbx + 0x20], 0                                                                                                                                                                                                                                         |     *((rbx + 0x20)) = 0;
    0x0041be04 mov qword [rbx + 0x48], r14                                                                                                                                                                                                                                       |     *((rbx + 0x48)) = r14;
    0x0041be08 movaps xmm0, xmmword [rip + 0x2a911]                                                                                                                                                                                                                              |     xmm0 = .comment;
    0x0041be0f movups xmmword [rbx + 0x38], xmm0                                                                                                                                                                                                                                 |     __asm ("movups xmmword [rbx + 0x38], xmm0");
    0x0041be13 mov ecx, 0x447b07                                                                                                                                                                                                                                                 |     
    0x0041be18 mov rsi, r13                                                                                                                                                                                                                                                      |     
    0x0041be1b mov rdx, rbp                                                                                                                                                                                                                                                      |     
    0x0041be1e call 0x423bc0                                                                                                                                                                                                                                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x20, r13, rbp, "string<...>::assign<Iter>(i,j): string too long");
    0x0041be23 mov edx, 0x41ffa0                                                                                                                                                                                                                                                 |     
    0x0041be28 mov rdi, qword [rsp]                                                                                                                                                                                                                                              |     
    0x0041be2c mov rsi, r15                                                                                                                                                                                                                                                      |     
    0x0041be2f mov rcx, rbx                                                                                                                                                                                                                                                      |     
    0x0041be32 call 0x4209f0                                                                                                                                                                                                                                                     |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0041be37 mov ebp, eax                                                                                                                                                                                                                                                      |     
    0x0041be39 test eax, eax                                                                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                                                                 |     if (eax != 0) {
    0x0041be3b je 0x41be66                                                                                                                                                                                                                                                       |         
    0x0041be3d cmp qword [rbx + 0x40], 0x17                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |         if (*((rbx + 0x40)) != 0x17) {
    0x0041be42 je 0x41be52                                                                                                                                                                                                                                                       |             
    0x0041be44 mov rsi, qword [rbx + 0x20]                                                                                                                                                                                                                                       |             rsi = *((rbx + 0x20));
    0x0041be48 mov rdi, qword [rbx + 0x48]                                                                                                                                                                                                                                       |             rdi = *((rbx + 0x48));
    0x0041be4c mov rax, qword [rdi]                                                                                                                                                                                                                                              |             rax = *(rdi);
    0x0041be4f call qword [rax + 0x18]                                                                                                                                                                                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |         }
    0x0041be52 mov qword [rbx + 0x38], 0xffffffffffffffff                                                                                                                                                                                                                        |         *((rbx + 0x38)) = 0xffffffffffffffff;
    0x0041be5a mov rax, qword [r14]                                                                                                                                                                                                                                              |         rax = *(r14);
    0x0041be5d mov rdi, r14                                                                                                                                                                                                                                                      |         rdi = r14;
    0x0041be60 mov rsi, rbx                                                                                                                                                                                                                                                      |         rsi = rbx;
    0x0041be63 call qword [rax + 0x18]                                                                                                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |     }
    0x0041be66 mov eax, ebp                                                                                                                                                                                                                                                      |     eax = ebp;
    0x0041be68 add rsp, 8                                                                                                                                                                                                                                                        |     
    0x0041be6c pop rbx                                                                                                                                                                                                                                                           |     
    0x0041be6d pop r12                                                                                                                                                                                                                                                           |     
    0x0041be6f pop r13                                                                                                                                                                                                                                                           |     
    0x0041be71 pop r14                                                                                                                                                                                                                                                           |     
    0x0041be73 pop r15                                                                                                                                                                                                                                                           |     
    0x0041be75 pop rbp                                                                                                                                                                                                                                                           |     
    0x0041be76 ret                                                                                                                                                                                                                                                               |     return rax;
                                                                                                                                                                                                                                                                                 | }
