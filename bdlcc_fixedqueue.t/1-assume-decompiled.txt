    ; assembly                                                                                                                                                                                                                                                                       | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                     | /* bdlcc_fixedqueue.t/assume @ 0x41b980 */
                                                                                                                                                                                                                                                                                     | #include <stdint.h>
                                                                                                                                                                                                                                                                                     |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::FixedQueue_int___BloombergLP::bslmt::Barrier___BloombergLP::bdlf::Bind_BoundTuple2_BloombergLP::bdlcc::FixedQueu ()           | int64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf_Nil_void_BloombergLP::bdlcc::FixedQueue_int_BloombergLP::bslmt::Barrier_BloombergLP::bdlf::Bind_BoundTuple2_BloombergLP::bdlcc::FixedQueu (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                     |     rcx = arg4;
                                                                                                                                                                                                                                                                                     |     rdx = arg3;
                                                                                                                                                                                                                                                                                     |     rsi = arg2;
                                                                                                                                                                                                                                                                                     |     rdi = arg1;
                                                                                                                                                                                                                                                                                     |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::FixedQueue<int>*, BloombergLP::bslmt::Barrier*), BloombergLP::bdlf::Bind_BoundTuple2<BloombergLP::bdlcc::FixedQueue<int>*, BloombergLP::bslmt::Barrier*> > >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::FixedQueue<int>*, BloombergLP::bslmt::Barrier*), BloombergLP::bdlf::Bind_BoundTuple2<BloombergLP::bdlcc::FixedQueue<int>*, BloombergLP::bslmt::Barrier*> > const&, BloombergLP::bslma::Allocator*) */
    0x0041b980 push rbp                                                                                                                                                                                                                                                              |     
    0x0041b981 push r15                                                                                                                                                                                                                                                              |     
    0x0041b983 push r14                                                                                                                                                                                                                                                              |     
    0x0041b985 push r13                                                                                                                                                                                                                                                              |     
    0x0041b987 push r12                                                                                                                                                                                                                                                              |     
    0x0041b989 push rbx                                                                                                                                                                                                                                                              |     
    0x0041b98a push rax                                                                                                                                                                                                                                                              |     
    0x0041b98b mov r14, rcx                                                                                                                                                                                                                                                          |     r14 = rcx;
    0x0041b98e mov r12, rdx                                                                                                                                                                                                                                                          |     r12 = rdx;
    0x0041b991 mov r15, rsi                                                                                                                                                                                                                                                          |     r15 = rsi;
    0x0041b994 mov qword [rsp], rdi                                                                                                                                                                                                                                                  |     *(rsp) = rdi;
    0x0041b998 mov r13, qword [rsi + 0x30]                                                                                                                                                                                                                                           |     r13 = *((rsi + 0x30));
    0x0041b99c cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                          |     
                                                                                                                                                                                                                                                                                     |     if (*((rsi + 0x38)) != 0x17) {
    0x0041b9a1 je 0x41b9a9                                                                                                                                                                                                                                                           |         
    0x0041b9a3 mov rbp, qword [r15 + 0x18]                                                                                                                                                                                                                                           |         rbp = *((r15 + 0x18));
    0x0041b9a7 jmp 0x41b9ad                                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |     } else {
    0x0041b9a9 lea rbp, [r15 + 0x18]                                                                                                                                                                                                                                                 |         rbp = r15 + 0x18;
                                                                                                                                                                                                                                                                                     |     }
    0x0041b9ad mov rax, qword [r14]                                                                                                                                                                                                                                                  |     rax = *(r14);
    0x0041b9b0 mov esi, 0x50                                                                                                                                                                                                                                                         |     esi = 0x50;
    0x0041b9b5 mov rdi, r14                                                                                                                                                                                                                                                          |     rdi = r14;
    0x0041b9b8 call qword [rax + 0x10]                                                                                                                                                                                                                                               |     rax = uint64_t (*rax + 0x10)() ();
    0x0041b9bb mov rbx, rax                                                                                                                                                                                                                                                          |     rbx = rax;
    0x0041b9be mov qword [rax], 0x41bae0                                                                                                                                                                                                                                             |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::FixedQueue_int___BloombergLP::bslmt::Barrier___BloombergLP::bdlf::Bind_BoundTuple2_BloombergLP::bdlcc::FixedQueue_int___Bl;
    0x0041b9c5 mov rax, qword [r12]                                                                                                                                                                                                                                                  |     rax = *(r12);
    0x0041b9c9 mov qword [rbx + 8], rax                                                                                                                                                                                                                                              |     *((rbx + 8)) = rax;
    0x0041b9cd mov rax, qword [r12 + 8]                                                                                                                                                                                                                                              |     rax = *((r12 + 8));
    0x0041b9d2 mov qword [rbx + 0x10], rax                                                                                                                                                                                                                                           |     *((rbx + 0x10)) = rax;
    0x0041b9d6 mov rax, qword [r12 + 0x10]                                                                                                                                                                                                                                           |     rax = *((r12 + 0x10));
    0x0041b9db mov qword [rbx + 0x18], rax                                                                                                                                                                                                                                           |     *((rbx + 0x18)) = rax;
    0x0041b9df lea rdi, [rbx + 0x20]                                                                                                                                                                                                                                                 |     
    0x0041b9e3 mov qword [rbx + 0x20], 0                                                                                                                                                                                                                                             |     *((rbx + 0x20)) = 0;
    0x0041b9eb mov qword [rbx + 0x48], r14                                                                                                                                                                                                                                           |     *((rbx + 0x48)) = r14;
    0x0041b9ef movaps xmm0, xmmword [rip + 0x2ab1a]                                                                                                                                                                                                                                  |     xmm0 = .comment;
    0x0041b9f6 movups xmmword [rbx + 0x38], xmm0                                                                                                                                                                                                                                     |     __asm ("movups xmmword [rbx + 0x38], xmm0");
    0x0041b9fa mov ecx, 0x4478f9                                                                                                                                                                                                                                                     |     
    0x0041b9ff mov rsi, rbp                                                                                                                                                                                                                                                          |     
    0x0041ba02 mov rdx, r13                                                                                                                                                                                                                                                          |     
    0x0041ba05 call 0x423990                                                                                                                                                                                                                                                         |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x20, rbp, r13, "string<...>::assign<Iter>(i,j): string too long");
    0x0041ba0a mov edx, 0x41fda0                                                                                                                                                                                                                                                     |     
    0x0041ba0f mov rdi, qword [rsp]                                                                                                                                                                                                                                                  |     
    0x0041ba13 mov rsi, r15                                                                                                                                                                                                                                                          |     
    0x0041ba16 mov rcx, rbx                                                                                                                                                                                                                                                          |     
    0x0041ba19 call 0x4207f0                                                                                                                                                                                                                                                         |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0041ba1e mov ebp, eax                                                                                                                                                                                                                                                          |     
    0x0041ba20 test eax, eax                                                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                                                     |     if (eax != 0) {
    0x0041ba22 je 0x41ba4d                                                                                                                                                                                                                                                           |         
    0x0041ba24 cmp qword [rbx + 0x40], 0x17                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |         if (*((rbx + 0x40)) != 0x17) {
    0x0041ba29 je 0x41ba39                                                                                                                                                                                                                                                           |             
    0x0041ba2b mov rsi, qword [rbx + 0x20]                                                                                                                                                                                                                                           |             rsi = *((rbx + 0x20));
    0x0041ba2f mov rdi, qword [rbx + 0x48]                                                                                                                                                                                                                                           |             rdi = *((rbx + 0x48));
    0x0041ba33 mov rax, qword [rdi]                                                                                                                                                                                                                                                  |             rax = *(rdi);
    0x0041ba36 call qword [rax + 0x18]                                                                                                                                                                                                                                               |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |         }
    0x0041ba39 mov qword [rbx + 0x38], 0xffffffffffffffff                                                                                                                                                                                                                            |         *((rbx + 0x38)) = 0xffffffffffffffff;
    0x0041ba41 mov rax, qword [r14]                                                                                                                                                                                                                                                  |         rax = *(r14);
    0x0041ba44 mov rdi, r14                                                                                                                                                                                                                                                          |         rdi = r14;
    0x0041ba47 mov rsi, rbx                                                                                                                                                                                                                                                          |         rsi = rbx;
    0x0041ba4a call qword [rax + 0x18]                                                                                                                                                                                                                                               |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |     }
    0x0041ba4d mov eax, ebp                                                                                                                                                                                                                                                          |     eax = ebp;
    0x0041ba4f add rsp, 8                                                                                                                                                                                                                                                            |     
    0x0041ba53 pop rbx                                                                                                                                                                                                                                                               |     
    0x0041ba54 pop r12                                                                                                                                                                                                                                                               |     
    0x0041ba56 pop r13                                                                                                                                                                                                                                                               |     
    0x0041ba58 pop r14                                                                                                                                                                                                                                                               |     
    0x0041ba5a pop r15                                                                                                                                                                                                                                                               |     
    0x0041ba5c pop rbp                                                                                                                                                                                                                                                               |     
    0x0041ba5d ret                                                                                                                                                                                                                                                                   |     return rax;
                                                                                                                                                                                                                                                                                     | }
