    ; assembly                                                                                                                                                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                 | /* bdlcc_fixedqueue.t/none @ 0x41cd70 */
                                                                                                                                                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                                                                                                                                                 |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::FixedQueue_int___BloombergLP::bsls::AtomicInt__BloombergLP::bslmt::Turnstile__int___BloombergLP::bdlf::Bind_Bou ()        | uint64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf_Nil_void_BloombergLP::bdlcc::FixedQueue_int_BloombergLP::bsls::AtomicInt_BloombergLP::bslmt::Turnstile_int_BloombergLP::bdlf::Bind_Bou (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                 |     rcx = arg4;
                                                                                                                                                                                                                                                                                 |     rdx = arg3;
                                                                                                                                                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                                                                                                                                                 |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::FixedQueue<int>*, BloombergLP::bsls::AtomicInt*, BloombergLP::bslmt::Turnstile*, int), BloombergLP::bdlf::Bind_BoundTuple4<BloombergLP::bdlcc::FixedQueue<int>*, BloombergLP::bsls::AtomicInt*, BloombergLP::bslmt::Turnstile*, int> > >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::FixedQueue<int>*, BloombergLP::bsls::AtomicInt*, BloombergLP::bslmt::Turnstile*, int), BloombergLP::bdlf::Bind_BoundTuple4<BloombergLP::bdlcc::FixedQueue<int>*, BloombergLP::bsls::AtomicInt*, BloombergLP::bslmt::Turnstile*, int> > const&, BloombergLP::bslma::Allocator*) */
    0x0041cd70 push rbp                                                                                                                                                                                                                                                          |     
    0x0041cd71 push r15                                                                                                                                                                                                                                                          |     
    0x0041cd73 push r14                                                                                                                                                                                                                                                          |     
    0x0041cd75 push r13                                                                                                                                                                                                                                                          |     
    0x0041cd77 push r12                                                                                                                                                                                                                                                          |     
    0x0041cd79 push rbx                                                                                                                                                                                                                                                          |     
    0x0041cd7a push rax                                                                                                                                                                                                                                                          |     
    0x0041cd7b mov r14, rcx                                                                                                                                                                                                                                                      |     r14 = rcx;
    0x0041cd7e mov r12, rdx                                                                                                                                                                                                                                                      |     r12 = rdx;
    0x0041cd81 mov r15, rsi                                                                                                                                                                                                                                                      |     r15 = rsi;
    0x0041cd84 mov qword [rsp], rdi                                                                                                                                                                                                                                              |     *(rsp) = rdi;
    0x0041cd88 cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                      |     
                                                                                                                                                                                                                                                                                 |     if (*((rsi + 0x38)) != 0x17) {
    0x0041cd8d je 0x41cd95                                                                                                                                                                                                                                                       |         
    0x0041cd8f mov r13, qword [r15 + 0x18]                                                                                                                                                                                                                                       |         r13 = *((r15 + 0x18));
    0x0041cd93 jmp 0x41cd99                                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |     } else {
    0x0041cd95 lea r13, [r15 + 0x18]                                                                                                                                                                                                                                             |         r13 = r15 + 0x18;
                                                                                                                                                                                                                                                                                 |     }
    0x0041cd99 mov rbp, qword [r15 + 0x30]                                                                                                                                                                                                                                       |     rbp = *((r15 + 0x30));
    0x0041cd9d test r14, r14                                                                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                                                                 |     if (r14 == 0) {
    0x0041cda0 jne 0x41cdb6                                                                                                                                                                                                                                                      |         
    0x0041cda2 mov r14, qword [rip + 0x248f8f]                                                                                                                                                                                                                                   |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0041cda9 test r14, r14                                                                                                                                                                                                                                                     |         
                                                                                                                                                                                                                                                                                 |         if (r14 != 0) {
    0x0041cdac jne 0x41cdb6                                                                                                                                                                                                                                                      |             goto label_0;
                                                                                                                                                                                                                                                                                 |         }
    0x0041cdae call 0x41ecc0                                                                                                                                                                                                                                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x0041cdb3 mov r14, rax                                                                                                                                                                                                                                                      |         r14 = rax;
                                                                                                                                                                                                                                                                                 |     }
                                                                                                                                                                                                                                                                                 | label_0:
    0x0041cdb6 mov rax, qword [r14]                                                                                                                                                                                                                                              |     rax = *(r14);
    0x0041cdb9 mov esi, 0x60                                                                                                                                                                                                                                                     |     esi = 0x60;
    0x0041cdbe mov rdi, r14                                                                                                                                                                                                                                                      |     rdi = r14;
    0x0041cdc1 call qword [rax + 0x10]                                                                                                                                                                                                                                           |     rax = uint64_t (*rax + 0x10)() ();
    0x0041cdc4 mov rbx, rax                                                                                                                                                                                                                                                      |     rbx = rax;
    0x0041cdc7 mov qword [rax], 0x41cef0                                                                                                                                                                                                                                         |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::FixedQueue_int___BloombergLP::bsls::AtomicInt__BloombergLP::bslmt::Turnstile__int___BloombergLP::bdlf::Bind_BoundTuple4_Bl;
    0x0041cdce mov rax, qword [r12]                                                                                                                                                                                                                                              |     rax = *(r12);
    0x0041cdd2 mov qword [rbx + 8], rax                                                                                                                                                                                                                                          |     *((rbx + 8)) = rax;
    0x0041cdd6 mov rax, qword [r12 + 8]                                                                                                                                                                                                                                          |     rax = *((r12 + 8));
    0x0041cddb mov qword [rbx + 0x10], rax                                                                                                                                                                                                                                       |     *((rbx + 0x10)) = rax;
    0x0041cddf mov rax, qword [r12 + 0x10]                                                                                                                                                                                                                                       |     rax = *((r12 + 0x10));
    0x0041cde4 mov qword [rbx + 0x18], rax                                                                                                                                                                                                                                       |     *((rbx + 0x18)) = rax;
    0x0041cde8 mov rax, qword [r12 + 0x18]                                                                                                                                                                                                                                       |     rax = *((r12 + 0x18));
    0x0041cded mov qword [rbx + 0x20], rax                                                                                                                                                                                                                                       |     *((rbx + 0x20)) = rax;
    0x0041cdf1 mov eax, dword [r12 + 0x20]                                                                                                                                                                                                                                       |     eax = *((r12 + 0x20));
    0x0041cdf6 mov dword [rbx + 0x28], eax                                                                                                                                                                                                                                       |     *((rbx + 0x28)) = eax;
    0x0041cdf9 lea rdi, [rbx + 0x30]                                                                                                                                                                                                                                             |     
    0x0041cdfd mov qword [rbx + 0x30], 0                                                                                                                                                                                                                                         |     *((rbx + 0x30)) = 0;
    0x0041ce05 mov qword [rbx + 0x58], r14                                                                                                                                                                                                                                       |     *((rbx + 0x58)) = r14;
    0x0041ce09 movaps xmm0, xmmword [rip + 0x29910]                                                                                                                                                                                                                              |     xmm0 = .comment;
    0x0041ce10 movups xmmword [rbx + 0x48], xmm0                                                                                                                                                                                                                                 |     __asm ("movups xmmword [rbx + 0x48], xmm0");
    0x0041ce14 mov ecx, 0x447b07                                                                                                                                                                                                                                                 |     
    0x0041ce19 mov rsi, r13                                                                                                                                                                                                                                                      |     
    0x0041ce1c mov rdx, rbp                                                                                                                                                                                                                                                      |     
    0x0041ce1f call 0x423bc0                                                                                                                                                                                                                                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x30, r13, rbp, "string<...>::assign<Iter>(i,j): string too long");
    0x0041ce24 mov edx, 0x41ffa0                                                                                                                                                                                                                                                 |     
    0x0041ce29 mov rdi, qword [rsp]                                                                                                                                                                                                                                              |     
    0x0041ce2d mov rsi, r15                                                                                                                                                                                                                                                      |     
    0x0041ce30 mov rcx, rbx                                                                                                                                                                                                                                                      |     
    0x0041ce33 call 0x4209f0                                                                                                                                                                                                                                                     |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0041ce38 mov ebp, eax                                                                                                                                                                                                                                                      |     
    0x0041ce3a test eax, eax                                                                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                                                                 |     if (eax != 0) {
    0x0041ce3c je 0x41ce67                                                                                                                                                                                                                                                       |         
    0x0041ce3e cmp qword [rbx + 0x50], 0x17                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |         if (*((rbx + 0x50)) != 0x17) {
    0x0041ce43 je 0x41ce53                                                                                                                                                                                                                                                       |             
    0x0041ce45 mov rsi, qword [rbx + 0x30]                                                                                                                                                                                                                                       |             rsi = *((rbx + 0x30));
    0x0041ce49 mov rdi, qword [rbx + 0x58]                                                                                                                                                                                                                                       |             rdi = *((rbx + 0x58));
    0x0041ce4d mov rax, qword [rdi]                                                                                                                                                                                                                                              |             rax = *(rdi);
    0x0041ce50 call qword [rax + 0x18]                                                                                                                                                                                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |         }
    0x0041ce53 mov qword [rbx + 0x48], 0xffffffffffffffff                                                                                                                                                                                                                        |         *((rbx + 0x48)) = 0xffffffffffffffff;
    0x0041ce5b mov rax, qword [r14]                                                                                                                                                                                                                                              |         rax = *(r14);
    0x0041ce5e mov rdi, r14                                                                                                                                                                                                                                                      |         rdi = r14;
    0x0041ce61 mov rsi, rbx                                                                                                                                                                                                                                                      |         rsi = rbx;
    0x0041ce64 call qword [rax + 0x18]                                                                                                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |     }
    0x0041ce67 mov eax, ebp                                                                                                                                                                                                                                                      |     eax = ebp;
    0x0041ce69 add rsp, 8                                                                                                                                                                                                                                                        |     
    0x0041ce6d pop rbx                                                                                                                                                                                                                                                           |     
    0x0041ce6e pop r12                                                                                                                                                                                                                                                           |     
    0x0041ce70 pop r13                                                                                                                                                                                                                                                           |     
    0x0041ce72 pop r14                                                                                                                                                                                                                                                           |     
    0x0041ce74 pop r15                                                                                                                                                                                                                                                           |     
    0x0041ce76 pop rbp                                                                                                                                                                                                                                                           |     
    0x0041ce77 ret                                                                                                                                                                                                                                                               |     return rax;
                                                                                                                                                                                                                                                                                 | }
