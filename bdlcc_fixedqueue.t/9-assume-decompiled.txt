    ; assembly                                                                                                                                                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                 | /* bdlcc_fixedqueue.t/assume @ 0x41c770 */
                                                                                                                                                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                                                                                                                                                 |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::FixedQueue_int___double__int__bool__bool__BloombergLP::bslmt::Condition___BloombergLP::bdlf::Bind_BoundTuple6_ ()         | int64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf_Nil_void_BloombergLP::bdlcc::FixedQueue_int_double_int_bool_bool_BloombergLP::bslmt::Condition_BloombergLP::bdlf::Bind_BoundTuple6_ (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                 |     rcx = arg4;
                                                                                                                                                                                                                                                                                 |     rdx = arg3;
                                                                                                                                                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                                                                                                                                                 |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::FixedQueue<int>*, double, int, bool*, bool*, BloombergLP::bslmt::Condition*), BloombergLP::bdlf::Bind_BoundTuple6<BloombergLP::bdlcc::FixedQueue<int>*, double, int, bool*, bool*, BloombergLP::bslmt::Condition*> > >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::FixedQueue<int>*, double, int, bool*, bool*, BloombergLP::bslmt::Condition*), BloombergLP::bdlf::Bind_BoundTuple6<BloombergLP::bdlcc::FixedQueue<int>*, double, int, bool*, bool*, BloombergLP::bslmt::Condition*> > const&, BloombergLP::bslma::Allocator*) */
    0x0041c770 push rbp                                                                                                                                                                                                                                                          |     
    0x0041c771 push r15                                                                                                                                                                                                                                                          |     
    0x0041c773 push r14                                                                                                                                                                                                                                                          |     
    0x0041c775 push r13                                                                                                                                                                                                                                                          |     
    0x0041c777 push r12                                                                                                                                                                                                                                                          |     
    0x0041c779 push rbx                                                                                                                                                                                                                                                          |     
    0x0041c77a push rax                                                                                                                                                                                                                                                          |     
    0x0041c77b mov r14, rcx                                                                                                                                                                                                                                                      |     r14 = rcx;
    0x0041c77e mov r12, rdx                                                                                                                                                                                                                                                      |     r12 = rdx;
    0x0041c781 mov r15, rsi                                                                                                                                                                                                                                                      |     r15 = rsi;
    0x0041c784 mov qword [rsp], rdi                                                                                                                                                                                                                                              |     *(rsp) = rdi;
    0x0041c788 mov r13, qword [rsi + 0x30]                                                                                                                                                                                                                                       |     r13 = *((rsi + 0x30));
    0x0041c78c cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                      |     
                                                                                                                                                                                                                                                                                 |     if (*((rsi + 0x38)) != 0x17) {
    0x0041c791 je 0x41c799                                                                                                                                                                                                                                                       |         
    0x0041c793 mov rbp, qword [r15 + 0x18]                                                                                                                                                                                                                                       |         rbp = *((r15 + 0x18));
    0x0041c797 jmp 0x41c79d                                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |     } else {
    0x0041c799 lea rbp, [r15 + 0x18]                                                                                                                                                                                                                                             |         rbp = r15 + 0x18;
                                                                                                                                                                                                                                                                                 |     }
    0x0041c79d mov rax, qword [r14]                                                                                                                                                                                                                                              |     rax = *(r14);
    0x0041c7a0 mov esi, 0x70                                                                                                                                                                                                                                                     |     esi = 0x70;
    0x0041c7a5 mov rdi, r14                                                                                                                                                                                                                                                      |     rdi = r14;
    0x0041c7a8 call qword [rax + 0x10]                                                                                                                                                                                                                                           |     rax = uint64_t (*rax + 0x10)() ();
    0x0041c7ab mov rbx, rax                                                                                                                                                                                                                                                      |     rbx = rax;
    0x0041c7ae mov qword [rax], 0x41c8f0                                                                                                                                                                                                                                         |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::FixedQueue_int___double__int__bool__bool__BloombergLP::bslmt::Condition___BloombergLP::bdlf::Bind_BoundTuple6_BloombergLP;
    0x0041c7b5 mov rax, qword [r12]                                                                                                                                                                                                                                              |     rax = *(r12);
    0x0041c7b9 mov qword [rbx + 8], rax                                                                                                                                                                                                                                          |     *((rbx + 8)) = rax;
    0x0041c7bd mov rax, qword [r12 + 8]                                                                                                                                                                                                                                          |     rax = *((r12 + 8));
    0x0041c7c2 mov qword [rbx + 0x10], rax                                                                                                                                                                                                                                       |     *((rbx + 0x10)) = rax;
    0x0041c7c6 movsd xmm0, qword [r12 + 0x10]                                                                                                                                                                                                                                    |     xmm0 = *((r12 + 0x10));
    0x0041c7cd movsd qword [rbx + 0x18], xmm0                                                                                                                                                                                                                                    |     *((rbx + 0x18)) = xmm0;
    0x0041c7d2 mov eax, dword [r12 + 0x18]                                                                                                                                                                                                                                       |     eax = *((r12 + 0x18));
    0x0041c7d7 mov dword [rbx + 0x20], eax                                                                                                                                                                                                                                       |     *((rbx + 0x20)) = eax;
    0x0041c7da mov rax, qword [r12 + 0x20]                                                                                                                                                                                                                                       |     rax = *((r12 + 0x20));
    0x0041c7df mov qword [rbx + 0x28], rax                                                                                                                                                                                                                                       |     *((rbx + 0x28)) = rax;
    0x0041c7e3 mov rax, qword [r12 + 0x28]                                                                                                                                                                                                                                       |     rax = *((r12 + 0x28));
    0x0041c7e8 mov qword [rbx + 0x30], rax                                                                                                                                                                                                                                       |     *((rbx + 0x30)) = rax;
    0x0041c7ec mov rax, qword [r12 + 0x30]                                                                                                                                                                                                                                       |     rax = *((r12 + 0x30));
    0x0041c7f1 mov qword [rbx + 0x38], rax                                                                                                                                                                                                                                       |     *((rbx + 0x38)) = rax;
    0x0041c7f5 lea rdi, [rbx + 0x40]                                                                                                                                                                                                                                             |     
    0x0041c7f9 mov qword [rbx + 0x40], 0                                                                                                                                                                                                                                         |     *((rbx + 0x40)) = 0;
    0x0041c801 mov qword [rbx + 0x68], r14                                                                                                                                                                                                                                       |     *((rbx + 0x68)) = r14;
    0x0041c805 movaps xmm0, xmmword [rip + 0x29d04]                                                                                                                                                                                                                              |     xmm0 = .comment;
    0x0041c80c movups xmmword [rbx + 0x58], xmm0                                                                                                                                                                                                                                 |     __asm ("movups xmmword [rbx + 0x58], xmm0");
    0x0041c810 mov ecx, 0x4478f9                                                                                                                                                                                                                                                 |     
    0x0041c815 mov rsi, rbp                                                                                                                                                                                                                                                      |     
    0x0041c818 mov rdx, r13                                                                                                                                                                                                                                                      |     
    0x0041c81b call 0x423990                                                                                                                                                                                                                                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x40, rbp, r13, "string<...>::assign<Iter>(i,j): string too long");
    0x0041c820 mov edx, 0x41fda0                                                                                                                                                                                                                                                 |     
    0x0041c825 mov rdi, qword [rsp]                                                                                                                                                                                                                                              |     
    0x0041c829 mov rsi, r15                                                                                                                                                                                                                                                      |     
    0x0041c82c mov rcx, rbx                                                                                                                                                                                                                                                      |     
    0x0041c82f call 0x4207f0                                                                                                                                                                                                                                                     |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0041c834 mov ebp, eax                                                                                                                                                                                                                                                      |     
    0x0041c836 test eax, eax                                                                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                                                                 |     if (eax != 0) {
    0x0041c838 je 0x41c863                                                                                                                                                                                                                                                       |         
    0x0041c83a cmp qword [rbx + 0x60], 0x17                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |         if (*((rbx + 0x60)) != 0x17) {
    0x0041c83f je 0x41c84f                                                                                                                                                                                                                                                       |             
    0x0041c841 mov rsi, qword [rbx + 0x40]                                                                                                                                                                                                                                       |             rsi = *((rbx + 0x40));
    0x0041c845 mov rdi, qword [rbx + 0x68]                                                                                                                                                                                                                                       |             rdi = *((rbx + 0x68));
    0x0041c849 mov rax, qword [rdi]                                                                                                                                                                                                                                              |             rax = *(rdi);
    0x0041c84c call qword [rax + 0x18]                                                                                                                                                                                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |         }
    0x0041c84f mov qword [rbx + 0x58], 0xffffffffffffffff                                                                                                                                                                                                                        |         *((rbx + 0x58)) = 0xffffffffffffffff;
    0x0041c857 mov rax, qword [r14]                                                                                                                                                                                                                                              |         rax = *(r14);
    0x0041c85a mov rdi, r14                                                                                                                                                                                                                                                      |         rdi = r14;
    0x0041c85d mov rsi, rbx                                                                                                                                                                                                                                                      |         rsi = rbx;
    0x0041c860 call qword [rax + 0x18]                                                                                                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |     }
    0x0041c863 mov eax, ebp                                                                                                                                                                                                                                                      |     eax = ebp;
    0x0041c865 add rsp, 8                                                                                                                                                                                                                                                        |     
    0x0041c869 pop rbx                                                                                                                                                                                                                                                           |     
    0x0041c86a pop r12                                                                                                                                                                                                                                                           |     
    0x0041c86c pop r13                                                                                                                                                                                                                                                           |     
    0x0041c86e pop r14                                                                                                                                                                                                                                                           |     
    0x0041c870 pop r15                                                                                                                                                                                                                                                           |     
    0x0041c872 pop rbp                                                                                                                                                                                                                                                           |     
    0x0041c873 ret                                                                                                                                                                                                                                                               |     return rax;
                                                                                                                                                                                                                                                                                 | }
