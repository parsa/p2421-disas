    ; assembly                                                                                                                                                                                                                                                                       | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                     | /* bdlcc_fixedqueue.t/none @ 0x41a0b0 */
                                                                                                                                                                                                                                                                                     | #include <stdint.h>
                                                                                                                                                                                                                                                                                     |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::FixedQueue_my_WorkRequest____BloombergLP::bdlf::Bind_BoundTuple1_BloombergLP::bdlcc::FixedQueue_my_WorkRequest__ ()           | uint64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf_Nil_void_BloombergLP::bdlcc::FixedQueue_my_WorkRequest_BloombergLP::bdlf::Bind_BoundTuple1_BloombergLP::bdlcc::FixedQueue_my_WorkRequest_ (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                     |     rcx = arg4;
                                                                                                                                                                                                                                                                                     |     rdx = arg3;
                                                                                                                                                                                                                                                                                     |     rsi = arg2;
                                                                                                                                                                                                                                                                                     |     rdi = arg1;
                                                                                                                                                                                                                                                                                     |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::FixedQueue<my_WorkRequest>*), BloombergLP::bdlf::Bind_BoundTuple1<BloombergLP::bdlcc::FixedQueue<my_WorkRequest>*> > >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::FixedQueue<my_WorkRequest>*), BloombergLP::bdlf::Bind_BoundTuple1<BloombergLP::bdlcc::FixedQueue<my_WorkRequest>*> > const&, BloombergLP::bslma::Allocator*) */
    0x0041a0b0 push rbp                                                                                                                                                                                                                                                              |     
    0x0041a0b1 push r15                                                                                                                                                                                                                                                              |     
    0x0041a0b3 push r14                                                                                                                                                                                                                                                              |     
    0x0041a0b5 push r13                                                                                                                                                                                                                                                              |     
    0x0041a0b7 push r12                                                                                                                                                                                                                                                              |     
    0x0041a0b9 push rbx                                                                                                                                                                                                                                                              |     
    0x0041a0ba push rax                                                                                                                                                                                                                                                              |     
    0x0041a0bb mov r14, rcx                                                                                                                                                                                                                                                          |     r14 = rcx;
    0x0041a0be mov r12, rdx                                                                                                                                                                                                                                                          |     r12 = rdx;
    0x0041a0c1 mov r15, rsi                                                                                                                                                                                                                                                          |     r15 = rsi;
    0x0041a0c4 mov qword [rsp], rdi                                                                                                                                                                                                                                                  |     *(rsp) = rdi;
    0x0041a0c8 cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                          |     
                                                                                                                                                                                                                                                                                     |     if (*((rsi + 0x38)) != 0x17) {
    0x0041a0cd je 0x41a0d5                                                                                                                                                                                                                                                           |         
    0x0041a0cf mov r13, qword [r15 + 0x18]                                                                                                                                                                                                                                           |         r13 = *((r15 + 0x18));
    0x0041a0d3 jmp 0x41a0d9                                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |     } else {
    0x0041a0d5 lea r13, [r15 + 0x18]                                                                                                                                                                                                                                                 |         r13 = r15 + 0x18;
                                                                                                                                                                                                                                                                                     |     }
    0x0041a0d9 mov rbp, qword [r15 + 0x30]                                                                                                                                                                                                                                           |     rbp = *((r15 + 0x30));
    0x0041a0dd test r14, r14                                                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                                                     |     if (r14 == 0) {
    0x0041a0e0 jne 0x41a0f6                                                                                                                                                                                                                                                          |         
    0x0041a0e2 mov r14, qword [rip + 0x24bc4f]                                                                                                                                                                                                                                       |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0041a0e9 test r14, r14                                                                                                                                                                                                                                                         |         
                                                                                                                                                                                                                                                                                     |         if (r14 != 0) {
    0x0041a0ec jne 0x41a0f6                                                                                                                                                                                                                                                          |             goto label_0;
                                                                                                                                                                                                                                                                                     |         }
    0x0041a0ee call 0x41ecc0                                                                                                                                                                                                                                                         |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x0041a0f3 mov r14, rax                                                                                                                                                                                                                                                          |         r14 = rax;
                                                                                                                                                                                                                                                                                     |     }
                                                                                                                                                                                                                                                                                     | label_0:
    0x0041a0f6 mov rax, qword [r14]                                                                                                                                                                                                                                                  |     rax = *(r14);
    0x0041a0f9 mov esi, 0x48                                                                                                                                                                                                                                                         |     esi = 0x48;
    0x0041a0fe mov rdi, r14                                                                                                                                                                                                                                                          |     rdi = r14;
    0x0041a101 call qword [rax + 0x10]                                                                                                                                                                                                                                               |     rax = uint64_t (*rax + 0x10)() ();
    0x0041a104 mov rbx, rax                                                                                                                                                                                                                                                          |     rbx = rax;
    0x0041a107 mov qword [rax], 0x41a220                                                                                                                                                                                                                                             |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::FixedQueue_my_WorkRequest____BloombergLP::bdlf::Bind_BoundTuple1_BloombergLP::bdlcc::FixedQueue_my_WorkRequest______::invok;
    0x0041a10e mov rax, qword [r12]                                                                                                                                                                                                                                                  |     rax = *(r12);
    0x0041a112 mov qword [rbx + 8], rax                                                                                                                                                                                                                                              |     *((rbx + 8)) = rax;
    0x0041a116 mov rax, qword [r12 + 8]                                                                                                                                                                                                                                              |     rax = *((r12 + 8));
    0x0041a11b mov qword [rbx + 0x10], rax                                                                                                                                                                                                                                           |     *((rbx + 0x10)) = rax;
    0x0041a11f lea rdi, [rbx + 0x18]                                                                                                                                                                                                                                                 |     
    0x0041a123 mov qword [rbx + 0x18], 0                                                                                                                                                                                                                                             |     *((rbx + 0x18)) = 0;
    0x0041a12b mov qword [rbx + 0x40], r14                                                                                                                                                                                                                                           |     *((rbx + 0x40)) = r14;
    0x0041a12f movaps xmm0, xmmword [rip + 0x2c5ea]                                                                                                                                                                                                                                  |     xmm0 = .comment;
    0x0041a136 movups xmmword [rbx + 0x30], xmm0                                                                                                                                                                                                                                     |     __asm ("movups xmmword [rbx + 0x30], xmm0");
    0x0041a13a mov ecx, 0x447b07                                                                                                                                                                                                                                                     |     
    0x0041a13f mov rsi, r13                                                                                                                                                                                                                                                          |     
    0x0041a142 mov rdx, rbp                                                                                                                                                                                                                                                          |     
    0x0041a145 call 0x423bc0                                                                                                                                                                                                                                                         |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x18, r13, rbp, "string<...>::assign<Iter>(i,j): string too long");
    0x0041a14a mov edx, 0x41ffa0                                                                                                                                                                                                                                                     |     
    0x0041a14f mov rdi, qword [rsp]                                                                                                                                                                                                                                                  |     
    0x0041a153 mov rsi, r15                                                                                                                                                                                                                                                          |     
    0x0041a156 mov rcx, rbx                                                                                                                                                                                                                                                          |     
    0x0041a159 call 0x4209f0                                                                                                                                                                                                                                                         |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0041a15e mov ebp, eax                                                                                                                                                                                                                                                          |     
    0x0041a160 test eax, eax                                                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                                                     |     if (eax != 0) {
    0x0041a162 je 0x41a18d                                                                                                                                                                                                                                                           |         
    0x0041a164 cmp qword [rbx + 0x38], 0x17                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |         if (*((rbx + 0x38)) != 0x17) {
    0x0041a169 je 0x41a179                                                                                                                                                                                                                                                           |             
    0x0041a16b mov rsi, qword [rbx + 0x18]                                                                                                                                                                                                                                           |             rsi = *((rbx + 0x18));
    0x0041a16f mov rdi, qword [rbx + 0x40]                                                                                                                                                                                                                                           |             rdi = *((rbx + 0x40));
    0x0041a173 mov rax, qword [rdi]                                                                                                                                                                                                                                                  |             rax = *(rdi);
    0x0041a176 call qword [rax + 0x18]                                                                                                                                                                                                                                               |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |         }
    0x0041a179 mov qword [rbx + 0x30], 0xffffffffffffffff                                                                                                                                                                                                                            |         *((rbx + 0x30)) = 0xffffffffffffffff;
    0x0041a181 mov rax, qword [r14]                                                                                                                                                                                                                                                  |         rax = *(r14);
    0x0041a184 mov rdi, r14                                                                                                                                                                                                                                                          |         rdi = r14;
    0x0041a187 mov rsi, rbx                                                                                                                                                                                                                                                          |         rsi = rbx;
    0x0041a18a call qword [rax + 0x18]                                                                                                                                                                                                                                               |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |     }
    0x0041a18d mov eax, ebp                                                                                                                                                                                                                                                          |     eax = ebp;
    0x0041a18f add rsp, 8                                                                                                                                                                                                                                                            |     
    0x0041a193 pop rbx                                                                                                                                                                                                                                                               |     
    0x0041a194 pop r12                                                                                                                                                                                                                                                               |     
    0x0041a196 pop r13                                                                                                                                                                                                                                                               |     
    0x0041a198 pop r14                                                                                                                                                                                                                                                               |     
    0x0041a19a pop r15                                                                                                                                                                                                                                                               |     
    0x0041a19c pop rbp                                                                                                                                                                                                                                                               |     
    0x0041a19d ret                                                                                                                                                                                                                                                                   |     return rax;
                                                                                                                                                                                                                                                                                     | }
