    ; assembly                                                                                                                                                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                 | /* bdlcc_fixedqueue.t/assume @ 0x41cf10 */
                                                                                                                                                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                                                                                                                                                 |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::FixedQueue_int___BloombergLP::bsls::AtomicInt__BloombergLP::bslmt::Turnstile___BloombergLP::bdlf::Bind_BoundTup ()        | int64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf_Nil_void_BloombergLP::bdlcc::FixedQueue_int_BloombergLP::bsls::AtomicInt_BloombergLP::bslmt::Turnstile_BloombergLP::bdlf::Bind_BoundTup (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                 |     rcx = arg4;
                                                                                                                                                                                                                                                                                 |     rdx = arg3;
                                                                                                                                                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                                                                                                                                                 |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::FixedQueue<int>*, BloombergLP::bsls::AtomicInt*, BloombergLP::bslmt::Turnstile*), BloombergLP::bdlf::Bind_BoundTuple3<BloombergLP::bdlcc::FixedQueue<int>*, BloombergLP::bsls::AtomicInt*, BloombergLP::bslmt::Turnstile*> > >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::FixedQueue<int>*, BloombergLP::bsls::AtomicInt*, BloombergLP::bslmt::Turnstile*), BloombergLP::bdlf::Bind_BoundTuple3<BloombergLP::bdlcc::FixedQueue<int>*, BloombergLP::bsls::AtomicInt*, BloombergLP::bslmt::Turnstile*> > const&, BloombergLP::bslma::Allocator*) */
    0x0041cf10 push rbp                                                                                                                                                                                                                                                          |     
    0x0041cf11 push r15                                                                                                                                                                                                                                                          |     
    0x0041cf13 push r14                                                                                                                                                                                                                                                          |     
    0x0041cf15 push r13                                                                                                                                                                                                                                                          |     
    0x0041cf17 push r12                                                                                                                                                                                                                                                          |     
    0x0041cf19 push rbx                                                                                                                                                                                                                                                          |     
    0x0041cf1a push rax                                                                                                                                                                                                                                                          |     
    0x0041cf1b mov r14, rcx                                                                                                                                                                                                                                                      |     r14 = rcx;
    0x0041cf1e mov r12, rdx                                                                                                                                                                                                                                                      |     r12 = rdx;
    0x0041cf21 mov r15, rsi                                                                                                                                                                                                                                                      |     r15 = rsi;
    0x0041cf24 mov qword [rsp], rdi                                                                                                                                                                                                                                              |     *(rsp) = rdi;
    0x0041cf28 mov r13, qword [rsi + 0x30]                                                                                                                                                                                                                                       |     r13 = *((rsi + 0x30));
    0x0041cf2c cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                      |     
                                                                                                                                                                                                                                                                                 |     if (*((rsi + 0x38)) != 0x17) {
    0x0041cf31 je 0x41cf39                                                                                                                                                                                                                                                       |         
    0x0041cf33 mov rbp, qword [r15 + 0x18]                                                                                                                                                                                                                                       |         rbp = *((r15 + 0x18));
    0x0041cf37 jmp 0x41cf3d                                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |     } else {
    0x0041cf39 lea rbp, [r15 + 0x18]                                                                                                                                                                                                                                             |         rbp = r15 + 0x18;
                                                                                                                                                                                                                                                                                 |     }
    0x0041cf3d mov rax, qword [r14]                                                                                                                                                                                                                                              |     rax = *(r14);
    0x0041cf40 mov esi, 0x58                                                                                                                                                                                                                                                     |     esi = 0x58;
    0x0041cf45 mov rdi, r14                                                                                                                                                                                                                                                      |     rdi = r14;
    0x0041cf48 call qword [rax + 0x10]                                                                                                                                                                                                                                           |     rax = uint64_t (*rax + 0x10)() ();
    0x0041cf4b mov rbx, rax                                                                                                                                                                                                                                                      |     rbx = rax;
    0x0041cf4e mov qword [rax], 0x41d070                                                                                                                                                                                                                                         |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::FixedQueue_int___BloombergLP::bsls::AtomicInt__BloombergLP::bslmt::Turnstile___BloombergLP::bdlf::Bind_BoundTuple3_Bloombe;
    0x0041cf55 mov rax, qword [r12]                                                                                                                                                                                                                                              |     rax = *(r12);
    0x0041cf59 mov qword [rbx + 8], rax                                                                                                                                                                                                                                          |     *((rbx + 8)) = rax;
    0x0041cf5d mov rax, qword [r12 + 8]                                                                                                                                                                                                                                          |     rax = *((r12 + 8));
    0x0041cf62 mov qword [rbx + 0x10], rax                                                                                                                                                                                                                                       |     *((rbx + 0x10)) = rax;
    0x0041cf66 mov rax, qword [r12 + 0x10]                                                                                                                                                                                                                                       |     rax = *((r12 + 0x10));
    0x0041cf6b mov qword [rbx + 0x18], rax                                                                                                                                                                                                                                       |     *((rbx + 0x18)) = rax;
    0x0041cf6f mov rax, qword [r12 + 0x18]                                                                                                                                                                                                                                       |     rax = *((r12 + 0x18));
    0x0041cf74 mov qword [rbx + 0x20], rax                                                                                                                                                                                                                                       |     *((rbx + 0x20)) = rax;
    0x0041cf78 lea rdi, [rbx + 0x28]                                                                                                                                                                                                                                             |     
    0x0041cf7c mov qword [rbx + 0x28], 0                                                                                                                                                                                                                                         |     *((rbx + 0x28)) = 0;
    0x0041cf84 mov qword [rbx + 0x50], r14                                                                                                                                                                                                                                       |     *((rbx + 0x50)) = r14;
    0x0041cf88 movaps xmm0, xmmword [rip + 0x29581]                                                                                                                                                                                                                              |     xmm0 = .comment;
    0x0041cf8f movups xmmword [rbx + 0x40], xmm0                                                                                                                                                                                                                                 |     __asm ("movups xmmword [rbx + 0x40], xmm0");
    0x0041cf93 mov ecx, 0x4478f9                                                                                                                                                                                                                                                 |     
    0x0041cf98 mov rsi, rbp                                                                                                                                                                                                                                                      |     
    0x0041cf9b mov rdx, r13                                                                                                                                                                                                                                                      |     
    0x0041cf9e call 0x423990                                                                                                                                                                                                                                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x28, rbp, r13, "string<...>::assign<Iter>(i,j): string too long");
    0x0041cfa3 mov edx, 0x41fda0                                                                                                                                                                                                                                                 |     
    0x0041cfa8 mov rdi, qword [rsp]                                                                                                                                                                                                                                              |     
    0x0041cfac mov rsi, r15                                                                                                                                                                                                                                                      |     
    0x0041cfaf mov rcx, rbx                                                                                                                                                                                                                                                      |     
    0x0041cfb2 call 0x4207f0                                                                                                                                                                                                                                                     |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0041cfb7 mov ebp, eax                                                                                                                                                                                                                                                      |     
    0x0041cfb9 test eax, eax                                                                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                                                                 |     if (eax != 0) {
    0x0041cfbb je 0x41cfe6                                                                                                                                                                                                                                                       |         
    0x0041cfbd cmp qword [rbx + 0x48], 0x17                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |         if (*((rbx + 0x48)) != 0x17) {
    0x0041cfc2 je 0x41cfd2                                                                                                                                                                                                                                                       |             
    0x0041cfc4 mov rsi, qword [rbx + 0x28]                                                                                                                                                                                                                                       |             rsi = *((rbx + 0x28));
    0x0041cfc8 mov rdi, qword [rbx + 0x50]                                                                                                                                                                                                                                       |             rdi = *((rbx + 0x50));
    0x0041cfcc mov rax, qword [rdi]                                                                                                                                                                                                                                              |             rax = *(rdi);
    0x0041cfcf call qword [rax + 0x18]                                                                                                                                                                                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |         }
    0x0041cfd2 mov qword [rbx + 0x40], 0xffffffffffffffff                                                                                                                                                                                                                        |         *((rbx + 0x40)) = 0xffffffffffffffff;
    0x0041cfda mov rax, qword [r14]                                                                                                                                                                                                                                              |         rax = *(r14);
    0x0041cfdd mov rdi, r14                                                                                                                                                                                                                                                      |         rdi = r14;
    0x0041cfe0 mov rsi, rbx                                                                                                                                                                                                                                                      |         rsi = rbx;
    0x0041cfe3 call qword [rax + 0x18]                                                                                                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |     }
    0x0041cfe6 mov eax, ebp                                                                                                                                                                                                                                                      |     eax = ebp;
    0x0041cfe8 add rsp, 8                                                                                                                                                                                                                                                        |     
    0x0041cfec pop rbx                                                                                                                                                                                                                                                           |     
    0x0041cfed pop r12                                                                                                                                                                                                                                                           |     
    0x0041cfef pop r13                                                                                                                                                                                                                                                           |     
    0x0041cff1 pop r14                                                                                                                                                                                                                                                           |     
    0x0041cff3 pop r15                                                                                                                                                                                                                                                           |     
    0x0041cff5 pop rbp                                                                                                                                                                                                                                                           |     
    0x0041cff6 ret                                                                                                                                                                                                                                                               |     return rax;
                                                                                                                                                                                                                                                                                 | }
