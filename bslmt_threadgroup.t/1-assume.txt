    ; assembly                                                                                                                                                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                 | /* bslmt_threadgroup.t/assume @ 0x407450 */
                                                                                                                                                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                                                                                                                                                 |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil.createWithAllocator__anonymous_namespace_::u::ThreadChecker::ThreadCheckerFunctor__unsigned_long__BloombergLP::bslmt::ThreadAttributes_const___anonymous_namespace_::u::ThreadChecker::ThreadCheckerFunctor_const ()       | int64_t method_int_BloombergLP::bslmt::ThreadUtil_createWithAllocator_anonymous_namespace_::u::ThreadChecker::ThreadCheckerFunctor_unsigned_long_BloombergLP::bslmt::ThreadAttributes_const_anonymous_namespace_::u::ThreadChecker::ThreadCheckerFunctor_const (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                 |     rcx = arg4;
                                                                                                                                                                                                                                                                                 |     rdx = arg3;
                                                                                                                                                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                                                                                                                                                 |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<(anonymous namespace)::u::ThreadChecker::ThreadCheckerFunctor>(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, (anonymous namespace)::u::ThreadChecker::ThreadCheckerFunctor const&, BloombergLP::bslma::Allocator*) */
    0x00407450 push rbp                                                                                                                                                                                                                                                          |     
    0x00407451 push r15                                                                                                                                                                                                                                                          |     
    0x00407453 push r14                                                                                                                                                                                                                                                          |     
    0x00407455 push r13                                                                                                                                                                                                                                                          |     
    0x00407457 push r12                                                                                                                                                                                                                                                          |     
    0x00407459 push rbx                                                                                                                                                                                                                                                          |     
    0x0040745a push rax                                                                                                                                                                                                                                                          |     
    0x0040745b mov r14, rcx                                                                                                                                                                                                                                                      |     r14 = rcx;
    0x0040745e mov r12, rdx                                                                                                                                                                                                                                                      |     r12 = rdx;
    0x00407461 mov r15, rsi                                                                                                                                                                                                                                                      |     r15 = rsi;
    0x00407464 mov qword [rsp], rdi                                                                                                                                                                                                                                              |     *(rsp) = rdi;
    0x00407468 mov r13, qword [rsi + 0x30]                                                                                                                                                                                                                                       |     r13 = *((rsi + 0x30));
    0x0040746c cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                      |     
                                                                                                                                                                                                                                                                                 |     if (*((rsi + 0x38)) != 0x17) {
    0x00407471 je 0x407479                                                                                                                                                                                                                                                       |         
    0x00407473 mov rbp, qword [r15 + 0x18]                                                                                                                                                                                                                                       |         rbp = *((r15 + 0x18));
    0x00407477 jmp 0x40747d                                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |     } else {
    0x00407479 lea rbp, [r15 + 0x18]                                                                                                                                                                                                                                             |         rbp = r15 + 0x18;
                                                                                                                                                                                                                                                                                 |     }
    0x0040747d mov rax, qword [r14]                                                                                                                                                                                                                                              |     rax = *(r14);
    0x00407480 mov esi, 0x40                                                                                                                                                                                                                                                     |     esi = 0x40;
    0x00407485 mov rdi, r14                                                                                                                                                                                                                                                      |     rdi = r14;
    0x00407488 call qword [rax + 0x10]                                                                                                                                                                                                                                           |     rax = uint64_t (*rax + 0x10)() ();
    0x0040748b mov rbx, rax                                                                                                                                                                                                                                                      |     rbx = rax;
    0x0040748e mov qword [rax], 0x4075a0                                                                                                                                                                                                                                         |     *(rax) = method.BloombergLP::bslmt.EntryPointFunctorAdapter__anonymous_namespace_::u::ThreadChecker::ThreadCheckerFunctor_::invokerFunction_void_;
    0x00407495 mov rax, qword [r12]                                                                                                                                                                                                                                              |     rax = *(r12);
    0x00407499 mov qword [rbx + 8], rax                                                                                                                                                                                                                                          |     *((rbx + 8)) = rax;
    0x0040749d lea rdi, [rbx + 0x10]                                                                                                                                                                                                                                             |     
    0x004074a1 mov qword [rbx + 0x10], 0                                                                                                                                                                                                                                         |     *((rbx + 0x10)) = 0;
    0x004074a9 mov qword [rbx + 0x38], r14                                                                                                                                                                                                                                       |     *((rbx + 0x38)) = r14;
    0x004074ad movaps xmm0, xmmword [rip + 0x2814c]                                                                                                                                                                                                                              |     xmm0 = .comment;
    0x004074b4 movups xmmword [rbx + 0x28], xmm0                                                                                                                                                                                                                                 |     __asm ("movups xmmword [rbx + 0x28], xmm0");
    0x004074b8 mov ecx, 0x42fb18                                                                                                                                                                                                                                                 |     
    0x004074bd mov rsi, rbp                                                                                                                                                                                                                                                      |     
    0x004074c0 mov rdx, r13                                                                                                                                                                                                                                                      |     
    0x004074c3 call 0x40aa20                                                                                                                                                                                                                                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x10, rbp, r13, "string<...>::assign<Iter>(i,j): string too long");
    0x004074c8 mov edx, 0x407980                                                                                                                                                                                                                                                 |     
    0x004074cd mov rdi, qword [rsp]                                                                                                                                                                                                                                              |     
    0x004074d1 mov rsi, r15                                                                                                                                                                                                                                                      |     
    0x004074d4 mov rcx, rbx                                                                                                                                                                                                                                                      |     
    0x004074d7 call 0x4081c0                                                                                                                                                                                                                                                     |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x004074dc mov ebp, eax                                                                                                                                                                                                                                                      |     
    0x004074de test eax, eax                                                                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                                                                 |     if (eax != 0) {
    0x004074e0 je 0x40750b                                                                                                                                                                                                                                                       |         
    0x004074e2 cmp qword [rbx + 0x30], 0x17                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |         if (*((rbx + 0x30)) != 0x17) {
    0x004074e7 je 0x4074f7                                                                                                                                                                                                                                                       |             
    0x004074e9 mov rsi, qword [rbx + 0x10]                                                                                                                                                                                                                                       |             rsi = *((rbx + 0x10));
    0x004074ed mov rdi, qword [rbx + 0x38]                                                                                                                                                                                                                                       |             rdi = *((rbx + 0x38));
    0x004074f1 mov rax, qword [rdi]                                                                                                                                                                                                                                              |             rax = *(rdi);
    0x004074f4 call qword [rax + 0x18]                                                                                                                                                                                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |         }
    0x004074f7 mov qword [rbx + 0x28], 0xffffffffffffffff                                                                                                                                                                                                                        |         *((rbx + 0x28)) = 0xffffffffffffffff;
    0x004074ff mov rax, qword [r14]                                                                                                                                                                                                                                              |         rax = *(r14);
    0x00407502 mov rdi, r14                                                                                                                                                                                                                                                      |         rdi = r14;
    0x00407505 mov rsi, rbx                                                                                                                                                                                                                                                      |         rsi = rbx;
    0x00407508 call qword [rax + 0x18]                                                                                                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |     }
    0x0040750b mov eax, ebp                                                                                                                                                                                                                                                      |     eax = ebp;
    0x0040750d add rsp, 8                                                                                                                                                                                                                                                        |     
    0x00407511 pop rbx                                                                                                                                                                                                                                                           |     
    0x00407512 pop r12                                                                                                                                                                                                                                                           |     
    0x00407514 pop r13                                                                                                                                                                                                                                                           |     
    0x00407516 pop r14                                                                                                                                                                                                                                                           |     
    0x00407518 pop r15                                                                                                                                                                                                                                                           |     
    0x0040751a pop rbp                                                                                                                                                                                                                                                           |     
    0x0040751b ret                                                                                                                                                                                                                                                               |     return rax;
                                                                                                                                                                                                                                                                                 | }
