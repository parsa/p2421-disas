    ; assembly                                                                                                                                                                                                                                                                       | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                     | /* bdlcc_multipriorityqueue.t/none @ 0x42ea30 */
                                                                                                                                                                                                                                                                                     | #include <stdint.h>
                                                                                                                                                                                                                                                                                     |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_MULTIPRIORITYQUEUE_TEST_CASE_9.ConsumerThread__unsigned_long__BloombergLP::bslmt::ThreadAttributes_const__MULTIPRIORITYQUEUE_TEST_CASE_9::ConsumerThread_const__BloombergLP::bslma::Allocato ()           | uint64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_MULTIPRIORITYQUEUE_TEST_CASE_9_ConsumerThread_unsigned_long_BloombergLP::bslmt::ThreadAttributes_const_MULTIPRIORITYQUEUE_TEST_CASE_9::ConsumerThread_const_BloombergLP::bslma::Allocato (int64_t arg4, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                     |     rcx = arg4;
                                                                                                                                                                                                                                                                                     |     rsi = arg2;
                                                                                                                                                                                                                                                                                     |     rdi = arg1;
                                                                                                                                                                                                                                                                                     |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<MULTIPRIORITYQUEUE_TEST_CASE_9::ConsumerThread>(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, MULTIPRIORITYQUEUE_TEST_CASE_9::ConsumerThread const&, BloombergLP::bslma::Allocator*) */
    0x0042ea30 push rbp                                                                                                                                                                                                                                                              |     
    0x0042ea31 push r15                                                                                                                                                                                                                                                              |     
    0x0042ea33 push r14                                                                                                                                                                                                                                                              |     
    0x0042ea35 push r13                                                                                                                                                                                                                                                              |     
    0x0042ea37 push r12                                                                                                                                                                                                                                                              |     
    0x0042ea39 push rbx                                                                                                                                                                                                                                                              |     
    0x0042ea3a push rax                                                                                                                                                                                                                                                              |     
    0x0042ea3b mov r14, rcx                                                                                                                                                                                                                                                          |     r14 = rcx;
    0x0042ea3e mov r15, rsi                                                                                                                                                                                                                                                          |     r15 = rsi;
    0x0042ea41 mov r12, rdi                                                                                                                                                                                                                                                          |     r12 = rdi;
    0x0042ea44 cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                          |     
                                                                                                                                                                                                                                                                                     |     if (*((rsi + 0x38)) != 0x17) {
    0x0042ea49 je 0x42ea51                                                                                                                                                                                                                                                           |         
    0x0042ea4b mov r13, qword [r15 + 0x18]                                                                                                                                                                                                                                           |         r13 = *((r15 + 0x18));
    0x0042ea4f jmp 0x42ea55                                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |     } else {
    0x0042ea51 lea r13, [r15 + 0x18]                                                                                                                                                                                                                                                 |         r13 = r15 + 0x18;
                                                                                                                                                                                                                                                                                     |     }
    0x0042ea55 mov rbp, qword [r15 + 0x30]                                                                                                                                                                                                                                           |     rbp = *((r15 + 0x30));
    0x0042ea59 test r14, r14                                                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                                                     |     if (r14 == 0) {
    0x0042ea5c jne 0x42ea72                                                                                                                                                                                                                                                          |         
    0x0042ea5e mov r14, qword [rip + 0x25cabb]                                                                                                                                                                                                                                       |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0042ea65 test r14, r14                                                                                                                                                                                                                                                         |         
                                                                                                                                                                                                                                                                                     |         if (r14 != 0) {
    0x0042ea68 jne 0x42ea72                                                                                                                                                                                                                                                          |             goto label_0;
                                                                                                                                                                                                                                                                                     |         }
    0x0042ea6a call 0x43ad30                                                                                                                                                                                                                                                         |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x0042ea6f mov r14, rax                                                                                                                                                                                                                                                          |         r14 = rax;
                                                                                                                                                                                                                                                                                     |     }
                                                                                                                                                                                                                                                                                     | label_0:
    0x0042ea72 mov rax, qword [r14]                                                                                                                                                                                                                                                  |     rax = *(r14);
    0x0042ea75 mov esi, 0x40                                                                                                                                                                                                                                                         |     esi = 0x40;
    0x0042ea7a mov rdi, r14                                                                                                                                                                                                                                                          |     rdi = r14;
    0x0042ea7d call qword [rax + 0x10]                                                                                                                                                                                                                                               |     rax = uint64_t (*rax + 0x10)() ();
    0x0042ea80 mov rbx, rax                                                                                                                                                                                                                                                          |     rbx = rax;
    0x0042ea83 mov qword [rax], 0x42eb80                                                                                                                                                                                                                                             |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_MULTIPRIORITYQUEUE_TEST_CASE_9::ConsumerThread_.invokerFunction_void_;
    0x0042ea8a lea rdi, [rax + 0x10]                                                                                                                                                                                                                                                 |     
    0x0042ea8e mov qword [rax + 0x10], 0                                                                                                                                                                                                                                             |     *((rax + 0x10)) = 0;
    0x0042ea96 mov qword [rax + 0x38], r14                                                                                                                                                                                                                                           |     *((rax + 0x38)) = r14;
    0x0042ea9a movaps xmm0, xmmword [rip + 0x34d4f]                                                                                                                                                                                                                                  |     xmm0 = .comment;
    0x0042eaa1 movups xmmword [rax + 0x28], xmm0                                                                                                                                                                                                                                     |     __asm ("movups xmmword [rax + 0x28], xmm0");
    0x0042eaa5 mov ecx, 0x4655c7                                                                                                                                                                                                                                                     |     
    0x0042eaaa mov rsi, r13                                                                                                                                                                                                                                                          |     
    0x0042eaad mov rdx, rbp                                                                                                                                                                                                                                                          |     
    0x0042eab0 call 0x43ed70                                                                                                                                                                                                                                                         |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rax + 0x10, r13, rbp, "string<...>::assign<Iter>(i,j): string too long");
    0x0042eab5 mov edx, 0x43be70                                                                                                                                                                                                                                                     |     
    0x0042eaba mov rdi, r12                                                                                                                                                                                                                                                          |     
    0x0042eabd mov rsi, r15                                                                                                                                                                                                                                                          |     
    0x0042eac0 mov rcx, rbx                                                                                                                                                                                                                                                          |     
    0x0042eac3 call 0x43c800                                                                                                                                                                                                                                                         |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (r12, r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0042eac8 mov ebp, eax                                                                                                                                                                                                                                                          |     
    0x0042eaca test eax, eax                                                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                                                     |     if (eax != 0) {
    0x0042eacc je 0x42eaf7                                                                                                                                                                                                                                                           |         
    0x0042eace cmp qword [rbx + 0x30], 0x17                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |         if (*((rbx + 0x30)) != 0x17) {
    0x0042ead3 je 0x42eae3                                                                                                                                                                                                                                                           |             
    0x0042ead5 mov rsi, qword [rbx + 0x10]                                                                                                                                                                                                                                           |             rsi = *((rbx + 0x10));
    0x0042ead9 mov rdi, qword [rbx + 0x38]                                                                                                                                                                                                                                           |             rdi = *((rbx + 0x38));
    0x0042eadd mov rax, qword [rdi]                                                                                                                                                                                                                                                  |             rax = *(rdi);
    0x0042eae0 call qword [rax + 0x18]                                                                                                                                                                                                                                               |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |         }
    0x0042eae3 mov qword [rbx + 0x28], 0xffffffffffffffff                                                                                                                                                                                                                            |         *((rbx + 0x28)) = 0xffffffffffffffff;
    0x0042eaeb mov rax, qword [r14]                                                                                                                                                                                                                                                  |         rax = *(r14);
    0x0042eaee mov rdi, r14                                                                                                                                                                                                                                                          |         rdi = r14;
    0x0042eaf1 mov rsi, rbx                                                                                                                                                                                                                                                          |         rsi = rbx;
    0x0042eaf4 call qword [rax + 0x18]                                                                                                                                                                                                                                               |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |     }
    0x0042eaf7 mov eax, ebp                                                                                                                                                                                                                                                          |     eax = ebp;
    0x0042eaf9 add rsp, 8                                                                                                                                                                                                                                                            |     
    0x0042eafd pop rbx                                                                                                                                                                                                                                                               |     
    0x0042eafe pop r12                                                                                                                                                                                                                                                               |     
    0x0042eb00 pop r13                                                                                                                                                                                                                                                               |     
    0x0042eb02 pop r14                                                                                                                                                                                                                                                               |     
    0x0042eb04 pop r15                                                                                                                                                                                                                                                               |     
    0x0042eb06 pop rbp                                                                                                                                                                                                                                                               |     
    0x0042eb07 ret                                                                                                                                                                                                                                                                   |     return rax;
                                                                                                                                                                                                                                                                                     | }
