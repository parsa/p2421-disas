    ; assembly                                                                                                                                                                                                                                                                       | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                     | /* bdlcc_multipriorityqueue.t/assume @ 0x42ef10 */
                                                                                                                                                                                                                                                                                     | #include <stdint.h>
                                                                                                                                                                                                                                                                                     |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_MULTIPRIORITYQUEUE_TEST_CASE_9.ProducerThread__unsigned_long__BloombergLP::bslmt::ThreadAttributes_const__MULTIPRIORITYQUEUE_TEST_CASE_9::ProducerThread_const__BloombergLP::bslma::Allocato ()           | int64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_MULTIPRIORITYQUEUE_TEST_CASE_9_ProducerThread_unsigned_long_BloombergLP::bslmt::ThreadAttributes_const_MULTIPRIORITYQUEUE_TEST_CASE_9::ProducerThread_const_BloombergLP::bslma::Allocato (int64_t arg4, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                     |     rcx = arg4;
                                                                                                                                                                                                                                                                                     |     rsi = arg2;
                                                                                                                                                                                                                                                                                     |     rdi = arg1;
                                                                                                                                                                                                                                                                                     |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<MULTIPRIORITYQUEUE_TEST_CASE_9::ProducerThread>(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, MULTIPRIORITYQUEUE_TEST_CASE_9::ProducerThread const&, BloombergLP::bslma::Allocator*) */
    0x0042ef10 push rbp                                                                                                                                                                                                                                                              |     
    0x0042ef11 push r15                                                                                                                                                                                                                                                              |     
    0x0042ef13 push r14                                                                                                                                                                                                                                                              |     
    0x0042ef15 push r13                                                                                                                                                                                                                                                              |     
    0x0042ef17 push r12                                                                                                                                                                                                                                                              |     
    0x0042ef19 push rbx                                                                                                                                                                                                                                                              |     
    0x0042ef1a push rax                                                                                                                                                                                                                                                              |     
    0x0042ef1b mov r14, rcx                                                                                                                                                                                                                                                          |     r14 = rcx;
    0x0042ef1e mov r15, rsi                                                                                                                                                                                                                                                          |     r15 = rsi;
    0x0042ef21 mov r12, rdi                                                                                                                                                                                                                                                          |     r12 = rdi;
    0x0042ef24 mov r13, qword [rsi + 0x30]                                                                                                                                                                                                                                           |     r13 = *((rsi + 0x30));
    0x0042ef28 cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                          |     
                                                                                                                                                                                                                                                                                     |     if (*((rsi + 0x38)) != 0x17) {
    0x0042ef2d je 0x42ef35                                                                                                                                                                                                                                                           |         
    0x0042ef2f mov rbp, qword [r15 + 0x18]                                                                                                                                                                                                                                           |         rbp = *((r15 + 0x18));
    0x0042ef33 jmp 0x42ef39                                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |     } else {
    0x0042ef35 lea rbp, [r15 + 0x18]                                                                                                                                                                                                                                                 |         rbp = r15 + 0x18;
                                                                                                                                                                                                                                                                                     |     }
    0x0042ef39 mov rax, qword [r14]                                                                                                                                                                                                                                                  |     rax = *(r14);
    0x0042ef3c mov esi, 0x40                                                                                                                                                                                                                                                         |     esi = 0x40;
    0x0042ef41 mov rdi, r14                                                                                                                                                                                                                                                          |     rdi = r14;
    0x0042ef44 call qword [rax + 0x10]                                                                                                                                                                                                                                               |     rax = uint64_t (*rax + 0x10)() ();
    0x0042ef47 mov rbx, rax                                                                                                                                                                                                                                                          |     rbx = rax;
    0x0042ef4a mov qword [rax], 0x42f050                                                                                                                                                                                                                                             |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_MULTIPRIORITYQUEUE_TEST_CASE_9::ProducerThread_.invokerFunction_void_;
    0x0042ef51 lea rdi, [rax + 0x10]                                                                                                                                                                                                                                                 |     
    0x0042ef55 mov qword [rax + 0x10], 0                                                                                                                                                                                                                                             |     *((rax + 0x10)) = 0;
    0x0042ef5d mov qword [rax + 0x38], r14                                                                                                                                                                                                                                           |     *((rax + 0x38)) = r14;
    0x0042ef61 movaps xmm0, xmmword [rip + 0x349d8]                                                                                                                                                                                                                                  |     xmm0 = .comment;
    0x0042ef68 movups xmmword [rax + 0x28], xmm0                                                                                                                                                                                                                                     |     __asm ("movups xmmword [rax + 0x28], xmm0");
    0x0042ef6c mov ecx, 0x465719                                                                                                                                                                                                                                                     |     
    0x0042ef71 mov rsi, rbp                                                                                                                                                                                                                                                          |     
    0x0042ef74 mov rdx, r13                                                                                                                                                                                                                                                          |     
    0x0042ef77 call 0x43eef0                                                                                                                                                                                                                                                         |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rax + 0x10, rbp, r13, "string<...>::assign<Iter>(i,j): string too long");
    0x0042ef7c mov edx, 0x43c010                                                                                                                                                                                                                                                     |     
    0x0042ef81 mov rdi, r12                                                                                                                                                                                                                                                          |     
    0x0042ef84 mov rsi, r15                                                                                                                                                                                                                                                          |     
    0x0042ef87 mov rcx, rbx                                                                                                                                                                                                                                                          |     
    0x0042ef8a call 0x43c9a0                                                                                                                                                                                                                                                         |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (r12, r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0042ef8f mov ebp, eax                                                                                                                                                                                                                                                          |     
    0x0042ef91 test eax, eax                                                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                                                     |     if (eax != 0) {
    0x0042ef93 je 0x42efbe                                                                                                                                                                                                                                                           |         
    0x0042ef95 cmp qword [rbx + 0x30], 0x17                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |         if (*((rbx + 0x30)) != 0x17) {
    0x0042ef9a je 0x42efaa                                                                                                                                                                                                                                                           |             
    0x0042ef9c mov rsi, qword [rbx + 0x10]                                                                                                                                                                                                                                           |             rsi = *((rbx + 0x10));
    0x0042efa0 mov rdi, qword [rbx + 0x38]                                                                                                                                                                                                                                           |             rdi = *((rbx + 0x38));
    0x0042efa4 mov rax, qword [rdi]                                                                                                                                                                                                                                                  |             rax = *(rdi);
    0x0042efa7 call qword [rax + 0x18]                                                                                                                                                                                                                                               |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |         }
    0x0042efaa mov qword [rbx + 0x28], 0xffffffffffffffff                                                                                                                                                                                                                            |         *((rbx + 0x28)) = 0xffffffffffffffff;
    0x0042efb2 mov rax, qword [r14]                                                                                                                                                                                                                                                  |         rax = *(r14);
    0x0042efb5 mov rdi, r14                                                                                                                                                                                                                                                          |         rdi = r14;
    0x0042efb8 mov rsi, rbx                                                                                                                                                                                                                                                          |         rsi = rbx;
    0x0042efbb call qword [rax + 0x18]                                                                                                                                                                                                                                               |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |     }
    0x0042efbe mov eax, ebp                                                                                                                                                                                                                                                          |     eax = ebp;
    0x0042efc0 add rsp, 8                                                                                                                                                                                                                                                            |     
    0x0042efc4 pop rbx                                                                                                                                                                                                                                                               |     
    0x0042efc5 pop r12                                                                                                                                                                                                                                                               |     
    0x0042efc7 pop r13                                                                                                                                                                                                                                                               |     
    0x0042efc9 pop r14                                                                                                                                                                                                                                                               |     
    0x0042efcb pop r15                                                                                                                                                                                                                                                               |     
    0x0042efcd pop rbp                                                                                                                                                                                                                                                               |     
    0x0042efce ret                                                                                                                                                                                                                                                                   |     return rax;
                                                                                                                                                                                                                                                                                     | }
