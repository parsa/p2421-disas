    ; assembly                                                                                                                                                                                                                                                                       | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                     | /* bdlcc_multipriorityqueue.t/assume @ 0x42ea20 */
                                                                                                                                                                                                                                                                                     | #include <stdint.h>
                                                                                                                                                                                                                                                                                     |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_MULTIPRIORITYQUEUE_TEST_CASE_9.ConsumerThread__unsigned_long__BloombergLP::bslmt::ThreadAttributes_const__MULTIPRIORITYQUEUE_TEST_CASE_9::ConsumerThread_const__BloombergLP::bslma::Allocato ()           | int64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_MULTIPRIORITYQUEUE_TEST_CASE_9_ConsumerThread_unsigned_long_BloombergLP::bslmt::ThreadAttributes_const_MULTIPRIORITYQUEUE_TEST_CASE_9::ConsumerThread_const_BloombergLP::bslma::Allocato (int64_t arg4, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                     |     rcx = arg4;
                                                                                                                                                                                                                                                                                     |     rsi = arg2;
                                                                                                                                                                                                                                                                                     |     rdi = arg1;
                                                                                                                                                                                                                                                                                     |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<MULTIPRIORITYQUEUE_TEST_CASE_9::ConsumerThread>(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, MULTIPRIORITYQUEUE_TEST_CASE_9::ConsumerThread const&, BloombergLP::bslma::Allocator*) */
    0x0042ea20 push rbp                                                                                                                                                                                                                                                              |     
    0x0042ea21 push r15                                                                                                                                                                                                                                                              |     
    0x0042ea23 push r14                                                                                                                                                                                                                                                              |     
    0x0042ea25 push r13                                                                                                                                                                                                                                                              |     
    0x0042ea27 push r12                                                                                                                                                                                                                                                              |     
    0x0042ea29 push rbx                                                                                                                                                                                                                                                              |     
    0x0042ea2a push rax                                                                                                                                                                                                                                                              |     
    0x0042ea2b mov r14, rcx                                                                                                                                                                                                                                                          |     r14 = rcx;
    0x0042ea2e mov r15, rsi                                                                                                                                                                                                                                                          |     r15 = rsi;
    0x0042ea31 mov r12, rdi                                                                                                                                                                                                                                                          |     r12 = rdi;
    0x0042ea34 mov r13, qword [rsi + 0x30]                                                                                                                                                                                                                                           |     r13 = *((rsi + 0x30));
    0x0042ea38 cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                          |     
                                                                                                                                                                                                                                                                                     |     if (*((rsi + 0x38)) != 0x17) {
    0x0042ea3d je 0x42ea45                                                                                                                                                                                                                                                           |         
    0x0042ea3f mov rbp, qword [r15 + 0x18]                                                                                                                                                                                                                                           |         rbp = *((r15 + 0x18));
    0x0042ea43 jmp 0x42ea49                                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |     } else {
    0x0042ea45 lea rbp, [r15 + 0x18]                                                                                                                                                                                                                                                 |         rbp = r15 + 0x18;
                                                                                                                                                                                                                                                                                     |     }
    0x0042ea49 mov rax, qword [r14]                                                                                                                                                                                                                                                  |     rax = *(r14);
    0x0042ea4c mov esi, 0x40                                                                                                                                                                                                                                                         |     esi = 0x40;
    0x0042ea51 mov rdi, r14                                                                                                                                                                                                                                                          |     rdi = r14;
    0x0042ea54 call qword [rax + 0x10]                                                                                                                                                                                                                                               |     rax = uint64_t (*rax + 0x10)() ();
    0x0042ea57 mov rbx, rax                                                                                                                                                                                                                                                          |     rbx = rax;
    0x0042ea5a mov qword [rax], 0x42eb60                                                                                                                                                                                                                                             |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_MULTIPRIORITYQUEUE_TEST_CASE_9::ConsumerThread_.invokerFunction_void_;
    0x0042ea61 lea rdi, [rax + 0x10]                                                                                                                                                                                                                                                 |     
    0x0042ea65 mov qword [rax + 0x10], 0                                                                                                                                                                                                                                             |     *((rax + 0x10)) = 0;
    0x0042ea6d mov qword [rax + 0x38], r14                                                                                                                                                                                                                                           |     *((rax + 0x38)) = r14;
    0x0042ea71 movaps xmm0, xmmword [rip + 0x34ec8]                                                                                                                                                                                                                                  |     xmm0 = .comment;
    0x0042ea78 movups xmmword [rax + 0x28], xmm0                                                                                                                                                                                                                                     |     __asm ("movups xmmword [rax + 0x28], xmm0");
    0x0042ea7c mov ecx, 0x465719                                                                                                                                                                                                                                                     |     
    0x0042ea81 mov rsi, rbp                                                                                                                                                                                                                                                          |     
    0x0042ea84 mov rdx, r13                                                                                                                                                                                                                                                          |     
    0x0042ea87 call 0x43eef0                                                                                                                                                                                                                                                         |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rax + 0x10, rbp, r13, "string<...>::assign<Iter>(i,j): string too long");
    0x0042ea8c mov edx, 0x43c010                                                                                                                                                                                                                                                     |     
    0x0042ea91 mov rdi, r12                                                                                                                                                                                                                                                          |     
    0x0042ea94 mov rsi, r15                                                                                                                                                                                                                                                          |     
    0x0042ea97 mov rcx, rbx                                                                                                                                                                                                                                                          |     
    0x0042ea9a call 0x43c9a0                                                                                                                                                                                                                                                         |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (r12, r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0042ea9f mov ebp, eax                                                                                                                                                                                                                                                          |     
    0x0042eaa1 test eax, eax                                                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                                                     |     if (eax != 0) {
    0x0042eaa3 je 0x42eace                                                                                                                                                                                                                                                           |         
    0x0042eaa5 cmp qword [rbx + 0x30], 0x17                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |         if (*((rbx + 0x30)) != 0x17) {
    0x0042eaaa je 0x42eaba                                                                                                                                                                                                                                                           |             
    0x0042eaac mov rsi, qword [rbx + 0x10]                                                                                                                                                                                                                                           |             rsi = *((rbx + 0x10));
    0x0042eab0 mov rdi, qword [rbx + 0x38]                                                                                                                                                                                                                                           |             rdi = *((rbx + 0x38));
    0x0042eab4 mov rax, qword [rdi]                                                                                                                                                                                                                                                  |             rax = *(rdi);
    0x0042eab7 call qword [rax + 0x18]                                                                                                                                                                                                                                               |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |         }
    0x0042eaba mov qword [rbx + 0x28], 0xffffffffffffffff                                                                                                                                                                                                                            |         *((rbx + 0x28)) = 0xffffffffffffffff;
    0x0042eac2 mov rax, qword [r14]                                                                                                                                                                                                                                                  |         rax = *(r14);
    0x0042eac5 mov rdi, r14                                                                                                                                                                                                                                                          |         rdi = r14;
    0x0042eac8 mov rsi, rbx                                                                                                                                                                                                                                                          |         rsi = rbx;
    0x0042eacb call qword [rax + 0x18]                                                                                                                                                                                                                                               |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |     }
    0x0042eace mov eax, ebp                                                                                                                                                                                                                                                          |     eax = ebp;
    0x0042ead0 add rsp, 8                                                                                                                                                                                                                                                            |     
    0x0042ead4 pop rbx                                                                                                                                                                                                                                                               |     
    0x0042ead5 pop r12                                                                                                                                                                                                                                                               |     
    0x0042ead7 pop r13                                                                                                                                                                                                                                                               |     
    0x0042ead9 pop r14                                                                                                                                                                                                                                                               |     
    0x0042eadb pop r15                                                                                                                                                                                                                                                               |     
    0x0042eadd pop rbp                                                                                                                                                                                                                                                               |     
    0x0042eade ret                                                                                                                                                                                                                                                                   |     return rax;
                                                                                                                                                                                                                                                                                     | }
