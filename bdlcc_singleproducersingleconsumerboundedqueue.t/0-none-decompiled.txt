    ; assembly                                                                                                                                                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                 | /* bdlcc_singleproducersingleconsumerboundedqueue.t/none @ 0x412660 */
                                                                                                                                                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                                                                                                                                                 |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::SingleProducerSingleConsumerBoundedQueue_my_WorkRequest____BloombergLP::bdlf::Bind_BoundTuple1_BloombergLP::bdlcc ()      | uint64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf_Nil_void_BloombergLP::bdlcc::SingleProducerSingleConsumerBoundedQueue_my_WorkRequest_BloombergLP::bdlf::Bind_BoundTuple1_BloombergLP::bdlcc (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                 |     rcx = arg4;
                                                                                                                                                                                                                                                                                 |     rdx = arg3;
                                                                                                                                                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                                                                                                                                                 |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::SingleProducerSingleConsumerBoundedQueue<my_WorkRequest>*), BloombergLP::bdlf::Bind_BoundTuple1<BloombergLP::bdlcc::SingleProducerSingleConsumerBoundedQueue<my_WorkRequest>*> > >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::SingleProducerSingleConsumerBoundedQueue<my_WorkRequest>*), BloombergLP::bdlf::Bind_BoundTuple1<BloombergLP::bdlcc::SingleProducerSingleConsumerBoundedQueue<my_WorkRequest>*> > const&, BloombergLP::bslma::Allocator*) */
    0x00412660 push rbp                                                                                                                                                                                                                                                          |     
    0x00412661 push r15                                                                                                                                                                                                                                                          |     
    0x00412663 push r14                                                                                                                                                                                                                                                          |     
    0x00412665 push r13                                                                                                                                                                                                                                                          |     
    0x00412667 push r12                                                                                                                                                                                                                                                          |     
    0x00412669 push rbx                                                                                                                                                                                                                                                          |     
    0x0041266a push rax                                                                                                                                                                                                                                                          |     
    0x0041266b mov r14, rcx                                                                                                                                                                                                                                                      |     r14 = rcx;
    0x0041266e mov r12, rdx                                                                                                                                                                                                                                                      |     r12 = rdx;
    0x00412671 mov r15, rsi                                                                                                                                                                                                                                                      |     r15 = rsi;
    0x00412674 mov qword [rsp], rdi                                                                                                                                                                                                                                              |     *(rsp) = rdi;
    0x00412678 cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                      |     
                                                                                                                                                                                                                                                                                 |     if (*((rsi + 0x38)) != 0x17) {
    0x0041267d je 0x412685                                                                                                                                                                                                                                                       |         
    0x0041267f mov r13, qword [r15 + 0x18]                                                                                                                                                                                                                                       |         r13 = *((r15 + 0x18));
    0x00412683 jmp 0x412689                                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |     } else {
    0x00412685 lea r13, [r15 + 0x18]                                                                                                                                                                                                                                             |         r13 = r15 + 0x18;
                                                                                                                                                                                                                                                                                 |     }
    0x00412689 mov rbp, qword [r15 + 0x30]                                                                                                                                                                                                                                       |     rbp = *((r15 + 0x30));
    0x0041268d test r14, r14                                                                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                                                                 |     if (r14 == 0) {
    0x00412690 jne 0x4126a6                                                                                                                                                                                                                                                      |         
    0x00412692 mov r14, qword [rip + 0x24546f]                                                                                                                                                                                                                                   |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00412699 test r14, r14                                                                                                                                                                                                                                                     |         
                                                                                                                                                                                                                                                                                 |         if (r14 != 0) {
    0x0041269c jne 0x4126a6                                                                                                                                                                                                                                                      |             goto label_0;
                                                                                                                                                                                                                                                                                 |         }
    0x0041269e call 0x415090                                                                                                                                                                                                                                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x004126a3 mov r14, rax                                                                                                                                                                                                                                                      |         r14 = rax;
                                                                                                                                                                                                                                                                                 |     }
                                                                                                                                                                                                                                                                                 | label_0:
    0x004126a6 mov rax, qword [r14]                                                                                                                                                                                                                                              |     rax = *(r14);
    0x004126a9 mov esi, 0x48                                                                                                                                                                                                                                                     |     esi = 0x48;
    0x004126ae mov rdi, r14                                                                                                                                                                                                                                                      |     rdi = r14;
    0x004126b1 call qword [rax + 0x10]                                                                                                                                                                                                                                           |     rax = uint64_t (*rax + 0x10)() ();
    0x004126b4 mov rbx, rax                                                                                                                                                                                                                                                      |     rbx = rax;
    0x004126b7 mov qword [rax], 0x4127d0                                                                                                                                                                                                                                         |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::SingleProducerSingleConsumerBoundedQueue_my_WorkRequest____BloombergLP::bdlf::Bind_BoundTuple1_BloombergLP::bdlcc::SinglePro;
    0x004126be mov rax, qword [r12]                                                                                                                                                                                                                                              |     rax = *(r12);
    0x004126c2 mov qword [rbx + 8], rax                                                                                                                                                                                                                                          |     *((rbx + 8)) = rax;
    0x004126c6 mov rax, qword [r12 + 8]                                                                                                                                                                                                                                          |     rax = *((r12 + 8));
    0x004126cb mov qword [rbx + 0x10], rax                                                                                                                                                                                                                                       |     *((rbx + 0x10)) = rax;
    0x004126cf lea rdi, [rbx + 0x18]                                                                                                                                                                                                                                             |     
    0x004126d3 mov qword [rbx + 0x18], 0                                                                                                                                                                                                                                         |     *((rbx + 0x18)) = 0;
    0x004126db mov qword [rbx + 0x40], r14                                                                                                                                                                                                                                       |     *((rbx + 0x40)) = r14;
    0x004126df movaps xmm0, xmmword [rip + 0x2a93a]                                                                                                                                                                                                                              |     xmm0 = .comment;
    0x004126e6 movups xmmword [rbx + 0x30], xmm0                                                                                                                                                                                                                                 |     __asm ("movups xmmword [rbx + 0x30], xmm0");
    0x004126ea mov ecx, 0x43e23e                                                                                                                                                                                                                                                 |     
    0x004126ef mov rsi, r13                                                                                                                                                                                                                                                      |     
    0x004126f2 mov rdx, rbp                                                                                                                                                                                                                                                      |     
    0x004126f5 call 0x419070                                                                                                                                                                                                                                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x18, r13, rbp, "string<...>::assign<Iter>(i,j): string too long");
    0x004126fa mov edx, 0x415fb0                                                                                                                                                                                                                                                 |     
    0x004126ff mov rdi, qword [rsp]                                                                                                                                                                                                                                              |     
    0x00412703 mov rsi, r15                                                                                                                                                                                                                                                      |     
    0x00412706 mov rcx, rbx                                                                                                                                                                                                                                                      |     
    0x00412709 call 0x416680                                                                                                                                                                                                                                                     |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0041270e mov ebp, eax                                                                                                                                                                                                                                                      |     
    0x00412710 test eax, eax                                                                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                                                                 |     if (eax != 0) {
    0x00412712 je 0x41273d                                                                                                                                                                                                                                                       |         
    0x00412714 cmp qword [rbx + 0x38], 0x17                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |         if (*((rbx + 0x38)) != 0x17) {
    0x00412719 je 0x412729                                                                                                                                                                                                                                                       |             
    0x0041271b mov rsi, qword [rbx + 0x18]                                                                                                                                                                                                                                       |             rsi = *((rbx + 0x18));
    0x0041271f mov rdi, qword [rbx + 0x40]                                                                                                                                                                                                                                       |             rdi = *((rbx + 0x40));
    0x00412723 mov rax, qword [rdi]                                                                                                                                                                                                                                              |             rax = *(rdi);
    0x00412726 call qword [rax + 0x18]                                                                                                                                                                                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |         }
    0x00412729 mov qword [rbx + 0x30], 0xffffffffffffffff                                                                                                                                                                                                                        |         *((rbx + 0x30)) = 0xffffffffffffffff;
    0x00412731 mov rax, qword [r14]                                                                                                                                                                                                                                              |         rax = *(r14);
    0x00412734 mov rdi, r14                                                                                                                                                                                                                                                      |         rdi = r14;
    0x00412737 mov rsi, rbx                                                                                                                                                                                                                                                      |         rsi = rbx;
    0x0041273a call qword [rax + 0x18]                                                                                                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |     }
    0x0041273d mov eax, ebp                                                                                                                                                                                                                                                      |     eax = ebp;
    0x0041273f add rsp, 8                                                                                                                                                                                                                                                        |     
    0x00412743 pop rbx                                                                                                                                                                                                                                                           |     
    0x00412744 pop r12                                                                                                                                                                                                                                                           |     
    0x00412746 pop r13                                                                                                                                                                                                                                                           |     
    0x00412748 pop r14                                                                                                                                                                                                                                                           |     
    0x0041274a pop r15                                                                                                                                                                                                                                                           |     
    0x0041274c pop rbp                                                                                                                                                                                                                                                           |     
    0x0041274d ret                                                                                                                                                                                                                                                               |     return rax;
                                                                                                                                                                                                                                                                                 | }
