0000000000417640 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfNoexcept<BloombergLP::bal   |	0000000000417750 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfNoexcept<BloombergLP::bal
0000000000000000: 01	pushq	%rbp									0000000000000000: 01	pushq	%rbp
0000000000000001: 02	pushq	%r15									0000000000000001: 02	pushq	%r15
0000000000000003: 02	pushq	%r14									0000000000000003: 02	pushq	%r14
0000000000000005: 02	pushq	%r13									0000000000000005: 02	pushq	%r13
0000000000000007: 02	pushq	%r12									0000000000000007: 02	pushq	%r12
0000000000000009: 01	pushq	%rbx									0000000000000009: 01	pushq	%rbx
000000000000000a: 04	subq	$24, %rsp							   |	000000000000000a: 01	pushq	%rax
000000000000000e: 03	cmpq	%rdx, %rsi							   |	000000000000000b: 04	movq	%rcx, (%rsp)
0000000000000011: 06	je	0x41771e <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   |	000000000000000f: 03	cmpq	%rdx, %rsi
0000000000000017: 03	movq	%rcx, %r14							   |	0000000000000012: 02	je	0x4177c7 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN
000000000000001a: 03	movq	%rdx, %r15							   |	0000000000000014: 03	movq	%rdx, %r15
000000000000001d: 03	movq	%rsi, %rbx							   |	0000000000000017: 03	movq	%rsi, %r12
0000000000000020: 03	movq	%rdi, %r13							   |	000000000000001a: 03	movq	%rdi, %r13
0000000000000023: 04	addq	$8, %rbx							   |	000000000000001d: 03	xorl	%r14d, %r14d
0000000000000027: 02	xorl	%ebp, %ebp							   |	0000000000000020: 04	movq	(%rsp), %rax
0000000000000029: 03	movq	%rdi, %r12							   |	0000000000000024: 03	movq	(%rax), %rdx
000000000000002c: 02	jmp	0x41769d <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   |	0000000000000027: 03	testq	%rdx, %rdx
000000000000002e: 02	nop									   |	000000000000002a: 02	jne	0x417790 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN
0000000000000030: 04	leaq	-8(%rbx), %rax							   |	000000000000002c: 07	movq	2385325(%rip), %rdx  # 65dd30 <BloombergLP::bslma::Default::s_de
0000000000000034: 03	movl	64(%rbx), %ecx							   |	0000000000000033: 03	testq	%rdx, %rdx
0000000000000037: 05	movl	%ecx, 72(%r12)							   |	0000000000000036: 02	jne	0x417790 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN
000000000000003c: 03	movl	68(%rbx), %ecx							   |	0000000000000038: 05	callq	0x41b110 <BloombergLP::bslma::Default::determineAndReturnDefault
000000000000003f: 05	movl	%ecx, 76(%r12)							   |	000000000000003d: 03	movq	%rax, %rdx
0000000000000044: 04	addq	$80, %r12							   |	0000000000000040: 04	movq	(%r12,%r14), %rax
0000000000000048: 04	addq	$-80, %rbp							   |	0000000000000044: 05	movq	%rax, (%r13,%r14)
000000000000004c: 04	addq	$80, %rbx							   |	0000000000000049: 05	leaq	8(%r12,%r14), %rbx
0000000000000050: 04	addq	$80, %rax							   |	000000000000004e: 05	leaq	8(%r13,%r14), %rbp
0000000000000054: 03	cmpq	%r15, %rax							   |	0000000000000053: 03	movq	%rbp, %rdi
0000000000000057: 06	je	0x41771e <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   |	0000000000000056: 03	movq	%rbx, %rsi
000000000000005d: 03	movq	(%r14), %rax							   |	0000000000000059: 05	callq	0x4166a0 <BloombergLP::bdlb::VariantImp<BloombergLP::bslmf::Type
0000000000000060: 03	testq	%rax, %rax							   |	000000000000005e: 03	movl	64(%rbx), %eax
0000000000000063: 02	jne	0x4176c0 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   |	0000000000000061: 03	movl	%eax, 64(%rbp)
0000000000000065: 07	movq	2381444(%rip), %rax  # 65cd30 <BloombergLP::bslma::Default::s_de   |	0000000000000064: 03	movl	68(%rbx), %eax
000000000000006c: 03	testq	%rax, %rax							   |	0000000000000067: 03	movl	%eax, 68(%rbp)
000000000000006f: 02	jne	0x4176c0 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   |	000000000000006a: 04	addq	$80, %r14
0000000000000071: 05	callq	0x41b050 <BloombergLP::bslma::Default::determineAndReturnDefault   |	000000000000006e: 04	addq	$72, %rbx
0000000000000076: 10	nopw	%cs:(%rax,%rax)							   |	0000000000000072: 03	cmpq	%r15, %rbx
0000000000000080: 04	movq	-8(%rbx), %rcx							   |	0000000000000075: 02	jne	0x417770 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN
0000000000000084: 04	movq	%rcx, (%r12)							   |	0000000000000077: 04	addq	$8, %rsp
0000000000000088: 03	movl	48(%rbx), %ecx							   |	000000000000007b: 01	popq	%rbx
000000000000008b: 05	movl	%ecx, 56(%r12)							   |	000000000000007c: 02	popq	%r12
0000000000000090: 03	testq	%rax, %rax							   |	000000000000007e: 02	popq	%r13
0000000000000093: 02	jne	0x4176f0 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   |	0000000000000080: 02	popq	%r14
0000000000000095: 07	movq	2381396(%rip), %rax  # 65cd30 <BloombergLP::bslma::Default::s_de   |	0000000000000082: 02	popq	%r15
000000000000009c: 03	testq	%rax, %rax							   |	0000000000000084: 01	popq	%rbp
000000000000009f: 02	jne	0x4176f0 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   |	0000000000000085: 01	retq	
00000000000000a1: 05	callq	0x41b050 <BloombergLP::bslma::Default::determineAndReturnDefault   |	0000000000000086: 03	movq	%rax, %rbx
00000000000000a6: 05	movl	56(%r12), %ecx							   |	0000000000000089: 03	testq	%r14, %r14
00000000000000ab: 05	nopl	(%rax,%rax)							   |	000000000000008c: 02	jne	0x4177e6 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN
00000000000000b0: 05	movq	%rax, 64(%r12)							   |	000000000000008e: 03	movq	%rbx, %rdi
00000000000000b5: 02	testl	%ecx, %ecx							   |	0000000000000091: 05	callq	0x403bd0 <_Unwind_Resume@plt>
00000000000000b7: 06	je	0x417670 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   |	0000000000000096: 04	addq	$56, %r13
00000000000000bd: 05	leaq	8(%r12), %rcx							   |	000000000000009a: 02	jmp	0x41780a <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN
00000000000000c2: 05	movq	%rcx, 8(%rsp)							   |	000000000000009c: 04	nopl	(%rax)
00000000000000c7: 05	movq	%rax, 16(%rsp)							   |	00000000000000a0: 08	movq	$-1, -24(%r13)
00000000000000cc: 03	movq	%rbx, %rdi							   |	00000000000000a8: 08	movl	$0, (%r13)
00000000000000cf: 05	leaq	8(%rsp), %rsi							   |	00000000000000b0: 04	addq	$80, %r13
00000000000000d4: 05	callq	0x416760 <bsl::enable_if<(Variant_ReturnValueHelper<BloombergLP:   |	00000000000000b4: 04	addq	$-80, %r14
00000000000000d9: 05	jmp	0x417670 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   |	00000000000000b8: 02	je	0x4177de <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN
00000000000000de: 04	addq	$24, %rsp							   |	00000000000000ba: 04	movl	(%r13), %eax
00000000000000e2: 01	popq	%rbx								   |	00000000000000be: 02	testl	%eax, %eax
00000000000000e3: 02	popq	%r12								   |	00000000000000c0: 02	je	0x417800 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN
00000000000000e5: 02	popq	%r13								   |	00000000000000c2: 03	cmpl	$3, %eax
00000000000000e7: 02	popq	%r14								   |	00000000000000c5: 02	jne	0x4177f8 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN
00000000000000e9: 02	popq	%r15								   |	00000000000000c7: 05	cmpq	$23, -16(%r13)
00000000000000eb: 01	popq	%rbp								   |	00000000000000cc: 02	je	0x4177f0 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN
00000000000000ec: 01	retq									   |	00000000000000ce: 04	movq	-48(%r13), %rsi
00000000000000ed: 03	movq	%rax, %rbx							   |	00000000000000d2: 04	movq	-8(%r13), %rdi
00000000000000f0: 03	testq	%rbp, %rbp							   |	00000000000000d6: 03	movq	(%rdi), %rax
00000000000000f3: 02	jne	0x41773d <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   |	00000000000000d9: 03	callq	*24(%rax)
00000000000000f5: 03	movq	%rbx, %rdi							   |	00000000000000dc: 02	jmp	0x4177f0 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN
00000000000000f8: 05	callq	0x403bd0 <_Unwind_Resume@plt>					   |	00000000000000de: 03	movq	%rax, %rdi
00000000000000fd: 03	negq	%rbp								   |	00000000000000e1: 05	callq	0x415df0 <__clang_call_terminate>
0000000000000100: 04	addq	$56, %r13							   |	00000000000000e6: 10	nopw	%cs:(%rax,%rax)
0000000000000104: 02	jmp	0x41776a <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   <
0000000000000106: 10	nopw	%cs:(%rax,%rax)							   <
0000000000000110: 08	movq	$-1, -24(%r13)							   <
0000000000000118: 08	movl	$0, (%r13)							   <
0000000000000120: 04	addq	$80, %r13							   <
0000000000000124: 04	addq	$-80, %rbp							   <
0000000000000128: 02	je	0x417735 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   <
000000000000012a: 04	movl	(%r13), %eax							   <
000000000000012e: 02	testl	%eax, %eax							   <
0000000000000130: 02	je	0x417760 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   <
0000000000000132: 03	cmpl	$3, %eax							   <
0000000000000135: 02	jne	0x417758 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   <
0000000000000137: 05	cmpq	$23, -16(%r13)							   <
000000000000013c: 02	je	0x417750 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   <
000000000000013e: 04	movq	-48(%r13), %rsi							   <
0000000000000142: 04	movq	-8(%r13), %rdi							   <
0000000000000146: 03	movq	(%rdi), %rax							   <
0000000000000149: 03	callq	*24(%rax)							   <
000000000000014c: 02	jmp	0x417750 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   <
000000000000014e: 03	movq	%rax, %rdi							   <
0000000000000151: 05	callq	0x415e60 <__clang_call_terminate>				   <
0000000000000156: 10	nopw	%cs:(%rax,%rax)							   <
