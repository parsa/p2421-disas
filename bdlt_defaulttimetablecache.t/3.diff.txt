000000000040a6b0 <void BloombergLP::bslalg::ArrayPrimitives::destructiveMoveAndEmplace<bsl::allo   |	000000000040a760 <void BloombergLP::bslalg::ArrayPrimitives::destructiveMoveAndEmplace<bsl::allo
0000000000000000: 01	pushq	%rbp									0000000000000000: 01	pushq	%rbp
0000000000000001: 02	pushq	%r15									0000000000000001: 02	pushq	%r15
0000000000000003: 02	pushq	%r14									0000000000000003: 02	pushq	%r14
0000000000000005: 02	pushq	%r13									0000000000000005: 02	pushq	%r13
0000000000000007: 02	pushq	%r12									0000000000000007: 02	pushq	%r12
0000000000000009: 01	pushq	%rbx									0000000000000009: 01	pushq	%rbx
000000000000000a: 04	subq	$72, %rsp							   |	000000000000000a: 04	subq	$88, %rsp
000000000000000e: 03	movq	%r8, %r12							   |	000000000000000e: 03	movq	%r8, %rbp
0000000000000011: 03	movq	%rcx, %r15							   |	0000000000000011: 03	movq	%rdx, %r14
0000000000000014: 03	movq	%rsi, %rax							   |	0000000000000014: 03	movq	%rdi, %r15
0000000000000017: 05	movq	%rsi, 24(%rsp)							   |	0000000000000017: 08	movq	144(%rsp), %r12
000000000000001c: 03	movq	%rdi, %rbx							   |	000000000000001f: 05	movq	%rsi, 40(%rsp)
000000000000001f: 08	movq	128(%rsp), %rsi							   |	0000000000000024: 03	movq	%r8, (%rsi)
0000000000000027: 03	movq	%r8, (%rax)							   |	0000000000000027: 03	movq	%rcx, %rdx
000000000000002a: 03	movq	%rcx, %rbp							   |	000000000000002a: 03	subq	%r14, %rdx
000000000000002d: 05	movq	%rdx, 16(%rsp)							   |	000000000000002d: 03	movq	%rdx, %rax
0000000000000032: 03	subq	%rdx, %rbp							   |	0000000000000030: 04	sarq	$4, %rax
0000000000000035: 04	leaq	(%rdi,%rbp), %r13						   |	0000000000000034: 10	movabsq	$-6148914691236517205, %rbx
0000000000000039: 05	movq	%r9, 40(%rsp)							   |	000000000000003e: 04	imulq	%rax, %rbx
000000000000003e: 03	movq	(%r9), %rax							   |	0000000000000042: 04	leaq	(%rdi,%rdx), %r13
0000000000000041: 04	movq	40(%rsi), %rcx							   |	0000000000000046: 05	movq	%r9, 32(%rsp)
0000000000000045: 05	movq	%rcx, 40(%rdi,%rbp)						   |	000000000000004b: 03	movq	(%r9), %rax
000000000000004a: 02	movl	(%rsi), %ecx							   |	000000000000004e: 05	movq	40(%r12), %rsi
000000000000004c: 03	movl	%ecx, (%rdi,%rbp)						   |	0000000000000053: 05	movq	%rsi, 40(%rdi,%rdx)
000000000000004f: 04	addq	$8, %rsi							   |	0000000000000058: 04	movl	(%r12), %esi
0000000000000053: 05	leaq	8(%rdi,%rbp), %rdi						   |	000000000000005c: 05	movq	%rdx, 80(%rsp)
0000000000000058: 04	movq	%rax, (%rsp)							   |	0000000000000061: 03	movl	%esi, (%rdi,%rdx)
000000000000005c: 03	movq	%rsp, %rdx							   |	0000000000000064: 03	testq	%rax, %rax
000000000000005f: 05	callq	0x409110 <bsl::vector<BloombergLP::bdlt::Timetable_CompactableTr   |	0000000000000067: 05	movq	%rcx, 8(%rsp)
0000000000000064: 05	movq	%rbp, 48(%rsp)							   |	000000000000006c: 02	jne	0x40a7e4 <void BloombergLP::bslalg::ArrayPrimitives::destructive
0000000000000069: 05	leaq	48(%rbx,%rbp), %r14						   |	000000000000006e: 07	movq	2528803(%rip), %rax  # 673df8 <BloombergLP::bslma::Default::s_de
000000000000006e: 05	movq	%r12, 32(%rsp)							   |	0000000000000075: 03	testq	%rax, %rax
0000000000000073: 03	cmpq	%r12, %r15							   |	0000000000000078: 02	jne	0x40a7df <void BloombergLP::bslalg::ArrayPrimitives::destructive
0000000000000076: 05	movq	24(%rsp), %r12							   |	000000000000007a: 05	callq	0x418350 <BloombergLP::bslma::Default::determineAndReturnDefault
000000000000007b: 06	je	0x40a7e0 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	000000000000007f: 05	movq	8(%rsp), %rcx
0000000000000081: 05	movq	%r14, 8(%rsp)							   |	0000000000000084: 04	addq	$8, %r12
0000000000000086: 05	movq	48(%rsp), %rax							   |	0000000000000088: 04	leaq	(%rbx,%rbx,2), %rbx
000000000000008b: 04	sarq	$4, %rax							   |	000000000000008c: 04	shlq	$4, %rbx
000000000000008f: 10	movabsq	$-6148914691236517205, %rcx					   |	0000000000000090: 05	leaq	8(%r15,%rbx), %rdi
0000000000000099: 04	imulq	%rax, %rcx							   |	0000000000000095: 05	movq	%rax, 16(%rsp)
000000000000009d: 05	movq	%rcx, 56(%rsp)							   |	000000000000009a: 05	leaq	16(%rsp), %rdx
00000000000000a2: 05	movq	40(%rsp), %rax							   |	000000000000009f: 03	movq	%r12, %rsi
00000000000000a7: 03	movq	(%rax), %rax							   |	00000000000000a2: 03	movq	%rcx, %r12
00000000000000aa: 05	movq	%rax, 64(%rsp)							   |	00000000000000a5: 05	callq	0x409130 <bsl::vector<BloombergLP::bdlt::Timetable_CompactableTr
00000000000000af: 05	movq	32(%rsp), %r14							   |	00000000000000aa: 04	leaq	48(%r13), %rax
00000000000000b4: 03	subq	%r15, %r14							   |	00000000000000ae: 03	cmpq	%rbp, %r12
00000000000000b7: 02	xorl	%ebp, %ebp							   |	00000000000000b1: 03	movq	%rax, %r12
00000000000000b9: 03	xorl	%r12d, %r12d							   |	00000000000000b4: 06	je	0x40a8de <void BloombergLP::bslalg::ArrayPrimitives::destructive
00000000000000bc: 04	nopl	(%rax)								   |	00000000000000ba: 05	movq	%rbx, 48(%rsp)
00000000000000c0: 05	movq	40(%r15,%r12), %rax						   |	00000000000000bf: 05	movq	%r14, 64(%rsp)
00000000000000c5: 05	movq	%rax, 88(%r13,%r12)						   |	00000000000000c4: 05	movq	%r12, 24(%rsp)
00000000000000ca: 04	movl	(%r15,%r12), %eax						   |	00000000000000c9: 05	movq	32(%rsp), %rax
00000000000000ce: 05	movl	%eax, 48(%r13,%r12)						   |	00000000000000ce: 03	movq	(%rax), %r14
00000000000000d3: 05	leaq	8(%r15,%r12), %rsi						   |	00000000000000d1: 05	movq	%rbp, 56(%rsp)
00000000000000d8: 05	leaq	56(%r13,%r12), %rdi						   |	00000000000000d6: 05	movq	8(%rsp), %rbx
00000000000000dd: 05	movq	64(%rsp), %rax							   |	00000000000000db: 03	subq	%rbx, %rbp
00000000000000e2: 04	movq	%rax, (%rsp)							   |	00000000000000de: 05	movq	%rbp, 72(%rsp)
00000000000000e6: 03	movq	%rsp, %rdx							   |	00000000000000e3: 02	xorl	%ebp, %ebp
00000000000000e9: 05	callq	0x409110 <bsl::vector<BloombergLP::bdlt::Timetable_CompactableTr   |	00000000000000e5: 03	xorl	%r12d, %r12d
00000000000000ee: 04	addq	$48, %r12							   |	00000000000000e8: 08	nopl	(%rax,%rax)
00000000000000f2: 03	decq	%rbp								   |	00000000000000f0: 05	movq	40(%rbx,%r12), %rax
00000000000000f5: 03	cmpq	%r12, %r14							   |	00000000000000f5: 05	movq	%rax, 88(%r13,%r12)
00000000000000f8: 02	jne	0x40a770 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	00000000000000fa: 04	movl	(%rbx,%r12), %eax
00000000000000fa: 03	movq	%r15, %rbp							   |	00000000000000fe: 05	movl	%eax, 48(%r13,%r12)
00000000000000fd: 05	movq	8(%rsp), %r14							   |	0000000000000103: 03	movq	%r14, %rax
0000000000000102: 05	movq	24(%rsp), %r12							   |	0000000000000106: 03	testq	%r14, %r14
0000000000000107: 02	jmp	0x40a7cb <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	0000000000000109: 02	jne	0x40a880 <void BloombergLP::bslalg::ArrayPrimitives::destructive
0000000000000109: 07	nopl	(%rax)								   |	000000000000010b: 07	movq	2528646(%rip), %rax  # 673df8 <BloombergLP::bslma::Default::s_de
0000000000000110: 04	addq	$48, %rbp							   |	0000000000000112: 03	testq	%rax, %rax
0000000000000114: 05	cmpq	%rbp, 32(%rsp)							   |	0000000000000115: 02	jne	0x40a880 <void BloombergLP::bslalg::ArrayPrimitives::destructive
0000000000000119: 02	je	0x40a7e0 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	0000000000000117: 05	callq	0x418350 <BloombergLP::bslma::Default::determineAndReturnDefault
000000000000011b: 04	movq	8(%rbp), %rsi							   |	000000000000011c: 04	nopl	(%rax)
000000000000011f: 03	testq	%rsi, %rsi							   |	0000000000000120: 05	leaq	8(%rbx,%r12), %rsi
0000000000000122: 02	je	0x40a7c0 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	0000000000000125: 05	leaq	56(%r13,%r12), %rdi
0000000000000124: 04	movq	32(%rbp), %rdi							   |	000000000000012a: 05	movq	%rax, 16(%rsp)
0000000000000128: 03	movq	(%rdi), %rax							   |	000000000000012f: 05	leaq	16(%rsp), %rdx
000000000000012b: 03	callq	*24(%rax)							   |	0000000000000134: 05	callq	0x409130 <bsl::vector<BloombergLP::bdlt::Timetable_CompactableTr
000000000000012e: 02	jmp	0x40a7c0 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	0000000000000139: 04	addq	$48, %r12
0000000000000130: 04	movq	%r15, (%r12)							   |	000000000000013d: 03	decq	%rbp
0000000000000134: 05	cmpq	%r15, 16(%rsp)							   |	0000000000000140: 05	cmpq	%r12, 72(%rsp)
0000000000000139: 06	je	0x40a87e <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	0000000000000145: 02	jne	0x40a850 <void BloombergLP::bslalg::ArrayPrimitives::destructive
000000000000013f: 05	movq	32(%rsp), %rax							   |	0000000000000147: 05	movq	24(%rsp), %r12
0000000000000144: 03	subq	%r15, %rax							   |	000000000000014c: 05	movq	64(%rsp), %r14
0000000000000147: 03	addq	%rax, %r14							   |	0000000000000151: 05	movq	56(%rsp), %rbp
000000000000014a: 05	movq	%r14, 8(%rsp)							   |	0000000000000156: 02	jmp	0x40a8c9 <void BloombergLP::bslalg::ArrayPrimitives::destructive
000000000000014f: 05	movq	40(%rsp), %rax							   |	0000000000000158: 08	nopl	(%rax,%rax)
0000000000000154: 03	movq	(%rax), %r14							   |	0000000000000160: 04	addq	$48, %rbx
0000000000000157: 02	xorl	%ebp, %ebp							   |	0000000000000164: 03	cmpq	%rbx, %rbp
0000000000000159: 03	movq	%rsp, %r12							   |	0000000000000167: 02	je	0x40a8de <void BloombergLP::bslalg::ArrayPrimitives::destructive
000000000000015c: 04	nopl	(%rax)								   |	0000000000000169: 04	movq	8(%rbx), %rsi
0000000000000160: 05	movq	16(%rsp), %rcx							   |	000000000000016d: 03	testq	%rsi, %rsi
0000000000000165: 05	movq	40(%rcx,%rbp), %rax						   |	0000000000000170: 02	je	0x40a8c0 <void BloombergLP::bslalg::ArrayPrimitives::destructive
000000000000016a: 05	movq	%rax, 40(%rbx,%rbp)						   |	0000000000000172: 04	movq	32(%rbx), %rdi
000000000000016f: 03	movl	(%rcx,%rbp), %eax						   |	0000000000000176: 03	movq	(%rdi), %rax
0000000000000172: 03	movl	%eax, (%rbx,%rbp)						   |	0000000000000179: 03	callq	*24(%rax)
0000000000000175: 05	leaq	8(%rcx,%rbp), %rsi						   |	000000000000017c: 02	jmp	0x40a8c0 <void BloombergLP::bslalg::ArrayPrimitives::destructive
000000000000017a: 05	leaq	8(%rbx,%rbp), %rdi						   |	000000000000017e: 05	movq	8(%rsp), %rax
000000000000017f: 04	movq	%r14, (%rsp)							   |	0000000000000183: 05	movq	40(%rsp), %rcx
0000000000000183: 03	movq	%r12, %rdx							   |	0000000000000188: 03	movq	%rax, (%rcx)
0000000000000186: 05	callq	0x409110 <bsl::vector<BloombergLP::bdlt::Timetable_CompactableTr   |	000000000000018b: 03	cmpq	%rax, %r14
000000000000018b: 04	addq	$48, %rbp							   |	000000000000018e: 06	je	0x40a990 <void BloombergLP::bslalg::ArrayPrimitives::destructive
000000000000018f: 05	cmpq	%rbp, 48(%rsp)							   |	0000000000000194: 05	subq	8(%rsp), %rbp
0000000000000194: 02	jne	0x40a810 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	0000000000000199: 03	addq	%rbp, %r12
0000000000000196: 05	movq	16(%rsp), %rbx							   |	000000000000019c: 05	movq	%r12, 24(%rsp)
000000000000019b: 05	movq	24(%rsp), %r12							   |	00000000000001a1: 05	movq	32(%rsp), %rax
00000000000001a0: 02	jmp	0x40a869 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	00000000000001a6: 03	movq	(%rax), %rbx
00000000000001a2: 10	nopw	%cs:(%rax,%rax)							   |	00000000000001a9: 02	xorl	%ebp, %ebp
00000000000001ac: 04	nopl	(%rax)								   |	00000000000001ab: 05	leaq	16(%rsp), %r12
00000000000001b0: 04	addq	$48, %rbx							   |	00000000000001b0: 05	movq	40(%r14,%rbp), %rax
00000000000001b4: 03	cmpq	%rbx, %r15							   |	00000000000001b5: 05	movq	%rax, 40(%r15,%rbp)
00000000000001b7: 02	je	0x40a87e <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	00000000000001ba: 04	movl	(%r14,%rbp), %eax
00000000000001b9: 04	movq	8(%rbx), %rsi							   |	00000000000001be: 04	movl	%eax, (%r15,%rbp)
00000000000001bd: 03	testq	%rsi, %rsi							   |	00000000000001c2: 03	movq	%rbx, %rax
00000000000001c0: 02	je	0x40a860 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	00000000000001c5: 03	testq	%rbx, %rbx
00000000000001c2: 04	movq	32(%rbx), %rdi							   |	00000000000001c8: 02	jne	0x40a940 <void BloombergLP::bslalg::ArrayPrimitives::destructive
00000000000001c6: 03	movq	(%rdi), %rax							   |	00000000000001ca: 07	movq	2528455(%rip), %rax  # 673df8 <BloombergLP::bslma::Default::s_de
00000000000001c9: 03	callq	*24(%rax)							   |	00000000000001d1: 03	testq	%rax, %rax
00000000000001cc: 02	jmp	0x40a860 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	00000000000001d4: 02	jne	0x40a940 <void BloombergLP::bslalg::ArrayPrimitives::destructive
00000000000001ce: 05	movq	16(%rsp), %rax							   |	00000000000001d6: 05	callq	0x418350 <BloombergLP::bslma::Default::determineAndReturnDefault
00000000000001d3: 04	movq	%rax, (%r12)							   |	00000000000001db: 05	nopl	(%rax,%rax)
00000000000001d7: 04	addq	$72, %rsp							   |	00000000000001e0: 05	leaq	8(%r14,%rbp), %rsi
00000000000001db: 01	popq	%rbx								   |	00000000000001e5: 05	leaq	8(%r15,%rbp), %rdi
00000000000001dc: 02	popq	%r12								   |	00000000000001ea: 05	movq	%rax, 16(%rsp)
00000000000001de: 02	popq	%r13								   |	00000000000001ef: 03	movq	%r12, %rdx
00000000000001e0: 02	popq	%r14								   |	00000000000001f2: 05	callq	0x409130 <bsl::vector<BloombergLP::bdlt::Timetable_CompactableTr
00000000000001e2: 02	popq	%r15								   |	00000000000001f7: 04	addq	$48, %rbp
00000000000001e4: 01	popq	%rbp								   |	00000000000001fb: 05	cmpq	%rbp, 80(%rsp)
00000000000001e5: 01	retq									   |	0000000000000200: 02	jne	0x40a910 <void BloombergLP::bslalg::ArrayPrimitives::destructive
00000000000001e6: 03	movq	%rax, %rdi							   |	0000000000000202: 03	movq	%r14, %rbx
00000000000001e9: 05	callq	0x406000 <__clang_call_terminate>				   |	0000000000000205: 02	jmp	0x40a97b <void BloombergLP::bslalg::ArrayPrimitives::destructive
00000000000001ee: 03	movq	%rax, %rdi							   |	0000000000000207: 09	nopw	(%rax,%rax)
00000000000001f1: 05	callq	0x406000 <__clang_call_terminate>				   |	0000000000000210: 04	addq	$48, %rbx
00000000000001f6: 03	movq	%rax, %r14							   |	0000000000000214: 05	cmpq	%rbx, 8(%rsp)
00000000000001f9: 03	testq	%rbp, %rbp							   |	0000000000000219: 02	je	0x40a990 <void BloombergLP::bslalg::ArrayPrimitives::destructive
00000000000001fc: 02	jne	0x40a8bd <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	000000000000021b: 04	movq	8(%rbx), %rsi
00000000000001fe: 05	cmpq	8(%rsp), %r13							   |	000000000000021f: 03	testq	%rsi, %rsi
0000000000000203: 02	jne	0x40a8fe <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	0000000000000222: 02	je	0x40a970 <void BloombergLP::bslalg::ArrayPrimitives::destructive
0000000000000205: 03	movq	%r14, %rdi							   |	0000000000000224: 04	movq	32(%rbx), %rdi
0000000000000208: 05	callq	0x403b50 <_Unwind_Resume@plt>					   |	0000000000000228: 03	movq	(%rdi), %rax
000000000000020d: 04	addq	$32, %rbx							   |	000000000000022b: 03	callq	*24(%rax)
0000000000000211: 02	jmp	0x40a8da <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	000000000000022e: 02	jmp	0x40a970 <void BloombergLP::bslalg::ArrayPrimitives::destructive
0000000000000213: 10	nopw	%cs:(%rax,%rax)							   |	0000000000000230: 05	movq	40(%rsp), %rax
000000000000021d: 03	nopl	(%rax)								   |	0000000000000235: 03	movq	%r14, (%rax)
0000000000000220: 04	addq	$48, %rbx							   |	0000000000000238: 04	addq	$88, %rsp
0000000000000224: 04	addq	$-48, %rbp							   |	000000000000023c: 01	popq	%rbx
0000000000000228: 02	je	0x40a8ae <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	000000000000023d: 02	popq	%r12
000000000000022a: 04	movq	-24(%rbx), %rsi							   |	000000000000023f: 02	popq	%r13
000000000000022e: 03	testq	%rsi, %rsi							   |	0000000000000241: 02	popq	%r14
0000000000000231: 02	je	0x40a8d0 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	0000000000000243: 02	popq	%r15
0000000000000233: 03	movq	(%rbx), %rdi							   |	0000000000000245: 01	popq	%rbp
0000000000000236: 03	movq	(%rdi), %rax							   |	0000000000000246: 01	retq	
0000000000000239: 03	callq	*24(%rax)							   |	0000000000000247: 03	movq	%rax, %rdi
000000000000023c: 02	jmp	0x40a8d0 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	000000000000024a: 05	callq	0x406000 <__clang_call_terminate>
000000000000023e: 03	movq	%rax, %rdi							   |	000000000000024f: 03	movq	%rax, %rdi
0000000000000241: 05	callq	0x406000 <__clang_call_terminate>				   |	0000000000000252: 05	callq	0x406000 <__clang_call_terminate>
0000000000000246: 03	movq	%rax, %r14							   |	0000000000000257: 03	movq	%rax, %r14
0000000000000249: 03	testq	%rbp, %rbp							   |	000000000000025a: 03	testq	%rbp, %rbp
000000000000024c: 02	jne	0x40a92e <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	000000000000025d: 02	jne	0x40a9ce <void BloombergLP::bslalg::ArrayPrimitives::destructive
000000000000024e: 05	movq	8(%rsp), %rbx							   |	000000000000025f: 05	cmpq	24(%rsp), %r13
0000000000000253: 02	jmp	0x40a919 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	0000000000000264: 02	jne	0x40aa0e <void BloombergLP::bslalg::ArrayPrimitives::destructive
0000000000000255: 10	nopw	%cs:(%rax,%rax)							   |	0000000000000266: 03	movq	%r14, %rdi
000000000000025f: 01	nop									   |	0000000000000269: 05	callq	0x403b50 <_Unwind_Resume@plt>
0000000000000260: 04	addq	$48, %r13							   |	000000000000026e: 04	addq	$32, %r15
0000000000000264: 03	cmpq	%r13, %rbx							   |	0000000000000272: 02	jmp	0x40a9ea <void BloombergLP::bslalg::ArrayPrimitives::destructive
0000000000000267: 02	je	0x40a8b5 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	0000000000000274: 10	nopw	%cs:(%rax,%rax)
0000000000000269: 04	movq	8(%r13), %rsi							   |	000000000000027e: 02	nop	
000000000000026d: 03	testq	%rsi, %rsi							   |	0000000000000280: 04	addq	$48, %r15
0000000000000270: 02	je	0x40a910 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	0000000000000284: 04	addq	$-48, %rbp
0000000000000272: 04	movq	32(%r13), %rdi							   |	0000000000000288: 02	je	0x40a9bf <void BloombergLP::bslalg::ArrayPrimitives::destructive
0000000000000276: 03	movq	(%rdi), %rax							   |	000000000000028a: 04	movq	-24(%r15), %rsi
0000000000000279: 03	callq	*24(%rax)							   |	000000000000028e: 03	testq	%rsi, %rsi
000000000000027c: 02	jmp	0x40a910 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	0000000000000291: 02	je	0x40a9e0 <void BloombergLP::bslalg::ArrayPrimitives::destructive
000000000000027e: 05	movq	56(%rsp), %rax							   |	0000000000000293: 03	movq	(%r15), %rdi
0000000000000283: 04	leaq	(%rax,%rax,2), %rax						   |	0000000000000296: 03	movq	(%rdi), %rax
0000000000000287: 04	shlq	$4, %rax							   |	0000000000000299: 03	callq	*24(%rax)
000000000000028b: 05	leaq	80(%rax,%rbx), %rbx						   |	000000000000029c: 02	jmp	0x40a9e0 <void BloombergLP::bslalg::ArrayPrimitives::destructive
0000000000000290: 02	jmp	0x40a95a <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	000000000000029e: 03	movq	%rax, %rdi
0000000000000292: 10	nopw	%cs:(%rax,%rax)							   |	00000000000002a1: 05	callq	0x406000 <__clang_call_terminate>
000000000000029c: 04	nopl	(%rax)								   |	00000000000002a6: 03	movq	%rax, %r14
00000000000002a0: 04	addq	$48, %rbx							   |	00000000000002a9: 03	testq	%rbp, %rbp
00000000000002a4: 04	addq	$-48, %r12							   |	00000000000002ac: 02	jne	0x40aa3e <void BloombergLP::bslalg::ArrayPrimitives::destructive
00000000000002a8: 02	je	0x40a8fe <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	00000000000002ae: 05	movq	24(%rsp), %rbx
00000000000002aa: 04	movq	-24(%rbx), %rsi							   |	00000000000002b3: 02	jmp	0x40aa29 <void BloombergLP::bslalg::ArrayPrimitives::destructive
00000000000002ae: 03	testq	%rsi, %rsi							   |	00000000000002b5: 10	nopw	%cs:(%rax,%rax)
00000000000002b1: 02	je	0x40a950 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	00000000000002bf: 01	nop	
00000000000002b3: 03	movq	(%rbx), %rdi							   |	00000000000002c0: 04	addq	$48, %r13
00000000000002b6: 03	movq	(%rdi), %rax							   |	00000000000002c4: 03	cmpq	%r13, %rbx
00000000000002b9: 03	callq	*24(%rax)							   |	00000000000002c7: 02	je	0x40a9c6 <void BloombergLP::bslalg::ArrayPrimitives::destructive
00000000000002bc: 02	jmp	0x40a950 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	00000000000002c9: 04	movq	8(%r13), %rsi
00000000000002be: 03	movq	%rax, %rdi							   |	00000000000002cd: 03	testq	%rsi, %rsi
00000000000002c1: 05	callq	0x406000 <__clang_call_terminate>				   |	00000000000002d0: 02	je	0x40aa20 <void BloombergLP::bslalg::ArrayPrimitives::destructive
00000000000002c6: 03	movq	%rax, %rdi							   |	00000000000002d2: 04	movq	32(%r13), %rdi
00000000000002c9: 05	callq	0x406000 <__clang_call_terminate>				   |	00000000000002d6: 03	movq	(%rdi), %rax
00000000000002ce: 02	nop									   |	00000000000002d9: 03	callq	*24(%rax)
												   >	00000000000002dc: 02	jmp	0x40aa20 <void BloombergLP::bslalg::ArrayPrimitives::destructive
												   >	00000000000002de: 05	movq	48(%rsp), %rax
												   >	00000000000002e3: 05	leaq	80(%rax,%r15), %rbx
												   >	00000000000002e8: 02	jmp	0x40aa5a <void BloombergLP::bslalg::ArrayPrimitives::destructive
												   >	00000000000002ea: 06	nopw	(%rax,%rax)
												   >	00000000000002f0: 04	addq	$48, %rbx
												   >	00000000000002f4: 04	addq	$-48, %r12
												   >	00000000000002f8: 02	je	0x40aa0e <void BloombergLP::bslalg::ArrayPrimitives::destructive
												   >	00000000000002fa: 04	movq	-24(%rbx), %rsi
												   >	00000000000002fe: 03	testq	%rsi, %rsi
												   >	0000000000000301: 02	je	0x40aa50 <void BloombergLP::bslalg::ArrayPrimitives::destructive
												   >	0000000000000303: 03	movq	(%rbx), %rdi
												   >	0000000000000306: 03	movq	(%rdi), %rax
												   >	0000000000000309: 03	callq	*24(%rax)
												   >	000000000000030c: 02	jmp	0x40aa50 <void BloombergLP::bslalg::ArrayPrimitives::destructive
												   >	000000000000030e: 03	movq	%rax, %rdi
												   >	0000000000000311: 05	callq	0x406000 <__clang_call_terminate>
												   >	0000000000000316: 03	movq	%rax, %rdi
												   >	0000000000000319: 05	callq	0x406000 <__clang_call_terminate>
												   >	000000000000031e: 02	nop	
