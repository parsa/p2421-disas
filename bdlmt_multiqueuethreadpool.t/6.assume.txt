    ; assembly                                                                                                                                                               | /* r2dec pseudo code output */
                                                                                                                                                                             | /* bdlmt_multiqueuethreadpool.t/assume @ 0x4311d0 */
                                                                                                                                                                             | #include <stdint.h>
                                                                                                                                                                             |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil.createWithAllocator_Case27DrainThread__unsigned_long__Case27DrainThread_const__BloombergLP::bslma::Allocator_ ()       | int64_t method_int_BloombergLP::bslmt::ThreadUtil_createWithAllocator_Case27DrainThread_unsigned_long_Case27DrainThread_const_BloombergLP::bslma::Allocator_ (int64_t arg3, int64_t arg2, int64_t arg1) {
                                                                                                                                                                             |     int64_t var_18h;
                                                                                                                                                                             |     uint32_t var_38h;
                                                                                                                                                                             |     int64_t var_40h;
                                                                                                                                                                             |     rdx = arg3;
                                                                                                                                                                             |     rsi = arg2;
                                                                                                                                                                             |     rdi = arg1;
                                                                                                                                                                             |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<Case27DrainThread>(unsigned long*, Case27DrainThread const&, BloombergLP::bslma::Allocator*) */
    0x004311d0 push rbp                                                                                                                                                      |     
    0x004311d1 push r15                                                                                                                                                      |     
    0x004311d3 push r14                                                                                                                                                      |     
    0x004311d5 push rbx                                                                                                                                                      |     
    0x004311d6 sub rsp, 0x48                                                                                                                                                 |     
    0x004311da mov r14, rdx                                                                                                                                                  |     r14 = rdx;
    0x004311dd mov rbp, rsi                                                                                                                                                  |     
    0x004311e0 mov r15, rdi                                                                                                                                                  |     r15 = rdi;
    0x004311e3 mov rax, qword [rdx]                                                                                                                                          |     rax = *(rdx);
    0x004311e6 mov esi, 0x40                                                                                                                                                 |     esi = 0x40;
    0x004311eb mov rdi, rdx                                                                                                                                                  |     rdi = rdx;
    0x004311ee call qword [rax + 0x10]                                                                                                                                       |     rax = uint64_t (*rax + 0x10)(void, void, void) (rbx, r14, r15);
    0x004311f1 mov rbx, rax                                                                                                                                                  |     rbx = rax;
    0x004311f4 mov qword [rax], 0x431340                                                                                                                                     |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_Case27DrainThread_.invokerFunction_void_;
    0x004311fb mov rax, qword [rbp]                                                                                                                                          |     rax = *(rbp);
    0x004311ff mov qword [rbx + 8], rax                                                                                                                                      |     *((rbx + 8)) = rax;
    0x00431203 lea rdi, [rbx + 0x10]                                                                                                                                         |     
    0x00431207 mov qword [rbx + 0x10], 0                                                                                                                                     |     *((rbx + 0x10)) = 0;
    0x0043120f mov qword [rbx + 0x38], r14                                                                                                                                   |     *((rbx + 0x38)) = r14;
    0x00431213 movaps xmm0, xmmword [rip + 0x31826]                                                                                                                          |     xmm0 = .comment;
    0x0043121a movups xmmword [rbx + 0x28], xmm0                                                                                                                             |     __asm ("movups xmmword [rbx + 0x28], xmm0");
    0x0043121e mov ecx, 0x465f55                                                                                                                                             |     
    0x00431223 xor esi, esi                                                                                                                                                  |     
    0x00431225 xor edx, edx                                                                                                                                                  |     
    0x00431227 call 0x43f270                                                                                                                                                 |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x10, 0, 0, "string<...>::assign<Iter>(i,j): string too long");
    0x0043122c mov rdi, rsp                                                                                                                                                  |     
    0x0043122f call 0x43aa00                                                                                                                                                 |     BloombergLP::bslmt::ThreadAttributes::ThreadAttributes() (rsp);
    0x00431234 mov rsi, rsp                                                                                                                                                  |     
    0x00431237 mov edx, 0x43a2b0                                                                                                                                             |     
    0x0043123c mov rdi, r15                                                                                                                                                  |     
    0x0043123f mov rcx, rbx                                                                                                                                                  |     
    0x00431242 call 0x43b200                                                                                                                                                 |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (r15, rsp, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x00431247 mov ebp, eax                                                                                                                                                  |     
    0x00431249 cmp qword [rsp + 0x38], 0x17                                                                                                                                  |     
                                                                                                                                                                             |     if (*((rsp + 0x38)) != 0x17) {
    0x0043124f je 0x431261                                                                                                                                                   |         
    0x00431251 mov rsi, qword [rsp + 0x18]                                                                                                                                   |         rsi = *((rsp + 0x18));
    0x00431256 mov rdi, qword [rsp + 0x40]                                                                                                                                   |         rdi = *((rsp + 0x40));
    0x0043125b mov rax, qword [rdi]                                                                                                                                          |         rax = *(rdi);
    0x0043125e call qword [rax + 0x18]                                                                                                                                       |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                             |     }
    0x00431261 test ebp, ebp                                                                                                                                                 |     
                                                                                                                                                                             |     if (ebp != 0) {
    0x00431263 je 0x43128e                                                                                                                                                   |         
    0x00431265 cmp qword [rbx + 0x30], 0x17                                                                                                                                  |         
                                                                                                                                                                             |         if (*((rbx + 0x30)) != 0x17) {
    0x0043126a je 0x43127a                                                                                                                                                   |             
    0x0043126c mov rsi, qword [rbx + 0x10]                                                                                                                                   |             rsi = *((rbx + 0x10));
    0x00431270 mov rdi, qword [rbx + 0x38]                                                                                                                                   |             rdi = *((rbx + 0x38));
    0x00431274 mov rax, qword [rdi]                                                                                                                                          |             rax = *(rdi);
    0x00431277 call qword [rax + 0x18]                                                                                                                                       |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                             |         }
    0x0043127a mov qword [rbx + 0x28], 0xffffffffffffffff                                                                                                                    |         *((rbx + 0x28)) = 0xffffffffffffffff;
    0x00431282 mov rax, qword [r14]                                                                                                                                          |         rax = *(r14);
    0x00431285 mov rdi, r14                                                                                                                                                  |         rdi = r14;
    0x00431288 mov rsi, rbx                                                                                                                                                  |         rsi = rbx;
    0x0043128b call qword [rax + 0x18]                                                                                                                                       |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                             |     }
    0x0043128e mov eax, ebp                                                                                                                                                  |     eax = ebp;
    0x00431290 add rsp, 0x48                                                                                                                                                 |     
    0x00431294 pop rbx                                                                                                                                                       |     
    0x00431295 pop r14                                                                                                                                                       |     
    0x00431297 pop r15                                                                                                                                                       |     
    0x00431299 pop rbp                                                                                                                                                       |     
    0x0043129a ret                                                                                                                                                           |     return rax;
                                                                                                                                                                             | }
