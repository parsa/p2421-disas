    ; assembly                                                                                                                                                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                 | /* bslmt_rwmutex.t/assume @ 0x40af20 */
                                                                                                                                                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                                                                                                                                                 |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_ReadWaitThread_BloombergLP::bslmt.RWMutex____unsigned_long__BloombergLP::bslmt::ThreadAttributes_const__ReadWaitThread_BloombergLP::bslmt::RWMutex__const__BloombergLP::bslma::Allocator_ ()          | int64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_ReadWaitThread_BloombergLP::bslmt_RWMutex_unsigned_long_BloombergLP::bslmt::ThreadAttributes_const_ReadWaitThread_BloombergLP::bslmt::RWMutex_const_BloombergLP::bslma::Allocator_ (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                 |     rcx = arg4;
                                                                                                                                                                                                                                                                                 |     rdx = arg3;
                                                                                                                                                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                                                                                                                                                 |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<ReadWaitThread<BloombergLP::bslmt::RWMutex> >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, ReadWaitThread<BloombergLP::bslmt::RWMutex> const&, BloombergLP::bslma::Allocator*) */
    0x0040af20 push rbp                                                                                                                                                                                                                                                          |     
    0x0040af21 push r15                                                                                                                                                                                                                                                          |     
    0x0040af23 push r14                                                                                                                                                                                                                                                          |     
    0x0040af25 push r13                                                                                                                                                                                                                                                          |     
    0x0040af27 push r12                                                                                                                                                                                                                                                          |     
    0x0040af29 push rbx                                                                                                                                                                                                                                                          |     
    0x0040af2a push rax                                                                                                                                                                                                                                                          |     
    0x0040af2b mov r14, rcx                                                                                                                                                                                                                                                      |     r14 = rcx;
    0x0040af2e mov r12, rdx                                                                                                                                                                                                                                                      |     r12 = rdx;
    0x0040af31 mov r15, rsi                                                                                                                                                                                                                                                      |     r15 = rsi;
    0x0040af34 mov qword [rsp], rdi                                                                                                                                                                                                                                              |     *(rsp) = rdi;
    0x0040af38 mov r13, qword [rsi + 0x30]                                                                                                                                                                                                                                       |     r13 = *((rsi + 0x30));
    0x0040af3c cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                      |     
                                                                                                                                                                                                                                                                                 |     if (*((rsi + 0x38)) != 0x17) {
    0x0040af41 je 0x40af49                                                                                                                                                                                                                                                       |         
    0x0040af43 mov rbp, qword [r15 + 0x18]                                                                                                                                                                                                                                       |         rbp = *((r15 + 0x18));
    0x0040af47 jmp 0x40af4d                                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |     } else {
    0x0040af49 lea rbp, [r15 + 0x18]                                                                                                                                                                                                                                             |         rbp = r15 + 0x18;
                                                                                                                                                                                                                                                                                 |     }
    0x0040af4d mov rax, qword [r14]                                                                                                                                                                                                                                              |     rax = *(r14);
    0x0040af50 mov esi, 0x50                                                                                                                                                                                                                                                     |     esi = 0x50;
    0x0040af55 mov rdi, r14                                                                                                                                                                                                                                                      |     rdi = r14;
    0x0040af58 call qword [rax + 0x10]                                                                                                                                                                                                                                           |     rax = uint64_t (*rax + 0x10)() ();
    0x0040af5b mov rbx, rax                                                                                                                                                                                                                                                      |     rbx = rax;
    0x0040af5e mov qword [rax], 0x40b070                                                                                                                                                                                                                                         |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_ReadWaitThread_BloombergLP::bslmt::RWMutex___.invokerFunction_void_;
    0x0040af65 movups xmm0, xmmword [r12]                                                                                                                                                                                                                                        |     __asm ("movups xmm0, xmmword [r12]");
    0x0040af6a movups xmmword [rax + 8], xmm0                                                                                                                                                                                                                                    |     __asm ("movups xmmword [rax + 8], xmm0");
    0x0040af6e mov rax, qword [r12 + 0x10]                                                                                                                                                                                                                                       |     rax = *((r12 + 0x10));
    0x0040af73 mov qword [rbx + 0x18], rax                                                                                                                                                                                                                                       |     *((rbx + 0x18)) = rax;
    0x0040af77 lea rdi, [rbx + 0x20]                                                                                                                                                                                                                                             |     
    0x0040af7b mov qword [rbx + 0x20], 0                                                                                                                                                                                                                                         |     *((rbx + 0x20)) = 0;
    0x0040af83 mov qword [rbx + 0x48], r14                                                                                                                                                                                                                                       |     *((rbx + 0x48)) = r14;
    0x0040af87 movaps xmm0, xmmword [rip + 0x27c22]                                                                                                                                                                                                                              |     xmm0 = .comment;
    0x0040af8e movups xmmword [rbx + 0x38], xmm0                                                                                                                                                                                                                                 |     __asm ("movups xmmword [rbx + 0x38], xmm0");
    0x0040af92 mov ecx, 0x4330c9                                                                                                                                                                                                                                                 |     
    0x0040af97 mov rsi, rbp                                                                                                                                                                                                                                                      |     
    0x0040af9a mov rdx, r13                                                                                                                                                                                                                                                      |     
    0x0040af9d call 0x40f220                                                                                                                                                                                                                                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x20, rbp, r13, "string<...>::assign<Iter>(i,j): string too long");
    0x0040afa2 mov edx, 0x40c1e0                                                                                                                                                                                                                                                 |     
    0x0040afa7 mov rdi, qword [rsp]                                                                                                                                                                                                                                              |     
    0x0040afab mov rsi, r15                                                                                                                                                                                                                                                      |     
    0x0040afae mov rcx, rbx                                                                                                                                                                                                                                                      |     
    0x0040afb1 call 0x40d1b0                                                                                                                                                                                                                                                     |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0040afb6 mov ebp, eax                                                                                                                                                                                                                                                      |     
    0x0040afb8 test eax, eax                                                                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                                                                 |     if (eax != 0) {
    0x0040afba je 0x40afe5                                                                                                                                                                                                                                                       |         
    0x0040afbc cmp qword [rbx + 0x40], 0x17                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |         if (*((rbx + 0x40)) != 0x17) {
    0x0040afc1 je 0x40afd1                                                                                                                                                                                                                                                       |             
    0x0040afc3 mov rsi, qword [rbx + 0x20]                                                                                                                                                                                                                                       |             rsi = *((rbx + 0x20));
    0x0040afc7 mov rdi, qword [rbx + 0x48]                                                                                                                                                                                                                                       |             rdi = *((rbx + 0x48));
    0x0040afcb mov rax, qword [rdi]                                                                                                                                                                                                                                              |             rax = *(rdi);
    0x0040afce call qword [rax + 0x18]                                                                                                                                                                                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |         }
    0x0040afd1 mov qword [rbx + 0x38], 0xffffffffffffffff                                                                                                                                                                                                                        |         *((rbx + 0x38)) = 0xffffffffffffffff;
    0x0040afd9 mov rax, qword [r14]                                                                                                                                                                                                                                              |         rax = *(r14);
    0x0040afdc mov rdi, r14                                                                                                                                                                                                                                                      |         rdi = r14;
    0x0040afdf mov rsi, rbx                                                                                                                                                                                                                                                      |         rsi = rbx;
    0x0040afe2 call qword [rax + 0x18]                                                                                                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |     }
    0x0040afe5 mov eax, ebp                                                                                                                                                                                                                                                      |     eax = ebp;
    0x0040afe7 add rsp, 8                                                                                                                                                                                                                                                        |     
    0x0040afeb pop rbx                                                                                                                                                                                                                                                           |     
    0x0040afec pop r12                                                                                                                                                                                                                                                           |     
    0x0040afee pop r13                                                                                                                                                                                                                                                           |     
    0x0040aff0 pop r14                                                                                                                                                                                                                                                           |     
    0x0040aff2 pop r15                                                                                                                                                                                                                                                           |     
    0x0040aff4 pop rbp                                                                                                                                                                                                                                                           |     
    0x0040aff5 ret                                                                                                                                                                                                                                                               |     return rax;
                                                                                                                                                                                                                                                                                 | }
