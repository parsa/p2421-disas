    ; assembly                                                                                                                                                                                                                                       | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                     | /* bslmt_rwmutex.t/none @ 0x409800 */
                                                                                                                                                                                                                                                     | #include <stdint.h>
                                                                                                                                                                                                                                                     |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_PingPongReader_BloombergLP::bslmt.ReaderWriterLock____unsigned_long__PingPongReader_BloombergLP::bslmt::ReaderWriterLock__const__BloombergLP::bslma::Allocator_ ()        | uint64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_PingPongReader_BloombergLP::bslmt_ReaderWriterLock_unsigned_long_PingPongReader_BloombergLP::bslmt::ReaderWriterLock_const_BloombergLP::bslma::Allocator_ (int64_t arg3, int64_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                     |     int64_t var_18h;
                                                                                                                                                                                                                                                     |     uint32_t var_38h;
                                                                                                                                                                                                                                                     |     int64_t var_40h;
                                                                                                                                                                                                                                                     |     rdx = arg3;
                                                                                                                                                                                                                                                     |     rsi = arg2;
                                                                                                                                                                                                                                                     |     rdi = arg1;
                                                                                                                                                                                                                                                     |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<PingPongReader<BloombergLP::bslmt::ReaderWriterLock> >(unsigned long*, PingPongReader<BloombergLP::bslmt::ReaderWriterLock> const&, BloombergLP::bslma::Allocator*) */
    0x00409800 push rbp                                                                                                                                                                                                                              |     
    0x00409801 push r15                                                                                                                                                                                                                              |     
    0x00409803 push r14                                                                                                                                                                                                                              |     
    0x00409805 push rbx                                                                                                                                                                                                                              |     
    0x00409806 sub rsp, 0x48                                                                                                                                                                                                                         |     
    0x0040980a mov r14, rdx                                                                                                                                                                                                                          |     r14 = rdx;
    0x0040980d mov rbp, rsi                                                                                                                                                                                                                          |     
    0x00409810 mov r15, rdi                                                                                                                                                                                                                          |     r15 = rdi;
    0x00409813 test rdx, rdx                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                     |     if (rdx == 0) {
    0x00409816 jne 0x40982c                                                                                                                                                                                                                          |         
    0x00409818 mov r14, qword [rip + 0x241151]                                                                                                                                                                                                       |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040981f test r14, r14                                                                                                                                                                                                                         |         
                                                                                                                                                                                                                                                     |         if (r14 != 0) {
    0x00409822 jne 0x40982c                                                                                                                                                                                                                          |             goto label_0;
                                                                                                                                                                                                                                                     |         }
    0x00409824 call 0x432700                                                                                                                                                                                                                         |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x00409829 mov r14, rax                                                                                                                                                                                                                          |         r14 = rax;
                                                                                                                                                                                                                                                     |     }
                                                                                                                                                                                                                                                     | label_0:
    0x0040982c mov rax, qword [r14]                                                                                                                                                                                                                  |     rax = *(r14);
    0x0040982f mov esi, 0x60                                                                                                                                                                                                                         |     esi = 0x60;
    0x00409834 mov rdi, r14                                                                                                                                                                                                                          |     rdi = r14;
    0x00409837 call qword [rax + 0x10]                                                                                                                                                                                                               |     rax = uint64_t (*rax + 0x10)() ();
    0x0040983a mov rbx, rax                                                                                                                                                                                                                          |     rbx = rax;
    0x0040983d mov qword [rax], 0x4099a0                                                                                                                                                                                                             |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_PingPongReader_BloombergLP::bslmt::ReaderWriterLock___.invokerFunction_void_;
    0x00409844 movups xmm0, xmmword [rbp]                                                                                                                                                                                                            |     __asm ("movups xmm0, xmmword [rbp]");
    0x00409848 movups xmm1, xmmword [rbp + 0x10]                                                                                                                                                                                                     |     __asm ("movups xmm1, xmmword [rbp + 0x10]");
    0x0040984c movups xmmword [rax + 8], xmm0                                                                                                                                                                                                        |     __asm ("movups xmmword [rax + 8], xmm0");
    0x00409850 movups xmmword [rax + 0x18], xmm1                                                                                                                                                                                                     |     __asm ("movups xmmword [rax + 0x18], xmm1");
    0x00409854 mov rax, qword [rbp + 0x20]                                                                                                                                                                                                           |     rax = *((rbp + 0x20));
    0x00409858 mov qword [rbx + 0x28], rax                                                                                                                                                                                                           |     *((rbx + 0x28)) = rax;
    0x0040985c lea rdi, [rbx + 0x30]                                                                                                                                                                                                                 |     
    0x00409860 mov qword [rbx + 0x30], 0                                                                                                                                                                                                             |     *((rbx + 0x30)) = 0;
    0x00409868 mov qword [rbx + 0x58], r14                                                                                                                                                                                                           |     *((rbx + 0x58)) = r14;
    0x0040986c movaps xmm0, xmmword [rip + 0x2954d]                                                                                                                                                                                                  |     xmm0 = .comment;
    0x00409873 movups xmmword [rbx + 0x48], xmm0                                                                                                                                                                                                     |     __asm ("movups xmmword [rbx + 0x48], xmm0");
    0x00409877 mov ecx, 0x4332d5                                                                                                                                                                                                                     |     
    0x0040987c xor esi, esi                                                                                                                                                                                                                          |     
    0x0040987e xor edx, edx                                                                                                                                                                                                                          |     
    0x00409880 call 0x40f410                                                                                                                                                                                                                         |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x30, 0, 0, "string<...>::assign<Iter>(i,j): string too long");
    0x00409885 mov rdi, rsp                                                                                                                                                                                                                          |     
    0x00409888 call 0x40ce90                                                                                                                                                                                                                         |     BloombergLP::bslmt::ThreadAttributes::ThreadAttributes() (rsp);
    0x0040988d mov rsi, rsp                                                                                                                                                                                                                          |     
    0x00409890 mov edx, 0x40c3b0                                                                                                                                                                                                                     |     
    0x00409895 mov rdi, r15                                                                                                                                                                                                                          |     
    0x00409898 mov rcx, rbx                                                                                                                                                                                                                          |     
    0x0040989b call 0x40d380                                                                                                                                                                                                                         |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (r15, rsp, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x004098a0 mov ebp, eax                                                                                                                                                                                                                          |     
    0x004098a2 cmp qword [rsp + 0x38], 0x17                                                                                                                                                                                                          |     
                                                                                                                                                                                                                                                     |     if (*((rsp + 0x38)) != 0x17) {
    0x004098a8 je 0x4098ba                                                                                                                                                                                                                           |         
    0x004098aa mov rsi, qword [rsp + 0x18]                                                                                                                                                                                                           |         rsi = *((rsp + 0x18));
    0x004098af mov rdi, qword [rsp + 0x40]                                                                                                                                                                                                           |         rdi = *((rsp + 0x40));
    0x004098b4 mov rax, qword [rdi]                                                                                                                                                                                                                  |         rax = *(rdi);
    0x004098b7 call qword [rax + 0x18]                                                                                                                                                                                                               |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                     |     }
    0x004098ba test ebp, ebp                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                     |     if (ebp != 0) {
    0x004098bc je 0x4098e7                                                                                                                                                                                                                           |         
    0x004098be cmp qword [rbx + 0x50], 0x17                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                     |         if (*((rbx + 0x50)) != 0x17) {
    0x004098c3 je 0x4098d3                                                                                                                                                                                                                           |             
    0x004098c5 mov rsi, qword [rbx + 0x30]                                                                                                                                                                                                           |             rsi = *((rbx + 0x30));
    0x004098c9 mov rdi, qword [rbx + 0x58]                                                                                                                                                                                                           |             rdi = *((rbx + 0x58));
    0x004098cd mov rax, qword [rdi]                                                                                                                                                                                                                  |             rax = *(rdi);
    0x004098d0 call qword [rax + 0x18]                                                                                                                                                                                                               |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                     |         }
    0x004098d3 mov qword [rbx + 0x48], 0xffffffffffffffff                                                                                                                                                                                            |         *((rbx + 0x48)) = 0xffffffffffffffff;
    0x004098db mov rax, qword [r14]                                                                                                                                                                                                                  |         rax = *(r14);
    0x004098de mov rdi, r14                                                                                                                                                                                                                          |         rdi = r14;
    0x004098e1 mov rsi, rbx                                                                                                                                                                                                                          |         rsi = rbx;
    0x004098e4 call qword [rax + 0x18]                                                                                                                                                                                                               |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                     |     }
    0x004098e7 mov eax, ebp                                                                                                                                                                                                                          |     eax = ebp;
    0x004098e9 add rsp, 0x48                                                                                                                                                                                                                         |     
    0x004098ed pop rbx                                                                                                                                                                                                                               |     
    0x004098ee pop r14                                                                                                                                                                                                                               |     
    0x004098f0 pop r15                                                                                                                                                                                                                               |     
    0x004098f2 pop rbp                                                                                                                                                                                                                               |     
    0x004098f3 ret                                                                                                                                                                                                                                   |     return rax;
                                                                                                                                                                                                                                                     | }
