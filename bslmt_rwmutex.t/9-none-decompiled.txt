    ; assembly                                                                                                                                                                                                                                                           | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                         | /* bslmt_rwmutex.t/none @ 0x40aba0 */
                                                                                                                                                                                                                                                                         | #include <stdint.h>
                                                                                                                                                                                                                                                                         |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_ReadThread_BloombergLP::bslmt.RWMutex____unsigned_long__BloombergLP::bslmt::ThreadAttributes_const__ReadThread_BloombergLP::bslmt::RWMutex__const__BloombergLP::bslma::Allocator_ ()          | uint64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_ReadThread_BloombergLP::bslmt_RWMutex_unsigned_long_BloombergLP::bslmt::ThreadAttributes_const_ReadThread_BloombergLP::bslmt::RWMutex_const_BloombergLP::bslma::Allocator_ (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                         |     rcx = arg4;
                                                                                                                                                                                                                                                                         |     rdx = arg3;
                                                                                                                                                                                                                                                                         |     rsi = arg2;
                                                                                                                                                                                                                                                                         |     rdi = arg1;
                                                                                                                                                                                                                                                                         |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<ReadThread<BloombergLP::bslmt::RWMutex> >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, ReadThread<BloombergLP::bslmt::RWMutex> const&, BloombergLP::bslma::Allocator*) */
    0x0040aba0 push rbp                                                                                                                                                                                                                                                  |     
    0x0040aba1 push r15                                                                                                                                                                                                                                                  |     
    0x0040aba3 push r14                                                                                                                                                                                                                                                  |     
    0x0040aba5 push r13                                                                                                                                                                                                                                                  |     
    0x0040aba7 push r12                                                                                                                                                                                                                                                  |     
    0x0040aba9 push rbx                                                                                                                                                                                                                                                  |     
    0x0040abaa push rax                                                                                                                                                                                                                                                  |     
    0x0040abab mov r14, rcx                                                                                                                                                                                                                                              |     r14 = rcx;
    0x0040abae mov r12, rdx                                                                                                                                                                                                                                              |     r12 = rdx;
    0x0040abb1 mov r15, rsi                                                                                                                                                                                                                                              |     r15 = rsi;
    0x0040abb4 mov qword [rsp], rdi                                                                                                                                                                                                                                      |     *(rsp) = rdi;
    0x0040abb8 cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                              |     
                                                                                                                                                                                                                                                                         |     if (*((rsi + 0x38)) != 0x17) {
    0x0040abbd je 0x40abc5                                                                                                                                                                                                                                               |         
    0x0040abbf mov r13, qword [r15 + 0x18]                                                                                                                                                                                                                               |         r13 = *((r15 + 0x18));
    0x0040abc3 jmp 0x40abc9                                                                                                                                                                                                                                              |         
                                                                                                                                                                                                                                                                         |     } else {
    0x0040abc5 lea r13, [r15 + 0x18]                                                                                                                                                                                                                                     |         r13 = r15 + 0x18;
                                                                                                                                                                                                                                                                         |     }
    0x0040abc9 mov rbp, qword [r15 + 0x30]                                                                                                                                                                                                                               |     rbp = *((r15 + 0x30));
    0x0040abcd test r14, r14                                                                                                                                                                                                                                             |     
                                                                                                                                                                                                                                                                         |     if (r14 == 0) {
    0x0040abd0 jne 0x40abe6                                                                                                                                                                                                                                              |         
    0x0040abd2 mov r14, qword [rip + 0x23fd97]                                                                                                                                                                                                                           |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040abd9 test r14, r14                                                                                                                                                                                                                                             |         
                                                                                                                                                                                                                                                                         |         if (r14 != 0) {
    0x0040abdc jne 0x40abe6                                                                                                                                                                                                                                              |             goto label_0;
                                                                                                                                                                                                                                                                         |         }
    0x0040abde call 0x432700                                                                                                                                                                                                                                             |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x0040abe3 mov r14, rax                                                                                                                                                                                                                                              |         r14 = rax;
                                                                                                                                                                                                                                                                         |     }
                                                                                                                                                                                                                                                                         | label_0:
    0x0040abe6 mov rax, qword [r14]                                                                                                                                                                                                                                      |     rax = *(r14);
    0x0040abe9 mov esi, 0x58                                                                                                                                                                                                                                             |     esi = 0x58;
    0x0040abee mov rdi, r14                                                                                                                                                                                                                                              |     rdi = r14;
    0x0040abf1 call qword [rax + 0x10]                                                                                                                                                                                                                                   |     rax = uint64_t (*rax + 0x10)() ();
    0x0040abf4 mov rbx, rax                                                                                                                                                                                                                                              |     rbx = rax;
    0x0040abf7 mov qword [rax], 0x40ad10                                                                                                                                                                                                                                 |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_ReadThread_BloombergLP::bslmt::RWMutex___.invokerFunction_void_;
    0x0040abfe movups xmm0, xmmword [r12]                                                                                                                                                                                                                                |     __asm ("movups xmm0, xmmword [r12]");
    0x0040ac03 movups xmm1, xmmword [r12 + 0x10]                                                                                                                                                                                                                         |     __asm ("movups xmm1, xmmword [r12 + 0x10]");
    0x0040ac09 movups xmmword [rax + 8], xmm0                                                                                                                                                                                                                            |     __asm ("movups xmmword [rax + 8], xmm0");
    0x0040ac0d movups xmmword [rax + 0x18], xmm1                                                                                                                                                                                                                         |     __asm ("movups xmmword [rax + 0x18], xmm1");
    0x0040ac11 lea rdi, [rax + 0x28]                                                                                                                                                                                                                                     |     
    0x0040ac15 mov qword [rax + 0x28], 0                                                                                                                                                                                                                                 |     *((rax + 0x28)) = 0;
    0x0040ac1d mov qword [rax + 0x50], r14                                                                                                                                                                                                                               |     *((rax + 0x50)) = r14;
    0x0040ac21 movaps xmm0, xmmword [rip + 0x28198]                                                                                                                                                                                                                      |     xmm0 = .comment;
    0x0040ac28 movups xmmword [rax + 0x40], xmm0                                                                                                                                                                                                                         |     __asm ("movups xmmword [rax + 0x40], xmm0");
    0x0040ac2c mov ecx, 0x4332d5                                                                                                                                                                                                                                         |     
    0x0040ac31 mov rsi, r13                                                                                                                                                                                                                                              |     
    0x0040ac34 mov rdx, rbp                                                                                                                                                                                                                                              |     
    0x0040ac37 call 0x40f410                                                                                                                                                                                                                                             |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rax + 0x28, r13, rbp, "string<...>::assign<Iter>(i,j): string too long");
    0x0040ac3c mov edx, 0x40c3b0                                                                                                                                                                                                                                         |     
    0x0040ac41 mov rdi, qword [rsp]                                                                                                                                                                                                                                      |     
    0x0040ac45 mov rsi, r15                                                                                                                                                                                                                                              |     
    0x0040ac48 mov rcx, rbx                                                                                                                                                                                                                                              |     
    0x0040ac4b call 0x40d380                                                                                                                                                                                                                                             |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0040ac50 mov ebp, eax                                                                                                                                                                                                                                              |     
    0x0040ac52 test eax, eax                                                                                                                                                                                                                                             |     
                                                                                                                                                                                                                                                                         |     if (eax != 0) {
    0x0040ac54 je 0x40ac7f                                                                                                                                                                                                                                               |         
    0x0040ac56 cmp qword [rbx + 0x48], 0x17                                                                                                                                                                                                                              |         
                                                                                                                                                                                                                                                                         |         if (*((rbx + 0x48)) != 0x17) {
    0x0040ac5b je 0x40ac6b                                                                                                                                                                                                                                               |             
    0x0040ac5d mov rsi, qword [rbx + 0x28]                                                                                                                                                                                                                               |             rsi = *((rbx + 0x28));
    0x0040ac61 mov rdi, qword [rbx + 0x50]                                                                                                                                                                                                                               |             rdi = *((rbx + 0x50));
    0x0040ac65 mov rax, qword [rdi]                                                                                                                                                                                                                                      |             rax = *(rdi);
    0x0040ac68 call qword [rax + 0x18]                                                                                                                                                                                                                                   |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                         |         }
    0x0040ac6b mov qword [rbx + 0x40], 0xffffffffffffffff                                                                                                                                                                                                                |         *((rbx + 0x40)) = 0xffffffffffffffff;
    0x0040ac73 mov rax, qword [r14]                                                                                                                                                                                                                                      |         rax = *(r14);
    0x0040ac76 mov rdi, r14                                                                                                                                                                                                                                              |         rdi = r14;
    0x0040ac79 mov rsi, rbx                                                                                                                                                                                                                                              |         rsi = rbx;
    0x0040ac7c call qword [rax + 0x18]                                                                                                                                                                                                                                   |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                         |     }
    0x0040ac7f mov eax, ebp                                                                                                                                                                                                                                              |     eax = ebp;
    0x0040ac81 add rsp, 8                                                                                                                                                                                                                                                |     
    0x0040ac85 pop rbx                                                                                                                                                                                                                                                   |     
    0x0040ac86 pop r12                                                                                                                                                                                                                                                   |     
    0x0040ac88 pop r13                                                                                                                                                                                                                                                   |     
    0x0040ac8a pop r14                                                                                                                                                                                                                                                   |     
    0x0040ac8c pop r15                                                                                                                                                                                                                                                   |     
    0x0040ac8e pop rbp                                                                                                                                                                                                                                                   |     
    0x0040ac8f ret                                                                                                                                                                                                                                                       |     return rax;
                                                                                                                                                                                                                                                                         | }
