    ; assembly                                                                                                                                                                                                                                                                       | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                     | /* bslmt_rwmutex.t/assume @ 0x408c20 */
                                                                                                                                                                                                                                                                                     | #include <stdint.h>
                                                                                                                                                                                                                                                                                     |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_ContentionWriter_BloombergLP::bslmt.RWMutex____unsigned_long__BloombergLP::bslmt::ThreadAttributes_const__ContentionWriter_BloombergLP::bslmt::RWMutex__const__BloombergLP::bslma::Allocator ()           | int64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_ContentionWriter_BloombergLP::bslmt_RWMutex_unsigned_long_BloombergLP::bslmt::ThreadAttributes_const_ContentionWriter_BloombergLP::bslmt::RWMutex_const_BloombergLP::bslma::Allocator (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                     |     rcx = arg4;
                                                                                                                                                                                                                                                                                     |     rdx = arg3;
                                                                                                                                                                                                                                                                                     |     rsi = arg2;
                                                                                                                                                                                                                                                                                     |     rdi = arg1;
                                                                                                                                                                                                                                                                                     |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<ContentionWriter<BloombergLP::bslmt::RWMutex> >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, ContentionWriter<BloombergLP::bslmt::RWMutex> const&, BloombergLP::bslma::Allocator*) */
    0x00408c20 push rbp                                                                                                                                                                                                                                                              |     
    0x00408c21 push r15                                                                                                                                                                                                                                                              |     
    0x00408c23 push r14                                                                                                                                                                                                                                                              |     
    0x00408c25 push r13                                                                                                                                                                                                                                                              |     
    0x00408c27 push r12                                                                                                                                                                                                                                                              |     
    0x00408c29 push rbx                                                                                                                                                                                                                                                              |     
    0x00408c2a push rax                                                                                                                                                                                                                                                              |     
    0x00408c2b mov r14, rcx                                                                                                                                                                                                                                                          |     r14 = rcx;
    0x00408c2e mov r12, rdx                                                                                                                                                                                                                                                          |     r12 = rdx;
    0x00408c31 mov r15, rsi                                                                                                                                                                                                                                                          |     r15 = rsi;
    0x00408c34 mov qword [rsp], rdi                                                                                                                                                                                                                                                  |     *(rsp) = rdi;
    0x00408c38 mov r13, qword [rsi + 0x30]                                                                                                                                                                                                                                           |     r13 = *((rsi + 0x30));
    0x00408c3c cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                          |     
                                                                                                                                                                                                                                                                                     |     if (*((rsi + 0x38)) != 0x17) {
    0x00408c41 je 0x408c49                                                                                                                                                                                                                                                           |         
    0x00408c43 mov rbp, qword [r15 + 0x18]                                                                                                                                                                                                                                           |         rbp = *((r15 + 0x18));
    0x00408c47 jmp 0x408c4d                                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |     } else {
    0x00408c49 lea rbp, [r15 + 0x18]                                                                                                                                                                                                                                                 |         rbp = r15 + 0x18;
                                                                                                                                                                                                                                                                                     |     }
    0x00408c4d mov rax, qword [r14]                                                                                                                                                                                                                                                  |     rax = *(r14);
    0x00408c50 mov esi, 0x58                                                                                                                                                                                                                                                         |     esi = 0x58;
    0x00408c55 mov rdi, r14                                                                                                                                                                                                                                                          |     rdi = r14;
    0x00408c58 call qword [rax + 0x10]                                                                                                                                                                                                                                               |     rax = uint64_t (*rax + 0x10)() ();
    0x00408c5b mov rbx, rax                                                                                                                                                                                                                                                          |     rbx = rax;
    0x00408c5e mov qword [rax], 0x408d70                                                                                                                                                                                                                                             |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_ContentionWriter_BloombergLP::bslmt::RWMutex___.invokerFunction_void_;
    0x00408c65 movups xmm0, xmmword [r12]                                                                                                                                                                                                                                            |     __asm ("movups xmm0, xmmword [r12]");
    0x00408c6a movups xmm1, xmmword [r12 + 0x10]                                                                                                                                                                                                                                     |     __asm ("movups xmm1, xmmword [r12 + 0x10]");
    0x00408c70 movups xmmword [rax + 8], xmm0                                                                                                                                                                                                                                        |     __asm ("movups xmmword [rax + 8], xmm0");
    0x00408c74 movups xmmword [rax + 0x18], xmm1                                                                                                                                                                                                                                     |     __asm ("movups xmmword [rax + 0x18], xmm1");
    0x00408c78 lea rdi, [rax + 0x28]                                                                                                                                                                                                                                                 |     
    0x00408c7c mov qword [rax + 0x28], 0                                                                                                                                                                                                                                             |     *((rax + 0x28)) = 0;
    0x00408c84 mov qword [rax + 0x50], r14                                                                                                                                                                                                                                           |     *((rax + 0x50)) = r14;
    0x00408c88 movaps xmm0, xmmword [rip + 0x29f21]                                                                                                                                                                                                                                  |     xmm0 = .comment;
    0x00408c8f movups xmmword [rax + 0x40], xmm0                                                                                                                                                                                                                                     |     __asm ("movups xmmword [rax + 0x40], xmm0");
    0x00408c93 mov ecx, 0x4330c9                                                                                                                                                                                                                                                     |     
    0x00408c98 mov rsi, rbp                                                                                                                                                                                                                                                          |     
    0x00408c9b mov rdx, r13                                                                                                                                                                                                                                                          |     
    0x00408c9e call 0x40f220                                                                                                                                                                                                                                                         |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rax + 0x28, rbp, r13, "string<...>::assign<Iter>(i,j): string too long");
    0x00408ca3 mov edx, 0x40c1e0                                                                                                                                                                                                                                                     |     
    0x00408ca8 mov rdi, qword [rsp]                                                                                                                                                                                                                                                  |     
    0x00408cac mov rsi, r15                                                                                                                                                                                                                                                          |     
    0x00408caf mov rcx, rbx                                                                                                                                                                                                                                                          |     
    0x00408cb2 call 0x40d1b0                                                                                                                                                                                                                                                         |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x00408cb7 mov ebp, eax                                                                                                                                                                                                                                                          |     
    0x00408cb9 test eax, eax                                                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                                                     |     if (eax != 0) {
    0x00408cbb je 0x408ce6                                                                                                                                                                                                                                                           |         
    0x00408cbd cmp qword [rbx + 0x48], 0x17                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |         if (*((rbx + 0x48)) != 0x17) {
    0x00408cc2 je 0x408cd2                                                                                                                                                                                                                                                           |             
    0x00408cc4 mov rsi, qword [rbx + 0x28]                                                                                                                                                                                                                                           |             rsi = *((rbx + 0x28));
    0x00408cc8 mov rdi, qword [rbx + 0x50]                                                                                                                                                                                                                                           |             rdi = *((rbx + 0x50));
    0x00408ccc mov rax, qword [rdi]                                                                                                                                                                                                                                                  |             rax = *(rdi);
    0x00408ccf call qword [rax + 0x18]                                                                                                                                                                                                                                               |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |         }
    0x00408cd2 mov qword [rbx + 0x40], 0xffffffffffffffff                                                                                                                                                                                                                            |         *((rbx + 0x40)) = 0xffffffffffffffff;
    0x00408cda mov rax, qword [r14]                                                                                                                                                                                                                                                  |         rax = *(r14);
    0x00408cdd mov rdi, r14                                                                                                                                                                                                                                                          |         rdi = r14;
    0x00408ce0 mov rsi, rbx                                                                                                                                                                                                                                                          |         rsi = rbx;
    0x00408ce3 call qword [rax + 0x18]                                                                                                                                                                                                                                               |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |     }
    0x00408ce6 mov eax, ebp                                                                                                                                                                                                                                                          |     eax = ebp;
    0x00408ce8 add rsp, 8                                                                                                                                                                                                                                                            |     
    0x00408cec pop rbx                                                                                                                                                                                                                                                               |     
    0x00408ced pop r12                                                                                                                                                                                                                                                               |     
    0x00408cef pop r13                                                                                                                                                                                                                                                               |     
    0x00408cf1 pop r14                                                                                                                                                                                                                                                               |     
    0x00408cf3 pop r15                                                                                                                                                                                                                                                               |     
    0x00408cf5 pop rbp                                                                                                                                                                                                                                                               |     
    0x00408cf6 ret                                                                                                                                                                                                                                                                   |     return rax;
                                                                                                                                                                                                                                                                                     | }
