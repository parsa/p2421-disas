    ; assembly                                                                                                                                                                                                                                                                       | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                     | /* bslmt_rwmutex.t/none @ 0x40bee0 */
                                                                                                                                                                                                                                                                                     | #include <stdint.h>
                                                                                                                                                                                                                                                                                     |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_ReadWaitThread_BloombergLP::bslmt.ReaderWriterLock____unsigned_long__BloombergLP::bslmt::ThreadAttributes_const__ReadWaitThread_BloombergLP::bslmt::ReaderWriterLock__const__BloombergLP::bs ()           | uint64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_ReadWaitThread_BloombergLP::bslmt_ReaderWriterLock_unsigned_long_BloombergLP::bslmt::ThreadAttributes_const_ReadWaitThread_BloombergLP::bslmt::ReaderWriterLock_const_BloombergLP::bs (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                     |     rcx = arg4;
                                                                                                                                                                                                                                                                                     |     rdx = arg3;
                                                                                                                                                                                                                                                                                     |     rsi = arg2;
                                                                                                                                                                                                                                                                                     |     rdi = arg1;
                                                                                                                                                                                                                                                                                     |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<ReadWaitThread<BloombergLP::bslmt::ReaderWriterLock> >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, ReadWaitThread<BloombergLP::bslmt::ReaderWriterLock> const&, BloombergLP::bslma::Allocator*) */
    0x0040bee0 push rbp                                                                                                                                                                                                                                                              |     
    0x0040bee1 push r15                                                                                                                                                                                                                                                              |     
    0x0040bee3 push r14                                                                                                                                                                                                                                                              |     
    0x0040bee5 push r13                                                                                                                                                                                                                                                              |     
    0x0040bee7 push r12                                                                                                                                                                                                                                                              |     
    0x0040bee9 push rbx                                                                                                                                                                                                                                                              |     
    0x0040beea push rax                                                                                                                                                                                                                                                              |     
    0x0040beeb mov r14, rcx                                                                                                                                                                                                                                                          |     r14 = rcx;
    0x0040beee mov r12, rdx                                                                                                                                                                                                                                                          |     r12 = rdx;
    0x0040bef1 mov r15, rsi                                                                                                                                                                                                                                                          |     r15 = rsi;
    0x0040bef4 mov qword [rsp], rdi                                                                                                                                                                                                                                                  |     *(rsp) = rdi;
    0x0040bef8 cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                          |     
                                                                                                                                                                                                                                                                                     |     if (*((rsi + 0x38)) != 0x17) {
    0x0040befd je 0x40bf05                                                                                                                                                                                                                                                           |         
    0x0040beff mov r13, qword [r15 + 0x18]                                                                                                                                                                                                                                           |         r13 = *((r15 + 0x18));
    0x0040bf03 jmp 0x40bf09                                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |     } else {
    0x0040bf05 lea r13, [r15 + 0x18]                                                                                                                                                                                                                                                 |         r13 = r15 + 0x18;
                                                                                                                                                                                                                                                                                     |     }
    0x0040bf09 mov rbp, qword [r15 + 0x30]                                                                                                                                                                                                                                           |     rbp = *((r15 + 0x30));
    0x0040bf0d test r14, r14                                                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                                                     |     if (r14 == 0) {
    0x0040bf10 jne 0x40bf26                                                                                                                                                                                                                                                          |         
    0x0040bf12 mov r14, qword [rip + 0x23ea57]                                                                                                                                                                                                                                       |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040bf19 test r14, r14                                                                                                                                                                                                                                                         |         
                                                                                                                                                                                                                                                                                     |         if (r14 != 0) {
    0x0040bf1c jne 0x40bf26                                                                                                                                                                                                                                                          |             goto label_0;
                                                                                                                                                                                                                                                                                     |         }
    0x0040bf1e call 0x432700                                                                                                                                                                                                                                                         |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x0040bf23 mov r14, rax                                                                                                                                                                                                                                                          |         r14 = rax;
                                                                                                                                                                                                                                                                                     |     }
                                                                                                                                                                                                                                                                                     | label_0:
    0x0040bf26 mov rax, qword [r14]                                                                                                                                                                                                                                                  |     rax = *(r14);
    0x0040bf29 mov esi, 0x50                                                                                                                                                                                                                                                         |     esi = 0x50;
    0x0040bf2e mov rdi, r14                                                                                                                                                                                                                                                          |     rdi = r14;
    0x0040bf31 call qword [rax + 0x10]                                                                                                                                                                                                                                               |     rax = uint64_t (*rax + 0x10)() ();
    0x0040bf34 mov rbx, rax                                                                                                                                                                                                                                                          |     rbx = rax;
    0x0040bf37 mov qword [rax], 0x40c050                                                                                                                                                                                                                                             |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_ReadWaitThread_BloombergLP::bslmt::ReaderWriterLock___.invokerFunction_void_;
    0x0040bf3e movups xmm0, xmmword [r12]                                                                                                                                                                                                                                            |     __asm ("movups xmm0, xmmword [r12]");
    0x0040bf43 movups xmmword [rax + 8], xmm0                                                                                                                                                                                                                                        |     __asm ("movups xmmword [rax + 8], xmm0");
    0x0040bf47 mov rax, qword [r12 + 0x10]                                                                                                                                                                                                                                           |     rax = *((r12 + 0x10));
    0x0040bf4c mov qword [rbx + 0x18], rax                                                                                                                                                                                                                                           |     *((rbx + 0x18)) = rax;
    0x0040bf50 lea rdi, [rbx + 0x20]                                                                                                                                                                                                                                                 |     
    0x0040bf54 mov qword [rbx + 0x20], 0                                                                                                                                                                                                                                             |     *((rbx + 0x20)) = 0;
    0x0040bf5c mov qword [rbx + 0x48], r14                                                                                                                                                                                                                                           |     *((rbx + 0x48)) = r14;
    0x0040bf60 movaps xmm0, xmmword [rip + 0x26e59]                                                                                                                                                                                                                                  |     xmm0 = .comment;
    0x0040bf67 movups xmmword [rbx + 0x38], xmm0                                                                                                                                                                                                                                     |     __asm ("movups xmmword [rbx + 0x38], xmm0");
    0x0040bf6b mov ecx, 0x4332d5                                                                                                                                                                                                                                                     |     
    0x0040bf70 mov rsi, r13                                                                                                                                                                                                                                                          |     
    0x0040bf73 mov rdx, rbp                                                                                                                                                                                                                                                          |     
    0x0040bf76 call 0x40f410                                                                                                                                                                                                                                                         |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x20, r13, rbp, "string<...>::assign<Iter>(i,j): string too long");
    0x0040bf7b mov edx, 0x40c3b0                                                                                                                                                                                                                                                     |     
    0x0040bf80 mov rdi, qword [rsp]                                                                                                                                                                                                                                                  |     
    0x0040bf84 mov rsi, r15                                                                                                                                                                                                                                                          |     
    0x0040bf87 mov rcx, rbx                                                                                                                                                                                                                                                          |     
    0x0040bf8a call 0x40d380                                                                                                                                                                                                                                                         |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0040bf8f mov ebp, eax                                                                                                                                                                                                                                                          |     
    0x0040bf91 test eax, eax                                                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                                                     |     if (eax != 0) {
    0x0040bf93 je 0x40bfbe                                                                                                                                                                                                                                                           |         
    0x0040bf95 cmp qword [rbx + 0x40], 0x17                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |         if (*((rbx + 0x40)) != 0x17) {
    0x0040bf9a je 0x40bfaa                                                                                                                                                                                                                                                           |             
    0x0040bf9c mov rsi, qword [rbx + 0x20]                                                                                                                                                                                                                                           |             rsi = *((rbx + 0x20));
    0x0040bfa0 mov rdi, qword [rbx + 0x48]                                                                                                                                                                                                                                           |             rdi = *((rbx + 0x48));
    0x0040bfa4 mov rax, qword [rdi]                                                                                                                                                                                                                                                  |             rax = *(rdi);
    0x0040bfa7 call qword [rax + 0x18]                                                                                                                                                                                                                                               |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |         }
    0x0040bfaa mov qword [rbx + 0x38], 0xffffffffffffffff                                                                                                                                                                                                                            |         *((rbx + 0x38)) = 0xffffffffffffffff;
    0x0040bfb2 mov rax, qword [r14]                                                                                                                                                                                                                                                  |         rax = *(r14);
    0x0040bfb5 mov rdi, r14                                                                                                                                                                                                                                                          |         rdi = r14;
    0x0040bfb8 mov rsi, rbx                                                                                                                                                                                                                                                          |         rsi = rbx;
    0x0040bfbb call qword [rax + 0x18]                                                                                                                                                                                                                                               |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |     }
    0x0040bfbe mov eax, ebp                                                                                                                                                                                                                                                          |     eax = ebp;
    0x0040bfc0 add rsp, 8                                                                                                                                                                                                                                                            |     
    0x0040bfc4 pop rbx                                                                                                                                                                                                                                                               |     
    0x0040bfc5 pop r12                                                                                                                                                                                                                                                               |     
    0x0040bfc7 pop r13                                                                                                                                                                                                                                                               |     
    0x0040bfc9 pop r14                                                                                                                                                                                                                                                               |     
    0x0040bfcb pop r15                                                                                                                                                                                                                                                               |     
    0x0040bfcd pop rbp                                                                                                                                                                                                                                                               |     
    0x0040bfce ret                                                                                                                                                                                                                                                                   |     return rax;
                                                                                                                                                                                                                                                                                     | }
