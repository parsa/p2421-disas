    ; assembly                                                                                                                                                                                                                                                           | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                         | /* bslmt_rwmutex.t/none @ 0x40ae10 */
                                                                                                                                                                                                                                                                         | #include <stdint.h>
                                                                                                                                                                                                                                                                         |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_WriteThread_BloombergLP::bslmt.RWMutex____unsigned_long__BloombergLP::bslmt::ThreadAttributes_const__WriteThread_BloombergLP::bslmt::RWMutex__const__BloombergLP::bslma::Allocator_ ()        | uint64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_WriteThread_BloombergLP::bslmt_RWMutex_unsigned_long_BloombergLP::bslmt::ThreadAttributes_const_WriteThread_BloombergLP::bslmt::RWMutex_const_BloombergLP::bslma::Allocator_ (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                         |     rcx = arg4;
                                                                                                                                                                                                                                                                         |     rdx = arg3;
                                                                                                                                                                                                                                                                         |     rsi = arg2;
                                                                                                                                                                                                                                                                         |     rdi = arg1;
                                                                                                                                                                                                                                                                         |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<WriteThread<BloombergLP::bslmt::RWMutex> >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, WriteThread<BloombergLP::bslmt::RWMutex> const&, BloombergLP::bslma::Allocator*) */
    0x0040ae10 push rbp                                                                                                                                                                                                                                                  |     
    0x0040ae11 push r15                                                                                                                                                                                                                                                  |     
    0x0040ae13 push r14                                                                                                                                                                                                                                                  |     
    0x0040ae15 push r13                                                                                                                                                                                                                                                  |     
    0x0040ae17 push r12                                                                                                                                                                                                                                                  |     
    0x0040ae19 push rbx                                                                                                                                                                                                                                                  |     
    0x0040ae1a push rax                                                                                                                                                                                                                                                  |     
    0x0040ae1b mov r14, rcx                                                                                                                                                                                                                                              |     r14 = rcx;
    0x0040ae1e mov r12, rdx                                                                                                                                                                                                                                              |     r12 = rdx;
    0x0040ae21 mov r15, rsi                                                                                                                                                                                                                                              |     r15 = rsi;
    0x0040ae24 mov qword [rsp], rdi                                                                                                                                                                                                                                      |     *(rsp) = rdi;
    0x0040ae28 cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                              |     
                                                                                                                                                                                                                                                                         |     if (*((rsi + 0x38)) != 0x17) {
    0x0040ae2d je 0x40ae35                                                                                                                                                                                                                                               |         
    0x0040ae2f mov r13, qword [r15 + 0x18]                                                                                                                                                                                                                               |         r13 = *((r15 + 0x18));
    0x0040ae33 jmp 0x40ae39                                                                                                                                                                                                                                              |         
                                                                                                                                                                                                                                                                         |     } else {
    0x0040ae35 lea r13, [r15 + 0x18]                                                                                                                                                                                                                                     |         r13 = r15 + 0x18;
                                                                                                                                                                                                                                                                         |     }
    0x0040ae39 mov rbp, qword [r15 + 0x30]                                                                                                                                                                                                                               |     rbp = *((r15 + 0x30));
    0x0040ae3d test r14, r14                                                                                                                                                                                                                                             |     
                                                                                                                                                                                                                                                                         |     if (r14 == 0) {
    0x0040ae40 jne 0x40ae56                                                                                                                                                                                                                                              |         
    0x0040ae42 mov r14, qword [rip + 0x23fb27]                                                                                                                                                                                                                           |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040ae49 test r14, r14                                                                                                                                                                                                                                             |         
                                                                                                                                                                                                                                                                         |         if (r14 != 0) {
    0x0040ae4c jne 0x40ae56                                                                                                                                                                                                                                              |             goto label_0;
                                                                                                                                                                                                                                                                         |         }
    0x0040ae4e call 0x432700                                                                                                                                                                                                                                             |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x0040ae53 mov r14, rax                                                                                                                                                                                                                                              |         r14 = rax;
                                                                                                                                                                                                                                                                         |     }
                                                                                                                                                                                                                                                                         | label_0:
    0x0040ae56 mov rax, qword [r14]                                                                                                                                                                                                                                      |     rax = *(r14);
    0x0040ae59 mov esi, 0x50                                                                                                                                                                                                                                             |     esi = 0x50;
    0x0040ae5e mov rdi, r14                                                                                                                                                                                                                                              |     rdi = r14;
    0x0040ae61 call qword [rax + 0x10]                                                                                                                                                                                                                                   |     rax = uint64_t (*rax + 0x10)() ();
    0x0040ae64 mov rbx, rax                                                                                                                                                                                                                                              |     rbx = rax;
    0x0040ae67 mov qword [rax], 0x40af80                                                                                                                                                                                                                                 |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_WriteThread_BloombergLP::bslmt::RWMutex___.invokerFunction_void_;
    0x0040ae6e movups xmm0, xmmword [r12]                                                                                                                                                                                                                                |     __asm ("movups xmm0, xmmword [r12]");
    0x0040ae73 movups xmmword [rax + 8], xmm0                                                                                                                                                                                                                            |     __asm ("movups xmmword [rax + 8], xmm0");
    0x0040ae77 mov rax, qword [r12 + 0x10]                                                                                                                                                                                                                               |     rax = *((r12 + 0x10));
    0x0040ae7c mov qword [rbx + 0x18], rax                                                                                                                                                                                                                               |     *((rbx + 0x18)) = rax;
    0x0040ae80 lea rdi, [rbx + 0x20]                                                                                                                                                                                                                                     |     
    0x0040ae84 mov qword [rbx + 0x20], 0                                                                                                                                                                                                                                 |     *((rbx + 0x20)) = 0;
    0x0040ae8c mov qword [rbx + 0x48], r14                                                                                                                                                                                                                               |     *((rbx + 0x48)) = r14;
    0x0040ae90 movaps xmm0, xmmword [rip + 0x27f29]                                                                                                                                                                                                                      |     xmm0 = .comment;
    0x0040ae97 movups xmmword [rbx + 0x38], xmm0                                                                                                                                                                                                                         |     __asm ("movups xmmword [rbx + 0x38], xmm0");
    0x0040ae9b mov ecx, 0x4332d5                                                                                                                                                                                                                                         |     
    0x0040aea0 mov rsi, r13                                                                                                                                                                                                                                              |     
    0x0040aea3 mov rdx, rbp                                                                                                                                                                                                                                              |     
    0x0040aea6 call 0x40f410                                                                                                                                                                                                                                             |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x20, r13, rbp, "string<...>::assign<Iter>(i,j): string too long");
    0x0040aeab mov edx, 0x40c3b0                                                                                                                                                                                                                                         |     
    0x0040aeb0 mov rdi, qword [rsp]                                                                                                                                                                                                                                      |     
    0x0040aeb4 mov rsi, r15                                                                                                                                                                                                                                              |     
    0x0040aeb7 mov rcx, rbx                                                                                                                                                                                                                                              |     
    0x0040aeba call 0x40d380                                                                                                                                                                                                                                             |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0040aebf mov ebp, eax                                                                                                                                                                                                                                              |     
    0x0040aec1 test eax, eax                                                                                                                                                                                                                                             |     
                                                                                                                                                                                                                                                                         |     if (eax != 0) {
    0x0040aec3 je 0x40aeee                                                                                                                                                                                                                                               |         
    0x0040aec5 cmp qword [rbx + 0x40], 0x17                                                                                                                                                                                                                              |         
                                                                                                                                                                                                                                                                         |         if (*((rbx + 0x40)) != 0x17) {
    0x0040aeca je 0x40aeda                                                                                                                                                                                                                                               |             
    0x0040aecc mov rsi, qword [rbx + 0x20]                                                                                                                                                                                                                               |             rsi = *((rbx + 0x20));
    0x0040aed0 mov rdi, qword [rbx + 0x48]                                                                                                                                                                                                                               |             rdi = *((rbx + 0x48));
    0x0040aed4 mov rax, qword [rdi]                                                                                                                                                                                                                                      |             rax = *(rdi);
    0x0040aed7 call qword [rax + 0x18]                                                                                                                                                                                                                                   |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                         |         }
    0x0040aeda mov qword [rbx + 0x38], 0xffffffffffffffff                                                                                                                                                                                                                |         *((rbx + 0x38)) = 0xffffffffffffffff;
    0x0040aee2 mov rax, qword [r14]                                                                                                                                                                                                                                      |         rax = *(r14);
    0x0040aee5 mov rdi, r14                                                                                                                                                                                                                                              |         rdi = r14;
    0x0040aee8 mov rsi, rbx                                                                                                                                                                                                                                              |         rsi = rbx;
    0x0040aeeb call qword [rax + 0x18]                                                                                                                                                                                                                                   |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                         |     }
    0x0040aeee mov eax, ebp                                                                                                                                                                                                                                              |     eax = ebp;
    0x0040aef0 add rsp, 8                                                                                                                                                                                                                                                |     
    0x0040aef4 pop rbx                                                                                                                                                                                                                                                   |     
    0x0040aef5 pop r12                                                                                                                                                                                                                                                   |     
    0x0040aef7 pop r13                                                                                                                                                                                                                                                   |     
    0x0040aef9 pop r14                                                                                                                                                                                                                                                   |     
    0x0040aefb pop r15                                                                                                                                                                                                                                                   |     
    0x0040aefd pop rbp                                                                                                                                                                                                                                                   |     
    0x0040aefe ret                                                                                                                                                                                                                                                       |     return rax;
                                                                                                                                                                                                                                                                         | }
