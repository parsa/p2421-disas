    ; assembly                                                                                                                                                                                                                                                                       | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                     | /* bslmt_rwmutex.t/none @ 0x40a0e0 */
                                                                                                                                                                                                                                                                                     | #include <stdint.h>
                                                                                                                                                                                                                                                                                     |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_ContentionReader_BloombergLP::bslmt.ReaderWriterLock____unsigned_long__BloombergLP::bslmt::ThreadAttributes_const__ContentionReader_BloombergLP::bslmt::ReaderWriterLock__const__BloombergLP ()           | uint64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_ContentionReader_BloombergLP::bslmt_ReaderWriterLock_unsigned_long_BloombergLP::bslmt::ThreadAttributes_const_ContentionReader_BloombergLP::bslmt::ReaderWriterLock_const_BloombergLP (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                     |     rcx = arg4;
                                                                                                                                                                                                                                                                                     |     rdx = arg3;
                                                                                                                                                                                                                                                                                     |     rsi = arg2;
                                                                                                                                                                                                                                                                                     |     rdi = arg1;
                                                                                                                                                                                                                                                                                     |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<ContentionReader<BloombergLP::bslmt::ReaderWriterLock> >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, ContentionReader<BloombergLP::bslmt::ReaderWriterLock> const&, BloombergLP::bslma::Allocator*) */
    0x0040a0e0 push rbp                                                                                                                                                                                                                                                              |     
    0x0040a0e1 push r15                                                                                                                                                                                                                                                              |     
    0x0040a0e3 push r14                                                                                                                                                                                                                                                              |     
    0x0040a0e5 push r13                                                                                                                                                                                                                                                              |     
    0x0040a0e7 push r12                                                                                                                                                                                                                                                              |     
    0x0040a0e9 push rbx                                                                                                                                                                                                                                                              |     
    0x0040a0ea push rax                                                                                                                                                                                                                                                              |     
    0x0040a0eb mov r14, rcx                                                                                                                                                                                                                                                          |     r14 = rcx;
    0x0040a0ee mov r12, rdx                                                                                                                                                                                                                                                          |     r12 = rdx;
    0x0040a0f1 mov r15, rsi                                                                                                                                                                                                                                                          |     r15 = rsi;
    0x0040a0f4 mov qword [rsp], rdi                                                                                                                                                                                                                                                  |     *(rsp) = rdi;
    0x0040a0f8 cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                          |     
                                                                                                                                                                                                                                                                                     |     if (*((rsi + 0x38)) != 0x17) {
    0x0040a0fd je 0x40a105                                                                                                                                                                                                                                                           |         
    0x0040a0ff mov r13, qword [r15 + 0x18]                                                                                                                                                                                                                                           |         r13 = *((r15 + 0x18));
    0x0040a103 jmp 0x40a109                                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |     } else {
    0x0040a105 lea r13, [r15 + 0x18]                                                                                                                                                                                                                                                 |         r13 = r15 + 0x18;
                                                                                                                                                                                                                                                                                     |     }
    0x0040a109 mov rbp, qword [r15 + 0x30]                                                                                                                                                                                                                                           |     rbp = *((r15 + 0x30));
    0x0040a10d test r14, r14                                                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                                                     |     if (r14 == 0) {
    0x0040a110 jne 0x40a126                                                                                                                                                                                                                                                          |         
    0x0040a112 mov r14, qword [rip + 0x240857]                                                                                                                                                                                                                                       |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040a119 test r14, r14                                                                                                                                                                                                                                                         |         
                                                                                                                                                                                                                                                                                     |         if (r14 != 0) {
    0x0040a11c jne 0x40a126                                                                                                                                                                                                                                                          |             goto label_0;
                                                                                                                                                                                                                                                                                     |         }
    0x0040a11e call 0x432700                                                                                                                                                                                                                                                         |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x0040a123 mov r14, rax                                                                                                                                                                                                                                                          |         r14 = rax;
                                                                                                                                                                                                                                                                                     |     }
                                                                                                                                                                                                                                                                                     | label_0:
    0x0040a126 mov rax, qword [r14]                                                                                                                                                                                                                                                  |     rax = *(r14);
    0x0040a129 mov esi, 0x58                                                                                                                                                                                                                                                         |     esi = 0x58;
    0x0040a12e mov rdi, r14                                                                                                                                                                                                                                                          |     rdi = r14;
    0x0040a131 call qword [rax + 0x10]                                                                                                                                                                                                                                               |     rax = uint64_t (*rax + 0x10)() ();
    0x0040a134 mov rbx, rax                                                                                                                                                                                                                                                          |     rbx = rax;
    0x0040a137 mov qword [rax], 0x40a250                                                                                                                                                                                                                                             |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_ContentionReader_BloombergLP::bslmt::ReaderWriterLock___.invokerFunction_void_;
    0x0040a13e movups xmm0, xmmword [r12]                                                                                                                                                                                                                                            |     __asm ("movups xmm0, xmmword [r12]");
    0x0040a143 movups xmm1, xmmword [r12 + 0x10]                                                                                                                                                                                                                                     |     __asm ("movups xmm1, xmmword [r12 + 0x10]");
    0x0040a149 movups xmmword [rax + 8], xmm0                                                                                                                                                                                                                                        |     __asm ("movups xmmword [rax + 8], xmm0");
    0x0040a14d movups xmmword [rax + 0x18], xmm1                                                                                                                                                                                                                                     |     __asm ("movups xmmword [rax + 0x18], xmm1");
    0x0040a151 lea rdi, [rax + 0x28]                                                                                                                                                                                                                                                 |     
    0x0040a155 mov qword [rax + 0x28], 0                                                                                                                                                                                                                                             |     *((rax + 0x28)) = 0;
    0x0040a15d mov qword [rax + 0x50], r14                                                                                                                                                                                                                                           |     *((rax + 0x50)) = r14;
    0x0040a161 movaps xmm0, xmmword [rip + 0x28c58]                                                                                                                                                                                                                                  |     xmm0 = .comment;
    0x0040a168 movups xmmword [rax + 0x40], xmm0                                                                                                                                                                                                                                     |     __asm ("movups xmmword [rax + 0x40], xmm0");
    0x0040a16c mov ecx, 0x4332d5                                                                                                                                                                                                                                                     |     
    0x0040a171 mov rsi, r13                                                                                                                                                                                                                                                          |     
    0x0040a174 mov rdx, rbp                                                                                                                                                                                                                                                          |     
    0x0040a177 call 0x40f410                                                                                                                                                                                                                                                         |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rax + 0x28, r13, rbp, "string<...>::assign<Iter>(i,j): string too long");
    0x0040a17c mov edx, 0x40c3b0                                                                                                                                                                                                                                                     |     
    0x0040a181 mov rdi, qword [rsp]                                                                                                                                                                                                                                                  |     
    0x0040a185 mov rsi, r15                                                                                                                                                                                                                                                          |     
    0x0040a188 mov rcx, rbx                                                                                                                                                                                                                                                          |     
    0x0040a18b call 0x40d380                                                                                                                                                                                                                                                         |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0040a190 mov ebp, eax                                                                                                                                                                                                                                                          |     
    0x0040a192 test eax, eax                                                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                                                     |     if (eax != 0) {
    0x0040a194 je 0x40a1bf                                                                                                                                                                                                                                                           |         
    0x0040a196 cmp qword [rbx + 0x48], 0x17                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |         if (*((rbx + 0x48)) != 0x17) {
    0x0040a19b je 0x40a1ab                                                                                                                                                                                                                                                           |             
    0x0040a19d mov rsi, qword [rbx + 0x28]                                                                                                                                                                                                                                           |             rsi = *((rbx + 0x28));
    0x0040a1a1 mov rdi, qword [rbx + 0x50]                                                                                                                                                                                                                                           |             rdi = *((rbx + 0x50));
    0x0040a1a5 mov rax, qword [rdi]                                                                                                                                                                                                                                                  |             rax = *(rdi);
    0x0040a1a8 call qword [rax + 0x18]                                                                                                                                                                                                                                               |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |         }
    0x0040a1ab mov qword [rbx + 0x40], 0xffffffffffffffff                                                                                                                                                                                                                            |         *((rbx + 0x40)) = 0xffffffffffffffff;
    0x0040a1b3 mov rax, qword [r14]                                                                                                                                                                                                                                                  |         rax = *(r14);
    0x0040a1b6 mov rdi, r14                                                                                                                                                                                                                                                          |         rdi = r14;
    0x0040a1b9 mov rsi, rbx                                                                                                                                                                                                                                                          |         rsi = rbx;
    0x0040a1bc call qword [rax + 0x18]                                                                                                                                                                                                                                               |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |     }
    0x0040a1bf mov eax, ebp                                                                                                                                                                                                                                                          |     eax = ebp;
    0x0040a1c1 add rsp, 8                                                                                                                                                                                                                                                            |     
    0x0040a1c5 pop rbx                                                                                                                                                                                                                                                               |     
    0x0040a1c6 pop r12                                                                                                                                                                                                                                                               |     
    0x0040a1c8 pop r13                                                                                                                                                                                                                                                               |     
    0x0040a1ca pop r14                                                                                                                                                                                                                                                               |     
    0x0040a1cc pop r15                                                                                                                                                                                                                                                               |     
    0x0040a1ce pop rbp                                                                                                                                                                                                                                                               |     
    0x0040a1cf ret                                                                                                                                                                                                                                                                   |     return rax;
                                                                                                                                                                                                                                                                                     | }
