    ; assembly                                                                                                                                                                                                                                                           | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                         | /* bslmt_rwmutex.t/assume @ 0x40ace0 */
                                                                                                                                                                                                                                                                         | #include <stdint.h>
                                                                                                                                                                                                                                                                         |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_WriteThread_BloombergLP::bslmt.RWMutex____unsigned_long__BloombergLP::bslmt::ThreadAttributes_const__WriteThread_BloombergLP::bslmt::RWMutex__const__BloombergLP::bslma::Allocator_ ()        | int64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_WriteThread_BloombergLP::bslmt_RWMutex_unsigned_long_BloombergLP::bslmt::ThreadAttributes_const_WriteThread_BloombergLP::bslmt::RWMutex_const_BloombergLP::bslma::Allocator_ (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                         |     rcx = arg4;
                                                                                                                                                                                                                                                                         |     rdx = arg3;
                                                                                                                                                                                                                                                                         |     rsi = arg2;
                                                                                                                                                                                                                                                                         |     rdi = arg1;
                                                                                                                                                                                                                                                                         |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<WriteThread<BloombergLP::bslmt::RWMutex> >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, WriteThread<BloombergLP::bslmt::RWMutex> const&, BloombergLP::bslma::Allocator*) */
    0x0040ace0 push rbp                                                                                                                                                                                                                                                  |     
    0x0040ace1 push r15                                                                                                                                                                                                                                                  |     
    0x0040ace3 push r14                                                                                                                                                                                                                                                  |     
    0x0040ace5 push r13                                                                                                                                                                                                                                                  |     
    0x0040ace7 push r12                                                                                                                                                                                                                                                  |     
    0x0040ace9 push rbx                                                                                                                                                                                                                                                  |     
    0x0040acea push rax                                                                                                                                                                                                                                                  |     
    0x0040aceb mov r14, rcx                                                                                                                                                                                                                                              |     r14 = rcx;
    0x0040acee mov r12, rdx                                                                                                                                                                                                                                              |     r12 = rdx;
    0x0040acf1 mov r15, rsi                                                                                                                                                                                                                                              |     r15 = rsi;
    0x0040acf4 mov qword [rsp], rdi                                                                                                                                                                                                                                      |     *(rsp) = rdi;
    0x0040acf8 mov r13, qword [rsi + 0x30]                                                                                                                                                                                                                               |     r13 = *((rsi + 0x30));
    0x0040acfc cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                              |     
                                                                                                                                                                                                                                                                         |     if (*((rsi + 0x38)) != 0x17) {
    0x0040ad01 je 0x40ad09                                                                                                                                                                                                                                               |         
    0x0040ad03 mov rbp, qword [r15 + 0x18]                                                                                                                                                                                                                               |         rbp = *((r15 + 0x18));
    0x0040ad07 jmp 0x40ad0d                                                                                                                                                                                                                                              |         
                                                                                                                                                                                                                                                                         |     } else {
    0x0040ad09 lea rbp, [r15 + 0x18]                                                                                                                                                                                                                                     |         rbp = r15 + 0x18;
                                                                                                                                                                                                                                                                         |     }
    0x0040ad0d mov rax, qword [r14]                                                                                                                                                                                                                                      |     rax = *(r14);
    0x0040ad10 mov esi, 0x50                                                                                                                                                                                                                                             |     esi = 0x50;
    0x0040ad15 mov rdi, r14                                                                                                                                                                                                                                              |     rdi = r14;
    0x0040ad18 call qword [rax + 0x10]                                                                                                                                                                                                                                   |     rax = uint64_t (*rax + 0x10)() ();
    0x0040ad1b mov rbx, rax                                                                                                                                                                                                                                              |     rbx = rax;
    0x0040ad1e mov qword [rax], 0x40ae30                                                                                                                                                                                                                                 |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_WriteThread_BloombergLP::bslmt::RWMutex___.invokerFunction_void_;
    0x0040ad25 movups xmm0, xmmword [r12]                                                                                                                                                                                                                                |     __asm ("movups xmm0, xmmword [r12]");
    0x0040ad2a movups xmmword [rax + 8], xmm0                                                                                                                                                                                                                            |     __asm ("movups xmmword [rax + 8], xmm0");
    0x0040ad2e mov rax, qword [r12 + 0x10]                                                                                                                                                                                                                               |     rax = *((r12 + 0x10));
    0x0040ad33 mov qword [rbx + 0x18], rax                                                                                                                                                                                                                               |     *((rbx + 0x18)) = rax;
    0x0040ad37 lea rdi, [rbx + 0x20]                                                                                                                                                                                                                                     |     
    0x0040ad3b mov qword [rbx + 0x20], 0                                                                                                                                                                                                                                 |     *((rbx + 0x20)) = 0;
    0x0040ad43 mov qword [rbx + 0x48], r14                                                                                                                                                                                                                               |     *((rbx + 0x48)) = r14;
    0x0040ad47 movaps xmm0, xmmword [rip + 0x27e62]                                                                                                                                                                                                                      |     xmm0 = .comment;
    0x0040ad4e movups xmmword [rbx + 0x38], xmm0                                                                                                                                                                                                                         |     __asm ("movups xmmword [rbx + 0x38], xmm0");
    0x0040ad52 mov ecx, 0x4330c9                                                                                                                                                                                                                                         |     
    0x0040ad57 mov rsi, rbp                                                                                                                                                                                                                                              |     
    0x0040ad5a mov rdx, r13                                                                                                                                                                                                                                              |     
    0x0040ad5d call 0x40f220                                                                                                                                                                                                                                             |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x20, rbp, r13, "string<...>::assign<Iter>(i,j): string too long");
    0x0040ad62 mov edx, 0x40c1e0                                                                                                                                                                                                                                         |     
    0x0040ad67 mov rdi, qword [rsp]                                                                                                                                                                                                                                      |     
    0x0040ad6b mov rsi, r15                                                                                                                                                                                                                                              |     
    0x0040ad6e mov rcx, rbx                                                                                                                                                                                                                                              |     
    0x0040ad71 call 0x40d1b0                                                                                                                                                                                                                                             |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0040ad76 mov ebp, eax                                                                                                                                                                                                                                              |     
    0x0040ad78 test eax, eax                                                                                                                                                                                                                                             |     
                                                                                                                                                                                                                                                                         |     if (eax != 0) {
    0x0040ad7a je 0x40ada5                                                                                                                                                                                                                                               |         
    0x0040ad7c cmp qword [rbx + 0x40], 0x17                                                                                                                                                                                                                              |         
                                                                                                                                                                                                                                                                         |         if (*((rbx + 0x40)) != 0x17) {
    0x0040ad81 je 0x40ad91                                                                                                                                                                                                                                               |             
    0x0040ad83 mov rsi, qword [rbx + 0x20]                                                                                                                                                                                                                               |             rsi = *((rbx + 0x20));
    0x0040ad87 mov rdi, qword [rbx + 0x48]                                                                                                                                                                                                                               |             rdi = *((rbx + 0x48));
    0x0040ad8b mov rax, qword [rdi]                                                                                                                                                                                                                                      |             rax = *(rdi);
    0x0040ad8e call qword [rax + 0x18]                                                                                                                                                                                                                                   |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                         |         }
    0x0040ad91 mov qword [rbx + 0x38], 0xffffffffffffffff                                                                                                                                                                                                                |         *((rbx + 0x38)) = 0xffffffffffffffff;
    0x0040ad99 mov rax, qword [r14]                                                                                                                                                                                                                                      |         rax = *(r14);
    0x0040ad9c mov rdi, r14                                                                                                                                                                                                                                              |         rdi = r14;
    0x0040ad9f mov rsi, rbx                                                                                                                                                                                                                                              |         rsi = rbx;
    0x0040ada2 call qword [rax + 0x18]                                                                                                                                                                                                                                   |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                         |     }
    0x0040ada5 mov eax, ebp                                                                                                                                                                                                                                              |     eax = ebp;
    0x0040ada7 add rsp, 8                                                                                                                                                                                                                                                |     
    0x0040adab pop rbx                                                                                                                                                                                                                                                   |     
    0x0040adac pop r12                                                                                                                                                                                                                                                   |     
    0x0040adae pop r13                                                                                                                                                                                                                                                   |     
    0x0040adb0 pop r14                                                                                                                                                                                                                                                   |     
    0x0040adb2 pop r15                                                                                                                                                                                                                                                   |     
    0x0040adb4 pop rbp                                                                                                                                                                                                                                                   |     
    0x0040adb5 ret                                                                                                                                                                                                                                                       |     return rax;
                                                                                                                                                                                                                                                                         | }
