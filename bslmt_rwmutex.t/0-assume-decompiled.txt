    ; assembly                                                                                                                                                       | /* r2dec pseudo code output */
                                                                                                                                                                     | /* bslmt_rwmutex.t/assume @ 0x408150 */
                                                                                                                                                                     | #include <stdint.h>
                                                                                                                                                                     |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil.createWithAllocator_ReaderThread__unsigned_long__ReaderThread_const__BloombergLP::bslma::Allocator_ ()         | int64_t method_int_BloombergLP::bslmt::ThreadUtil_createWithAllocator_ReaderThread_unsigned_long_ReaderThread_const_BloombergLP::bslma::Allocator_ (int64_t arg3, int64_t arg2, int64_t arg1) {
                                                                                                                                                                     |     int64_t var_18h;
                                                                                                                                                                     |     uint32_t var_38h;
                                                                                                                                                                     |     int64_t var_40h;
                                                                                                                                                                     |     rdx = arg3;
                                                                                                                                                                     |     rsi = arg2;
                                                                                                                                                                     |     rdi = arg1;
                                                                                                                                                                     |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<ReaderThread>(unsigned long*, ReaderThread const&, BloombergLP::bslma::Allocator*) */
    0x00408150 push rbp                                                                                                                                              |     
    0x00408151 push r15                                                                                                                                              |     
    0x00408153 push r14                                                                                                                                              |     
    0x00408155 push rbx                                                                                                                                              |     
    0x00408156 sub rsp, 0x48                                                                                                                                         |     
    0x0040815a mov r14, rdx                                                                                                                                          |     r14 = rdx;
    0x0040815d mov rbp, rsi                                                                                                                                          |     
    0x00408160 mov r15, rdi                                                                                                                                          |     r15 = rdi;
    0x00408163 mov rax, qword [rdx]                                                                                                                                  |     rax = *(rdx);
    0x00408166 mov esi, 0x50                                                                                                                                         |     esi = 0x50;
    0x0040816b mov rdi, rdx                                                                                                                                          |     rdi = rdx;
    0x0040816e call qword [rax + 0x10]                                                                                                                               |     rax = uint64_t (*rax + 0x10)(void, void, void) (rbx, r14, r15);
    0x00408171 mov rbx, rax                                                                                                                                          |     rbx = rax;
    0x00408174 mov qword [rax], 0x4082d0                                                                                                                             |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_ReaderThread_.invokerFunction_void_;
    0x0040817b movups xmm0, xmmword [rbp]                                                                                                                            |     __asm ("movups xmm0, xmmword [rbp]");
    0x0040817f movups xmmword [rax + 8], xmm0                                                                                                                        |     __asm ("movups xmmword [rax + 8], xmm0");
    0x00408183 mov rax, qword [rbp + 0x10]                                                                                                                           |     rax = *((rbp + 0x10));
    0x00408187 mov qword [rbx + 0x18], rax                                                                                                                           |     *((rbx + 0x18)) = rax;
    0x0040818b lea rdi, [rbx + 0x20]                                                                                                                                 |     
    0x0040818f mov qword [rbx + 0x20], 0                                                                                                                             |     *((rbx + 0x20)) = 0;
    0x00408197 mov qword [rbx + 0x48], r14                                                                                                                           |     *((rbx + 0x48)) = r14;
    0x0040819b movaps xmm0, xmmword [rip + 0x2aa0e]                                                                                                                  |     xmm0 = .comment;
    0x004081a2 movups xmmword [rbx + 0x38], xmm0                                                                                                                     |     __asm ("movups xmmword [rbx + 0x38], xmm0");
    0x004081a6 mov ecx, 0x4330c9                                                                                                                                     |     
    0x004081ab xor esi, esi                                                                                                                                          |     
    0x004081ad xor edx, edx                                                                                                                                          |     
    0x004081af call 0x40f220                                                                                                                                         |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x20, 0, 0, "string<...>::assign<Iter>(i,j): string too long");
    0x004081b4 mov rdi, rsp                                                                                                                                          |     
    0x004081b7 call 0x40ccc0                                                                                                                                         |     BloombergLP::bslmt::ThreadAttributes::ThreadAttributes() (rsp);
    0x004081bc mov rsi, rsp                                                                                                                                          |     
    0x004081bf mov edx, 0x40c1e0                                                                                                                                     |     
    0x004081c4 mov rdi, r15                                                                                                                                          |     
    0x004081c7 mov rcx, rbx                                                                                                                                          |     
    0x004081ca call 0x40d1b0                                                                                                                                         |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (r15, rsp, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x004081cf mov ebp, eax                                                                                                                                          |     
    0x004081d1 cmp qword [rsp + 0x38], 0x17                                                                                                                          |     
                                                                                                                                                                     |     if (*((rsp + 0x38)) != 0x17) {
    0x004081d7 je 0x4081e9                                                                                                                                           |         
    0x004081d9 mov rsi, qword [rsp + 0x18]                                                                                                                           |         rsi = *((rsp + 0x18));
    0x004081de mov rdi, qword [rsp + 0x40]                                                                                                                           |         rdi = *((rsp + 0x40));
    0x004081e3 mov rax, qword [rdi]                                                                                                                                  |         rax = *(rdi);
    0x004081e6 call qword [rax + 0x18]                                                                                                                               |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                     |     }
    0x004081e9 test ebp, ebp                                                                                                                                         |     
                                                                                                                                                                     |     if (ebp != 0) {
    0x004081eb je 0x408216                                                                                                                                           |         
    0x004081ed cmp qword [rbx + 0x40], 0x17                                                                                                                          |         
                                                                                                                                                                     |         if (*((rbx + 0x40)) != 0x17) {
    0x004081f2 je 0x408202                                                                                                                                           |             
    0x004081f4 mov rsi, qword [rbx + 0x20]                                                                                                                           |             rsi = *((rbx + 0x20));
    0x004081f8 mov rdi, qword [rbx + 0x48]                                                                                                                           |             rdi = *((rbx + 0x48));
    0x004081fc mov rax, qword [rdi]                                                                                                                                  |             rax = *(rdi);
    0x004081ff call qword [rax + 0x18]                                                                                                                               |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                     |         }
    0x00408202 mov qword [rbx + 0x38], 0xffffffffffffffff                                                                                                            |         *((rbx + 0x38)) = 0xffffffffffffffff;
    0x0040820a mov rax, qword [r14]                                                                                                                                  |         rax = *(r14);
    0x0040820d mov rdi, r14                                                                                                                                          |         rdi = r14;
    0x00408210 mov rsi, rbx                                                                                                                                          |         rsi = rbx;
    0x00408213 call qword [rax + 0x18]                                                                                                                               |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                     |     }
    0x00408216 mov eax, ebp                                                                                                                                          |     eax = ebp;
    0x00408218 add rsp, 0x48                                                                                                                                         |     
    0x0040821c pop rbx                                                                                                                                               |     
    0x0040821d pop r14                                                                                                                                               |     
    0x0040821f pop r15                                                                                                                                               |     
    0x00408221 pop rbp                                                                                                                                               |     
    0x00408222 ret                                                                                                                                                   |     return rax;
                                                                                                                                                                     | }
