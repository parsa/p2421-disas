    ; assembly                                                                                                                                                                                                                                                                       | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                     | /* bslmt_rwmutex.t/assume @ 0x40bd30 */
                                                                                                                                                                                                                                                                                     | #include <stdint.h>
                                                                                                                                                                                                                                                                                     |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_ReadWaitThread_BloombergLP::bslmt.ReaderWriterLock____unsigned_long__BloombergLP::bslmt::ThreadAttributes_const__ReadWaitThread_BloombergLP::bslmt::ReaderWriterLock__const__BloombergLP::bs ()           | int64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_ReadWaitThread_BloombergLP::bslmt_ReaderWriterLock_unsigned_long_BloombergLP::bslmt::ThreadAttributes_const_ReadWaitThread_BloombergLP::bslmt::ReaderWriterLock_const_BloombergLP::bs (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                     |     rcx = arg4;
                                                                                                                                                                                                                                                                                     |     rdx = arg3;
                                                                                                                                                                                                                                                                                     |     rsi = arg2;
                                                                                                                                                                                                                                                                                     |     rdi = arg1;
                                                                                                                                                                                                                                                                                     |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<ReadWaitThread<BloombergLP::bslmt::ReaderWriterLock> >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, ReadWaitThread<BloombergLP::bslmt::ReaderWriterLock> const&, BloombergLP::bslma::Allocator*) */
    0x0040bd30 push rbp                                                                                                                                                                                                                                                              |     
    0x0040bd31 push r15                                                                                                                                                                                                                                                              |     
    0x0040bd33 push r14                                                                                                                                                                                                                                                              |     
    0x0040bd35 push r13                                                                                                                                                                                                                                                              |     
    0x0040bd37 push r12                                                                                                                                                                                                                                                              |     
    0x0040bd39 push rbx                                                                                                                                                                                                                                                              |     
    0x0040bd3a push rax                                                                                                                                                                                                                                                              |     
    0x0040bd3b mov r14, rcx                                                                                                                                                                                                                                                          |     r14 = rcx;
    0x0040bd3e mov r12, rdx                                                                                                                                                                                                                                                          |     r12 = rdx;
    0x0040bd41 mov r15, rsi                                                                                                                                                                                                                                                          |     r15 = rsi;
    0x0040bd44 mov qword [rsp], rdi                                                                                                                                                                                                                                                  |     *(rsp) = rdi;
    0x0040bd48 mov r13, qword [rsi + 0x30]                                                                                                                                                                                                                                           |     r13 = *((rsi + 0x30));
    0x0040bd4c cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                          |     
                                                                                                                                                                                                                                                                                     |     if (*((rsi + 0x38)) != 0x17) {
    0x0040bd51 je 0x40bd59                                                                                                                                                                                                                                                           |         
    0x0040bd53 mov rbp, qword [r15 + 0x18]                                                                                                                                                                                                                                           |         rbp = *((r15 + 0x18));
    0x0040bd57 jmp 0x40bd5d                                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |     } else {
    0x0040bd59 lea rbp, [r15 + 0x18]                                                                                                                                                                                                                                                 |         rbp = r15 + 0x18;
                                                                                                                                                                                                                                                                                     |     }
    0x0040bd5d mov rax, qword [r14]                                                                                                                                                                                                                                                  |     rax = *(r14);
    0x0040bd60 mov esi, 0x50                                                                                                                                                                                                                                                         |     esi = 0x50;
    0x0040bd65 mov rdi, r14                                                                                                                                                                                                                                                          |     rdi = r14;
    0x0040bd68 call qword [rax + 0x10]                                                                                                                                                                                                                                               |     rax = uint64_t (*rax + 0x10)() ();
    0x0040bd6b mov rbx, rax                                                                                                                                                                                                                                                          |     rbx = rax;
    0x0040bd6e mov qword [rax], 0x40be80                                                                                                                                                                                                                                             |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_ReadWaitThread_BloombergLP::bslmt::ReaderWriterLock___.invokerFunction_void_;
    0x0040bd75 movups xmm0, xmmword [r12]                                                                                                                                                                                                                                            |     __asm ("movups xmm0, xmmword [r12]");
    0x0040bd7a movups xmmword [rax + 8], xmm0                                                                                                                                                                                                                                        |     __asm ("movups xmmword [rax + 8], xmm0");
    0x0040bd7e mov rax, qword [r12 + 0x10]                                                                                                                                                                                                                                           |     rax = *((r12 + 0x10));
    0x0040bd83 mov qword [rbx + 0x18], rax                                                                                                                                                                                                                                           |     *((rbx + 0x18)) = rax;
    0x0040bd87 lea rdi, [rbx + 0x20]                                                                                                                                                                                                                                                 |     
    0x0040bd8b mov qword [rbx + 0x20], 0                                                                                                                                                                                                                                             |     *((rbx + 0x20)) = 0;
    0x0040bd93 mov qword [rbx + 0x48], r14                                                                                                                                                                                                                                           |     *((rbx + 0x48)) = r14;
    0x0040bd97 movaps xmm0, xmmword [rip + 0x26e12]                                                                                                                                                                                                                                  |     xmm0 = .comment;
    0x0040bd9e movups xmmword [rbx + 0x38], xmm0                                                                                                                                                                                                                                     |     __asm ("movups xmmword [rbx + 0x38], xmm0");
    0x0040bda2 mov ecx, 0x4330c9                                                                                                                                                                                                                                                     |     
    0x0040bda7 mov rsi, rbp                                                                                                                                                                                                                                                          |     
    0x0040bdaa mov rdx, r13                                                                                                                                                                                                                                                          |     
    0x0040bdad call 0x40f220                                                                                                                                                                                                                                                         |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x20, rbp, r13, "string<...>::assign<Iter>(i,j): string too long");
    0x0040bdb2 mov edx, 0x40c1e0                                                                                                                                                                                                                                                     |     
    0x0040bdb7 mov rdi, qword [rsp]                                                                                                                                                                                                                                                  |     
    0x0040bdbb mov rsi, r15                                                                                                                                                                                                                                                          |     
    0x0040bdbe mov rcx, rbx                                                                                                                                                                                                                                                          |     
    0x0040bdc1 call 0x40d1b0                                                                                                                                                                                                                                                         |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0040bdc6 mov ebp, eax                                                                                                                                                                                                                                                          |     
    0x0040bdc8 test eax, eax                                                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                                                     |     if (eax != 0) {
    0x0040bdca je 0x40bdf5                                                                                                                                                                                                                                                           |         
    0x0040bdcc cmp qword [rbx + 0x40], 0x17                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |         if (*((rbx + 0x40)) != 0x17) {
    0x0040bdd1 je 0x40bde1                                                                                                                                                                                                                                                           |             
    0x0040bdd3 mov rsi, qword [rbx + 0x20]                                                                                                                                                                                                                                           |             rsi = *((rbx + 0x20));
    0x0040bdd7 mov rdi, qword [rbx + 0x48]                                                                                                                                                                                                                                           |             rdi = *((rbx + 0x48));
    0x0040bddb mov rax, qword [rdi]                                                                                                                                                                                                                                                  |             rax = *(rdi);
    0x0040bdde call qword [rax + 0x18]                                                                                                                                                                                                                                               |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |         }
    0x0040bde1 mov qword [rbx + 0x38], 0xffffffffffffffff                                                                                                                                                                                                                            |         *((rbx + 0x38)) = 0xffffffffffffffff;
    0x0040bde9 mov rax, qword [r14]                                                                                                                                                                                                                                                  |         rax = *(r14);
    0x0040bdec mov rdi, r14                                                                                                                                                                                                                                                          |         rdi = r14;
    0x0040bdef mov rsi, rbx                                                                                                                                                                                                                                                          |         rsi = rbx;
    0x0040bdf2 call qword [rax + 0x18]                                                                                                                                                                                                                                               |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |     }
    0x0040bdf5 mov eax, ebp                                                                                                                                                                                                                                                          |     eax = ebp;
    0x0040bdf7 add rsp, 8                                                                                                                                                                                                                                                            |     
    0x0040bdfb pop rbx                                                                                                                                                                                                                                                               |     
    0x0040bdfc pop r12                                                                                                                                                                                                                                                               |     
    0x0040bdfe pop r13                                                                                                                                                                                                                                                               |     
    0x0040be00 pop r14                                                                                                                                                                                                                                                               |     
    0x0040be02 pop r15                                                                                                                                                                                                                                                               |     
    0x0040be04 pop rbp                                                                                                                                                                                                                                                               |     
    0x0040be05 ret                                                                                                                                                                                                                                                                   |     return rax;
                                                                                                                                                                                                                                                                                     | }
