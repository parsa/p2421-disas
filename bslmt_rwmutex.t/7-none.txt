    ; assembly                                                                                                                                                                                                                                                                       | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                     | /* bslmt_rwmutex.t/none @ 0x408c70 */
                                                                                                                                                                                                                                                                                     | #include <stdint.h>
                                                                                                                                                                                                                                                                                     |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_ContentionWriter_BloombergLP::bslmt.RWMutex____unsigned_long__BloombergLP::bslmt::ThreadAttributes_const__ContentionWriter_BloombergLP::bslmt::RWMutex__const__BloombergLP::bslma::Allocator ()           | uint64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_ContentionWriter_BloombergLP::bslmt_RWMutex_unsigned_long_BloombergLP::bslmt::ThreadAttributes_const_ContentionWriter_BloombergLP::bslmt::RWMutex_const_BloombergLP::bslma::Allocator (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                     |     rcx = arg4;
                                                                                                                                                                                                                                                                                     |     rdx = arg3;
                                                                                                                                                                                                                                                                                     |     rsi = arg2;
                                                                                                                                                                                                                                                                                     |     rdi = arg1;
                                                                                                                                                                                                                                                                                     |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<ContentionWriter<BloombergLP::bslmt::RWMutex> >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, ContentionWriter<BloombergLP::bslmt::RWMutex> const&, BloombergLP::bslma::Allocator*) */
    0x00408c70 push rbp                                                                                                                                                                                                                                                              |     
    0x00408c71 push r15                                                                                                                                                                                                                                                              |     
    0x00408c73 push r14                                                                                                                                                                                                                                                              |     
    0x00408c75 push r13                                                                                                                                                                                                                                                              |     
    0x00408c77 push r12                                                                                                                                                                                                                                                              |     
    0x00408c79 push rbx                                                                                                                                                                                                                                                              |     
    0x00408c7a push rax                                                                                                                                                                                                                                                              |     
    0x00408c7b mov r14, rcx                                                                                                                                                                                                                                                          |     r14 = rcx;
    0x00408c7e mov r12, rdx                                                                                                                                                                                                                                                          |     r12 = rdx;
    0x00408c81 mov r15, rsi                                                                                                                                                                                                                                                          |     r15 = rsi;
    0x00408c84 mov qword [rsp], rdi                                                                                                                                                                                                                                                  |     *(rsp) = rdi;
    0x00408c88 cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                          |     
                                                                                                                                                                                                                                                                                     |     if (*((rsi + 0x38)) != 0x17) {
    0x00408c8d je 0x408c95                                                                                                                                                                                                                                                           |         
    0x00408c8f mov r13, qword [r15 + 0x18]                                                                                                                                                                                                                                           |         r13 = *((r15 + 0x18));
    0x00408c93 jmp 0x408c99                                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |     } else {
    0x00408c95 lea r13, [r15 + 0x18]                                                                                                                                                                                                                                                 |         r13 = r15 + 0x18;
                                                                                                                                                                                                                                                                                     |     }
    0x00408c99 mov rbp, qword [r15 + 0x30]                                                                                                                                                                                                                                           |     rbp = *((r15 + 0x30));
    0x00408c9d test r14, r14                                                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                                                     |     if (r14 == 0) {
    0x00408ca0 jne 0x408cb6                                                                                                                                                                                                                                                          |         
    0x00408ca2 mov r14, qword [rip + 0x241cc7]                                                                                                                                                                                                                                       |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00408ca9 test r14, r14                                                                                                                                                                                                                                                         |         
                                                                                                                                                                                                                                                                                     |         if (r14 != 0) {
    0x00408cac jne 0x408cb6                                                                                                                                                                                                                                                          |             goto label_0;
                                                                                                                                                                                                                                                                                     |         }
    0x00408cae call 0x432700                                                                                                                                                                                                                                                         |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x00408cb3 mov r14, rax                                                                                                                                                                                                                                                          |         r14 = rax;
                                                                                                                                                                                                                                                                                     |     }
                                                                                                                                                                                                                                                                                     | label_0:
    0x00408cb6 mov rax, qword [r14]                                                                                                                                                                                                                                                  |     rax = *(r14);
    0x00408cb9 mov esi, 0x58                                                                                                                                                                                                                                                         |     esi = 0x58;
    0x00408cbe mov rdi, r14                                                                                                                                                                                                                                                          |     rdi = r14;
    0x00408cc1 call qword [rax + 0x10]                                                                                                                                                                                                                                               |     rax = uint64_t (*rax + 0x10)() ();
    0x00408cc4 mov rbx, rax                                                                                                                                                                                                                                                          |     rbx = rax;
    0x00408cc7 mov qword [rax], 0x408de0                                                                                                                                                                                                                                             |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_ContentionWriter_BloombergLP::bslmt::RWMutex___.invokerFunction_void_;
    0x00408cce movups xmm0, xmmword [r12]                                                                                                                                                                                                                                            |     __asm ("movups xmm0, xmmword [r12]");
    0x00408cd3 movups xmm1, xmmword [r12 + 0x10]                                                                                                                                                                                                                                     |     __asm ("movups xmm1, xmmword [r12 + 0x10]");
    0x00408cd9 movups xmmword [rax + 8], xmm0                                                                                                                                                                                                                                        |     __asm ("movups xmmword [rax + 8], xmm0");
    0x00408cdd movups xmmword [rax + 0x18], xmm1                                                                                                                                                                                                                                     |     __asm ("movups xmmword [rax + 0x18], xmm1");
    0x00408ce1 lea rdi, [rax + 0x28]                                                                                                                                                                                                                                                 |     
    0x00408ce5 mov qword [rax + 0x28], 0                                                                                                                                                                                                                                             |     *((rax + 0x28)) = 0;
    0x00408ced mov qword [rax + 0x50], r14                                                                                                                                                                                                                                           |     *((rax + 0x50)) = r14;
    0x00408cf1 movaps xmm0, xmmword [rip + 0x2a0c8]                                                                                                                                                                                                                                  |     xmm0 = .comment;
    0x00408cf8 movups xmmword [rax + 0x40], xmm0                                                                                                                                                                                                                                     |     __asm ("movups xmmword [rax + 0x40], xmm0");
    0x00408cfc mov ecx, 0x4332d5                                                                                                                                                                                                                                                     |     
    0x00408d01 mov rsi, r13                                                                                                                                                                                                                                                          |     
    0x00408d04 mov rdx, rbp                                                                                                                                                                                                                                                          |     
    0x00408d07 call 0x40f410                                                                                                                                                                                                                                                         |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rax + 0x28, r13, rbp, "string<...>::assign<Iter>(i,j): string too long");
    0x00408d0c mov edx, 0x40c3b0                                                                                                                                                                                                                                                     |     
    0x00408d11 mov rdi, qword [rsp]                                                                                                                                                                                                                                                  |     
    0x00408d15 mov rsi, r15                                                                                                                                                                                                                                                          |     
    0x00408d18 mov rcx, rbx                                                                                                                                                                                                                                                          |     
    0x00408d1b call 0x40d380                                                                                                                                                                                                                                                         |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x00408d20 mov ebp, eax                                                                                                                                                                                                                                                          |     
    0x00408d22 test eax, eax                                                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                                                     |     if (eax != 0) {
    0x00408d24 je 0x408d4f                                                                                                                                                                                                                                                           |         
    0x00408d26 cmp qword [rbx + 0x48], 0x17                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |         if (*((rbx + 0x48)) != 0x17) {
    0x00408d2b je 0x408d3b                                                                                                                                                                                                                                                           |             
    0x00408d2d mov rsi, qword [rbx + 0x28]                                                                                                                                                                                                                                           |             rsi = *((rbx + 0x28));
    0x00408d31 mov rdi, qword [rbx + 0x50]                                                                                                                                                                                                                                           |             rdi = *((rbx + 0x50));
    0x00408d35 mov rax, qword [rdi]                                                                                                                                                                                                                                                  |             rax = *(rdi);
    0x00408d38 call qword [rax + 0x18]                                                                                                                                                                                                                                               |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |         }
    0x00408d3b mov qword [rbx + 0x40], 0xffffffffffffffff                                                                                                                                                                                                                            |         *((rbx + 0x40)) = 0xffffffffffffffff;
    0x00408d43 mov rax, qword [r14]                                                                                                                                                                                                                                                  |         rax = *(r14);
    0x00408d46 mov rdi, r14                                                                                                                                                                                                                                                          |         rdi = r14;
    0x00408d49 mov rsi, rbx                                                                                                                                                                                                                                                          |         rsi = rbx;
    0x00408d4c call qword [rax + 0x18]                                                                                                                                                                                                                                               |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |     }
    0x00408d4f mov eax, ebp                                                                                                                                                                                                                                                          |     eax = ebp;
    0x00408d51 add rsp, 8                                                                                                                                                                                                                                                            |     
    0x00408d55 pop rbx                                                                                                                                                                                                                                                               |     
    0x00408d56 pop r12                                                                                                                                                                                                                                                               |     
    0x00408d58 pop r13                                                                                                                                                                                                                                                               |     
    0x00408d5a pop r14                                                                                                                                                                                                                                                               |     
    0x00408d5c pop r15                                                                                                                                                                                                                                                               |     
    0x00408d5e pop rbp                                                                                                                                                                                                                                                               |     
    0x00408d5f ret                                                                                                                                                                                                                                                                   |     return rax;
                                                                                                                                                                                                                                                                                     | }
