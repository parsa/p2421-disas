    ; assembly                                                                                                                                                       | /* r2dec pseudo code output */
                                                                                                                                                                     | /* balb_filecleanerutil.t/none @ 0x40c1c0 */
                                                                                                                                                                     | #include <stdint.h>
                                                                                                                                                                     |  
    ; (fcn) method.BloombergLP::bdlma::SequentialPool.SequentialPool_unsigned_long__BloombergLP::bsls::Alignment::Strategy__BloombergLP::bslma::Allocator_ ()        | int64_t method_BloombergLP::bdlma::SequentialPool_SequentialPool_unsigned_long_BloombergLP::bsls::Alignment::Strategy_BloombergLP::bslma::Allocator_ (int64_t arg4, uint32_t arg3, int64_t arg2, int64_t arg1) {
                                                                                                                                                                     |     rcx = arg4;
                                                                                                                                                                     |     rdx = arg3;
                                                                                                                                                                     |     rsi = arg2;
                                                                                                                                                                     |     rdi = arg1;
                                                                                                                                                                     |     /* BloombergLP::bdlma::SequentialPool::SequentialPool(unsigned long, BloombergLP::bsls::Alignment::Strategy, BloombergLP::bslma::Allocator*) */
    0x0040c1c0 push r14                                                                                                                                              |     
    0x0040c1c2 push rbx                                                                                                                                              |     
    0x0040c1c3 push rax                                                                                                                                              |     
    0x0040c1c4 mov rax, rcx                                                                                                                                          |     rax = rcx;
    0x0040c1c7 mov r14, rsi                                                                                                                                          |     r14 = rsi;
    0x0040c1ca mov rbx, rdi                                                                                                                                          |     rbx = rdi;
    0x0040c1cd test edx, edx                                                                                                                                         |     
    0x0040c1cf mov ecx, 0xf                                                                                                                                          |     ecx = 0xf;
                                                                                                                                                                     |     if (edx == 0) {
    0x0040c1d4 cmove ecx, edx                                                                                                                                        |         ecx = edx;
                                                                                                                                                                     |     }
    0x0040c1d7 xorps xmm0, xmm0                                                                                                                                      |     __asm ("xorps xmm0, xmm0");
    0x0040c1da movups xmmword [rdi], xmm0                                                                                                                            |     __asm ("movups xmmword [rdi], xmm0");
    0x0040c1dd mov qword [rdi + 0x10], 0                                                                                                                             |     *((rdi + 0x10)) = 0;
    0x0040c1e5 mov byte [rdi + 0x18], cl                                                                                                                             |     *((rdi + 0x18)) = cl;
    0x0040c1e8 cmp edx, 2                                                                                                                                            |     
    0x0040c1eb mov ecx, 1                                                                                                                                            |     ecx = 1;
    0x0040c1f0 mov edx, 0x10                                                                                                                                         |     edx = 0x10;
                                                                                                                                                                     |     if (edx == 2) {
    0x0040c1f5 cmove edx, ecx                                                                                                                                        |         edx = ecx;
                                                                                                                                                                     |     }
    0x0040c1f8 mov byte [rdi + 0x19], dl                                                                                                                             |     *((rdi + 0x19)) = dl;
    0x0040c1fb lea rcx, [rdi + 0x20]                                                                                                                                 |     rcx = rdi + 0x20;
    0x0040c1ff mov qword [rdi + 0x20], 0                                                                                                                             |     *((rdi + 0x20)) = 0;
    0x0040c207 mov qword [rdi + 0x28], rcx                                                                                                                           |     *((rdi + 0x28)) = rcx;
    0x0040c20b lea rcx, [rsi - 1]                                                                                                                                    |     rcx = rsi - 1;
    0x0040c20f mov rdx, rcx                                                                                                                                          |     rdx = rcx;
    0x0040c212 or rdx, 1                                                                                                                                             |     rdx |= 1;
    0x0040c216 bsr rsi, rdx                                                                                                                                          |     __asm ("bsr rsi, rdx");
    0x0040c21a xor esi, 0x3f                                                                                                                                         |     esi ^= 0x3f;
    0x0040c21d cmp rcx, 1                                                                                                                                            |     
    0x0040c221 adc esi, 0                                                                                                                                            |     esi += 0;
    0x0040c224 mov ecx, esi                                                                                                                                          |     ecx = esi;
    0x0040c226 neg cl                                                                                                                                                |     cl = -cl;
    0x0040c228 mov edx, 1                                                                                                                                            |     edx = 1;
    0x0040c22d shl rdx, cl                                                                                                                                           |     rdx <<= cl;
    0x0040c230 test esi, esi                                                                                                                                         |     
                                                                                                                                                                     |     if (esi == 0) {
    0x0040c232 je 0x40c293                                                                                                                                           |         goto label_0;
                                                                                                                                                                     |     }
    0x0040c234 dec rdx                                                                                                                                               |     rdx--;
    0x0040c237 movabs rcx, 0xff00000000000000                                                                                                                        |     rcx = 0xff00000000000000;
    0x0040c241 or rcx, rdx                                                                                                                                           |     rcx |= rdx;
                                                                                                                                                                     |     do {
    0x0040c244 mov qword [rbx + 0x1f0], rcx                                                                                                                          |         *((rbx + 0x1f0)) = rcx;
    0x0040c24b mov qword [rbx + 0x1f8], rcx                                                                                                                          |         *((rbx + 0x1f8)) = rcx;
    0x0040c252 movups xmmword [rbx + 0x200], xmm0                                                                                                                    |         __asm ("movups xmmword [rbx + 0x200], xmm0");
    0x0040c259 mov qword [rbx + 0x210], 0                                                                                                                            |         *((rbx + 0x210)) = 0;
    0x0040c264 test rax, rax                                                                                                                                         |         
                                                                                                                                                                     |         if (rax == 0) {
    0x0040c267 jne 0x40c27a                                                                                                                                          |             
    0x0040c269 mov rax, qword [rip + 0x261a60]                                                                                                                       |             rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040c270 test rax, rax                                                                                                                                         |             
                                                                                                                                                                     |             if (rax != 0) {
    0x0040c273 jne 0x40c27a                                                                                                                                          |                 goto label_1;
                                                                                                                                                                     |             }
    0x0040c275 call 0x4173a0                                                                                                                                         |             rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                                                                                                                     |         }
                                                                                                                                                                     | label_1:
    0x0040c27a mov qword [rbx + 0x218], rax                                                                                                                          |         *((rbx + 0x218)) = rax;
    0x0040c281 mov rdi, rbx                                                                                                                                          |         rdi = rbx;
    0x0040c284 mov rsi, r14                                                                                                                                          |         rsi = r14;
    0x0040c287 add rsp, 8                                                                                                                                            |         
    0x0040c28b pop rbx                                                                                                                                               |         
    0x0040c28c pop r14                                                                                                                                               |         
    0x0040c28e jmp 0x40bea0                                                                                                                                          |         void (*0x40bea0)() ();
                                                                                                                                                                     | label_0:
    0x0040c293 mov rcx, 0xffffffffffffffff                                                                                                                           |         rcx = 0xffffffffffffffff;
    0x0040c29a jmp 0x40c244                                                                                                                                          |         
                                                                                                                                                                     |     } while (1);
                                                                                                                                                                     | }
