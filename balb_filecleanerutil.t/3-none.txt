    ; assembly                                                                                                                                                                       | /* r2dec pseudo code output */
                                                                                                                                                                                     | /* balb_filecleanerutil.t/none @ 0x40c580 */
                                                                                                                                                                                     | #include <stdint.h>
                                                                                                                                                                                     |  
    ; (fcn) method.BloombergLP::bdlma::SequentialPool.SequentialPool_unsigned_long__unsigned_long__BloombergLP::bsls::Alignment::Strategy__BloombergLP::bslma::Allocator_ ()         | int64_t method_BloombergLP::bdlma::SequentialPool_SequentialPool_unsigned_long_unsigned_long_BloombergLP::bsls::Alignment::Strategy_BloombergLP::bslma::Allocator_ (int64_t arg5, uint32_t arg4, uint32_t arg3, int64_t arg2, int64_t arg1) {
                                                                                                                                                                                     |     r8 = arg5;
                                                                                                                                                                                     |     rcx = arg4;
                                                                                                                                                                                     |     rdx = arg3;
                                                                                                                                                                                     |     rsi = arg2;
                                                                                                                                                                                     |     rdi = arg1;
                                                                                                                                                                                     |     /* BloombergLP::bdlma::SequentialPool::SequentialPool(unsigned long, unsigned long, BloombergLP::bsls::Alignment::Strategy, BloombergLP::bslma::Allocator*) */
    0x0040c580 push r14                                                                                                                                                              |     
    0x0040c582 push rbx                                                                                                                                                              |     
    0x0040c583 push rax                                                                                                                                                              |     
    0x0040c584 mov r14, rsi                                                                                                                                                          |     r14 = rsi;
    0x0040c587 mov rbx, rdi                                                                                                                                                          |     rbx = rdi;
    0x0040c58a movabs rax, 0xffffffffffffff                                                                                                                                          |     rax = 0xffffffffffffff;
    0x0040c594 test ecx, ecx                                                                                                                                                         |     
    0x0040c596 mov esi, 0xf                                                                                                                                                          |     esi = 0xf;
                                                                                                                                                                                     |     if (ecx == 0) {
    0x0040c59b cmove esi, ecx                                                                                                                                                        |         esi = ecx;
                                                                                                                                                                                     |     }
    0x0040c59e xorps xmm0, xmm0                                                                                                                                                      |     __asm ("xorps xmm0, xmm0");
    0x0040c5a1 movups xmmword [rdi], xmm0                                                                                                                                            |     __asm ("movups xmmword [rdi], xmm0");
    0x0040c5a4 mov qword [rdi + 0x10], 0                                                                                                                                             |     *((rdi + 0x10)) = 0;
    0x0040c5ac mov byte [rdi + 0x18], sil                                                                                                                                            |     *((rdi + 0x18)) = sil;
    0x0040c5b0 cmp ecx, 2                                                                                                                                                            |     
    0x0040c5b3 mov ecx, 1                                                                                                                                                            |     ecx = 1;
    0x0040c5b8 mov esi, 0x10                                                                                                                                                         |     esi = 0x10;
                                                                                                                                                                                     |     if (ecx == 2) {
    0x0040c5bd cmove esi, ecx                                                                                                                                                        |         esi = ecx;
                                                                                                                                                                                     |     }
    0x0040c5c0 mov byte [rdi + 0x19], sil                                                                                                                                            |     *((rdi + 0x19)) = sil;
    0x0040c5c4 lea rcx, [rdi + 0x20]                                                                                                                                                 |     rcx = rdi + 0x20;
    0x0040c5c8 mov qword [rdi + 0x20], 0                                                                                                                                             |     *((rdi + 0x20)) = 0;
    0x0040c5d0 mov qword [rdi + 0x28], rcx                                                                                                                                           |     *((rdi + 0x28)) = rcx;
    0x0040c5d4 lea rcx, [r14 - 1]                                                                                                                                                    |     rcx = r14 - 1;
    0x0040c5d8 mov rsi, rcx                                                                                                                                                          |     rsi = rcx;
    0x0040c5db or rsi, 1                                                                                                                                                             |     rsi |= 1;
    0x0040c5df bsr rdi, rsi                                                                                                                                                          |     __asm ("bsr rdi, rsi");
    0x0040c5e3 xor edi, 0x3f                                                                                                                                                         |     edi ^= 0x3f;
    0x0040c5e6 cmp rcx, 1                                                                                                                                                            |     
    0x0040c5ea adc edi, 0                                                                                                                                                            |     edi += 0;
    0x0040c5ed mov ecx, edi                                                                                                                                                          |     ecx = edi;
    0x0040c5ef neg cl                                                                                                                                                                |     cl = -cl;
    0x0040c5f1 mov esi, 1                                                                                                                                                            |     esi = 1;
    0x0040c5f6 shl rsi, cl                                                                                                                                                           |     rsi <<= cl;
    0x0040c5f9 test edi, edi                                                                                                                                                         |     
                                                                                                                                                                                     |     if (edi != 0) {
    0x0040c5fb je 0x40c600                                                                                                                                                           |         
    0x0040c5fd add rax, rsi                                                                                                                                                          |         rax += rsi;
                                                                                                                                                                                     |     }
    0x0040c600 movabs rcx, 0x7ffffffffffffffe                                                                                                                                        |     rcx = 0x7ffffffffffffffe;
    0x0040c60a and rdx, rcx                                                                                                                                                          |     rdx &= rcx;
    0x0040c60d lea rcx, [rdx + 1]                                                                                                                                                    |     rcx = rdx + 1;
    0x0040c611 bsr rsi, rcx                                                                                                                                                          |     __asm ("bsr rsi, rcx");
    0x0040c615 xor esi, 0x3f                                                                                                                                                         |     esi ^= 0x3f;
    0x0040c618 cmp rdx, 1                                                                                                                                                            |     
    0x0040c61c sbb ecx, ecx                                                                                                                                                          |     ecx -= ecx;
    0x0040c61e sub ecx, esi                                                                                                                                                          |     ecx -= esi;
    0x0040c620 mov rdx, 0xffffffffffffffff                                                                                                                                           |     rdx = 0xffffffffffffffff;
    0x0040c627 shl rdx, cl                                                                                                                                                           |     rdx <<= cl;
    0x0040c62a movabs rcx, 0xff00000000000000                                                                                                                                        |     rcx = 0xff00000000000000;
    0x0040c634 or rcx, rax                                                                                                                                                           |     rcx |= rax;
    0x0040c637 or rcx, rdx                                                                                                                                                           |     rcx |= rdx;
    0x0040c63a mov qword [rbx + 0x1f0], rcx                                                                                                                                          |     *((rbx + 0x1f0)) = rcx;
    0x0040c641 mov qword [rbx + 0x1f8], rcx                                                                                                                                          |     *((rbx + 0x1f8)) = rcx;
    0x0040c648 movups xmmword [rbx + 0x200], xmm0                                                                                                                                    |     __asm ("movups xmmword [rbx + 0x200], xmm0");
    0x0040c64f mov qword [rbx + 0x210], 0                                                                                                                                            |     *((rbx + 0x210)) = 0;
    0x0040c65a test r8, r8                                                                                                                                                           |     
                                                                                                                                                                                     |     if (r8 == 0) {
    0x0040c65d jne 0x40c673                                                                                                                                                          |         
    0x0040c65f mov r8, qword [rip + 0x26166a]                                                                                                                                        |         r8 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040c666 test r8, r8                                                                                                                                                           |         
                                                                                                                                                                                     |         if (r8 != 0) {
    0x0040c669 jne 0x40c673                                                                                                                                                          |             goto label_0;
                                                                                                                                                                                     |         }
    0x0040c66b call 0x4173a0                                                                                                                                                         |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x0040c670 mov r8, rax                                                                                                                                                           |         r8 = rax;
                                                                                                                                                                                     |     }
                                                                                                                                                                                     | label_0:
    0x0040c673 mov qword [rbx + 0x218], r8                                                                                                                                           |     *((rbx + 0x218)) = r8;
    0x0040c67a mov rdi, rbx                                                                                                                                                          |     rdi = rbx;
    0x0040c67d mov rsi, r14                                                                                                                                                          |     rsi = r14;
    0x0040c680 add rsp, 8                                                                                                                                                            |     
    0x0040c684 pop rbx                                                                                                                                                               |     
    0x0040c685 pop r14                                                                                                                                                               |     
    0x0040c687 jmp 0x40bea0                                                                                                                                                          |     return void (*0x40bea0)() ();
                                                                                                                                                                                     | }
