    ; assembly                                                                                                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                                                                                                 | /* balb_filecleanerutil.t/none @ 0x40c690 */
                                                                                                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                                                                                                 |  
    ; (fcn) method.BloombergLP::bdlma::SequentialPool.SequentialPool_unsigned_long__unsigned_long__BloombergLP::bsls::BlockGrowth::Strategy__BloombergLP::bsls::Alignment::Strategy__BloombergLP::bslma::Allocator_ ()           | int64_t method_BloombergLP::bdlma::SequentialPool_SequentialPool_unsigned_long_unsigned_long_BloombergLP::bsls::BlockGrowth::Strategy_BloombergLP::bsls::Alignment::Strategy_BloombergLP::bslma::Allocator_ (int64_t arg6, uint32_t arg5, int64_t arg4, uint32_t arg3, int64_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                 |     r9 = arg6;
                                                                                                                                                                                                                                 |     r8 = arg5;
                                                                                                                                                                                                                                 |     rcx = arg4;
                                                                                                                                                                                                                                 |     rdx = arg3;
                                                                                                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                                                                                                 |     /* BloombergLP::bdlma::SequentialPool::SequentialPool(unsigned long, unsigned long, BloombergLP::bsls::BlockGrowth::Strategy, BloombergLP::bsls::Alignment::Strategy, BloombergLP::bslma::Allocator*) */
    0x0040c690 push r14                                                                                                                                                                                                          |     
    0x0040c692 push rbx                                                                                                                                                                                                          |     
    0x0040c693 push rax                                                                                                                                                                                                          |     
    0x0040c694 mov r10d, ecx                                                                                                                                                                                                     |     r10d = ecx;
    0x0040c697 mov r14, rsi                                                                                                                                                                                                      |     r14 = rsi;
    0x0040c69a mov rbx, rdi                                                                                                                                                                                                      |     rbx = rdi;
    0x0040c69d movabs rsi, 0xffffffffffffff                                                                                                                                                                                      |     rsi = 0xffffffffffffff;
    0x0040c6a7 test r8d, r8d                                                                                                                                                                                                     |     
    0x0040c6aa mov ecx, 0xf                                                                                                                                                                                                      |     ecx = 0xf;
                                                                                                                                                                                                                                 |     if (r8d == 0) {
    0x0040c6af cmove ecx, r8d                                                                                                                                                                                                    |         ecx = r8d;
                                                                                                                                                                                                                                 |     }
    0x0040c6b3 xorps xmm0, xmm0                                                                                                                                                                                                  |     __asm ("xorps xmm0, xmm0");
    0x0040c6b6 movups xmmword [rdi], xmm0                                                                                                                                                                                        |     __asm ("movups xmmword [rdi], xmm0");
    0x0040c6b9 mov qword [rdi + 0x10], 0                                                                                                                                                                                         |     *((rdi + 0x10)) = 0;
    0x0040c6c1 mov byte [rdi + 0x18], cl                                                                                                                                                                                         |     *((rdi + 0x18)) = cl;
    0x0040c6c4 cmp r8d, 2                                                                                                                                                                                                        |     
    0x0040c6c8 mov ecx, 1                                                                                                                                                                                                        |     ecx = 1;
    0x0040c6cd mov edi, 0x10                                                                                                                                                                                                     |     edi = 0x10;
                                                                                                                                                                                                                                 |     if (r8d == 2) {
    0x0040c6d2 cmove edi, ecx                                                                                                                                                                                                    |         edi = ecx;
                                                                                                                                                                                                                                 |     }
    0x0040c6d5 mov byte [rbx + 0x19], dil                                                                                                                                                                                        |     *((rbx + 0x19)) = dil;
    0x0040c6d9 lea rcx, [rbx + 0x20]                                                                                                                                                                                             |     rcx = rbx + 0x20;
    0x0040c6dd mov qword [rbx + 0x20], 0                                                                                                                                                                                         |     *((rbx + 0x20)) = 0;
    0x0040c6e5 mov qword [rbx + 0x28], rcx                                                                                                                                                                                       |     *((rbx + 0x28)) = rcx;
    0x0040c6e9 lea rcx, [r14 - 1]                                                                                                                                                                                                |     rcx = r14 - 1;
    0x0040c6ed mov rdi, rcx                                                                                                                                                                                                      |     rdi = rcx;
    0x0040c6f0 or rdi, 1                                                                                                                                                                                                         |     rdi |= 1;
    0x0040c6f4 bsr rax, rdi                                                                                                                                                                                                      |     __asm ("bsr rax, rdi");
    0x0040c6f8 xor eax, 0x3f                                                                                                                                                                                                     |     eax ^= 0x3f;
    0x0040c6fb cmp rcx, 1                                                                                                                                                                                                        |     
    0x0040c6ff adc eax, 0                                                                                                                                                                                                        |     eax += 0;
    0x0040c702 mov ecx, eax                                                                                                                                                                                                      |     ecx = eax;
    0x0040c704 neg cl                                                                                                                                                                                                            |     cl = -cl;
    0x0040c706 mov edi, 1                                                                                                                                                                                                        |     edi = 1;
    0x0040c70b shl rdi, cl                                                                                                                                                                                                       |     rdi <<= cl;
    0x0040c70e test eax, eax                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                 |     if (eax != 0) {
    0x0040c710 je 0x40c715                                                                                                                                                                                                       |         
    0x0040c712 add rsi, rdi                                                                                                                                                                                                      |         rsi += rdi;
                                                                                                                                                                                                                                 |     }
    0x0040c715 movabs rax, 0x7ffffffffffffffe                                                                                                                                                                                    |     rax = 0x7ffffffffffffffe;
    0x0040c71f and rdx, rax                                                                                                                                                                                                      |     rdx &= rax;
    0x0040c722 lea rax, [rdx + 1]                                                                                                                                                                                                |     rax = rdx + 1;
    0x0040c726 bsr rax, rax                                                                                                                                                                                                      |     __asm ("bsr rax, rax");
    0x0040c72a xor eax, 0x3f                                                                                                                                                                                                     |     eax ^= 0x3f;
    0x0040c72d cmp rdx, 1                                                                                                                                                                                                        |     
    0x0040c731 sbb ecx, ecx                                                                                                                                                                                                      |     ecx -= ecx;
    0x0040c733 sub ecx, eax                                                                                                                                                                                                      |     ecx -= eax;
    0x0040c735 mov rax, 0xffffffffffffffff                                                                                                                                                                                       |     rax = 0xffffffffffffffff;
    0x0040c73c shl rax, cl                                                                                                                                                                                                       |     rax <<= cl;
    0x0040c73f movabs rcx, 0xff00000000000000                                                                                                                                                                                    |     rcx = 0xff00000000000000;
    0x0040c749 or rcx, rsi                                                                                                                                                                                                       |     rcx |= rsi;
    0x0040c74c or rcx, rax                                                                                                                                                                                                       |     rcx |= rax;
    0x0040c74f mov qword [rbx + 0x1f0], rcx                                                                                                                                                                                      |     *((rbx + 0x1f0)) = rcx;
    0x0040c756 xor eax, eax                                                                                                                                                                                                      |     eax = 0;
    0x0040c758 test r10d, r10d                                                                                                                                                                                                   |     
                                                                                                                                                                                                                                 |     if (r10d != 0) {
    0x0040c75b cmovne rax, r14                                                                                                                                                                                                   |         rax = r14;
                                                                                                                                                                                                                                 |     }
    0x0040c75f mov qword [rbx + 0x1f8], rcx                                                                                                                                                                                      |     *((rbx + 0x1f8)) = rcx;
    0x0040c766 movups xmmword [rbx + 0x200], xmm0                                                                                                                                                                                |     __asm ("movups xmmword [rbx + 0x200], xmm0");
    0x0040c76d mov qword [rbx + 0x210], rax                                                                                                                                                                                      |     *((rbx + 0x210)) = rax;
    0x0040c774 test r9, r9                                                                                                                                                                                                       |     
                                                                                                                                                                                                                                 |     if (r9 == 0) {
    0x0040c777 jne 0x40c78d                                                                                                                                                                                                      |         
    0x0040c779 mov r9, qword [rip + 0x261550]                                                                                                                                                                                    |         r9 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040c780 test r9, r9                                                                                                                                                                                                       |         
                                                                                                                                                                                                                                 |         if (r9 != 0) {
    0x0040c783 jne 0x40c78d                                                                                                                                                                                                      |             goto label_0;
                                                                                                                                                                                                                                 |         }
    0x0040c785 call 0x4173a0                                                                                                                                                                                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x0040c78a mov r9, rax                                                                                                                                                                                                       |         r9 = rax;
                                                                                                                                                                                                                                 |     }
                                                                                                                                                                                                                                 | label_0:
    0x0040c78d mov qword [rbx + 0x218], r9                                                                                                                                                                                       |     *((rbx + 0x218)) = r9;
    0x0040c794 mov rdi, rbx                                                                                                                                                                                                      |     rdi = rbx;
    0x0040c797 mov rsi, r14                                                                                                                                                                                                      |     rsi = r14;
    0x0040c79a add rsp, 8                                                                                                                                                                                                        |     
    0x0040c79e pop rbx                                                                                                                                                                                                           |     
    0x0040c79f pop r14                                                                                                                                                                                                           |     
    0x0040c7a1 jmp 0x40bea0                                                                                                                                                                                                      |     return void (*0x40bea0)() ();
                                                                                                                                                                                                                                 | }
