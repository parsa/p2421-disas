    ; assembly                                                                                                                                                                           | /* r2dec pseudo code output */
                                                                                                                                                                                         | /* balb_filecleanerutil.t/none @ 0x40c480 */
                                                                                                                                                                                         | #include <stdint.h>
                                                                                                                                                                                         |  
    ; (fcn) method.BloombergLP::bdlma::SequentialPool.SequentialPool_unsigned_long__unsigned_long__BloombergLP::bsls::BlockGrowth::Strategy__BloombergLP::bslma::Allocator_ ()           | int64_t method_BloombergLP::bdlma::SequentialPool_SequentialPool_unsigned_long_unsigned_long_BloombergLP::bsls::BlockGrowth::Strategy_BloombergLP::bslma::Allocator_ (int64_t arg5, int64_t arg4, uint32_t arg3, int64_t arg2, int64_t arg1) {
                                                                                                                                                                                         |     r8 = arg5;
                                                                                                                                                                                         |     rcx = arg4;
                                                                                                                                                                                         |     rdx = arg3;
                                                                                                                                                                                         |     rsi = arg2;
                                                                                                                                                                                         |     rdi = arg1;
                                                                                                                                                                                         |     /* BloombergLP::bdlma::SequentialPool::SequentialPool(unsigned long, unsigned long, BloombergLP::bsls::BlockGrowth::Strategy, BloombergLP::bslma::Allocator*) */
    0x0040c480 push r14                                                                                                                                                                  |     
    0x0040c482 push rbx                                                                                                                                                                  |     
    0x0040c483 push rax                                                                                                                                                                  |     
    0x0040c484 mov r9d, ecx                                                                                                                                                              |     r9d = ecx;
    0x0040c487 mov r14, rsi                                                                                                                                                              |     r14 = rsi;
    0x0040c48a mov rbx, rdi                                                                                                                                                              |     rbx = rdi;
    0x0040c48d movabs rsi, 0xffffffffffffff                                                                                                                                              |     rsi = 0xffffffffffffff;
    0x0040c497 xorps xmm0, xmm0                                                                                                                                                          |     __asm ("xorps xmm0, xmm0");
    0x0040c49a movups xmmword [rdi], xmm0                                                                                                                                                |     __asm ("movups xmmword [rdi], xmm0");
    0x0040c49d mov qword [rdi + 0x10], 0                                                                                                                                                 |     *((rdi + 0x10)) = 0;
    0x0040c4a5 mov word [rdi + 0x18], 0x100f                                                                                                                                             |     *((rdi + 0x18)) = 0x100f;
    0x0040c4ab lea rcx, [rdi + 0x20]                                                                                                                                                     |     rcx = rdi + 0x20;
    0x0040c4af mov qword [rdi + 0x20], 0                                                                                                                                                 |     *((rdi + 0x20)) = 0;
    0x0040c4b7 mov qword [rdi + 0x28], rcx                                                                                                                                               |     *((rdi + 0x28)) = rcx;
    0x0040c4bb lea rcx, [r14 - 1]                                                                                                                                                        |     rcx = r14 - 1;
    0x0040c4bf mov rdi, rcx                                                                                                                                                              |     rdi = rcx;
    0x0040c4c2 or rdi, 1                                                                                                                                                                 |     rdi |= 1;
    0x0040c4c6 bsr rax, rdi                                                                                                                                                              |     __asm ("bsr rax, rdi");
    0x0040c4ca xor eax, 0x3f                                                                                                                                                             |     eax ^= 0x3f;
    0x0040c4cd cmp rcx, 1                                                                                                                                                                |     
    0x0040c4d1 adc eax, 0                                                                                                                                                                |     eax += 0;
    0x0040c4d4 mov ecx, eax                                                                                                                                                              |     ecx = eax;
    0x0040c4d6 neg cl                                                                                                                                                                    |     cl = -cl;
    0x0040c4d8 mov edi, 1                                                                                                                                                                |     edi = 1;
    0x0040c4dd shl rdi, cl                                                                                                                                                               |     rdi <<= cl;
    0x0040c4e0 test eax, eax                                                                                                                                                             |     
                                                                                                                                                                                         |     if (eax != 0) {
    0x0040c4e2 je 0x40c4e7                                                                                                                                                               |         
    0x0040c4e4 add rsi, rdi                                                                                                                                                              |         rsi += rdi;
                                                                                                                                                                                         |     }
    0x0040c4e7 movabs rax, 0x7ffffffffffffffe                                                                                                                                            |     rax = 0x7ffffffffffffffe;
    0x0040c4f1 and rdx, rax                                                                                                                                                              |     rdx &= rax;
    0x0040c4f4 lea rax, [rdx + 1]                                                                                                                                                        |     rax = rdx + 1;
    0x0040c4f8 bsr rax, rax                                                                                                                                                              |     __asm ("bsr rax, rax");
    0x0040c4fc xor eax, 0x3f                                                                                                                                                             |     eax ^= 0x3f;
    0x0040c4ff cmp rdx, 1                                                                                                                                                                |     
    0x0040c503 sbb ecx, ecx                                                                                                                                                              |     ecx -= ecx;
    0x0040c505 sub ecx, eax                                                                                                                                                              |     ecx -= eax;
    0x0040c507 mov rax, 0xffffffffffffffff                                                                                                                                               |     rax = 0xffffffffffffffff;
    0x0040c50e shl rax, cl                                                                                                                                                               |     rax <<= cl;
    0x0040c511 movabs rcx, 0xff00000000000000                                                                                                                                            |     rcx = 0xff00000000000000;
    0x0040c51b or rcx, rsi                                                                                                                                                               |     rcx |= rsi;
    0x0040c51e or rcx, rax                                                                                                                                                               |     rcx |= rax;
    0x0040c521 mov qword [rbx + 0x1f0], rcx                                                                                                                                              |     *((rbx + 0x1f0)) = rcx;
    0x0040c528 xor eax, eax                                                                                                                                                              |     eax = 0;
    0x0040c52a test r9d, r9d                                                                                                                                                             |     
                                                                                                                                                                                         |     if (r9d != 0) {
    0x0040c52d cmovne rax, r14                                                                                                                                                           |         rax = r14;
                                                                                                                                                                                         |     }
    0x0040c531 mov qword [rbx + 0x1f8], rcx                                                                                                                                              |     *((rbx + 0x1f8)) = rcx;
    0x0040c538 movups xmmword [rbx + 0x200], xmm0                                                                                                                                        |     __asm ("movups xmmword [rbx + 0x200], xmm0");
    0x0040c53f mov qword [rbx + 0x210], rax                                                                                                                                              |     *((rbx + 0x210)) = rax;
    0x0040c546 test r8, r8                                                                                                                                                               |     
                                                                                                                                                                                         |     if (r8 == 0) {
    0x0040c549 jne 0x40c55f                                                                                                                                                              |         
    0x0040c54b mov r8, qword [rip + 0x26177e]                                                                                                                                            |         r8 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040c552 test r8, r8                                                                                                                                                               |         
                                                                                                                                                                                         |         if (r8 != 0) {
    0x0040c555 jne 0x40c55f                                                                                                                                                              |             goto label_0;
                                                                                                                                                                                         |         }
    0x0040c557 call 0x4173a0                                                                                                                                                             |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x0040c55c mov r8, rax                                                                                                                                                               |         r8 = rax;
                                                                                                                                                                                         |     }
                                                                                                                                                                                         | label_0:
    0x0040c55f mov qword [rbx + 0x218], r8                                                                                                                                               |     *((rbx + 0x218)) = r8;
    0x0040c566 mov rdi, rbx                                                                                                                                                              |     rdi = rbx;
    0x0040c569 mov rsi, r14                                                                                                                                                              |     rsi = r14;
    0x0040c56c add rsp, 8                                                                                                                                                                |     
    0x0040c570 pop rbx                                                                                                                                                                   |     
    0x0040c571 pop r14                                                                                                                                                                   |     
    0x0040c573 jmp 0x40bea0                                                                                                                                                              |     return void (*0x40bea0)() ();
                                                                                                                                                                                         | }
