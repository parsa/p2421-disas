    ; assembly                                                                                                                                                                           | /* r2dec pseudo code output */
                                                                                                                                                                                         | /* balb_filecleanerutil.t/assume @ 0x40c500 */
                                                                                                                                                                                         | #include <stdint.h>
                                                                                                                                                                                         |  
    ; (fcn) method.BloombergLP::bdlma::SequentialPool.SequentialPool_unsigned_long__unsigned_long__BloombergLP::bsls::BlockGrowth::Strategy__BloombergLP::bslma::Allocator_ ()           | int64_t method_BloombergLP::bdlma::SequentialPool_SequentialPool_unsigned_long_unsigned_long_BloombergLP::bsls::BlockGrowth::Strategy_BloombergLP::bslma::Allocator_ (int64_t arg5, int64_t arg4, uint32_t arg3, int64_t arg2, int64_t arg1) {
                                                                                                                                                                                         |     r8 = arg5;
                                                                                                                                                                                         |     rcx = arg4;
                                                                                                                                                                                         |     rdx = arg3;
                                                                                                                                                                                         |     rsi = arg2;
                                                                                                                                                                                         |     rdi = arg1;
                                                                                                                                                                                         |     /* BloombergLP::bdlma::SequentialPool::SequentialPool(unsigned long, unsigned long, BloombergLP::bsls::BlockGrowth::Strategy, BloombergLP::bslma::Allocator*) */
    0x0040c500 push r14                                                                                                                                                                  |     
    0x0040c502 push rbx                                                                                                                                                                  |     
    0x0040c503 push rax                                                                                                                                                                  |     
    0x0040c504 mov r9d, ecx                                                                                                                                                              |     r9d = ecx;
    0x0040c507 mov r14, rsi                                                                                                                                                              |     r14 = rsi;
    0x0040c50a mov rbx, rdi                                                                                                                                                              |     rbx = rdi;
    0x0040c50d movabs rsi, 0xffffffffffffff                                                                                                                                              |     rsi = 0xffffffffffffff;
    0x0040c517 xorps xmm0, xmm0                                                                                                                                                          |     __asm ("xorps xmm0, xmm0");
    0x0040c51a movups xmmword [rdi], xmm0                                                                                                                                                |     __asm ("movups xmmword [rdi], xmm0");
    0x0040c51d mov qword [rdi + 0x10], 0                                                                                                                                                 |     *((rdi + 0x10)) = 0;
    0x0040c525 mov word [rdi + 0x18], 0x100f                                                                                                                                             |     *((rdi + 0x18)) = 0x100f;
    0x0040c52b lea rcx, [rdi + 0x20]                                                                                                                                                     |     rcx = rdi + 0x20;
    0x0040c52f mov qword [rdi + 0x20], 0                                                                                                                                                 |     *((rdi + 0x20)) = 0;
    0x0040c537 mov qword [rdi + 0x28], rcx                                                                                                                                               |     *((rdi + 0x28)) = rcx;
    0x0040c53b lea rcx, [r14 - 1]                                                                                                                                                        |     rcx = r14 - 1;
    0x0040c53f mov rdi, rcx                                                                                                                                                              |     rdi = rcx;
    0x0040c542 or rdi, 1                                                                                                                                                                 |     rdi |= 1;
    0x0040c546 bsr rax, rdi                                                                                                                                                              |     __asm ("bsr rax, rdi");
    0x0040c54a xor eax, 0x3f                                                                                                                                                             |     eax ^= 0x3f;
    0x0040c54d cmp rcx, 1                                                                                                                                                                |     
    0x0040c551 adc eax, 0                                                                                                                                                                |     eax += 0;
    0x0040c554 mov ecx, eax                                                                                                                                                              |     ecx = eax;
    0x0040c556 neg cl                                                                                                                                                                    |     cl = -cl;
    0x0040c558 mov edi, 1                                                                                                                                                                |     edi = 1;
    0x0040c55d shl rdi, cl                                                                                                                                                               |     rdi <<= cl;
    0x0040c560 test eax, eax                                                                                                                                                             |     
                                                                                                                                                                                         |     if (eax != 0) {
    0x0040c562 je 0x40c567                                                                                                                                                               |         
    0x0040c564 add rsi, rdi                                                                                                                                                              |         rsi += rdi;
                                                                                                                                                                                         |     }
    0x0040c567 movabs rax, 0x7ffffffffffffffe                                                                                                                                            |     rax = 0x7ffffffffffffffe;
    0x0040c571 and rdx, rax                                                                                                                                                              |     rdx &= rax;
    0x0040c574 lea rax, [rdx + 1]                                                                                                                                                        |     rax = rdx + 1;
    0x0040c578 bsr rax, rax                                                                                                                                                              |     __asm ("bsr rax, rax");
    0x0040c57c xor eax, 0x3f                                                                                                                                                             |     eax ^= 0x3f;
    0x0040c57f cmp rdx, 1                                                                                                                                                                |     
    0x0040c583 sbb ecx, ecx                                                                                                                                                              |     ecx -= ecx;
    0x0040c585 sub ecx, eax                                                                                                                                                              |     ecx -= eax;
    0x0040c587 mov rax, 0xffffffffffffffff                                                                                                                                               |     rax = 0xffffffffffffffff;
    0x0040c58e shl rax, cl                                                                                                                                                               |     rax <<= cl;
    0x0040c591 movabs rcx, 0xff00000000000000                                                                                                                                            |     rcx = 0xff00000000000000;
    0x0040c59b or rcx, rsi                                                                                                                                                               |     rcx |= rsi;
    0x0040c59e or rcx, rax                                                                                                                                                               |     rcx |= rax;
    0x0040c5a1 mov qword [rbx + 0x1f0], rcx                                                                                                                                              |     *((rbx + 0x1f0)) = rcx;
    0x0040c5a8 xor eax, eax                                                                                                                                                              |     eax = 0;
    0x0040c5aa test r9d, r9d                                                                                                                                                             |     
                                                                                                                                                                                         |     if (r9d != 0) {
    0x0040c5ad cmovne rax, r14                                                                                                                                                           |         rax = r14;
                                                                                                                                                                                         |     }
    0x0040c5b1 mov qword [rbx + 0x1f8], rcx                                                                                                                                              |     *((rbx + 0x1f8)) = rcx;
    0x0040c5b8 movups xmmword [rbx + 0x200], xmm0                                                                                                                                        |     __asm ("movups xmmword [rbx + 0x200], xmm0");
    0x0040c5bf mov qword [rbx + 0x210], rax                                                                                                                                              |     *((rbx + 0x210)) = rax;
    0x0040c5c6 test r8, r8                                                                                                                                                               |     
                                                                                                                                                                                         |     if (r8 == 0) {
    0x0040c5c9 jne 0x40c5df                                                                                                                                                              |         
    0x0040c5cb mov r8, qword [rip + 0x2616fe]                                                                                                                                            |         r8 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040c5d2 test r8, r8                                                                                                                                                               |         
                                                                                                                                                                                         |         if (r8 != 0) {
    0x0040c5d5 jne 0x40c5df                                                                                                                                                              |             goto label_0;
                                                                                                                                                                                         |         }
    0x0040c5d7 call 0x4171b0                                                                                                                                                             |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x0040c5dc mov r8, rax                                                                                                                                                               |         r8 = rax;
                                                                                                                                                                                         |     }
                                                                                                                                                                                         | label_0:
    0x0040c5df mov qword [rbx + 0x218], r8                                                                                                                                               |     *((rbx + 0x218)) = r8;
    0x0040c5e6 mov rdi, rbx                                                                                                                                                              |     
    0x0040c5e9 mov rsi, r14                                                                                                                                                              |     
    0x0040c5ec call 0x40bf00                                                                                                                                                             |     BloombergLP::bdlma::SequentialPool::reserveCapacity(unsigned long) (rbx, r14);
    0x0040c5f1 add rsp, 8                                                                                                                                                                |     
    0x0040c5f5 pop rbx                                                                                                                                                                   |     
    0x0040c5f6 pop r14                                                                                                                                                                   |     
    0x0040c5f8 ret                                                                                                                                                                       |     return rax;
                                                                                                                                                                                         | }
