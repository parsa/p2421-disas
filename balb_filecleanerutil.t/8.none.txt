    ; assembly                                                                                                                                                           | /* r2dec pseudo code output */
                                                                                                                                                                         | /* balb_filecleanerutil.t/none @ 0x40c0f0 */
                                                                                                                                                                         | #include <stdint.h>
                                                                                                                                                                         |  
    ; (fcn) method.BloombergLP::bdlma::SequentialPool.SequentialPool_unsigned_long__BloombergLP::bsls::BlockGrowth::Strategy__BloombergLP::bslma::Allocator_ ()          | int64_t method_BloombergLP::bdlma::SequentialPool_SequentialPool_unsigned_long_BloombergLP::bsls::BlockGrowth::Strategy_BloombergLP::bslma::Allocator_ (int64_t arg4, int64_t arg3, int64_t arg2, int64_t arg1) {
                                                                                                                                                                         |     rcx = arg4;
                                                                                                                                                                         |     rdx = arg3;
                                                                                                                                                                         |     rsi = arg2;
                                                                                                                                                                         |     rdi = arg1;
                                                                                                                                                                         |     /* BloombergLP::bdlma::SequentialPool::SequentialPool(unsigned long, BloombergLP::bsls::BlockGrowth::Strategy, BloombergLP::bslma::Allocator*) */
    0x0040c0f0 push r14                                                                                                                                                  |     
    0x0040c0f2 push rbx                                                                                                                                                  |     
    0x0040c0f3 push rax                                                                                                                                                  |     
    0x0040c0f4 mov rax, rcx                                                                                                                                              |     rax = rcx;
    0x0040c0f7 mov r14, rsi                                                                                                                                              |     r14 = rsi;
    0x0040c0fa mov rbx, rdi                                                                                                                                              |     rbx = rdi;
    0x0040c0fd xorps xmm0, xmm0                                                                                                                                          |     __asm ("xorps xmm0, xmm0");
    0x0040c100 movups xmmword [rdi], xmm0                                                                                                                                |     __asm ("movups xmmword [rdi], xmm0");
    0x0040c103 mov qword [rdi + 0x10], 0                                                                                                                                 |     *((rdi + 0x10)) = 0;
    0x0040c10b mov word [rdi + 0x18], 0x100f                                                                                                                             |     *((rdi + 0x18)) = 0x100f;
    0x0040c111 lea rcx, [rdi + 0x20]                                                                                                                                     |     rcx = rdi + 0x20;
    0x0040c115 mov qword [rdi + 0x20], 0                                                                                                                                 |     *((rdi + 0x20)) = 0;
    0x0040c11d mov qword [rdi + 0x28], rcx                                                                                                                               |     *((rdi + 0x28)) = rcx;
    0x0040c121 lea rcx, [rsi - 1]                                                                                                                                        |     rcx = rsi - 1;
    0x0040c125 mov rsi, rcx                                                                                                                                              |     rsi = rcx;
    0x0040c128 or rsi, 1                                                                                                                                                 |     rsi |= 1;
    0x0040c12c bsr rdi, rsi                                                                                                                                              |     __asm ("bsr rdi, rsi");
    0x0040c130 xor edi, 0x3f                                                                                                                                             |     edi ^= 0x3f;
    0x0040c133 cmp rcx, 1                                                                                                                                                |     
    0x0040c137 adc edi, 0                                                                                                                                                |     edi += 0;
    0x0040c13a mov ecx, edi                                                                                                                                              |     ecx = edi;
    0x0040c13c neg cl                                                                                                                                                    |     cl = -cl;
    0x0040c13e mov esi, 1                                                                                                                                                |     esi = 1;
    0x0040c143 shl rsi, cl                                                                                                                                               |     rsi <<= cl;
    0x0040c146 test edi, edi                                                                                                                                             |     
                                                                                                                                                                         |     if (edi == 0) {
    0x0040c148 je 0x40c1ad                                                                                                                                               |         goto label_0;
                                                                                                                                                                         |     }
    0x0040c14a dec rsi                                                                                                                                                   |     rsi--;
    0x0040c14d movabs rcx, 0xff00000000000000                                                                                                                            |     rcx = 0xff00000000000000;
    0x0040c157 or rcx, rsi                                                                                                                                               |     rcx |= rsi;
                                                                                                                                                                         |     do {
    0x0040c15a xor esi, esi                                                                                                                                              |         esi = 0;
    0x0040c15c test edx, edx                                                                                                                                             |         
    0x0040c15e mov qword [rbx + 0x1f0], rcx                                                                                                                              |         *((rbx + 0x1f0)) = rcx;
                                                                                                                                                                         |         if (edx != 0) {
    0x0040c165 cmovne rsi, r14                                                                                                                                           |             rsi = r14;
                                                                                                                                                                         |         }
    0x0040c169 mov qword [rbx + 0x1f8], rcx                                                                                                                              |         *((rbx + 0x1f8)) = rcx;
    0x0040c170 movups xmmword [rbx + 0x200], xmm0                                                                                                                        |         __asm ("movups xmmword [rbx + 0x200], xmm0");
    0x0040c177 mov qword [rbx + 0x210], rsi                                                                                                                              |         *((rbx + 0x210)) = rsi;
    0x0040c17e test rax, rax                                                                                                                                             |         
                                                                                                                                                                         |         if (rax == 0) {
    0x0040c181 jne 0x40c194                                                                                                                                              |             
    0x0040c183 mov rax, qword [rip + 0x261b46]                                                                                                                           |             rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040c18a test rax, rax                                                                                                                                             |             
                                                                                                                                                                         |             if (rax != 0) {
    0x0040c18d jne 0x40c194                                                                                                                                              |                 goto label_1;
                                                                                                                                                                         |             }
    0x0040c18f call 0x4173a0                                                                                                                                             |             rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                                                                                                                         |         }
                                                                                                                                                                         | label_1:
    0x0040c194 mov qword [rbx + 0x218], rax                                                                                                                              |         *((rbx + 0x218)) = rax;
    0x0040c19b mov rdi, rbx                                                                                                                                              |         rdi = rbx;
    0x0040c19e mov rsi, r14                                                                                                                                              |         rsi = r14;
    0x0040c1a1 add rsp, 8                                                                                                                                                |         
    0x0040c1a5 pop rbx                                                                                                                                                   |         
    0x0040c1a6 pop r14                                                                                                                                                   |         
    0x0040c1a8 jmp 0x40bea0                                                                                                                                              |         void (*0x40bea0)() ();
                                                                                                                                                                         | label_0:
    0x0040c1ad mov rcx, 0xffffffffffffffff                                                                                                                               |         rcx = 0xffffffffffffffff;
    0x0040c1b4 jmp 0x40c15a                                                                                                                                              |         
                                                                                                                                                                         |     } while (1);
                                                                                                                                                                         | }
