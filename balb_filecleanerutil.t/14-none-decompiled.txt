    ; assembly                                                                                                                               | /* r2dec pseudo code output */
                                                                                                                                             | /* balb_filecleanerutil.t/none @ 0x40c380 */
                                                                                                                                             | #include <stdint.h>
                                                                                                                                             |  
    ; (fcn) method.BloombergLP::bdlma::SequentialPool.SequentialPool_unsigned_long__unsigned_long__BloombergLP::bslma::Allocator_ ()         | int64_t method_BloombergLP::bdlma::SequentialPool_SequentialPool_unsigned_long_unsigned_long_BloombergLP::bslma::Allocator_ (int64_t arg4, uint32_t arg3, int64_t arg2, int64_t arg1) {
                                                                                                                                             |     rcx = arg4;
                                                                                                                                             |     rdx = arg3;
                                                                                                                                             |     rsi = arg2;
                                                                                                                                             |     rdi = arg1;
                                                                                                                                             |     /* BloombergLP::bdlma::SequentialPool::SequentialPool(unsigned long, unsigned long, BloombergLP::bslma::Allocator*) */
    0x0040c380 push r14                                                                                                                      |     
    0x0040c382 push rbx                                                                                                                      |     
    0x0040c383 push rax                                                                                                                      |     
    0x0040c384 mov r8, rcx                                                                                                                   |     r8 = rcx;
    0x0040c387 mov r14, rsi                                                                                                                  |     r14 = rsi;
    0x0040c38a mov rbx, rdi                                                                                                                  |     rbx = rdi;
    0x0040c38d movabs rsi, 0xffffffffffffff                                                                                                  |     rsi = 0xffffffffffffff;
    0x0040c397 xorps xmm0, xmm0                                                                                                              |     __asm ("xorps xmm0, xmm0");
    0x0040c39a movups xmmword [rdi], xmm0                                                                                                    |     __asm ("movups xmmword [rdi], xmm0");
    0x0040c39d mov qword [rdi + 0x10], 0                                                                                                     |     *((rdi + 0x10)) = 0;
    0x0040c3a5 mov word [rdi + 0x18], 0x100f                                                                                                 |     *((rdi + 0x18)) = 0x100f;
    0x0040c3ab lea rcx, [rdi + 0x20]                                                                                                         |     rcx = rdi + 0x20;
    0x0040c3af mov qword [rdi + 0x20], 0                                                                                                     |     *((rdi + 0x20)) = 0;
    0x0040c3b7 mov qword [rdi + 0x28], rcx                                                                                                   |     *((rdi + 0x28)) = rcx;
    0x0040c3bb lea rcx, [r14 - 1]                                                                                                            |     rcx = r14 - 1;
    0x0040c3bf mov rdi, rcx                                                                                                                  |     rdi = rcx;
    0x0040c3c2 or rdi, 1                                                                                                                     |     rdi |= 1;
    0x0040c3c6 bsr rax, rdi                                                                                                                  |     __asm ("bsr rax, rdi");
    0x0040c3ca xor eax, 0x3f                                                                                                                 |     eax ^= 0x3f;
    0x0040c3cd cmp rcx, 1                                                                                                                    |     
    0x0040c3d1 adc eax, 0                                                                                                                    |     eax += 0;
    0x0040c3d4 mov ecx, eax                                                                                                                  |     ecx = eax;
    0x0040c3d6 neg cl                                                                                                                        |     cl = -cl;
    0x0040c3d8 mov edi, 1                                                                                                                    |     edi = 1;
    0x0040c3dd shl rdi, cl                                                                                                                   |     rdi <<= cl;
    0x0040c3e0 test eax, eax                                                                                                                 |     
                                                                                                                                             |     if (eax != 0) {
    0x0040c3e2 je 0x40c3e7                                                                                                                   |         
    0x0040c3e4 add rsi, rdi                                                                                                                  |         rsi += rdi;
                                                                                                                                             |     }
    0x0040c3e7 movabs rax, 0x7ffffffffffffffe                                                                                                |     rax = 0x7ffffffffffffffe;
    0x0040c3f1 and rdx, rax                                                                                                                  |     rdx &= rax;
    0x0040c3f4 lea rax, [rdx + 1]                                                                                                            |     rax = rdx + 1;
    0x0040c3f8 bsr rax, rax                                                                                                                  |     __asm ("bsr rax, rax");
    0x0040c3fc xor eax, 0x3f                                                                                                                 |     eax ^= 0x3f;
    0x0040c3ff cmp rdx, 1                                                                                                                    |     
    0x0040c403 sbb ecx, ecx                                                                                                                  |     ecx -= ecx;
    0x0040c405 sub ecx, eax                                                                                                                  |     ecx -= eax;
    0x0040c407 mov rax, 0xffffffffffffffff                                                                                                   |     rax = 0xffffffffffffffff;
    0x0040c40e shl rax, cl                                                                                                                   |     rax <<= cl;
    0x0040c411 movabs rcx, 0xff00000000000000                                                                                                |     rcx = 0xff00000000000000;
    0x0040c41b or rcx, rsi                                                                                                                   |     rcx |= rsi;
    0x0040c41e or rcx, rax                                                                                                                   |     rcx |= rax;
    0x0040c421 mov qword [rbx + 0x1f0], rcx                                                                                                  |     *((rbx + 0x1f0)) = rcx;
    0x0040c428 mov qword [rbx + 0x1f8], rcx                                                                                                  |     *((rbx + 0x1f8)) = rcx;
    0x0040c42f movups xmmword [rbx + 0x200], xmm0                                                                                            |     __asm ("movups xmmword [rbx + 0x200], xmm0");
    0x0040c436 mov qword [rbx + 0x210], 0                                                                                                    |     *((rbx + 0x210)) = 0;
    0x0040c441 test r8, r8                                                                                                                   |     
                                                                                                                                             |     if (r8 == 0) {
    0x0040c444 jne 0x40c45a                                                                                                                  |         
    0x0040c446 mov r8, qword [rip + 0x261883]                                                                                                |         r8 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040c44d test r8, r8                                                                                                                   |         
                                                                                                                                             |         if (r8 != 0) {
    0x0040c450 jne 0x40c45a                                                                                                                  |             goto label_0;
                                                                                                                                             |         }
    0x0040c452 call 0x4173a0                                                                                                                 |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x0040c457 mov r8, rax                                                                                                                   |         r8 = rax;
                                                                                                                                             |     }
                                                                                                                                             | label_0:
    0x0040c45a mov qword [rbx + 0x218], r8                                                                                                   |     *((rbx + 0x218)) = r8;
    0x0040c461 mov rdi, rbx                                                                                                                  |     rdi = rbx;
    0x0040c464 mov rsi, r14                                                                                                                  |     rsi = r14;
    0x0040c467 add rsp, 8                                                                                                                    |     
    0x0040c46b pop rbx                                                                                                                       |     
    0x0040c46c pop r14                                                                                                                       |     
    0x0040c46e jmp 0x40bea0                                                                                                                  |     return void (*0x40bea0)() ();
                                                                                                                                             | }
