    ; assembly                                                                                               | /* r2dec pseudo code output */
                                                                                                             | /* balber_berdecoder.t/assume @ 0x45ae40 */
                                                                                                             | #include <stdint.h>
                                                                                                             |  
    ; (fcn) method.BloombergLP::s_baltst::MyChoice.operator_BloombergLP::s_baltst::MyChoice_const_ ()        | int64_t method_BloombergLP::s_baltst::MyChoice_operator_BloombergLP::s_baltst::MyChoice_const_ (int64_t arg2, uint32_t arg1) {
                                                                                                             |     rsi = arg2;
                                                                                                             |     rdi = arg1;
                                                                                                             |     /* BloombergLP::s_baltst::MyChoice::operator=(BloombergLP::s_baltst::MyChoice const&) */
    0x0045ae40 push rbp                                                                                      |     
    0x0045ae41 push rbx                                                                                      |     
    0x0045ae42 push rax                                                                                      |     
    0x0045ae43 mov rbx, rdi                                                                                  |     rbx = rdi;
    0x0045ae46 cmp rdi, rsi                                                                                  |     
                                                                                                             |     if (rdi != rsi) {
    0x0045ae49 je 0x45aec9                                                                                   |         
    0x0045ae4b mov eax, dword [rsi + 0x30]                                                                   |         eax = *((rsi + 0x30));
    0x0045ae4e cmp eax, 1                                                                                    |         
                                                                                                             |         if (eax != 1) {
    0x0045ae51 je 0x45ae69                                                                                   |             
    0x0045ae53 test eax, eax                                                                                 |             
                                                                                                             |             if (eax == 0) {
    0x0045ae55 jne 0x45ae73                                                                                  |                 
    0x0045ae57 mov ebp, dword [rsi]                                                                          |                 ebp = *(rsi);
    0x0045ae59 mov eax, dword [rbx + 0x30]                                                                   |                 eax = *((rbx + 0x30));
    0x0045ae5c cmp eax, 1                                                                                    |                 
                                                                                                             |                 if (eax != 1) {
    0x0045ae5f je 0x45aea4                                                                                   |                     
    0x0045ae61 test eax, eax                                                                                 |                     
                                                                                                             |                     if (eax == 0) {
    0x0045ae63 jne 0x45aec0                                                                                  |                         
    0x0045ae65 mov dword [rbx], ebp                                                                          |                         *(rbx) = ebp;
    0x0045ae67 jmp 0x45aec9                                                                                  |                         
                                                                                                             |                     } else {
    0x0045ae69 mov rdi, rbx                                                                                  |                         
    0x0045ae6c call 0x45af40                                                                                 |                         BloombergLP::s_baltst::MyChoice::makeSelection2(bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>const&) (rbx, rsi);
    0x0045ae71 jmp 0x45aec9                                                                                  |                         
                                                                                                             |                     } else {
    0x0045ae73 mov eax, dword [rbx + 0x30]                                                                   |                         eax = *((rbx + 0x30));
                                                                                                             |                     }
    0x0045ae76 test eax, eax                                                                                 |                     
                                                                                                             |                     if (eax != 0) {
    0x0045ae78 je 0x45ae9b                                                                                   |                         
    0x0045ae7a cmp eax, 1                                                                                    |                         
                                                                                                             |                         if (eax != 1) {
    0x0045ae7d jne 0x45ae9b                                                                                  |                             goto label_0;
                                                                                                             |                         }
    0x0045ae7f cmp qword [rbx + 0x20], 0x17                                                                  |                         
                                                                                                             |                         if (*((rbx + 0x20)) != 0x17) {
    0x0045ae84 je 0x45ae93                                                                                   |                             
    0x0045ae86 mov rsi, qword [rbx]                                                                          |                             rsi = *(rbx);
    0x0045ae89 mov rdi, qword [rbx + 0x28]                                                                   |                             rdi = *((rbx + 0x28));
    0x0045ae8d mov rax, qword [rdi]                                                                          |                             rax = *(rdi);
    0x0045ae90 call qword [rax + 0x18]                                                                       |                             uint64_t (*rax + 0x18)() ();
                                                                                                             |                         }
    0x0045ae93 mov qword [rbx + 0x18], 0xffffffffffffffff                                                    |                         *((rbx + 0x18)) = 0xffffffffffffffff;
                                                                                                             |                     }
                                                                                                             | label_0:
    0x0045ae9b mov dword [rbx + 0x30], 0xffffffff                                                            |                     *((rbx + 0x30)) = 0xffffffff;
    0x0045aea2 jmp 0x45aec9                                                                                  |                     
                                                                                                             |                 } else {
    0x0045aea4 cmp qword [rbx + 0x20], 0x17                                                                  |                     
                                                                                                             |                 }
                                                                                                             |             }
                                                                                                             |             if (*((rbx + 0x20)) != 0x17) {
    0x0045aea9 je 0x45aeb8                                                                                   |                 
    0x0045aeab mov rsi, qword [rbx]                                                                          |                 rsi = *(rbx);
    0x0045aeae mov rdi, qword [rbx + 0x28]                                                                   |                 rdi = *((rbx + 0x28));
    0x0045aeb2 mov rax, qword [rdi]                                                                          |                 rax = *(rdi);
    0x0045aeb5 call qword [rax + 0x18]                                                                       |                 uint64_t (*rax + 0x18)() ();
                                                                                                             |             }
    0x0045aeb8 mov qword [rbx + 0x18], 0xffffffffffffffff                                                    |             *((rbx + 0x18)) = 0xffffffffffffffff;
    0x0045aec0 mov dword [rbx], ebp                                                                          |             *(rbx) = ebp;
    0x0045aec2 mov dword [rbx + 0x30], 0                                                                     |             *((rbx + 0x30)) = 0;
                                                                                                             |         }
                                                                                                             |     }
    0x0045aec9 mov rax, rbx                                                                                  |     rax = rbx;
    0x0045aecc add rsp, 8                                                                                    |     
    0x0045aed0 pop rbx                                                                                       |     
    0x0045aed1 pop rbp                                                                                       |     
    0x0045aed2 ret                                                                                           |     return rax;
                                                                                                             | }
