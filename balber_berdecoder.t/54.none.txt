    ; assembly                                                       | /* r2dec pseudo code output */
                                                                     | /* balber_berdecoder.t/none @ 0x46bf10 */
                                                                     | #include <stdint.h>
                                                                     |  
    ; (fcn) method.BloombergLP::bdlt::Time.setSecond_int_ ()         | int64_t method_BloombergLP::bdlt::Time_setSecond_int_ (int64_t arg2, int64_t arg1) {
                                                                     |     char * var_8h;
                                                                     |     char * var_10h;
                                                                     |     int64_t var_18h;
                                                                     |     char * var_20h;
                                                                     |     int64_t var_28h;
                                                                     |     rsi = arg2;
                                                                     |     rdi = arg1;
                                                                     |     /* BloombergLP::bdlt::Time::setSecond(int) */
    0x0046bf10 push rbp                                              |     
    0x0046bf11 push r14                                              |     
    0x0046bf13 push rbx                                              |     
    0x0046bf14 sub rsp, 0x30                                         |     
    0x0046bf18 mov ebp, esi                                          |     
    0x0046bf1a mov rbx, rdi                                          |     rbx = rdi;
    0x0046bf1d movabs r14, 0x4000000000                              |     r14 = 0x4000000000;
    0x0046bf27 mov rcx, qword [rdi]                                  |     rcx = *(rdi);
    0x0046bf2a cmp rcx, r14                                          |     
                                                                     |     if (rcx < r14) {
    0x0046bf2d jl 0x46bfd3                                           |         goto label_0;
                                                                     |     }
    0x0046bf33 movabs rax, 0xffffffbfffffffff                        |     rax = 0xffffffbfffffffff;
    0x0046bf3d and rcx, rax                                          |     rcx &= rax;
                                                                     |     do {
    0x0046bf40 movabs rax, 0x141dd75fff                              |         rax = 0x141dd75fff;
    0x0046bf4a cmp rcx, rax                                          |         
                                                                     |         if (rcx <= rax) {
    0x0046bf4d jg 0x46bfba                                           |             
    0x0046bf4f movabs rdx, 0x431bde82d7b634db                        |             rdx = 0x431bde82d7b634db;
    0x0046bf59 mov rax, rcx                                          |             rax = rcx;
    0x0046bf5c imul rdx                                              |             rdx:rax = rax * rdx;
    0x0046bf5f mov rax, rdx                                          |             rax = rdx;
    0x0046bf62 shr rax, 0x3f                                         |             rax >>= 0x3f;
    0x0046bf66 sar rdx, 0x12                                         |             rdx >>= 0x12;
    0x0046bf6a add rdx, rax                                          |             rdx += rax;
    0x0046bf6d imul rsi, rdx, 0xf4240                                |             rsi = rdx * 0xf4240;
    0x0046bf74 movabs rdx, 0x8f2a633943a6d729                        |             rdx = 0x8f2a633943a6d729;
    0x0046bf7e mov rax, rcx                                          |             rax = rcx;
    0x0046bf81 imul rdx                                              |             rdx:rax = rax * rdx;
    0x0046bf84 mov rdi, rcx                                          |             rdi = rcx;
    0x0046bf87 sub rdi, rsi                                          |             rdi -= rsi;
    0x0046bf8a add rdx, rcx                                          |             rdx += rcx;
    0x0046bf8d mov rax, rdx                                          |             rax = rdx;
    0x0046bf90 shr rax, 0x3f                                         |             rax >>= 0x3f;
    0x0046bf94 sar rdx, 0x19                                         |             rdx >>= 0x19;
    0x0046bf98 add rdx, rax                                          |             rdx += rax;
    0x0046bf9b imul rax, rdx, 0x3938700                              |             rax = rdx * 0x3938700;
    0x0046bfa2 movsxd rdx, ebp                                       |             rdx = (int64_t) ebp;
    0x0046bfa5 imul rdx, rdx, 0xf4240                                |             rdx *= 0xf4240;
    0x0046bfac add rdx, rcx                                          |             rdx += rcx;
    0x0046bfaf sub rax, rcx                                          |             rax -= rcx;
    0x0046bfb2 add rax, rdx                                          |             rax += rdx;
    0x0046bfb5 add rax, rdi                                          |             rax += rdi;
    0x0046bfb8 jmp 0x46bfc4                                          |             
                                                                     |         } else {
    0x0046bfba movsxd rax, ebp                                       |             rax = (int64_t) ebp;
    0x0046bfbd imul rax, rax, 0xf4240                                |             rax *= 0xf4240;
                                                                     |         }
    0x0046bfc4 or rax, r14                                           |         rax |= r14;
    0x0046bfc7 mov qword [rbx], rax                                  |         *(rbx) = rax;
    0x0046bfca add rsp, 0x30                                         |         
    0x0046bfce pop rbx                                               |         
    0x0046bfcf pop r14                                               |         
    0x0046bfd1 pop rbp                                               |         
    0x0046bfd2 ret                                                   |         return rax;
                                                                     | label_0:
    0x0046bfd3 mov edi, 0x6f73e0                                     |         
    0x0046bfd8 call 0x46f4e0                                         |         eax = BloombergLP::bsls::Review::updateCount(BloombergLP::bsls::Atomic_TypeTraits<BloombergLP::bsls::AtomicOperations_ALL_ALL_ClangIntrinsics>::Int*) (method.BloombergLP::bdlt::Time.invalidMicrosecondsFromMidnight___const::__0::operator_____const::count);
    0x0046bfdd mov qword [rsp + 8], 0x4ccc90                         |         *((rsp + 8)) = "detected invalid 'bdlt::Time'; see TEAM 579660115";
    0x0046bfe6 mov qword [rsp + 0x10], 0x4cccc2                      |         *((rsp + 0x10)) = "/home/parsa/experiments/assumptions/crush/ccm-none/groups/bdl/bdlt/bdlt_time.cpp";
    0x0046bfef mov dword [rsp + 0x18], 0xcb                          |         *((rsp + 0x18)) = 0xcb;
    0x0046bff7 mov qword [rsp + 0x20], 0x4cd8e2                      |         *((rsp + 0x20)) = "R-INV";
    0x0046c000 mov dword [rsp + 0x28], eax                           |         *((rsp + 0x28)) = eax;
    0x0046c004 lea rdi, [rsp + 8]                                    |         rdi = rsp + 8;
    0x0046c009 call 0x46f500                                         |         BloombergLP::bsls::Review::invokeHandler(BloombergLP::bsls::ReviewViolationconst&) ();
    0x0046c00e imul rcx, qword [rbx], 0x3e8                          |         rcx = *(rbx) * 0x3e8;
    0x0046c015 jmp 0x46bf40                                          |         
                                                                     |     } while (1);
                                                                     | }
