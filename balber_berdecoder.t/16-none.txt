    ; assembly                                                                                           | /* r2dec pseudo code output */
                                                                                                         | /* balber_berdecoder.t/none @ 0x45afd0 */
                                                                                                         | #include <stdint.h>
                                                                                                         |  
    ; (fcn) method.BloombergLP::s_baltst::MyChoice.operator_BloombergLP::s_baltst::MyChoice_ ()          | int64_t method_BloombergLP::s_baltst::MyChoice_operator_BloombergLP::s_baltst::MyChoice_ (int64_t arg2, uint32_t arg1) {
                                                                                                         |     rsi = arg2;
                                                                                                         |     rdi = arg1;
                                                                                                         |     /* BloombergLP::s_baltst::MyChoice::operator=(BloombergLP::s_baltst::MyChoice&&) */
    0x0045afd0 push rbp                                                                                  |     
    0x0045afd1 push rbx                                                                                  |     
    0x0045afd2 push rax                                                                                  |     
    0x0045afd3 mov rbx, rdi                                                                              |     rbx = rdi;
    0x0045afd6 cmp rdi, rsi                                                                              |     
                                                                                                         |     if (rdi != rsi) {
    0x0045afd9 je 0x45b053                                                                               |         
    0x0045afdb mov eax, dword [rsi + 0x30]                                                               |         eax = *((rsi + 0x30));
    0x0045afde cmp eax, 1                                                                                |         
                                                                                                         |         if (eax != 1) {
    0x0045afe1 je 0x45aff9                                                                               |             
    0x0045afe3 test eax, eax                                                                             |             
                                                                                                         |             if (eax == 0) {
    0x0045afe5 jne 0x45b003                                                                              |                 
    0x0045afe7 mov ebp, dword [rsi]                                                                      |                 ebp = *(rsi);
    0x0045afe9 mov eax, dword [rbx + 0x30]                                                               |                 eax = *((rbx + 0x30));
    0x0045afec cmp eax, 1                                                                                |                 
                                                                                                         |                 if (eax != 1) {
    0x0045afef je 0x45b02e                                                                               |                     
    0x0045aff1 test eax, eax                                                                             |                     
                                                                                                         |                     if (eax == 0) {
    0x0045aff3 jne 0x45b04a                                                                              |                         
    0x0045aff5 mov dword [rbx], ebp                                                                      |                         *(rbx) = ebp;
    0x0045aff7 jmp 0x45b053                                                                              |                         
                                                                                                         |                     } else {
    0x0045aff9 mov rdi, rbx                                                                              |                         
    0x0045affc call 0x45b070                                                                             |                         BloombergLP::s_baltst::MyChoice::makeSelection2(bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>&&) (rbx, rsi);
    0x0045b001 jmp 0x45b053                                                                              |                         
                                                                                                         |                     } else {
    0x0045b003 cmp dword [rbx + 0x30], 1                                                                 |                         
                                                                                                         |                     }
                                                                                                         |                     if (*((rbx + 0x30)) == 1) {
    0x0045b007 jne 0x45b025                                                                              |                         
    0x0045b009 cmp qword [rbx + 0x20], 0x17                                                              |                         
                                                                                                         |                         if (*((rbx + 0x20)) != 0x17) {
    0x0045b00e je 0x45b01d                                                                               |                             
    0x0045b010 mov rsi, qword [rbx]                                                                      |                             rsi = *(rbx);
    0x0045b013 mov rdi, qword [rbx + 0x28]                                                               |                             rdi = *((rbx + 0x28));
    0x0045b017 mov rax, qword [rdi]                                                                      |                             rax = *(rdi);
    0x0045b01a call qword [rax + 0x18]                                                                   |                             uint64_t (*rax + 0x18)() ();
                                                                                                         |                         }
    0x0045b01d mov qword [rbx + 0x18], 0xffffffffffffffff                                                |                         *((rbx + 0x18)) = 0xffffffffffffffff;
                                                                                                         |                     }
    0x0045b025 mov dword [rbx + 0x30], 0xffffffff                                                        |                     *((rbx + 0x30)) = 0xffffffff;
    0x0045b02c jmp 0x45b053                                                                              |                     
                                                                                                         |                 } else {
    0x0045b02e cmp qword [rbx + 0x20], 0x17                                                              |                     
                                                                                                         |                 }
                                                                                                         |             }
                                                                                                         |             if (*((rbx + 0x20)) != 0x17) {
    0x0045b033 je 0x45b042                                                                               |                 
    0x0045b035 mov rsi, qword [rbx]                                                                      |                 rsi = *(rbx);
    0x0045b038 mov rdi, qword [rbx + 0x28]                                                               |                 rdi = *((rbx + 0x28));
    0x0045b03c mov rax, qword [rdi]                                                                      |                 rax = *(rdi);
    0x0045b03f call qword [rax + 0x18]                                                                   |                 uint64_t (*rax + 0x18)() ();
                                                                                                         |             }
    0x0045b042 mov qword [rbx + 0x18], 0xffffffffffffffff                                                |             *((rbx + 0x18)) = 0xffffffffffffffff;
    0x0045b04a mov dword [rbx], ebp                                                                      |             *(rbx) = ebp;
    0x0045b04c mov dword [rbx + 0x30], 0                                                                 |             *((rbx + 0x30)) = 0;
                                                                                                         |         }
                                                                                                         |     }
    0x0045b053 mov rax, rbx                                                                              |     rax = rbx;
    0x0045b056 add rsp, 8                                                                                |     
    0x0045b05a pop rbx                                                                                   |     
    0x0045b05b pop rbp                                                                                   |     
    0x0045b05c ret                                                                                       |     return rax;
                                                                                                         | }
