    ; assembly                                                                   | /* r2dec pseudo code output */
                                                                                 | /* balber_berdecoder.t/assume @ 0x45b240 */
                                                                                 | #include <stdint.h>
                                                                                 |  
    ; (fcn) method.BloombergLP::s_baltst::MyChoice.makeSelection_int_ ()         | int64_t method_BloombergLP::s_baltst::MyChoice_makeSelection_int_ (uint32_t arg2, int64_t arg1) {
                                                                                 |     rsi = arg2;
                                                                                 |     rdi = arg1;
                                                                                 |     /* BloombergLP::s_baltst::MyChoice::makeSelection(int) */
    0x0045b240 push r14                                                          |     
    0x0045b242 push rbx                                                          |     
    0x0045b243 push rax                                                          |     
    0x0045b244 mov r14, rdi                                                      |     r14 = rdi;
    0x0045b247 cmp esi, 0xffffffff                                               |     
                                                                                 |     if (esi != 0xffffffff) {
    0x0045b24a je 0x45b2a4                                                       |         
    0x0045b24c cmp esi, 1                                                        |         
                                                                                 |         if (esi != 1) {
    0x0045b24f je 0x45b27f                                                       |             
    0x0045b251 mov ebx, 0xffffffff                                               |             ebx = 0xffffffff;
    0x0045b256 test esi, esi                                                     |             
                                                                                 |             if (esi != 0) {
    0x0045b258 jne 0x45b34b                                                      |                 goto label_0;
                                                                                 |             }
    0x0045b25e mov eax, dword [r14 + 0x30]                                       |             eax = *((r14 + 0x30));
    0x0045b262 cmp eax, 1                                                        |             
                                                                                 |             if (eax != 1) {
    0x0045b265 je 0x45b31e                                                       |                 
    0x0045b26b test eax, eax                                                     |                 
                                                                                 |                 if (eax == 0) {
    0x0045b26d jne 0x45b33a                                                      |                     
    0x0045b273 mov dword [r14], 0                                                |                     *(r14) = 0;
    0x0045b27a jmp 0x45b349                                                      |                     
                                                                                 |                 } else {
    0x0045b27f mov eax, dword [r14 + 0x30]                                       |                     eax = *((r14 + 0x30));
    0x0045b283 test eax, eax                                                     |                     
                                                                                 |                     if (eax != 0) {
    0x0045b285 je 0x45b2d7                                                       |                         
    0x0045b287 cmp eax, 1                                                        |                         
                                                                                 |                         if (eax != 1) {
    0x0045b28a jne 0x45b2d7                                                      |                             goto label_1;
                                                                                 |                         }
    0x0045b28c xor ebx, ebx                                                      |                         ebx = 0;
    0x0045b28e mov rdi, r14                                                      |                         
    0x0045b291 xor esi, esi                                                      |                         
    0x0045b293 mov rdx, 0xffffffffffffffff                                       |                         
    0x0045b29a call 0x473910                                                     |                         bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::erase(unsigned long,unsigned long) (r14, 0, 0xffffffffffffffff);
    0x0045b29f jmp 0x45b34b                                                      |                         
                                                                                 |                     } else {
    0x0045b2a4 mov eax, dword [r14 + 0x30]                                       |                         eax = *((r14 + 0x30));
    0x0045b2a8 test eax, eax                                                     |                         
                                                                                 |                         if (eax != 0) {
    0x0045b2aa je 0x45b2cd                                                       |                             
    0x0045b2ac cmp eax, 1                                                        |                             
                                                                                 |                             if (eax != 1) {
    0x0045b2af jne 0x45b2cd                                                      |                                 goto label_2;
                                                                                 |                             }
    0x0045b2b1 cmp qword [r14 + 0x20], 0x17                                      |                             
                                                                                 |                             if (*((r14 + 0x20)) != 0x17) {
    0x0045b2b6 je 0x45b2c5                                                       |                                 
    0x0045b2b8 mov rsi, qword [r14]                                              |                                 rsi = *(r14);
    0x0045b2bb mov rdi, qword [r14 + 0x28]                                       |                                 rdi = *((r14 + 0x28));
    0x0045b2bf mov rax, qword [rdi]                                              |                                 rax = *(rdi);
    0x0045b2c2 call qword [rax + 0x18]                                           |                                 uint64_t (*rax + 0x18)() ();
                                                                                 |                             }
    0x0045b2c5 mov qword [r14 + 0x18], 0xffffffffffffffff                        |                             *((r14 + 0x18)) = 0xffffffffffffffff;
                                                                                 |                         }
                                                                                 | label_2:
    0x0045b2cd mov dword [r14 + 0x30], 0xffffffff                                |                         *((r14 + 0x30)) = 0xffffffff;
    0x0045b2d5 jmp 0x45b349                                                      |                         goto label_3;
                                                                                 |                     }
                                                                                 | label_1:
    0x0045b2d7 mov dword [r14 + 0x30], 0xffffffff                                |                     *((r14 + 0x30)) = 0xffffffff;
    0x0045b2df mov rax, qword [r14 + 0x38]                                       |                     rax = *((r14 + 0x38));
    0x0045b2e3 test rax, rax                                                     |                     
                                                                                 |                     if (rax == 0) {
    0x0045b2e6 jne 0x45b2f9                                                      |                         
    0x0045b2e8 mov rax, qword [rip + 0x29c101]                                   |                         rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0045b2ef test rax, rax                                                     |                         
                                                                                 |                         if (rax != 0) {
    0x0045b2f2 jne 0x45b2f9                                                      |                             goto label_4;
                                                                                 |                         }
    0x0045b2f4 call 0x46d200                                                     |                         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                                 |                     }
                                                                                 | label_4:
    0x0045b2f9 mov qword [r14], 0                                                |                     *(r14) = 0;
    0x0045b300 movaps xmm0, xmmword [rip + 0x3c419]                              |                     xmm0 = .comment;
    0x0045b307 movups xmmword [r14 + 0x18], xmm0                                 |                     __asm ("movups xmmword [r14 + 0x18], xmm0");
    0x0045b30c mov qword [r14 + 0x28], rax                                       |                     *((r14 + 0x28)) = rax;
    0x0045b310 mov byte [r14], 0                                                 |                     *(r14) = 0;
    0x0045b314 mov dword [r14 + 0x30], 1                                         |                     *((r14 + 0x30)) = 1;
    0x0045b31c jmp 0x45b349                                                      |                     
                                                                                 |                 } else {
    0x0045b31e cmp qword [r14 + 0x20], 0x17                                      |                     
                                                                                 |                 }
                                                                                 |             }
                                                                                 |             if (*((r14 + 0x20)) != 0x17) {
    0x0045b323 je 0x45b332                                                       |                 
    0x0045b325 mov rsi, qword [r14]                                              |                 rsi = *(r14);
    0x0045b328 mov rdi, qword [r14 + 0x28]                                       |                 rdi = *((r14 + 0x28));
    0x0045b32c mov rax, qword [rdi]                                              |                 rax = *(rdi);
    0x0045b32f call qword [rax + 0x18]                                           |                 uint64_t (*rax + 0x18)() ();
                                                                                 |             }
    0x0045b332 mov qword [r14 + 0x18], 0xffffffffffffffff                        |             *((r14 + 0x18)) = 0xffffffffffffffff;
    0x0045b33a mov dword [r14], 0                                                |             *(r14) = 0;
    0x0045b341 mov dword [r14 + 0x30], 0                                         |             *((r14 + 0x30)) = 0;
                                                                                 |         }
                                                                                 | label_3:
    0x0045b349 xor ebx, ebx                                                      |         ebx = 0;
                                                                                 |     }
                                                                                 | label_0:
    0x0045b34b mov eax, ebx                                                      |     eax = ebx;
    0x0045b34d add rsp, 8                                                        |     
    0x0045b351 pop rbx                                                           |     
    0x0045b352 pop r14                                                           |     
    0x0045b354 ret                                                               |     return rax;
                                                                                 | }
