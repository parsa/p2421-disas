    ; assembly                                                                                           | /* r2dec pseudo code output */
                                                                                                         | /* balber_berdecoder.t/assume @ 0x45b090 */
                                                                                                         | #include <stdint.h>
                                                                                                         |  
    ; (fcn) method.BloombergLP::s_baltst::MyChoice.operator_BloombergLP::s_baltst::MyChoice_ ()          | int64_t method_BloombergLP::s_baltst::MyChoice_operator_BloombergLP::s_baltst::MyChoice_ (int64_t arg2, uint32_t arg1) {
                                                                                                         |     rsi = arg2;
                                                                                                         |     rdi = arg1;
                                                                                                         |     /* BloombergLP::s_baltst::MyChoice::operator=(BloombergLP::s_baltst::MyChoice&&) */
    0x0045b090 push rbp                                                                                  |     
    0x0045b091 push rbx                                                                                  |     
    0x0045b092 push rax                                                                                  |     
    0x0045b093 mov rbx, rdi                                                                              |     rbx = rdi;
    0x0045b096 cmp rdi, rsi                                                                              |     
                                                                                                         |     if (rdi != rsi) {
    0x0045b099 je 0x45b119                                                                               |         
    0x0045b09b mov eax, dword [rsi + 0x30]                                                               |         eax = *((rsi + 0x30));
    0x0045b09e cmp eax, 1                                                                                |         
                                                                                                         |         if (eax != 1) {
    0x0045b0a1 je 0x45b0b9                                                                               |             
    0x0045b0a3 test eax, eax                                                                             |             
                                                                                                         |             if (eax == 0) {
    0x0045b0a5 jne 0x45b0c3                                                                              |                 
    0x0045b0a7 mov ebp, dword [rsi]                                                                      |                 ebp = *(rsi);
    0x0045b0a9 mov eax, dword [rbx + 0x30]                                                               |                 eax = *((rbx + 0x30));
    0x0045b0ac cmp eax, 1                                                                                |                 
                                                                                                         |                 if (eax != 1) {
    0x0045b0af je 0x45b0f4                                                                               |                     
    0x0045b0b1 test eax, eax                                                                             |                     
                                                                                                         |                     if (eax == 0) {
    0x0045b0b3 jne 0x45b110                                                                              |                         
    0x0045b0b5 mov dword [rbx], ebp                                                                      |                         *(rbx) = ebp;
    0x0045b0b7 jmp 0x45b119                                                                              |                         
                                                                                                         |                     } else {
    0x0045b0b9 mov rdi, rbx                                                                              |                         
    0x0045b0bc call 0x45b140                                                                             |                         BloombergLP::s_baltst::MyChoice::makeSelection2(bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>&&) (rbx, rsi);
    0x0045b0c1 jmp 0x45b119                                                                              |                         
                                                                                                         |                     } else {
    0x0045b0c3 mov eax, dword [rbx + 0x30]                                                               |                         eax = *((rbx + 0x30));
                                                                                                         |                     }
    0x0045b0c6 test eax, eax                                                                             |                     
                                                                                                         |                     if (eax != 0) {
    0x0045b0c8 je 0x45b0eb                                                                               |                         
    0x0045b0ca cmp eax, 1                                                                                |                         
                                                                                                         |                         if (eax != 1) {
    0x0045b0cd jne 0x45b0eb                                                                              |                             goto label_0;
                                                                                                         |                         }
    0x0045b0cf cmp qword [rbx + 0x20], 0x17                                                              |                         
                                                                                                         |                         if (*((rbx + 0x20)) != 0x17) {
    0x0045b0d4 je 0x45b0e3                                                                               |                             
    0x0045b0d6 mov rsi, qword [rbx]                                                                      |                             rsi = *(rbx);
    0x0045b0d9 mov rdi, qword [rbx + 0x28]                                                               |                             rdi = *((rbx + 0x28));
    0x0045b0dd mov rax, qword [rdi]                                                                      |                             rax = *(rdi);
    0x0045b0e0 call qword [rax + 0x18]                                                                   |                             uint64_t (*rax + 0x18)() ();
                                                                                                         |                         }
    0x0045b0e3 mov qword [rbx + 0x18], 0xffffffffffffffff                                                |                         *((rbx + 0x18)) = 0xffffffffffffffff;
                                                                                                         |                     }
                                                                                                         | label_0:
    0x0045b0eb mov dword [rbx + 0x30], 0xffffffff                                                        |                     *((rbx + 0x30)) = 0xffffffff;
    0x0045b0f2 jmp 0x45b119                                                                              |                     
                                                                                                         |                 } else {
    0x0045b0f4 cmp qword [rbx + 0x20], 0x17                                                              |                     
                                                                                                         |                 }
                                                                                                         |             }
                                                                                                         |             if (*((rbx + 0x20)) != 0x17) {
    0x0045b0f9 je 0x45b108                                                                               |                 
    0x0045b0fb mov rsi, qword [rbx]                                                                      |                 rsi = *(rbx);
    0x0045b0fe mov rdi, qword [rbx + 0x28]                                                               |                 rdi = *((rbx + 0x28));
    0x0045b102 mov rax, qword [rdi]                                                                      |                 rax = *(rdi);
    0x0045b105 call qword [rax + 0x18]                                                                   |                 uint64_t (*rax + 0x18)() ();
                                                                                                         |             }
    0x0045b108 mov qword [rbx + 0x18], 0xffffffffffffffff                                                |             *((rbx + 0x18)) = 0xffffffffffffffff;
    0x0045b110 mov dword [rbx], ebp                                                                      |             *(rbx) = ebp;
    0x0045b112 mov dword [rbx + 0x30], 0                                                                 |             *((rbx + 0x30)) = 0;
                                                                                                         |         }
                                                                                                         |     }
    0x0045b119 mov rax, rbx                                                                              |     rax = rbx;
    0x0045b11c add rsp, 8                                                                                |     
    0x0045b120 pop rbx                                                                                   |     
    0x0045b121 pop rbp                                                                                   |     
    0x0045b122 ret                                                                                       |     return rax;
                                                                                                         | }
