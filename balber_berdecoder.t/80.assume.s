0000000000466370 <BloombergLP::bdlt::Iso8601Util::generate(char*, int, BloombergLP::bdlt::Date const&, BloombergLP::bdlt::Iso8601UtilConfiguration const&)>:
M0000000000000000:	pushq	%rbp	;  1 bytes
M0000000000000001:	pushq	%r15	;  2 bytes
M0000000000000003:	pushq	%r14	;  2 bytes
M0000000000000005:	pushq	%rbx	;  1 bytes
M0000000000000006:	subq	$24, %rsp	;  4 bytes
M000000000000000a:	movq	%rdx, %r14	;  3 bytes
M000000000000000d:	movq	%rdi, %rbx	;  3 bytes
M0000000000000010:	cmpl	$11, %esi	;  3 bytes
M0000000000000013:	jb	0x46648b <BloombergLP::bdlt::Iso8601Util::generate(char*, int, BloombergLP::bdlt::Date const&, BloombergLP::bdlt::Iso8601UtilConfiguration const&)+0x11b>	;  6 bytes
M0000000000000019:	movl	(%r14), %edi	;  3 bytes
M000000000000001c:	callq	0x46a320 <BloombergLP::bdlt::PosixDateImpUtil::serialToYear(int)>	;  5 bytes
M0000000000000021:	movl	%eax, %ecx	;  2 bytes
M0000000000000023:	movl	$3435973837, %ebp	;  5 bytes
M0000000000000028:	imulq	$1374389535, %rcx, %rdx	;  7 bytes
M000000000000002f:	imulq	$274877907, %rcx, %rsi	;  7 bytes
M0000000000000036:	imulq	%rbp, %rcx	;  4 bytes
M000000000000003a:	shrq	$35, %rcx	;  4 bytes
M000000000000003e:	leal	(%rcx,%rcx), %edi	;  3 bytes
M0000000000000041:	leal	(%rdi,%rdi,4), %edi	;  3 bytes
M0000000000000044:	subl	%edi, %eax	;  2 bytes
M0000000000000046:	orb	$48, %al	;  2 bytes
M0000000000000048:	movb	%al, 3(%rbx)	;  3 bytes
M000000000000004b:	movq	%rcx, %rax	;  3 bytes
M000000000000004e:	imulq	%rbp, %rax	;  4 bytes
M0000000000000052:	shrq	$35, %rax	;  4 bytes
M0000000000000056:	addl	%eax, %eax	;  2 bytes
M0000000000000058:	leal	(%rax,%rax,4), %eax	;  3 bytes
M000000000000005b:	subl	%eax, %ecx	;  2 bytes
M000000000000005d:	orb	$48, %cl	;  3 bytes
M0000000000000060:	movb	%cl, 2(%rbx)	;  3 bytes
M0000000000000063:	shrq	$37, %rdx	;  4 bytes
M0000000000000067:	movq	%rdx, %rax	;  3 bytes
M000000000000006a:	imulq	%rbp, %rax	;  4 bytes
M000000000000006e:	shrq	$35, %rax	;  4 bytes
M0000000000000072:	addl	%eax, %eax	;  2 bytes
M0000000000000074:	leal	(%rax,%rax,4), %eax	;  3 bytes
M0000000000000077:	subl	%eax, %edx	;  2 bytes
M0000000000000079:	orb	$48, %dl	;  3 bytes
M000000000000007c:	movb	%dl, 1(%rbx)	;  3 bytes
M000000000000007f:	shrq	$38, %rsi	;  4 bytes
M0000000000000083:	movq	%rsi, %rax	;  3 bytes
M0000000000000086:	imulq	%rbp, %rax	;  4 bytes
M000000000000008a:	shrq	$35, %rax	;  4 bytes
M000000000000008e:	addl	%eax, %eax	;  2 bytes
M0000000000000090:	leal	(%rax,%rax,4), %eax	;  3 bytes
M0000000000000093:	subl	%eax, %esi	;  2 bytes
M0000000000000095:	orb	$48, %sil	;  4 bytes
M0000000000000099:	movb	%sil, (%rbx)	;  3 bytes
M000000000000009c:	movb	$45, 4(%rbx)	;  4 bytes
M00000000000000a0:	movl	(%r14), %edi	;  3 bytes
M00000000000000a3:	callq	0x46a2e0 <BloombergLP::bdlt::PosixDateImpUtil::serialToMonth(int)>	;  5 bytes
M00000000000000a8:	movl	%eax, %ecx	;  2 bytes
M00000000000000aa:	imulq	%rbp, %rcx	;  4 bytes
M00000000000000ae:	shrq	$35, %rcx	;  4 bytes
M00000000000000b2:	leal	(%rcx,%rcx), %edx	;  3 bytes
M00000000000000b5:	leal	(%rdx,%rdx,4), %edx	;  3 bytes
M00000000000000b8:	subl	%edx, %eax	;  2 bytes
M00000000000000ba:	orb	$48, %al	;  2 bytes
M00000000000000bc:	movb	%al, 6(%rbx)	;  3 bytes
M00000000000000bf:	movq	%rcx, %rax	;  3 bytes
M00000000000000c2:	imulq	%rbp, %rax	;  4 bytes
M00000000000000c6:	shrq	$35, %rax	;  4 bytes
M00000000000000ca:	addl	%eax, %eax	;  2 bytes
M00000000000000cc:	leal	(%rax,%rax,4), %eax	;  3 bytes
M00000000000000cf:	subl	%eax, %ecx	;  2 bytes
M00000000000000d1:	orb	$48, %cl	;  3 bytes
M00000000000000d4:	movb	%cl, 5(%rbx)	;  3 bytes
M00000000000000d7:	movb	$45, 7(%rbx)	;  4 bytes
M00000000000000db:	movl	(%r14), %edi	;  3 bytes
M00000000000000de:	callq	0x46a2a0 <BloombergLP::bdlt::PosixDateImpUtil::serialToDay(int)>	;  5 bytes
M00000000000000e3:	movl	%eax, %ecx	;  2 bytes
M00000000000000e5:	imulq	%rbp, %rcx	;  4 bytes
M00000000000000e9:	shrq	$35, %rcx	;  4 bytes
M00000000000000ed:	leal	(%rcx,%rcx), %edx	;  3 bytes
M00000000000000f0:	leal	(%rdx,%rdx,4), %edx	;  3 bytes
M00000000000000f3:	subl	%edx, %eax	;  2 bytes
M00000000000000f5:	orb	$48, %al	;  2 bytes
M00000000000000f7:	movb	%al, 9(%rbx)	;  3 bytes
M00000000000000fa:	movq	%rcx, %rax	;  3 bytes
M00000000000000fd:	imulq	%rbp, %rax	;  4 bytes
M0000000000000101:	shrq	$35, %rax	;  4 bytes
M0000000000000105:	addl	%eax, %eax	;  2 bytes
M0000000000000107:	leal	(%rax,%rax,4), %eax	;  3 bytes
M000000000000010a:	subl	%eax, %ecx	;  2 bytes
M000000000000010c:	orb	$48, %cl	;  3 bytes
M000000000000010f:	movb	%cl, 8(%rbx)	;  3 bytes
M0000000000000112:	movb	$0, 10(%rbx)	;  4 bytes
M0000000000000116:	jmp	0x4665a2 <BloombergLP::bdlt::Iso8601Util::generate(char*, int, BloombergLP::bdlt::Date const&, BloombergLP::bdlt::Iso8601UtilConfiguration const&)+0x232>	;  5 bytes
M000000000000011b:	movl	%esi, %r15d	;  3 bytes
M000000000000011e:	movl	(%r14), %edi	;  3 bytes
M0000000000000121:	callq	0x46a320 <BloombergLP::bdlt::PosixDateImpUtil::serialToYear(int)>	;  5 bytes
M0000000000000126:	movl	%eax, %ecx	;  2 bytes
M0000000000000128:	movl	$3435973837, %ebp	;  5 bytes
M000000000000012d:	imulq	$1374389535, %rcx, %rdx	;  7 bytes
M0000000000000134:	imulq	$274877907, %rcx, %rsi	;  7 bytes
M000000000000013b:	imulq	%rbp, %rcx	;  4 bytes
M000000000000013f:	shrq	$35, %rcx	;  4 bytes
M0000000000000143:	leal	(%rcx,%rcx), %edi	;  3 bytes
M0000000000000146:	leal	(%rdi,%rdi,4), %edi	;  3 bytes
M0000000000000149:	subl	%edi, %eax	;  2 bytes
M000000000000014b:	orb	$48, %al	;  2 bytes
M000000000000014d:	movb	%al, 17(%rsp)	;  4 bytes
M0000000000000151:	movq	%rcx, %rax	;  3 bytes
M0000000000000154:	imulq	%rbp, %rax	;  4 bytes
M0000000000000158:	shrq	$35, %rax	;  4 bytes
M000000000000015c:	addl	%eax, %eax	;  2 bytes
M000000000000015e:	leal	(%rax,%rax,4), %eax	;  3 bytes
M0000000000000161:	subl	%eax, %ecx	;  2 bytes
M0000000000000163:	orb	$48, %cl	;  3 bytes
M0000000000000166:	movb	%cl, 16(%rsp)	;  4 bytes
M000000000000016a:	shrq	$37, %rdx	;  4 bytes
M000000000000016e:	movq	%rdx, %rax	;  3 bytes
M0000000000000171:	imulq	%rbp, %rax	;  4 bytes
M0000000000000175:	shrq	$35, %rax	;  4 bytes
M0000000000000179:	addl	%eax, %eax	;  2 bytes
M000000000000017b:	leal	(%rax,%rax,4), %eax	;  3 bytes
M000000000000017e:	subl	%eax, %edx	;  2 bytes
M0000000000000180:	orb	$48, %dl	;  3 bytes
M0000000000000183:	movb	%dl, 15(%rsp)	;  4 bytes
M0000000000000187:	shrq	$38, %rsi	;  4 bytes
M000000000000018b:	movq	%rsi, %rax	;  3 bytes
M000000000000018e:	imulq	%rbp, %rax	;  4 bytes
M0000000000000192:	shrq	$35, %rax	;  4 bytes
M0000000000000196:	addl	%eax, %eax	;  2 bytes
M0000000000000198:	leal	(%rax,%rax,4), %eax	;  3 bytes
M000000000000019b:	subl	%eax, %esi	;  2 bytes
M000000000000019d:	orb	$48, %sil	;  4 bytes
M00000000000001a1:	movb	%sil, 14(%rsp)	;  5 bytes
M00000000000001a6:	movb	$45, 18(%rsp)	;  5 bytes
M00000000000001ab:	movl	(%r14), %edi	;  3 bytes
M00000000000001ae:	callq	0x46a2e0 <BloombergLP::bdlt::PosixDateImpUtil::serialToMonth(int)>	;  5 bytes
M00000000000001b3:	movl	%eax, %ecx	;  2 bytes
M00000000000001b5:	imulq	%rbp, %rcx	;  4 bytes
M00000000000001b9:	shrq	$35, %rcx	;  4 bytes
M00000000000001bd:	leal	(%rcx,%rcx), %edx	;  3 bytes
M00000000000001c0:	leal	(%rdx,%rdx,4), %edx	;  3 bytes
M00000000000001c3:	subl	%edx, %eax	;  2 bytes
M00000000000001c5:	orb	$48, %al	;  2 bytes
M00000000000001c7:	movb	%al, 20(%rsp)	;  4 bytes
M00000000000001cb:	movq	%rcx, %rax	;  3 bytes
M00000000000001ce:	imulq	%rbp, %rax	;  4 bytes
M00000000000001d2:	shrq	$35, %rax	;  4 bytes
M00000000000001d6:	addl	%eax, %eax	;  2 bytes
M00000000000001d8:	leal	(%rax,%rax,4), %eax	;  3 bytes
M00000000000001db:	subl	%eax, %ecx	;  2 bytes
M00000000000001dd:	orb	$48, %cl	;  3 bytes
M00000000000001e0:	movb	%cl, 19(%rsp)	;  4 bytes
M00000000000001e4:	movb	$45, 21(%rsp)	;  5 bytes
M00000000000001e9:	movl	(%r14), %edi	;  3 bytes
M00000000000001ec:	callq	0x46a2a0 <BloombergLP::bdlt::PosixDateImpUtil::serialToDay(int)>	;  5 bytes
M00000000000001f1:	movl	%eax, %ecx	;  2 bytes
M00000000000001f3:	imulq	%rbp, %rcx	;  4 bytes
M00000000000001f7:	shrq	$35, %rcx	;  4 bytes
M00000000000001fb:	leal	(%rcx,%rcx), %edx	;  3 bytes
M00000000000001fe:	leal	(%rdx,%rdx,4), %edx	;  3 bytes
M0000000000000201:	subl	%edx, %eax	;  2 bytes
M0000000000000203:	orb	$48, %al	;  2 bytes
M0000000000000205:	movb	%al, 23(%rsp)	;  4 bytes
M0000000000000209:	movq	%rcx, %rax	;  3 bytes
M000000000000020c:	imulq	%rbp, %rax	;  4 bytes
M0000000000000210:	shrq	$35, %rax	;  4 bytes
M0000000000000214:	addl	%eax, %eax	;  2 bytes
M0000000000000216:	leal	(%rax,%rax,4), %eax	;  3 bytes
M0000000000000219:	subl	%eax, %ecx	;  2 bytes
M000000000000021b:	orb	$48, %cl	;  3 bytes
M000000000000021e:	movb	%cl, 22(%rsp)	;  4 bytes
M0000000000000222:	movl	%r15d, %edx	;  3 bytes
M0000000000000225:	leaq	14(%rsp), %rsi	;  5 bytes
M000000000000022a:	movq	%rbx, %rdi	;  3 bytes
M000000000000022d:	callq	0x404980 <memcpy@plt>	;  5 bytes
M0000000000000232:	movl	$10, %eax	;  5 bytes
M0000000000000237:	addq	$24, %rsp	;  4 bytes
M000000000000023b:	popq	%rbx	;  1 bytes
M000000000000023c:	popq	%r14	;  2 bytes
M000000000000023e:	popq	%r15	;  2 bytes
M0000000000000240:	popq	%rbp	;  1 bytes
M0000000000000241:	retq		;  1 bytes
M0000000000000242:	nopw	%cs:(%rax,%rax)	; 10 bytes
M000000000000024c:	nopl	(%rax)	;  4 bytes
