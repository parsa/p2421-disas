    ; assembly                                                                                                                                               | /* r2dec pseudo code output */
                                                                                                                                                             | /* balber_berdecoder.t/none @ 0x45cac0 */
                                                                                                                                                             | #include <stdint.h>
                                                                                                                                                             |  
    ; (fcn) method.BloombergLP::s_baltst::MySequenceWithAnonymousChoiceChoice.operator_BloombergLP::s_baltst::MySequenceWithAnonymousChoiceChoice_ ()        | int64_t method_BloombergLP::s_baltst::MySequenceWithAnonymousChoiceChoice_operator_BloombergLP::s_baltst::MySequenceWithAnonymousChoiceChoice_ (int64_t arg2, uint32_t arg1) {
                                                                                                                                                             |     rsi = arg2;
                                                                                                                                                             |     rdi = arg1;
                                                                                                                                                             |     /* BloombergLP::s_baltst::MySequenceWithAnonymousChoiceChoice::operator=(BloombergLP::s_baltst::MySequenceWithAnonymousChoiceChoice&&) */
    0x0045cac0 push rbp                                                                                                                                      |     
    0x0045cac1 push rbx                                                                                                                                      |     
    0x0045cac2 push rax                                                                                                                                      |     
    0x0045cac3 mov rbx, rdi                                                                                                                                  |     rbx = rdi;
    0x0045cac6 cmp rdi, rsi                                                                                                                                  |     
                                                                                                                                                             |     if (rdi != rsi) {
    0x0045cac9 je 0x45cb43                                                                                                                                   |         
    0x0045cacb mov eax, dword [rsi + 0x30]                                                                                                                   |         eax = *((rsi + 0x30));
    0x0045cace cmp eax, 1                                                                                                                                    |         
                                                                                                                                                             |         if (eax != 1) {
    0x0045cad1 je 0x45cae9                                                                                                                                   |             
    0x0045cad3 test eax, eax                                                                                                                                 |             
                                                                                                                                                             |             if (eax == 0) {
    0x0045cad5 jne 0x45caf3                                                                                                                                  |                 
    0x0045cad7 mov ebp, dword [rsi]                                                                                                                          |                 ebp = *(rsi);
    0x0045cad9 mov eax, dword [rbx + 0x30]                                                                                                                   |                 eax = *((rbx + 0x30));
    0x0045cadc cmp eax, 1                                                                                                                                    |                 
                                                                                                                                                             |                 if (eax != 1) {
    0x0045cadf je 0x45cb1e                                                                                                                                   |                     
    0x0045cae1 test eax, eax                                                                                                                                 |                     
                                                                                                                                                             |                     if (eax == 0) {
    0x0045cae3 jne 0x45cb3a                                                                                                                                  |                         
    0x0045cae5 mov dword [rbx], ebp                                                                                                                          |                         *(rbx) = ebp;
    0x0045cae7 jmp 0x45cb43                                                                                                                                  |                         
                                                                                                                                                             |                     } else {
    0x0045cae9 mov rdi, rbx                                                                                                                                  |                         
    0x0045caec call 0x45cb60                                                                                                                                 |                         BloombergLP::s_baltst::MySequenceWithAnonymousChoiceChoice::makeMyChoice2(bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>&&) (rbx, rsi);
    0x0045caf1 jmp 0x45cb43                                                                                                                                  |                         
                                                                                                                                                             |                     } else {
    0x0045caf3 cmp dword [rbx + 0x30], 1                                                                                                                     |                         
                                                                                                                                                             |                     }
                                                                                                                                                             |                     if (*((rbx + 0x30)) == 1) {
    0x0045caf7 jne 0x45cb15                                                                                                                                  |                         
    0x0045caf9 cmp qword [rbx + 0x20], 0x17                                                                                                                  |                         
                                                                                                                                                             |                         if (*((rbx + 0x20)) != 0x17) {
    0x0045cafe je 0x45cb0d                                                                                                                                   |                             
    0x0045cb00 mov rsi, qword [rbx]                                                                                                                          |                             rsi = *(rbx);
    0x0045cb03 mov rdi, qword [rbx + 0x28]                                                                                                                   |                             rdi = *((rbx + 0x28));
    0x0045cb07 mov rax, qword [rdi]                                                                                                                          |                             rax = *(rdi);
    0x0045cb0a call qword [rax + 0x18]                                                                                                                       |                             uint64_t (*rax + 0x18)() ();
                                                                                                                                                             |                         }
    0x0045cb0d mov qword [rbx + 0x18], 0xffffffffffffffff                                                                                                    |                         *((rbx + 0x18)) = 0xffffffffffffffff;
                                                                                                                                                             |                     }
    0x0045cb15 mov dword [rbx + 0x30], 0xffffffff                                                                                                            |                     *((rbx + 0x30)) = 0xffffffff;
    0x0045cb1c jmp 0x45cb43                                                                                                                                  |                     
                                                                                                                                                             |                 } else {
    0x0045cb1e cmp qword [rbx + 0x20], 0x17                                                                                                                  |                     
                                                                                                                                                             |                 }
                                                                                                                                                             |             }
                                                                                                                                                             |             if (*((rbx + 0x20)) != 0x17) {
    0x0045cb23 je 0x45cb32                                                                                                                                   |                 
    0x0045cb25 mov rsi, qword [rbx]                                                                                                                          |                 rsi = *(rbx);
    0x0045cb28 mov rdi, qword [rbx + 0x28]                                                                                                                   |                 rdi = *((rbx + 0x28));
    0x0045cb2c mov rax, qword [rdi]                                                                                                                          |                 rax = *(rdi);
    0x0045cb2f call qword [rax + 0x18]                                                                                                                       |                 uint64_t (*rax + 0x18)() ();
                                                                                                                                                             |             }
    0x0045cb32 mov qword [rbx + 0x18], 0xffffffffffffffff                                                                                                    |             *((rbx + 0x18)) = 0xffffffffffffffff;
    0x0045cb3a mov dword [rbx], ebp                                                                                                                          |             *(rbx) = ebp;
    0x0045cb3c mov dword [rbx + 0x30], 0                                                                                                                     |             *((rbx + 0x30)) = 0;
                                                                                                                                                             |         }
                                                                                                                                                             |     }
    0x0045cb43 mov rax, rbx                                                                                                                                  |     rax = rbx;
    0x0045cb46 add rsp, 8                                                                                                                                    |     
    0x0045cb4a pop rbx                                                                                                                                       |     
    0x0045cb4b pop rbp                                                                                                                                       |     
    0x0045cb4c ret                                                                                                                                           |     return rax;
                                                                                                                                                             | }
