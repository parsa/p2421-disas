    ; assembly                                                                                               | /* r2dec pseudo code output */
                                                                                                             | /* balber_berdecoder.t/none @ 0x45ad90 */
                                                                                                             | #include <stdint.h>
                                                                                                             |  
    ; (fcn) method.BloombergLP::s_baltst::MyChoice.operator_BloombergLP::s_baltst::MyChoice_const_ ()        | int64_t method_BloombergLP::s_baltst::MyChoice_operator_BloombergLP::s_baltst::MyChoice_const_ (int64_t arg2, uint32_t arg1) {
                                                                                                             |     rsi = arg2;
                                                                                                             |     rdi = arg1;
                                                                                                             |     /* BloombergLP::s_baltst::MyChoice::operator=(BloombergLP::s_baltst::MyChoice const&) */
    0x0045ad90 push rbp                                                                                      |     
    0x0045ad91 push rbx                                                                                      |     
    0x0045ad92 push rax                                                                                      |     
    0x0045ad93 mov rbx, rdi                                                                                  |     rbx = rdi;
    0x0045ad96 cmp rdi, rsi                                                                                  |     
                                                                                                             |     if (rdi != rsi) {
    0x0045ad99 je 0x45ae13                                                                                   |         
    0x0045ad9b mov eax, dword [rsi + 0x30]                                                                   |         eax = *((rsi + 0x30));
    0x0045ad9e cmp eax, 1                                                                                    |         
                                                                                                             |         if (eax != 1) {
    0x0045ada1 je 0x45adb9                                                                                   |             
    0x0045ada3 test eax, eax                                                                                 |             
                                                                                                             |             if (eax == 0) {
    0x0045ada5 jne 0x45adc3                                                                                  |                 
    0x0045ada7 mov ebp, dword [rsi]                                                                          |                 ebp = *(rsi);
    0x0045ada9 mov eax, dword [rbx + 0x30]                                                                   |                 eax = *((rbx + 0x30));
    0x0045adac cmp eax, 1                                                                                    |                 
                                                                                                             |                 if (eax != 1) {
    0x0045adaf je 0x45adee                                                                                   |                     
    0x0045adb1 test eax, eax                                                                                 |                     
                                                                                                             |                     if (eax == 0) {
    0x0045adb3 jne 0x45ae0a                                                                                  |                         
    0x0045adb5 mov dword [rbx], ebp                                                                          |                         *(rbx) = ebp;
    0x0045adb7 jmp 0x45ae13                                                                                  |                         
                                                                                                             |                     } else {
    0x0045adb9 mov rdi, rbx                                                                                  |                         
    0x0045adbc call 0x45ae80                                                                                 |                         BloombergLP::s_baltst::MyChoice::makeSelection2(bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>const&) (rbx, rsi);
    0x0045adc1 jmp 0x45ae13                                                                                  |                         
                                                                                                             |                     } else {
    0x0045adc3 cmp dword [rbx + 0x30], 1                                                                     |                         
                                                                                                             |                     }
                                                                                                             |                     if (*((rbx + 0x30)) == 1) {
    0x0045adc7 jne 0x45ade5                                                                                  |                         
    0x0045adc9 cmp qword [rbx + 0x20], 0x17                                                                  |                         
                                                                                                             |                         if (*((rbx + 0x20)) != 0x17) {
    0x0045adce je 0x45addd                                                                                   |                             
    0x0045add0 mov rsi, qword [rbx]                                                                          |                             rsi = *(rbx);
    0x0045add3 mov rdi, qword [rbx + 0x28]                                                                   |                             rdi = *((rbx + 0x28));
    0x0045add7 mov rax, qword [rdi]                                                                          |                             rax = *(rdi);
    0x0045adda call qword [rax + 0x18]                                                                       |                             uint64_t (*rax + 0x18)() ();
                                                                                                             |                         }
    0x0045addd mov qword [rbx + 0x18], 0xffffffffffffffff                                                    |                         *((rbx + 0x18)) = 0xffffffffffffffff;
                                                                                                             |                     }
    0x0045ade5 mov dword [rbx + 0x30], 0xffffffff                                                            |                     *((rbx + 0x30)) = 0xffffffff;
    0x0045adec jmp 0x45ae13                                                                                  |                     
                                                                                                             |                 } else {
    0x0045adee cmp qword [rbx + 0x20], 0x17                                                                  |                     
                                                                                                             |                 }
                                                                                                             |             }
                                                                                                             |             if (*((rbx + 0x20)) != 0x17) {
    0x0045adf3 je 0x45ae02                                                                                   |                 
    0x0045adf5 mov rsi, qword [rbx]                                                                          |                 rsi = *(rbx);
    0x0045adf8 mov rdi, qword [rbx + 0x28]                                                                   |                 rdi = *((rbx + 0x28));
    0x0045adfc mov rax, qword [rdi]                                                                          |                 rax = *(rdi);
    0x0045adff call qword [rax + 0x18]                                                                       |                 uint64_t (*rax + 0x18)() ();
                                                                                                             |             }
    0x0045ae02 mov qword [rbx + 0x18], 0xffffffffffffffff                                                    |             *((rbx + 0x18)) = 0xffffffffffffffff;
    0x0045ae0a mov dword [rbx], ebp                                                                          |             *(rbx) = ebp;
    0x0045ae0c mov dword [rbx + 0x30], 0                                                                     |             *((rbx + 0x30)) = 0;
                                                                                                             |         }
                                                                                                             |     }
    0x0045ae13 mov rax, rbx                                                                                  |     rax = rbx;
    0x0045ae16 add rsp, 8                                                                                    |     
    0x0045ae1a pop rbx                                                                                       |     
    0x0045ae1b pop rbp                                                                                       |     
    0x0045ae1c ret                                                                                           |     return rax;
                                                                                                             | }
