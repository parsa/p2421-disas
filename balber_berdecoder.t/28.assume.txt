    ; assembly                                                                                   | /* r2dec pseudo code output */
                                                                                                 | /* balber_berdecoder.t/assume @ 0x45cb80 */
                                                                                                 | #include <stdint.h>
                                                                                                 |  
    ; (fcn) method.BloombergLP::s_baltst::MySequenceWithAnonymousChoiceChoice.reset__ ()         | int64_t method_BloombergLP::s_baltst::MySequenceWithAnonymousChoiceChoice_reset_ (uint32_t arg1) {
                                                                                                 |     rdi = arg1;
                                                                                                 |     /* BloombergLP::s_baltst::MySequenceWithAnonymousChoiceChoice::reset() */
    0x0045cb80 push rbx                                                                          |     
    0x0045cb81 mov rbx, rdi                                                                      |     rbx = rdi;
    0x0045cb84 mov eax, dword [rdi + 0x30]                                                       |     eax = *((rdi + 0x30));
    0x0045cb87 test eax, eax                                                                     |     
                                                                                                 |     if (eax != 0) {
    0x0045cb89 je 0x45cbac                                                                       |         
    0x0045cb8b cmp eax, 1                                                                        |         
                                                                                                 |         if (eax != 1) {
    0x0045cb8e jne 0x45cbac                                                                      |             goto label_0;
                                                                                                 |         }
    0x0045cb90 cmp qword [rbx + 0x20], 0x17                                                      |         
                                                                                                 |         if (*((rbx + 0x20)) != 0x17) {
    0x0045cb95 je 0x45cba4                                                                       |             
    0x0045cb97 mov rsi, qword [rbx]                                                              |             rsi = *(rbx);
    0x0045cb9a mov rdi, qword [rbx + 0x28]                                                       |             rdi = *((rbx + 0x28));
    0x0045cb9e mov rax, qword [rdi]                                                              |             rax = *(rdi);
    0x0045cba1 call qword [rax + 0x18]                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                 |         }
    0x0045cba4 mov qword [rbx + 0x18], 0xffffffffffffffff                                        |         *((rbx + 0x18)) = 0xffffffffffffffff;
                                                                                                 |     }
                                                                                                 | label_0:
    0x0045cbac mov dword [rbx + 0x30], 0xffffffff                                                |     *((rbx + 0x30)) = 0xffffffff;
    0x0045cbb3 pop rbx                                                                           |     
    0x0045cbb4 ret                                                                               |     return rax;
                                                                                                 | }
