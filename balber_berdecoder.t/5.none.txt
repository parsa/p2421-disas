    ; assembly                                                                   | /* r2dec pseudo code output */
                                                                                 | /* balber_berdecoder.t/none @ 0x45b160 */
                                                                                 | #include <stdint.h>
                                                                                 |  
    ; (fcn) method.BloombergLP::s_baltst::MyChoice.makeSelection_int_ ()         | int64_t method_BloombergLP::s_baltst::MyChoice_makeSelection_int_ (uint32_t arg2, int64_t arg1) {
                                                                                 |     rsi = arg2;
                                                                                 |     rdi = arg1;
                                                                                 |     /* BloombergLP::s_baltst::MyChoice::makeSelection(int) */
    0x0045b160 push r14                                                          |     
    0x0045b162 push rbx                                                          |     
    0x0045b163 push rax                                                          |     
    0x0045b164 mov r14, rdi                                                      |     r14 = rdi;
    0x0045b167 cmp esi, 0xffffffff                                               |     
                                                                                 |     if (esi != 0xffffffff) {
    0x0045b16a je 0x45b1be                                                       |         
    0x0045b16c cmp esi, 1                                                        |         
                                                                                 |         if (esi != 1) {
    0x0045b16f je 0x45b19f                                                       |             
    0x0045b171 mov ebx, 0xffffffff                                               |             ebx = 0xffffffff;
    0x0045b176 test esi, esi                                                     |             
                                                                                 |             if (esi != 0) {
    0x0045b178 jne 0x45b25f                                                      |                 goto label_0;
                                                                                 |             }
    0x0045b17e mov eax, dword [r14 + 0x30]                                       |             eax = *((r14 + 0x30));
    0x0045b182 cmp eax, 1                                                        |             
                                                                                 |             if (eax != 1) {
    0x0045b185 je 0x45b232                                                       |                 
    0x0045b18b test eax, eax                                                     |                 
                                                                                 |                 if (eax == 0) {
    0x0045b18d jne 0x45b24e                                                      |                     
    0x0045b193 mov dword [r14], 0                                                |                     *(r14) = 0;
    0x0045b19a jmp 0x45b25d                                                      |                     
                                                                                 |                 } else {
    0x0045b19f cmp dword [r14 + 0x30], 1                                         |                     
                                                                                 |                     if (*((r14 + 0x30)) == 1) {
    0x0045b1a4 jne 0x45b1eb                                                      |                         
    0x0045b1a6 xor ebx, ebx                                                      |                         ebx = 0;
    0x0045b1a8 mov rdi, r14                                                      |                         
    0x0045b1ab xor esi, esi                                                      |                         
    0x0045b1ad mov rdx, 0xffffffffffffffff                                       |                         
    0x0045b1b4 call 0x473cd0                                                     |                         bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::erase(unsigned long,unsigned long) (r14, 0, 0xffffffffffffffff);
    0x0045b1b9 jmp 0x45b25f                                                      |                         
                                                                                 |                     } else {
    0x0045b1be cmp dword [r14 + 0x30], 1                                         |                         
                                                                                 |                         if (*((r14 + 0x30)) == 1) {
    0x0045b1c3 jne 0x45b1e1                                                      |                             
    0x0045b1c5 cmp qword [r14 + 0x20], 0x17                                      |                             
                                                                                 |                             if (*((r14 + 0x20)) != 0x17) {
    0x0045b1ca je 0x45b1d9                                                       |                                 
    0x0045b1cc mov rsi, qword [r14]                                              |                                 rsi = *(r14);
    0x0045b1cf mov rdi, qword [r14 + 0x28]                                       |                                 rdi = *((r14 + 0x28));
    0x0045b1d3 mov rax, qword [rdi]                                              |                                 rax = *(rdi);
    0x0045b1d6 call qword [rax + 0x18]                                           |                                 uint64_t (*rax + 0x18)() ();
                                                                                 |                             }
    0x0045b1d9 mov qword [r14 + 0x18], 0xffffffffffffffff                        |                             *((r14 + 0x18)) = 0xffffffffffffffff;
                                                                                 |                         }
    0x0045b1e1 mov dword [r14 + 0x30], 0xffffffff                                |                         *((r14 + 0x30)) = 0xffffffff;
    0x0045b1e9 jmp 0x45b25d                                                      |                         goto label_1;
                                                                                 |                     }
    0x0045b1eb mov dword [r14 + 0x30], 0xffffffff                                |                     *((r14 + 0x30)) = 0xffffffff;
    0x0045b1f3 mov rax, qword [r14 + 0x38]                                       |                     rax = *((r14 + 0x38));
    0x0045b1f7 test rax, rax                                                     |                     
                                                                                 |                     if (rax == 0) {
    0x0045b1fa jne 0x45b20d                                                      |                         
    0x0045b1fc mov rax, qword [rip + 0x29c1ed]                                   |                         rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0045b203 test rax, rax                                                     |                         
                                                                                 |                         if (rax != 0) {
    0x0045b206 jne 0x45b20d                                                      |                             goto label_2;
                                                                                 |                         }
    0x0045b208 call 0x46d5b0                                                     |                         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                                 |                     }
                                                                                 | label_2:
    0x0045b20d mov qword [r14], 0                                                |                     *(r14) = 0;
    0x0045b214 movaps xmm0, xmmword [rip + 0x39ab5]                              |                     xmm0 = .comment;
    0x0045b21b movups xmmword [r14 + 0x18], xmm0                                 |                     __asm ("movups xmmword [r14 + 0x18], xmm0");
    0x0045b220 mov qword [r14 + 0x28], rax                                       |                     *((r14 + 0x28)) = rax;
    0x0045b224 mov byte [r14], 0                                                 |                     *(r14) = 0;
    0x0045b228 mov dword [r14 + 0x30], 1                                         |                     *((r14 + 0x30)) = 1;
    0x0045b230 jmp 0x45b25d                                                      |                     
                                                                                 |                 } else {
    0x0045b232 cmp qword [r14 + 0x20], 0x17                                      |                     
                                                                                 |                 }
                                                                                 |             }
                                                                                 |             if (*((r14 + 0x20)) != 0x17) {
    0x0045b237 je 0x45b246                                                       |                 
    0x0045b239 mov rsi, qword [r14]                                              |                 rsi = *(r14);
    0x0045b23c mov rdi, qword [r14 + 0x28]                                       |                 rdi = *((r14 + 0x28));
    0x0045b240 mov rax, qword [rdi]                                              |                 rax = *(rdi);
    0x0045b243 call qword [rax + 0x18]                                           |                 uint64_t (*rax + 0x18)() ();
                                                                                 |             }
    0x0045b246 mov qword [r14 + 0x18], 0xffffffffffffffff                        |             *((r14 + 0x18)) = 0xffffffffffffffff;
    0x0045b24e mov dword [r14], 0                                                |             *(r14) = 0;
    0x0045b255 mov dword [r14 + 0x30], 0                                         |             *((r14 + 0x30)) = 0;
                                                                                 |         }
                                                                                 | label_1:
    0x0045b25d xor ebx, ebx                                                      |         ebx = 0;
                                                                                 |     }
                                                                                 | label_0:
    0x0045b25f mov eax, ebx                                                      |     eax = ebx;
    0x0045b261 add rsp, 8                                                        |     
    0x0045b265 pop rbx                                                           |     
    0x0045b266 pop r14                                                           |     
    0x0045b268 ret                                                               |     return rax;
                                                                                 | }
