0000000000420610 <std::__1::enable_if<(is_move_constructible<BloombergLP::bdlb::VariantImp<Bloom   |	0000000000423130 <std::__1::enable_if<(is_move_constructible<BloombergLP::bdlb::VariantImp<Bloom
0000000000000000: 01	pushq	%rbp									0000000000000000: 01	pushq	%rbp
0000000000000001: 02	pushq	%r14									0000000000000001: 02	pushq	%r14
0000000000000003: 01	pushq	%rbx									0000000000000003: 01	pushq	%rbx
0000000000000004: 04	subq	$80, %rsp								0000000000000004: 04	subq	$80, %rsp
0000000000000008: 03	movq	%rsi, %r14								0000000000000008: 03	movq	%rsi, %r14
000000000000000b: 03	movq	%rdi, %rbx								000000000000000b: 03	movq	%rdi, %rbx
000000000000000e: 03	movl	48(%rdi), %ebp								000000000000000e: 03	movl	48(%rdi), %ebp
0000000000000011: 04	movq	56(%rdi), %rax								0000000000000011: 04	movq	56(%rdi), %rax
0000000000000015: 04	movl	%ebp, 64(%rsp)							   |	0000000000000015: 04	movl	%ebp, 48(%rsp)
0000000000000019: 03	testq	%rax, %rax								0000000000000019: 03	testq	%rax, %rax
000000000000001c: 02	jne	0x42063f <std::__1::enable_if<(is_move_constructible<BloombergLP   |	000000000000001c: 02	jne	0x42315f <std::__1::enable_if<(is_move_constructible<BloombergLP
000000000000001e: 07	movq	2487779(%rip), %rax  # 67fc18 <BloombergLP::bslma::Default::s_de   |	000000000000001e: 07	movq	2489027(%rip), %rax  # 682c18 <BloombergLP::bslma::Default::s_de
0000000000000025: 03	testq	%rax, %rax								0000000000000025: 03	testq	%rax, %rax
0000000000000028: 02	jne	0x42063f <std::__1::enable_if<(is_move_constructible<BloombergLP   |	0000000000000028: 02	jne	0x42315f <std::__1::enable_if<(is_move_constructible<BloombergLP
000000000000002a: 05	callq	0x4247a0 <BloombergLP::bslma::Default::determineAndReturnDefault   |	000000000000002a: 05	callq	0x427340 <BloombergLP::bslma::Default::determineAndReturnDefault
000000000000002f: 05	movq	%rax, 72(%rsp)							   |	000000000000002f: 05	movq	%rax, 56(%rsp)
0000000000000034: 02	testl	%ebp, %ebp								0000000000000034: 02	testl	%ebp, %ebp
0000000000000036: 02	je	0x420668 <std::__1::enable_if<(is_move_constructible<BloombergLP   |	0000000000000036: 02	je	0x423189 <std::__1::enable_if<(is_move_constructible<BloombergLP
0000000000000038: 05	leaq	16(%rsp), %rcx							   |	0000000000000038: 03	movq	%rsp, %rcx
000000000000003d: 04	movq	%rcx, (%rsp)							   |	000000000000003b: 05	movq	%rcx, 64(%rsp)
0000000000000041: 05	movq	%rax, 8(%rsp)							   |	0000000000000040: 05	movq	%rax, 72(%rsp)
0000000000000046: 03	movl	48(%rbx), %edx							   |	0000000000000045: 03	movl	48(%rbx), %edx
0000000000000049: 02	testl	%edx, %edx							   |	0000000000000048: 02	testl	%edx, %edx
000000000000004b: 02	je	0x420668 <std::__1::enable_if<(is_move_constructible<BloombergLP   |	000000000000004a: 02	je	0x423189 <std::__1::enable_if<(is_move_constructible<BloombergLP
000000000000004d: 03	movq	%rsp, %rsi							   |	000000000000004c: 05	leaq	64(%rsp), %rsi
0000000000000050: 03	movq	%rbx, %rdi							   |	0000000000000051: 03	movq	%rbx, %rdi
0000000000000053: 05	callq	0x4208e0 <void BloombergLP::bdlb::VariantImp<BloombergLP::bslmf:   |	0000000000000054: 05	callq	0x423450 <void BloombergLP::bdlb::VariantImp<BloombergLP::bslmf:
0000000000000058: 03	cmpq	%rbx, %r14							   |	0000000000000059: 03	movq	%rbx, %rdi
000000000000005b: 02	je	0x4206ba <std::__1::enable_if<(is_move_constructible<BloombergLP   |	000000000000005c: 03	movq	%r14, %rsi
000000000000005d: 03	movl	48(%rbx), %edx							   |	000000000000005f: 05	callq	0x423380 <BloombergLP::bdlb::VariantImp<BloombergLP::bslmf::Type
0000000000000060: 04	cmpl	48(%r14), %edx							   |	0000000000000064: 03	movq	%rsp, %rsi
0000000000000064: 02	jne	0x42068b <std::__1::enable_if<(is_move_constructible<BloombergLP   |	0000000000000067: 03	movq	%r14, %rdi
0000000000000066: 02	testl	%edx, %edx							   |	000000000000006a: 05	callq	0x423380 <BloombergLP::bdlb::VariantImp<BloombergLP::bslmf::Type
0000000000000068: 02	je	0x4206ba <std::__1::enable_if<(is_move_constructible<BloombergLP   |	000000000000006f: 04	movl	48(%rsp), %eax
000000000000006a: 04	movq	%rbx, (%rsp)							   |	0000000000000073: 03	cmpl	$5, %eax
000000000000006e: 03	movq	%rsp, %rsi							   |	0000000000000076: 02	je	0x4231c6 <std::__1::enable_if<(is_move_constructible<BloombergLP
0000000000000071: 03	movq	%r14, %rdi							   |	0000000000000078: 03	cmpl	$3, %eax
0000000000000074: 05	callq	0x420ab0 <void BloombergLP::bdlb::VariantImp<BloombergLP::bslmf:   |	000000000000007b: 02	jne	0x4231da <std::__1::enable_if<(is_move_constructible<BloombergLP
0000000000000079: 02	jmp	0x4206ba <std::__1::enable_if<(is_move_constructible<BloombergLP   |	000000000000007d: 06	cmpq	$23, 32(%rsp)
000000000000007b: 03	movq	%rbx, %rdi							   |	0000000000000083: 02	je	0x4231da <std::__1::enable_if<(is_move_constructible<BloombergLP
000000000000007e: 05	callq	0x41fec0 <BloombergLP::bdlb::VariantImp<BloombergLP::bslmf::Type   |	0000000000000085: 04	movq	(%rsp), %rsi
0000000000000083: 04	movl	48(%r14), %edx							   |	0000000000000089: 05	movq	40(%rsp), %rdi
0000000000000087: 02	testl	%edx, %edx							   |	000000000000008e: 03	movq	(%rdi), %rax
0000000000000089: 02	je	0x4206ba <std::__1::enable_if<(is_move_constructible<BloombergLP   |	0000000000000091: 03	callq	*24(%rax)
000000000000008b: 04	movq	56(%rbx), %rax							   |	0000000000000094: 02	jmp	0x4231da <std::__1::enable_if<(is_move_constructible<BloombergLP
000000000000008f: 04	movq	%rbx, (%rsp)							   |	0000000000000096: 04	movq	(%rsp), %rsi
0000000000000093: 05	movq	%rax, 8(%rsp)							   |	000000000000009a: 03	testq	%rsi, %rsi
0000000000000098: 03	movq	%rsp, %rsi							   |	000000000000009d: 02	je	0x4231da <std::__1::enable_if<(is_move_constructible<BloombergLP
000000000000009b: 03	movq	%r14, %rdi							   |	000000000000009f: 05	movq	24(%rsp), %rdi
000000000000009e: 05	callq	0x4208e0 <void BloombergLP::bdlb::VariantImp<BloombergLP::bslmf:   |	00000000000000a4: 03	movq	(%rdi), %rax
00000000000000a3: 04	movl	48(%r14), %eax							   |	00000000000000a7: 03	callq	*24(%rax)
00000000000000a7: 03	movl	%eax, 48(%rbx)							   |	00000000000000aa: 04	addq	$80, %rsp
00000000000000aa: 05	leaq	16(%rsp), %rax							   |	00000000000000ae: 01	popq	%rbx
00000000000000af: 03	cmpq	%r14, %rax							   |	00000000000000af: 02	popq	%r14
00000000000000b2: 02	je	0x420717 <std::__1::enable_if<(is_move_constructible<BloombergLP   |	00000000000000b1: 01	popq	%rbp
00000000000000b4: 04	movl	48(%r14), %edx							   |	00000000000000b2: 01	retq	
00000000000000b8: 04	cmpl	64(%rsp), %edx							   |	00000000000000b3: 03	movq	%rax, %rdi
00000000000000bc: 02	jne	0x4206e5 <std::__1::enable_if<(is_move_constructible<BloombergLP   |	00000000000000b6: 05	callq	0x422610 <__clang_call_terminate>
00000000000000be: 02	testl	%edx, %edx							   |	00000000000000bb: 03	movq	%rax, %rdi
00000000000000c0: 02	je	0x420717 <std::__1::enable_if<(is_move_constructible<BloombergLP   |	00000000000000be: 05	callq	0x422610 <__clang_call_terminate>
00000000000000c2: 04	movq	%r14, (%rsp)							   |	00000000000000c3: 03	movq	%rax, %rbx
00000000000000c6: 05	leaq	16(%rsp), %rdi							   |	00000000000000c6: 04	movl	48(%rsp), %eax
00000000000000cb: 03	movq	%rsp, %rsi							   |	00000000000000ca: 03	cmpl	$5, %eax
00000000000000ce: 05	callq	0x420ab0 <void BloombergLP::bdlb::VariantImp<BloombergLP::bslmf:   |	00000000000000cd: 02	je	0x42321d <std::__1::enable_if<(is_move_constructible<BloombergLP
00000000000000d3: 02	jmp	0x420717 <std::__1::enable_if<(is_move_constructible<BloombergLP   |	00000000000000cf: 03	cmpl	$3, %eax
00000000000000d5: 03	movq	%r14, %rdi							   |	00000000000000d2: 02	jne	0x423231 <std::__1::enable_if<(is_move_constructible<BloombergLP
00000000000000d8: 05	callq	0x41fec0 <BloombergLP::bdlb::VariantImp<BloombergLP::bslmf::Type   |	00000000000000d4: 06	cmpq	$23, 32(%rsp)
00000000000000dd: 04	movl	64(%rsp), %edx							   |	00000000000000da: 02	je	0x423231 <std::__1::enable_if<(is_move_constructible<BloombergLP
00000000000000e1: 02	testl	%edx, %edx							   |	00000000000000dc: 04	movq	(%rsp), %rsi
00000000000000e3: 02	je	0x420717 <std::__1::enable_if<(is_move_constructible<BloombergLP   |	00000000000000e0: 05	movq	40(%rsp), %rdi
00000000000000e5: 04	movq	56(%r14), %rax							   |	00000000000000e5: 03	movq	(%rdi), %rax
00000000000000e9: 04	movq	%r14, (%rsp)							   |	00000000000000e8: 03	callq	*24(%rax)
00000000000000ed: 05	movq	%rax, 8(%rsp)							   |	00000000000000eb: 02	jmp	0x423231 <std::__1::enable_if<(is_move_constructible<BloombergLP
00000000000000f2: 05	leaq	16(%rsp), %rdi							   |	00000000000000ed: 04	movq	(%rsp), %rsi
00000000000000f7: 03	movq	%rsp, %rsi							   |	00000000000000f1: 03	testq	%rsi, %rsi
00000000000000fa: 05	callq	0x4208e0 <void BloombergLP::bdlb::VariantImp<BloombergLP::bslmf:   |	00000000000000f4: 02	je	0x423231 <std::__1::enable_if<(is_move_constructible<BloombergLP
00000000000000ff: 04	movl	64(%rsp), %eax							   |	00000000000000f6: 05	movq	24(%rsp), %rdi
0000000000000103: 04	movl	%eax, 48(%r14)							   |	00000000000000fb: 03	movq	(%rdi), %rax
0000000000000107: 05	leaq	16(%rsp), %rdi							   |	00000000000000fe: 03	callq	*24(%rax)
000000000000010c: 05	callq	0x41fec0 <BloombergLP::bdlb::VariantImp<BloombergLP::bslmf::Type   |	0000000000000101: 03	movq	%rbx, %rdi
0000000000000111: 04	addq	$80, %rsp							   |	0000000000000104: 05	callq	0x4043a0 <_Unwind_Resume@plt>
0000000000000115: 01	popq	%rbx								   |	0000000000000109: 03	movq	%rax, %rdi
0000000000000116: 02	popq	%r14								   |	000000000000010c: 05	callq	0x422610 <__clang_call_terminate>
0000000000000118: 01	popq	%rbp								   |	0000000000000111: 03	movq	%rax, %rdi
0000000000000119: 01	retq									   |	0000000000000114: 05	callq	0x422610 <__clang_call_terminate>
000000000000011a: 03	movq	%rax, %rdi							   |	0000000000000119: 07	nopl	(%rax)
000000000000011d: 05	callq	0x41fd40 <__clang_call_terminate>				   <
0000000000000122: 03	movq	%rax, %rbx							   <
0000000000000125: 05	leaq	16(%rsp), %rdi							   <
000000000000012a: 05	callq	0x41fec0 <BloombergLP::bdlb::VariantImp<BloombergLP::bslmf::Type   <
000000000000012f: 03	movq	%rbx, %rdi							   <
0000000000000132: 05	callq	0x4043a0 <_Unwind_Resume@plt>					   <
0000000000000137: 03	movq	%rax, %rdi							   <
000000000000013a: 05	callq	0x41fd40 <__clang_call_terminate>				   <
000000000000013f: 01	nop									   <
