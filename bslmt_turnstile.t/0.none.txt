    ; assembly                                                                                                                                                                                       | /* r2dec pseudo code output */
                                                                                                                                                                                                     | /* bslmt_turnstile.t/none @ 0x4089f0 */
                                                                                                                                                                                                     | #include <stdint.h>
                                                                                                                                                                                                     |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil.createWithAllocator_WaitTurnAndSleepCallbackJob__unsigned_long__WaitTurnAndSleepCallbackJob_const__BloombergLP::bslma::Allocator_ ()           | uint64_t method_int_BloombergLP::bslmt::ThreadUtil_createWithAllocator_WaitTurnAndSleepCallbackJob_unsigned_long_WaitTurnAndSleepCallbackJob_const_BloombergLP::bslma::Allocator_ (int64_t arg3, int64_t arg2, int64_t arg1) {
                                                                                                                                                                                                     |     int64_t var_18h;
                                                                                                                                                                                                     |     uint32_t var_38h;
                                                                                                                                                                                                     |     int64_t var_40h;
                                                                                                                                                                                                     |     rdx = arg3;
                                                                                                                                                                                                     |     rsi = arg2;
                                                                                                                                                                                                     |     rdi = arg1;
                                                                                                                                                                                                     |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<WaitTurnAndSleepCallbackJob>(unsigned long*, WaitTurnAndSleepCallbackJob const&, BloombergLP::bslma::Allocator*) */
    0x004089f0 push rbp                                                                                                                                                                              |     
    0x004089f1 push r15                                                                                                                                                                              |     
    0x004089f3 push r14                                                                                                                                                                              |     
    0x004089f5 push rbx                                                                                                                                                                              |     
    0x004089f6 sub rsp, 0x48                                                                                                                                                                         |     
    0x004089fa mov r14, rdx                                                                                                                                                                          |     r14 = rdx;
    0x004089fd mov rbp, rsi                                                                                                                                                                          |     
    0x00408a00 mov r15, rdi                                                                                                                                                                          |     r15 = rdi;
    0x00408a03 test rdx, rdx                                                                                                                                                                         |     
                                                                                                                                                                                                     |     if (rdx == 0) {
    0x00408a06 jne 0x408a1c                                                                                                                                                                          |         
    0x00408a08 mov r14, qword [rip + 0x23df91]                                                                                                                                                       |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00408a0f test r14, r14                                                                                                                                                                         |         
                                                                                                                                                                                                     |         if (r14 != 0) {
    0x00408a12 jne 0x408a1c                                                                                                                                                                          |             goto label_0;
                                                                                                                                                                                                     |         }
    0x00408a14 call 0x42ef40                                                                                                                                                                         |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x00408a19 mov r14, rax                                                                                                                                                                          |         r14 = rax;
                                                                                                                                                                                                     |     }
                                                                                                                                                                                                     | label_0:
    0x00408a1c mov rax, qword [r14]                                                                                                                                                                  |     rax = *(r14);
    0x00408a1f mov esi, 0x70                                                                                                                                                                         |     esi = 0x70;
    0x00408a24 mov rdi, r14                                                                                                                                                                          |     rdi = r14;
    0x00408a27 call qword [rax + 0x10]                                                                                                                                                               |     rax = uint64_t (*rax + 0x10)() ();
    0x00408a2a mov rbx, rax                                                                                                                                                                          |     rbx = rax;
    0x00408a2d mov qword [rax], 0x408b90                                                                                                                                                             |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_WaitTurnAndSleepCallbackJob_.invokerFunction_void_;
    0x00408a34 movups xmm0, xmmword [rbp]                                                                                                                                                            |     __asm ("movups xmm0, xmmword [rbp]");
    0x00408a38 movups xmm1, xmmword [rbp + 0x10]                                                                                                                                                     |     __asm ("movups xmm1, xmmword [rbp + 0x10]");
    0x00408a3c movups xmm2, xmmword [rbp + 0x20]                                                                                                                                                     |     __asm ("movups xmm2, xmmword [rbp + 0x20]");
    0x00408a40 movups xmmword [rax + 8], xmm0                                                                                                                                                        |     __asm ("movups xmmword [rax + 8], xmm0");
    0x00408a44 movups xmmword [rax + 0x18], xmm1                                                                                                                                                     |     __asm ("movups xmmword [rax + 0x18], xmm1");
    0x00408a48 movups xmmword [rax + 0x28], xmm2                                                                                                                                                     |     __asm ("movups xmmword [rax + 0x28], xmm2");
    0x00408a4c mov rax, qword [rbp + 0x30]                                                                                                                                                           |     rax = *((rbp + 0x30));
    0x00408a50 mov qword [rbx + 0x38], rax                                                                                                                                                           |     *((rbx + 0x38)) = rax;
    0x00408a54 lea rdi, [rbx + 0x40]                                                                                                                                                                 |     
    0x00408a58 mov qword [rbx + 0x40], 0                                                                                                                                                             |     *((rbx + 0x40)) = 0;
    0x00408a60 mov qword [rbx + 0x68], r14                                                                                                                                                           |     *((rbx + 0x68)) = r14;
    0x00408a64 movaps xmm0, xmmword [rip + 0x26e85]                                                                                                                                                  |     xmm0 = .comment;
    0x00408a6b movups xmmword [rbx + 0x58], xmm0                                                                                                                                                     |     __asm ("movups xmmword [rbx + 0x58], xmm0");
    0x00408a6f mov ecx, 0x430377                                                                                                                                                                     |     
    0x00408a74 xor esi, esi                                                                                                                                                                          |     
    0x00408a76 xor edx, edx                                                                                                                                                                          |     
    0x00408a78 call 0x40c000                                                                                                                                                                         |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x40, 0, 0, "string<...>::assign<Iter>(i,j): string too long");
    0x00408a7d mov rdi, rsp                                                                                                                                                                          |     
    0x00408a80 call 0x409610                                                                                                                                                                         |     BloombergLP::bslmt::ThreadAttributes::ThreadAttributes() (rsp);
    0x00408a85 mov rsi, rsp                                                                                                                                                                          |     
    0x00408a88 mov edx, 0x409430                                                                                                                                                                     |     
    0x00408a8d mov rdi, r15                                                                                                                                                                          |     
    0x00408a90 mov rcx, rbx                                                                                                                                                                          |     
    0x00408a93 call 0x409960                                                                                                                                                                         |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (r15, rsp, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x00408a98 mov ebp, eax                                                                                                                                                                          |     
    0x00408a9a cmp qword [rsp + 0x38], 0x17                                                                                                                                                          |     
                                                                                                                                                                                                     |     if (*((rsp + 0x38)) != 0x17) {
    0x00408aa0 je 0x408ab2                                                                                                                                                                           |         
    0x00408aa2 mov rsi, qword [rsp + 0x18]                                                                                                                                                           |         rsi = *((rsp + 0x18));
    0x00408aa7 mov rdi, qword [rsp + 0x40]                                                                                                                                                           |         rdi = *((rsp + 0x40));
    0x00408aac mov rax, qword [rdi]                                                                                                                                                                  |         rax = *(rdi);
    0x00408aaf call qword [rax + 0x18]                                                                                                                                                               |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                     |     }
    0x00408ab2 test ebp, ebp                                                                                                                                                                         |     
                                                                                                                                                                                                     |     if (ebp != 0) {
    0x00408ab4 je 0x408adf                                                                                                                                                                           |         
    0x00408ab6 cmp qword [rbx + 0x60], 0x17                                                                                                                                                          |         
                                                                                                                                                                                                     |         if (*((rbx + 0x60)) != 0x17) {
    0x00408abb je 0x408acb                                                                                                                                                                           |             
    0x00408abd mov rsi, qword [rbx + 0x40]                                                                                                                                                           |             rsi = *((rbx + 0x40));
    0x00408ac1 mov rdi, qword [rbx + 0x68]                                                                                                                                                           |             rdi = *((rbx + 0x68));
    0x00408ac5 mov rax, qword [rdi]                                                                                                                                                                  |             rax = *(rdi);
    0x00408ac8 call qword [rax + 0x18]                                                                                                                                                               |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                     |         }
    0x00408acb mov qword [rbx + 0x58], 0xffffffffffffffff                                                                                                                                            |         *((rbx + 0x58)) = 0xffffffffffffffff;
    0x00408ad3 mov rax, qword [r14]                                                                                                                                                                  |         rax = *(r14);
    0x00408ad6 mov rdi, r14                                                                                                                                                                          |         rdi = r14;
    0x00408ad9 mov rsi, rbx                                                                                                                                                                          |         rsi = rbx;
    0x00408adc call qword [rax + 0x18]                                                                                                                                                               |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                     |     }
    0x00408adf mov eax, ebp                                                                                                                                                                          |     eax = ebp;
    0x00408ae1 add rsp, 0x48                                                                                                                                                                         |     
    0x00408ae5 pop rbx                                                                                                                                                                               |     
    0x00408ae6 pop r14                                                                                                                                                                               |     
    0x00408ae8 pop r15                                                                                                                                                                               |     
    0x00408aea pop rbp                                                                                                                                                                               |     
    0x00408aeb ret                                                                                                                                                                                   |     return rax;
                                                                                                                                                                                                     | }
