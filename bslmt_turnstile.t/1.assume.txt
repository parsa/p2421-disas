    ; assembly                                                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                                                 | /* bslmt_turnstile.t/assume @ 0x408dc0 */
                                                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                                                 |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil.createWithAllocator_WaitTurnCallbackJob__unsigned_long__WaitTurnCallbackJob_const__BloombergLP::bslma::Allocator_ ()       | int64_t method_int_BloombergLP::bslmt::ThreadUtil_createWithAllocator_WaitTurnCallbackJob_unsigned_long_WaitTurnCallbackJob_const_BloombergLP::bslma::Allocator_ (int64_t arg3, int64_t arg2, int64_t arg1) {
                                                                                                                                                                                 |     int64_t var_18h;
                                                                                                                                                                                 |     uint32_t var_38h;
                                                                                                                                                                                 |     int64_t var_40h;
                                                                                                                                                                                 |     rdx = arg3;
                                                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                                                 |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<WaitTurnCallbackJob>(unsigned long*, WaitTurnCallbackJob const&, BloombergLP::bslma::Allocator*) */
    0x00408dc0 push rbp                                                                                                                                                          |     
    0x00408dc1 push r15                                                                                                                                                          |     
    0x00408dc3 push r14                                                                                                                                                          |     
    0x00408dc5 push rbx                                                                                                                                                          |     
    0x00408dc6 sub rsp, 0x48                                                                                                                                                     |     
    0x00408dca mov r14, rdx                                                                                                                                                      |     r14 = rdx;
    0x00408dcd mov rbp, rsi                                                                                                                                                      |     
    0x00408dd0 mov r15, rdi                                                                                                                                                      |     r15 = rdi;
    0x00408dd3 mov rax, qword [rdx]                                                                                                                                              |     rax = *(rdx);
    0x00408dd6 mov esi, 0x60                                                                                                                                                     |     esi = 0x60;
    0x00408ddb mov rdi, rdx                                                                                                                                                      |     rdi = rdx;
    0x00408dde call qword [rax + 0x10]                                                                                                                                           |     rax = uint64_t (*rax + 0x10)(void, void, void) (rbx, r14, r15);
    0x00408de1 mov rbx, rax                                                                                                                                                      |     rbx = rax;
    0x00408de4 mov qword [rax], 0x408f40                                                                                                                                         |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_WaitTurnCallbackJob_.invokerFunction_void_;
    0x00408deb movups xmm0, xmmword [rbp]                                                                                                                                        |     __asm ("movups xmm0, xmmword [rbp]");
    0x00408def movups xmm1, xmmword [rbp + 0x10]                                                                                                                                 |     __asm ("movups xmm1, xmmword [rbp + 0x10]");
    0x00408df3 movups xmmword [rax + 8], xmm0                                                                                                                                    |     __asm ("movups xmmword [rax + 8], xmm0");
    0x00408df7 movups xmmword [rax + 0x18], xmm1                                                                                                                                 |     __asm ("movups xmmword [rax + 0x18], xmm1");
    0x00408dfb mov rax, qword [rbp + 0x20]                                                                                                                                       |     rax = *((rbp + 0x20));
    0x00408dff mov qword [rbx + 0x28], rax                                                                                                                                       |     *((rbx + 0x28)) = rax;
    0x00408e03 lea rdi, [rbx + 0x30]                                                                                                                                             |     
    0x00408e07 mov qword [rbx + 0x30], 0                                                                                                                                         |     *((rbx + 0x30)) = 0;
    0x00408e0f mov qword [rbx + 0x58], r14                                                                                                                                       |     *((rbx + 0x58)) = r14;
    0x00408e13 movaps xmm0, xmmword [rip + 0x26a56]                                                                                                                              |     xmm0 = .comment;
    0x00408e1a movups xmmword [rbx + 0x48], xmm0                                                                                                                                 |     __asm ("movups xmmword [rbx + 0x48], xmm0");
    0x00408e1e mov ecx, 0x4302fb                                                                                                                                                 |     
    0x00408e23 xor esi, esi                                                                                                                                                      |     
    0x00408e25 xor edx, edx                                                                                                                                                      |     
    0x00408e27 call 0x40bfa0                                                                                                                                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x30, 0, 0, "string<...>::assign<Iter>(i,j): string too long");
    0x00408e2c mov rdi, rsp                                                                                                                                                      |     
    0x00408e2f call 0x4095d0                                                                                                                                                     |     BloombergLP::bslmt::ThreadAttributes::ThreadAttributes() (rsp);
    0x00408e34 mov rsi, rsp                                                                                                                                                      |     
    0x00408e37 mov edx, 0x4093f0                                                                                                                                                 |     
    0x00408e3c mov rdi, r15                                                                                                                                                      |     
    0x00408e3f mov rcx, rbx                                                                                                                                                      |     
    0x00408e42 call 0x409920                                                                                                                                                     |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (r15, rsp, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x00408e47 mov ebp, eax                                                                                                                                                      |     
    0x00408e49 cmp qword [rsp + 0x38], 0x17                                                                                                                                      |     
                                                                                                                                                                                 |     if (*((rsp + 0x38)) != 0x17) {
    0x00408e4f je 0x408e61                                                                                                                                                       |         
    0x00408e51 mov rsi, qword [rsp + 0x18]                                                                                                                                       |         rsi = *((rsp + 0x18));
    0x00408e56 mov rdi, qword [rsp + 0x40]                                                                                                                                       |         rdi = *((rsp + 0x40));
    0x00408e5b mov rax, qword [rdi]                                                                                                                                              |         rax = *(rdi);
    0x00408e5e call qword [rax + 0x18]                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                 |     }
    0x00408e61 test ebp, ebp                                                                                                                                                     |     
                                                                                                                                                                                 |     if (ebp != 0) {
    0x00408e63 je 0x408e8e                                                                                                                                                       |         
    0x00408e65 cmp qword [rbx + 0x50], 0x17                                                                                                                                      |         
                                                                                                                                                                                 |         if (*((rbx + 0x50)) != 0x17) {
    0x00408e6a je 0x408e7a                                                                                                                                                       |             
    0x00408e6c mov rsi, qword [rbx + 0x30]                                                                                                                                       |             rsi = *((rbx + 0x30));
    0x00408e70 mov rdi, qword [rbx + 0x58]                                                                                                                                       |             rdi = *((rbx + 0x58));
    0x00408e74 mov rax, qword [rdi]                                                                                                                                              |             rax = *(rdi);
    0x00408e77 call qword [rax + 0x18]                                                                                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                 |         }
    0x00408e7a mov qword [rbx + 0x48], 0xffffffffffffffff                                                                                                                        |         *((rbx + 0x48)) = 0xffffffffffffffff;
    0x00408e82 mov rax, qword [r14]                                                                                                                                              |         rax = *(r14);
    0x00408e85 mov rdi, r14                                                                                                                                                      |         rdi = r14;
    0x00408e88 mov rsi, rbx                                                                                                                                                      |         rsi = rbx;
    0x00408e8b call qword [rax + 0x18]                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                 |     }
    0x00408e8e mov eax, ebp                                                                                                                                                      |     eax = ebp;
    0x00408e90 add rsp, 0x48                                                                                                                                                     |     
    0x00408e94 pop rbx                                                                                                                                                           |     
    0x00408e95 pop r14                                                                                                                                                           |     
    0x00408e97 pop r15                                                                                                                                                           |     
    0x00408e99 pop rbp                                                                                                                                                           |     
    0x00408e9a ret                                                                                                                                                               |     return rax;
                                                                                                                                                                                 | }
