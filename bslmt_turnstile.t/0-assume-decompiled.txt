    ; assembly                                                                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                                                                 | /* bslmt_turnstile.t/assume @ 0x4089e0 */
                                                                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                                                                 |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil.createWithAllocator_WaitTurnAndSleepCallbackJob__unsigned_long__WaitTurnAndSleepCallbackJob_const__BloombergLP::bslma::Allocator_ ()       | int64_t method_int_BloombergLP::bslmt::ThreadUtil_createWithAllocator_WaitTurnAndSleepCallbackJob_unsigned_long_WaitTurnAndSleepCallbackJob_const_BloombergLP::bslma::Allocator_ (int64_t arg3, int64_t arg2, int64_t arg1) {
                                                                                                                                                                                                 |     int64_t var_18h;
                                                                                                                                                                                                 |     uint32_t var_38h;
                                                                                                                                                                                                 |     int64_t var_40h;
                                                                                                                                                                                                 |     rdx = arg3;
                                                                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                                                                 |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<WaitTurnAndSleepCallbackJob>(unsigned long*, WaitTurnAndSleepCallbackJob const&, BloombergLP::bslma::Allocator*) */
    0x004089e0 push rbp                                                                                                                                                                          |     
    0x004089e1 push r15                                                                                                                                                                          |     
    0x004089e3 push r14                                                                                                                                                                          |     
    0x004089e5 push rbx                                                                                                                                                                          |     
    0x004089e6 sub rsp, 0x48                                                                                                                                                                     |     
    0x004089ea mov r14, rdx                                                                                                                                                                      |     r14 = rdx;
    0x004089ed mov rbp, rsi                                                                                                                                                                      |     
    0x004089f0 mov r15, rdi                                                                                                                                                                      |     r15 = rdi;
    0x004089f3 mov rax, qword [rdx]                                                                                                                                                              |     rax = *(rdx);
    0x004089f6 mov esi, 0x70                                                                                                                                                                     |     esi = 0x70;
    0x004089fb mov rdi, rdx                                                                                                                                                                      |     rdi = rdx;
    0x004089fe call qword [rax + 0x10]                                                                                                                                                           |     rax = uint64_t (*rax + 0x10)(void, void, void) (rbx, r14, r15);
    0x00408a01 mov rbx, rax                                                                                                                                                                      |     rbx = rax;
    0x00408a04 mov qword [rax], 0x408b70                                                                                                                                                         |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_WaitTurnAndSleepCallbackJob_.invokerFunction_void_;
    0x00408a0b movups xmm0, xmmword [rbp]                                                                                                                                                        |     __asm ("movups xmm0, xmmword [rbp]");
    0x00408a0f movups xmm1, xmmword [rbp + 0x10]                                                                                                                                                 |     __asm ("movups xmm1, xmmword [rbp + 0x10]");
    0x00408a13 movups xmm2, xmmword [rbp + 0x20]                                                                                                                                                 |     __asm ("movups xmm2, xmmword [rbp + 0x20]");
    0x00408a17 movups xmmword [rax + 8], xmm0                                                                                                                                                    |     __asm ("movups xmmword [rax + 8], xmm0");
    0x00408a1b movups xmmword [rax + 0x18], xmm1                                                                                                                                                 |     __asm ("movups xmmword [rax + 0x18], xmm1");
    0x00408a1f movups xmmword [rax + 0x28], xmm2                                                                                                                                                 |     __asm ("movups xmmword [rax + 0x28], xmm2");
    0x00408a23 mov rax, qword [rbp + 0x30]                                                                                                                                                       |     rax = *((rbp + 0x30));
    0x00408a27 mov qword [rbx + 0x38], rax                                                                                                                                                       |     *((rbx + 0x38)) = rax;
    0x00408a2b lea rdi, [rbx + 0x40]                                                                                                                                                             |     
    0x00408a2f mov qword [rbx + 0x40], 0                                                                                                                                                         |     *((rbx + 0x40)) = 0;
    0x00408a37 mov qword [rbx + 0x68], r14                                                                                                                                                       |     *((rbx + 0x68)) = r14;
    0x00408a3b movaps xmm0, xmmword [rip + 0x26e2e]                                                                                                                                              |     xmm0 = .comment;
    0x00408a42 movups xmmword [rbx + 0x58], xmm0                                                                                                                                                 |     __asm ("movups xmmword [rbx + 0x58], xmm0");
    0x00408a46 mov ecx, 0x4302fb                                                                                                                                                                 |     
    0x00408a4b xor esi, esi                                                                                                                                                                      |     
    0x00408a4d xor edx, edx                                                                                                                                                                      |     
    0x00408a4f call 0x40bfa0                                                                                                                                                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x40, 0, 0, "string<...>::assign<Iter>(i,j): string too long");
    0x00408a54 mov rdi, rsp                                                                                                                                                                      |     
    0x00408a57 call 0x4095d0                                                                                                                                                                     |     BloombergLP::bslmt::ThreadAttributes::ThreadAttributes() (rsp);
    0x00408a5c mov rsi, rsp                                                                                                                                                                      |     
    0x00408a5f mov edx, 0x4093f0                                                                                                                                                                 |     
    0x00408a64 mov rdi, r15                                                                                                                                                                      |     
    0x00408a67 mov rcx, rbx                                                                                                                                                                      |     
    0x00408a6a call 0x409920                                                                                                                                                                     |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (r15, rsp, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x00408a6f mov ebp, eax                                                                                                                                                                      |     
    0x00408a71 cmp qword [rsp + 0x38], 0x17                                                                                                                                                      |     
                                                                                                                                                                                                 |     if (*((rsp + 0x38)) != 0x17) {
    0x00408a77 je 0x408a89                                                                                                                                                                       |         
    0x00408a79 mov rsi, qword [rsp + 0x18]                                                                                                                                                       |         rsi = *((rsp + 0x18));
    0x00408a7e mov rdi, qword [rsp + 0x40]                                                                                                                                                       |         rdi = *((rsp + 0x40));
    0x00408a83 mov rax, qword [rdi]                                                                                                                                                              |         rax = *(rdi);
    0x00408a86 call qword [rax + 0x18]                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                 |     }
    0x00408a89 test ebp, ebp                                                                                                                                                                     |     
                                                                                                                                                                                                 |     if (ebp != 0) {
    0x00408a8b je 0x408ab6                                                                                                                                                                       |         
    0x00408a8d cmp qword [rbx + 0x60], 0x17                                                                                                                                                      |         
                                                                                                                                                                                                 |         if (*((rbx + 0x60)) != 0x17) {
    0x00408a92 je 0x408aa2                                                                                                                                                                       |             
    0x00408a94 mov rsi, qword [rbx + 0x40]                                                                                                                                                       |             rsi = *((rbx + 0x40));
    0x00408a98 mov rdi, qword [rbx + 0x68]                                                                                                                                                       |             rdi = *((rbx + 0x68));
    0x00408a9c mov rax, qword [rdi]                                                                                                                                                              |             rax = *(rdi);
    0x00408a9f call qword [rax + 0x18]                                                                                                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                 |         }
    0x00408aa2 mov qword [rbx + 0x58], 0xffffffffffffffff                                                                                                                                        |         *((rbx + 0x58)) = 0xffffffffffffffff;
    0x00408aaa mov rax, qword [r14]                                                                                                                                                              |         rax = *(r14);
    0x00408aad mov rdi, r14                                                                                                                                                                      |         rdi = r14;
    0x00408ab0 mov rsi, rbx                                                                                                                                                                      |         rsi = rbx;
    0x00408ab3 call qword [rax + 0x18]                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                 |     }
    0x00408ab6 mov eax, ebp                                                                                                                                                                      |     eax = ebp;
    0x00408ab8 add rsp, 0x48                                                                                                                                                                     |     
    0x00408abc pop rbx                                                                                                                                                                           |     
    0x00408abd pop r14                                                                                                                                                                           |     
    0x00408abf pop r15                                                                                                                                                                           |     
    0x00408ac1 pop rbp                                                                                                                                                                           |     
    0x00408ac2 ret                                                                                                                                                                               |     return rax;
                                                                                                                                                                                                 | }
