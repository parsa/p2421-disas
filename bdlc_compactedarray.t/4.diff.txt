00000000004321e0 <void BloombergLP::bslalg::ArrayPrimitives::destructiveMoveAndEmplace<bsl::allo   |	0000000000432240 <void BloombergLP::bslalg::ArrayPrimitives::destructiveMoveAndEmplace<bsl::allo
0000000000000000: 01	pushq	%rbp									0000000000000000: 01	pushq	%rbp
0000000000000001: 02	pushq	%r15									0000000000000001: 02	pushq	%r15
0000000000000003: 02	pushq	%r14									0000000000000003: 02	pushq	%r14
0000000000000005: 02	pushq	%r13									0000000000000005: 02	pushq	%r13
0000000000000007: 02	pushq	%r12									0000000000000007: 02	pushq	%r12
0000000000000009: 01	pushq	%rbx									0000000000000009: 01	pushq	%rbx
000000000000000a: 04	subq	$40, %rsp								000000000000000a: 04	subq	$40, %rsp
000000000000000e: 03	movq	%r9, %rbx							   |	000000000000000e: 03	movq	%r8, %rbp
0000000000000011: 03	movq	%r8, %rbp							   |	0000000000000011: 03	movq	%rcx, %r12
0000000000000014: 03	movq	%rcx, %r14							   |	0000000000000014: 03	movq	%rdi, %rbx
0000000000000017: 03	movq	%rdi, %r12							   |	0000000000000017: 05	movq	96(%rsp), %r15
000000000000001a: 05	movq	96(%rsp), %r15							   |	000000000000001c: 05	movq	%rsi, 32(%rsp)
000000000000001f: 05	movq	%rsi, 16(%rsp)							   |	0000000000000021: 03	movq	%r8, (%rsi)
0000000000000024: 03	movq	%r8, (%rsi)							   |	0000000000000024: 03	movq	%rcx, %rax
0000000000000027: 03	movq	%rcx, %rax							   |	0000000000000027: 05	movq	%rdx, 24(%rsp)
000000000000002a: 05	movq	%rdx, 32(%rsp)							   |	000000000000002c: 03	subq	%rdx, %rax
000000000000002f: 03	subq	%rdx, %rax							   |	000000000000002f: 04	leaq	(%rdi,%rax), %r13
0000000000000032: 04	leaq	(%rdi,%rax), %r13						   |	0000000000000033: 05	movq	%r9, 16(%rsp)
0000000000000036: 03	movq	(%r9), %rdi							   |	0000000000000038: 03	movq	(%r9), %rdi
0000000000000039: 04	movq	48(%r15), %rcx							   |	000000000000003b: 04	movq	48(%r15), %rcx
000000000000003d: 05	movq	%rcx, 48(%r12,%rax)						   |	000000000000003f: 05	movq	%rcx, 48(%rbx,%rax)
0000000000000042: 04	movups	(%r15), %xmm0							   |	0000000000000044: 04	sarq	$3, %rax
0000000000000046: 05	movups	16(%r15), %xmm1							   |	0000000000000048: 10	movabsq	$7905747460161236407, %r14
000000000000004b: 05	movups	%xmm0, (%r12,%rax)						   |	0000000000000052: 04	imulq	%rax, %r14
0000000000000050: 06	movups	%xmm1, 16(%r12,%rax)						   |	0000000000000056: 03	testq	%rdi, %rdi
0000000000000056: 04	movq	32(%r15), %rcx							   |	0000000000000059: 05	movq	%rbx, 8(%rsp)
000000000000005a: 05	movq	%rcx, 32(%r12,%rax)						   |	000000000000005e: 02	jne	0x4322b9 <void BloombergLP::bslalg::ArrayPrimitives::destructive
000000000000005f: 05	movq	%rdi, 40(%r12,%rax)						   |	0000000000000060: 07	movq	2455321(%rip), %rdi  # 6899c0 <BloombergLP::bslma::Default::s_de
0000000000000064: 04	cmpq	$23, %rcx							   |	0000000000000067: 03	testq	%rdi, %rdi
0000000000000068: 06	je	0x4322da <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	000000000000006a: 02	jne	0x4322b9 <void BloombergLP::bslalg::ArrayPrimitives::destructive
000000000000006e: 05	leaq	32(%r12,%rax), %r8						   |	000000000000006c: 05	callq	0x43d890 <BloombergLP::bslma::Default::determineAndReturnDefault
0000000000000073: 04	sarq	$3, %rax							   |	0000000000000071: 05	movq	8(%rsp), %rbx
0000000000000077: 10	movabsq	$7905747460161236407, %rcx					   |	0000000000000076: 03	movq	%rax, %rdi
0000000000000081: 04	imulq	%rax, %rcx							   |	0000000000000079: 04	movq	32(%r15), %rax
0000000000000085: 04	movq	24(%r15), %rax							   |	000000000000007d: 04	movq	%rax, 32(%r13)
0000000000000089: 04	cmpq	$23, %rax							   |	0000000000000081: 04	movups	(%r15), %xmm0
000000000000008d: 05	movl	$23, %esi							   |	0000000000000085: 05	movups	16(%r15), %xmm1
0000000000000092: 04	cmovaq	%rax, %rsi							   |	000000000000008a: 05	movups	%xmm1, 16(%r13)
0000000000000096: 08	movq	$0, (%r13)							   |	000000000000008f: 05	movups	%xmm0, (%r13)
000000000000009e: 04	imulq	$56, %rcx, %rcx							   |	0000000000000094: 04	imulq	$56, %r14, %rax
00000000000000a2: 05	leaq	24(%r12,%rcx), %rdx						   |	0000000000000098: 05	movq	%rdi, 40(%rbx,%rax)
00000000000000a7: 05	movq	%rax, 24(%r12,%rcx)						   |	000000000000009d: 06	cmpq	$23, 32(%rbx,%rax)
00000000000000ac: 03	movq	%rsi, (%r8)							   |	00000000000000a3: 02	je	0x432345 <void BloombergLP::bslalg::ArrayPrimitives::destructive
00000000000000af: 04	cmpq	$24, %rax							   |	00000000000000a5: 05	leaq	32(%rbx,%rax), %r14
00000000000000b3: 02	jb	0x4322ba <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	00000000000000aa: 04	movq	24(%r15), %rcx
00000000000000b5: 03	incq	%rsi								   |	00000000000000ae: 04	cmpq	$23, %rcx
00000000000000b8: 03	movq	(%rdi), %rax							   |	00000000000000b2: 05	movl	$23, %esi
00000000000000bb: 05	movq	%r8, 24(%rsp)							   |	00000000000000b7: 04	cmovaq	%rcx, %rsi
00000000000000c0: 04	movq	%rdx, (%rsp)							   |	00000000000000bb: 08	movq	$0, (%r13)
00000000000000c4: 03	callq	*16(%rax)							   |	00000000000000c3: 05	movq	%rcx, 24(%rbx,%rax)
00000000000000c7: 04	movq	(%rsp), %rdx							   |	00000000000000c8: 03	movq	%rsi, (%r14)
00000000000000cb: 04	movq	%rax, (%r13)							   |	00000000000000cb: 04	cmpq	$24, %rcx
00000000000000cf: 05	movq	24(%rsp), %rcx							   |	00000000000000cf: 02	jb	0x432324 <void BloombergLP::bslalg::ArrayPrimitives::destructive
00000000000000d4: 04	cmpq	$23, (%rcx)							   |	00000000000000d1: 03	incq	%rsi
00000000000000d8: 02	jne	0x4322bd <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	00000000000000d4: 03	movq	(%rdi), %rax
00000000000000da: 03	movq	%r13, %rax							   |	00000000000000d7: 03	callq	*16(%rax)
00000000000000dd: 03	movq	(%rdx), %rdx							   |	00000000000000da: 04	movq	%rax, (%r13)
00000000000000e0: 03	incq	%rdx								   |	00000000000000de: 04	cmpq	$23, (%r14)
00000000000000e3: 02	je	0x4322da <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	00000000000000e2: 02	jne	0x432327 <void BloombergLP::bslalg::ArrayPrimitives::destructive
00000000000000e5: 05	cmpq	$23, 32(%r15)							   |	00000000000000e4: 03	movq	%r13, %rax
00000000000000ea: 02	je	0x4322cf <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	00000000000000e7: 04	movq	-8(%r14), %rdx
00000000000000ec: 03	movq	(%r15), %r15							   |	00000000000000eb: 03	incq	%rdx
00000000000000ef: 03	movq	%rax, %rdi							   |	00000000000000ee: 02	je	0x432345 <void BloombergLP::bslalg::ArrayPrimitives::destructive
00000000000000f2: 03	movq	%r15, %rsi							   |	00000000000000f0: 05	cmpq	$23, 32(%r15)
00000000000000f5: 05	callq	0x403ea0 <memcpy@plt>						   |	00000000000000f5: 02	je	0x43233a <void BloombergLP::bslalg::ArrayPrimitives::destructive
00000000000000fa: 04	leaq	56(%r13), %r15							   |	00000000000000f7: 03	movq	(%r15), %r15
00000000000000fe: 04	movq	%rbx, (%rsp)							   |	00000000000000fa: 03	movq	%rax, %rdi
0000000000000102: 03	movq	(%rbx), %rax							   |	00000000000000fd: 03	movq	%r15, %rsi
0000000000000105: 05	movq	%rax, 8(%rsp)							   |	0000000000000100: 05	callq	0x403ea0 <memcpy@plt>
000000000000010a: 05	leaq	8(%rsp), %rcx							   |	0000000000000105: 04	leaq	56(%r13), %r15
000000000000010f: 03	movq	%r15, %rdi							   |	0000000000000109: 05	movq	16(%rsp), %rax
0000000000000112: 03	movq	%r14, %rsi							   |	000000000000010e: 03	movq	(%rax), %rax
0000000000000115: 03	movq	%rbp, %rdx							   |	0000000000000111: 04	movq	%rax, (%rsp)
0000000000000118: 03	xorl	%r8d, %r8d							   |	0000000000000115: 03	movq	%rsp, %rcx
000000000000011b: 05	callq	0x4320a0 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   |	0000000000000118: 03	movq	%r15, %rdi
0000000000000120: 03	cmpq	%rbp, %r14							   |	000000000000011b: 03	movq	%r12, %rsi
0000000000000123: 02	je	0x432337 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	000000000000011e: 03	movq	%rbp, %rdx
0000000000000125: 03	movq	%r14, %rbx							   |	0000000000000121: 03	xorl	%r8d, %r8d
0000000000000128: 02	jmp	0x432321 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	0000000000000124: 05	callq	0x4320d0 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN
000000000000012a: 06	nopw	(%rax,%rax)							   |	0000000000000129: 03	cmpq	%rbp, %r12
0000000000000130: 08	movq	$-1, 24(%rbx)							   |	000000000000012c: 05	movq	32(%rsp), %r14
0000000000000138: 04	addq	$56, %rbx							   |	0000000000000131: 02	je	0x4323a7 <void BloombergLP::bslalg::ArrayPrimitives::destructive
000000000000013c: 03	cmpq	%rbx, %rbp							   |	0000000000000133: 03	movq	%r12, %rbx
000000000000013f: 02	je	0x432337 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	0000000000000136: 02	jmp	0x432391 <void BloombergLP::bslalg::ArrayPrimitives::destructive
0000000000000141: 05	cmpq	$23, 32(%rbx)							   |	0000000000000138: 08	nopl	(%rax,%rax)
0000000000000146: 02	je	0x432310 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	0000000000000140: 08	movq	$-1, 24(%rbx)
0000000000000148: 03	movq	(%rbx), %rsi							   |	0000000000000148: 04	addq	$56, %rbx
000000000000014b: 04	movq	40(%rbx), %rdi							   |	000000000000014c: 03	cmpq	%rbx, %rbp
000000000000014f: 03	movq	(%rdi), %rax							   |	000000000000014f: 02	je	0x4323a7 <void BloombergLP::bslalg::ArrayPrimitives::destructive
0000000000000152: 03	callq	*24(%rax)							   |	0000000000000151: 05	cmpq	$23, 32(%rbx)
0000000000000155: 02	jmp	0x432310 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	0000000000000156: 02	je	0x432380 <void BloombergLP::bslalg::ArrayPrimitives::destructive
0000000000000157: 05	movq	16(%rsp), %rax							   |	0000000000000158: 03	movq	(%rbx), %rsi
000000000000015c: 03	movq	%r14, (%rax)							   |	000000000000015b: 04	movq	40(%rbx), %rdi
000000000000015f: 03	subq	%r14, %rbp							   |	000000000000015f: 03	movq	(%rdi), %rax
0000000000000162: 03	addq	%rbp, %r15							   |	0000000000000162: 03	callq	*24(%rax)
0000000000000165: 04	movq	(%rsp), %rax							   |	0000000000000165: 02	jmp	0x432380 <void BloombergLP::bslalg::ArrayPrimitives::destructive
0000000000000169: 03	movq	(%rax), %rax							   |	0000000000000167: 03	movq	%r12, (%r14)
000000000000016c: 05	movq	%rax, 8(%rsp)							   |	000000000000016a: 03	subq	%r12, %rbp
0000000000000171: 05	leaq	8(%rsp), %rcx							   |	000000000000016d: 03	addq	%rbp, %r15
0000000000000176: 03	movq	%r12, %rdi							   |	0000000000000170: 05	movq	16(%rsp), %rax
0000000000000179: 05	movq	32(%rsp), %rbp							   |	0000000000000175: 03	movq	(%rax), %rax
000000000000017e: 03	movq	%rbp, %rsi							   |	0000000000000178: 04	movq	%rax, (%rsp)
0000000000000181: 03	movq	%r14, %rdx							   |	000000000000017c: 03	movq	%rsp, %rcx
0000000000000184: 03	xorl	%r8d, %r8d							   |	000000000000017f: 05	movq	8(%rsp), %rdi
0000000000000187: 05	callq	0x4320a0 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   |	0000000000000184: 05	movq	24(%rsp), %rbp
000000000000018c: 03	cmpq	%r14, %rbp							   |	0000000000000189: 03	movq	%rbp, %rsi
000000000000018f: 02	je	0x4323a7 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	000000000000018c: 03	movq	%r12, %rdx
0000000000000191: 03	movq	%rbp, %rbx							   |	000000000000018f: 03	xorl	%r8d, %r8d
0000000000000194: 02	jmp	0x432391 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	0000000000000192: 05	callq	0x4320d0 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN
0000000000000196: 10	nopw	%cs:(%rax,%rax)							   |	0000000000000197: 03	cmpq	%r12, %rbp
00000000000001a0: 08	movq	$-1, 24(%rbx)							   |	000000000000019a: 02	je	0x432417 <void BloombergLP::bslalg::ArrayPrimitives::destructive
00000000000001a8: 04	addq	$56, %rbx							   |	000000000000019c: 03	movq	%rbp, %rbx
00000000000001ac: 03	cmpq	%rbx, %r14							   |	000000000000019f: 02	jmp	0x432401 <void BloombergLP::bslalg::ArrayPrimitives::destructive
00000000000001af: 02	je	0x4323a7 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	00000000000001a1: 10	nopw	%cs:(%rax,%rax)
00000000000001b1: 05	cmpq	$23, 32(%rbx)							   |	00000000000001ab: 05	nopl	(%rax,%rax)
00000000000001b6: 02	je	0x432380 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	00000000000001b0: 08	movq	$-1, 24(%rbx)
00000000000001b8: 03	movq	(%rbx), %rsi							   |	00000000000001b8: 04	addq	$56, %rbx
00000000000001bb: 04	movq	40(%rbx), %rdi							   |	00000000000001bc: 03	cmpq	%rbx, %r12
00000000000001bf: 03	movq	(%rdi), %rax							   |	00000000000001bf: 02	je	0x432417 <void BloombergLP::bslalg::ArrayPrimitives::destructive
00000000000001c2: 03	callq	*24(%rax)							   |	00000000000001c1: 05	cmpq	$23, 32(%rbx)
00000000000001c5: 02	jmp	0x432380 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	00000000000001c6: 02	je	0x4323f0 <void BloombergLP::bslalg::ArrayPrimitives::destructive
00000000000001c7: 05	movq	16(%rsp), %rax							   |	00000000000001c8: 03	movq	(%rbx), %rsi
00000000000001cc: 03	movq	%rbp, (%rax)							   |	00000000000001cb: 04	movq	40(%rbx), %rdi
00000000000001cf: 04	addq	$40, %rsp							   |	00000000000001cf: 03	movq	(%rdi), %rax
00000000000001d3: 01	popq	%rbx								   |	00000000000001d2: 03	callq	*24(%rax)
00000000000001d4: 02	popq	%r12								   |	00000000000001d5: 02	jmp	0x4323f0 <void BloombergLP::bslalg::ArrayPrimitives::destructive
00000000000001d6: 02	popq	%r13								   |	00000000000001d7: 03	movq	%rbp, (%r14)
00000000000001d8: 02	popq	%r14								   |	00000000000001da: 04	addq	$40, %rsp
00000000000001da: 02	popq	%r15								   |	00000000000001de: 01	popq	%rbx
00000000000001dc: 01	popq	%rbp								   |	00000000000001df: 02	popq	%r12
00000000000001dd: 01	retq									   |	00000000000001e1: 02	popq	%r13
00000000000001de: 03	movq	%rax, %rbx							   |	00000000000001e3: 02	popq	%r14
00000000000001e1: 03	cmpq	%r15, %r13							   |	00000000000001e5: 02	popq	%r15
00000000000001e4: 02	jne	0x4323f1 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	00000000000001e7: 01	popq	%rbp
00000000000001e6: 03	movq	%rbx, %rdi							   |	00000000000001e8: 01	retq	
00000000000001e9: 05	callq	0x403e50 <_Unwind_Resume@plt>					   |	00000000000001e9: 03	movq	%rax, %rbx
00000000000001ee: 03	movq	%rax, %rbx							   |	00000000000001ec: 03	cmpq	%r15, %r13
00000000000001f1: 02	jmp	0x4323f1 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	00000000000001ef: 02	jne	0x432451 <void BloombergLP::bslalg::ArrayPrimitives::destructive
00000000000001f3: 10	nopw	%cs:(%rax,%rax)							   |	00000000000001f1: 03	movq	%rbx, %rdi
00000000000001fd: 03	nopl	(%rax)								   |	00000000000001f4: 05	callq	0x403e50 <_Unwind_Resume@plt>
												   >	00000000000001f9: 03	movq	%rax, %rbx
												   >	00000000000001fc: 02	jmp	0x432451 <void BloombergLP::bslalg::ArrayPrimitives::destructive
												   >	00000000000001fe: 02	nop	
0000000000000200: 08	movq	$-1, 24(%r13)								0000000000000200: 08	movq	$-1, 24(%r13)
0000000000000208: 04	addq	$56, %r13								0000000000000208: 04	addq	$56, %r13
000000000000020c: 03	cmpq	%r13, %r15								000000000000020c: 03	cmpq	%r13, %r15
000000000000020f: 02	je	0x4323c6 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	000000000000020f: 02	je	0x432431 <void BloombergLP::bslalg::ArrayPrimitives::destructive
0000000000000211: 05	cmpq	$23, 32(%r13)								0000000000000211: 05	cmpq	$23, 32(%r13)
0000000000000216: 02	je	0x4323e0 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	0000000000000216: 02	je	0x432440 <void BloombergLP::bslalg::ArrayPrimitives::destructive
0000000000000218: 04	movq	(%r13), %rsi								0000000000000218: 04	movq	(%r13), %rsi
000000000000021c: 04	movq	40(%r13), %rdi								000000000000021c: 04	movq	40(%r13), %rdi
0000000000000220: 03	movq	(%rdi), %rax								0000000000000220: 03	movq	(%rdi), %rax
0000000000000223: 03	callq	*24(%rax)								0000000000000223: 03	callq	*24(%rax)
0000000000000226: 02	jmp	0x4323e0 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	0000000000000226: 02	jmp	0x432440 <void BloombergLP::bslalg::ArrayPrimitives::destructive
0000000000000228: 03	movq	%rax, %rdi								0000000000000228: 03	movq	%rax, %rdi
000000000000022b: 05	callq	0x42f650 <__clang_call_terminate>					000000000000022b: 05	callq	0x42f650 <__clang_call_terminate>
0000000000000230: 03	movq	%rax, %rdi								0000000000000230: 03	movq	%rax, %rdi
0000000000000233: 05	callq	0x42f650 <__clang_call_terminate>					0000000000000233: 05	callq	0x42f650 <__clang_call_terminate>
0000000000000238: 03	movq	%rax, %rdi								0000000000000238: 03	movq	%rax, %rdi
000000000000023b: 05	callq	0x42f650 <__clang_call_terminate>					000000000000023b: 05	callq	0x42f650 <__clang_call_terminate>
