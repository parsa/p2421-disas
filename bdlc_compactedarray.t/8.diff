00000000004320a0 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfNoexcept<BloombergLP::bdl   |	00000000004320d0 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfNoexcept<BloombergLP::bdl
0000000000000000: 02	pushq	%r15								   |	0000000000000000: 01	pushq	%rbp
0000000000000002: 02	pushq	%r14								   |	0000000000000001: 02	pushq	%r15
0000000000000004: 02	pushq	%r13								   |	0000000000000003: 02	pushq	%r14
0000000000000006: 02	pushq	%r12								   |	0000000000000005: 02	pushq	%r13
0000000000000008: 01	pushq	%rbx								   |	0000000000000007: 02	pushq	%r12
0000000000000009: 03	cmpq	%rdx, %rsi							   |	0000000000000009: 01	pushq	%rbx
000000000000000c: 06	je	0x432180 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   |	000000000000000a: 01	pushq	%rax
0000000000000012: 03	movq	%rcx, %r14							   |	000000000000000b: 03	cmpq	%rdx, %rsi
0000000000000015: 03	movq	%rdx, %r15							   |	000000000000000e: 06	je	0x4321d8 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN
0000000000000018: 03	movq	%rsi, %r12							   |	0000000000000014: 03	movq	%rcx, %r14
000000000000001b: 03	movq	%rdi, %r13							   |	0000000000000017: 03	movq	%rdx, %r15
000000000000001e: 03	subq	%rsi, %r15							   |	000000000000001a: 03	movq	%rsi, %r12
0000000000000021: 02	xorl	%ebx, %ebx							   |	000000000000001d: 03	movq	%rdi, %r13
0000000000000023: 02	jmp	0x4320de <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   |	0000000000000020: 03	subq	%rsi, %r15
0000000000000025: 04	movq	(%r12,%rbx), %rsi						   |	0000000000000023: 02	xorl	%ebx, %ebx
0000000000000029: 03	movq	%rax, %rdi							   |	0000000000000025: 02	jmp	0x432110 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN
000000000000002c: 05	callq	0x403ea0 <memcpy@plt>						   |	0000000000000027: 04	movq	(%r12,%rbx), %rsi
0000000000000031: 04	addq	$56, %rbx							   |	000000000000002b: 03	movq	%rax, %rdi
0000000000000035: 03	cmpq	%rbx, %r15							   |	000000000000002e: 05	callq	0x403ea0 <memcpy@plt>
0000000000000038: 06	je	0x432180 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   |	0000000000000033: 04	addq	$56, %rbx
000000000000003e: 03	movq	(%r14), %rdi							   |	0000000000000037: 03	cmpq	%rbx, %r15
0000000000000041: 05	movq	48(%r12,%rbx), %rax						   |	000000000000003a: 06	je	0x4321d8 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN
0000000000000046: 05	movq	%rax, 48(%r13,%rbx)						   |	0000000000000040: 03	movq	(%r14), %rax
000000000000004b: 05	movups	(%r12,%rbx), %xmm0						   |	0000000000000043: 05	movq	48(%r12,%rbx), %rcx
0000000000000050: 06	movups	16(%r12,%rbx), %xmm1						   |	0000000000000048: 05	movq	%rcx, 48(%r13,%rbx)
0000000000000056: 06	movups	%xmm0, (%r13,%rbx)						   |	000000000000004d: 03	testq	%rax, %rax
000000000000005c: 06	movups	%xmm1, 16(%r13,%rbx)						   |	0000000000000050: 02	jne	0x432140 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN
0000000000000062: 05	movq	32(%r12,%rbx), %rax						   |	0000000000000052: 07	movq	2455703(%rip), %rax  # 6899c0 <BloombergLP::bslma::Default::s_de
0000000000000067: 05	movq	%rax, 32(%r13,%rbx)						   |	0000000000000059: 03	testq	%rax, %rax
000000000000006c: 05	movq	%rdi, 40(%r13,%rbx)						   |	000000000000005c: 02	jne	0x432140 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN
0000000000000071: 04	cmpq	$23, %rax							   |	000000000000005e: 05	callq	0x43d890 <BloombergLP::bslma::Default::determineAndReturnDefault
0000000000000075: 02	je	0x4320d1 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   |	0000000000000063: 10	nopw	%cs:(%rax,%rax)
0000000000000077: 05	movq	24(%r12,%rbx), %rax						   |	000000000000006d: 03	nopl	(%rax)
000000000000007c: 04	cmpq	$23, %rax							   |	0000000000000070: 05	leaq	(%r13,%rbx), %rbp
0000000000000080: 05	movl	$23, %esi							   |	0000000000000075: 05	movq	32(%r12,%rbx), %rcx
0000000000000085: 04	cmovaq	%rax, %rsi							   |	000000000000007a: 04	movq	%rcx, 32(%rbp)
0000000000000089: 09	movq	$0, (%r13,%rbx)							   |	000000000000007e: 05	movups	(%r12,%rbx), %xmm0
0000000000000092: 05	movq	%rax, 24(%r13,%rbx)						   |	0000000000000083: 06	movups	16(%r12,%rbx), %xmm1
0000000000000097: 05	movq	%rsi, 32(%r13,%rbx)						   |	0000000000000089: 04	movups	%xmm1, 16(%rbp)
000000000000009c: 04	cmpq	$24, %rax							   |	000000000000008d: 04	movups	%xmm0, (%rbp)
00000000000000a0: 02	jb	0x432158 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   |	0000000000000091: 05	movq	%rax, 40(%r13,%rbx)
00000000000000a2: 03	incq	%rsi								   |	0000000000000096: 06	cmpq	$23, 32(%r13,%rbx)
00000000000000a5: 03	movq	(%rdi), %rax							   |	000000000000009c: 02	je	0x432103 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN
00000000000000a8: 03	callq	*16(%rax)							   |	000000000000009e: 05	movq	24(%r12,%rbx), %rcx
00000000000000ab: 05	movq	%rax, (%r13,%rbx)						   |	00000000000000a3: 04	cmpq	$23, %rcx
00000000000000b0: 06	cmpq	$23, 32(%r13,%rbx)						   |	00000000000000a7: 05	movl	$23, %esi
00000000000000b6: 02	jne	0x43215d <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   |	00000000000000ac: 04	cmovaq	%rcx, %rsi
00000000000000b8: 05	leaq	(%r13,%rbx), %rax						   |	00000000000000b0: 09	movq	$0, (%r13,%rbx)
00000000000000bd: 05	movq	24(%r13,%rbx), %rdx						   |	00000000000000b9: 05	movq	%rcx, 24(%r13,%rbx)
00000000000000c2: 03	incq	%rdx								   |	00000000000000be: 05	movq	%rsi, 32(%r13,%rbx)
00000000000000c5: 06	je	0x4320d1 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   |	00000000000000c3: 04	cmpq	$24, %rcx
00000000000000cb: 06	cmpq	$23, 32(%r12,%rbx)						   |	00000000000000c7: 02	jb	0x4321b2 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN
00000000000000d1: 06	jne	0x4320c5 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   |	00000000000000c9: 03	incq	%rsi
00000000000000d7: 04	leaq	(%r12,%rbx), %rsi						   |	00000000000000cc: 03	movq	(%rax), %rcx
00000000000000db: 05	jmp	0x4320c9 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   |	00000000000000cf: 03	movq	%rax, %rdi
00000000000000e0: 01	popq	%rbx								   |	00000000000000d2: 03	callq	*16(%rcx)
00000000000000e1: 02	popq	%r12								   |	00000000000000d5: 05	movq	%rax, (%r13,%rbx)
00000000000000e3: 02	popq	%r13								   |	00000000000000da: 06	cmpq	$23, 32(%r13,%rbx)
00000000000000e5: 02	popq	%r14								   |	00000000000000e0: 02	jne	0x4321b5 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN
00000000000000e7: 02	popq	%r15								   |	00000000000000e2: 03	movq	%rbp, %rax
00000000000000e9: 01	retq									   |	00000000000000e5: 05	movq	24(%r13,%rbx), %rdx
00000000000000ea: 03	movq	%rax, %r14							   |	00000000000000ea: 03	incq	%rdx
00000000000000ed: 03	testq	%rbx, %rbx							   |	00000000000000ed: 06	je	0x432103 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN
00000000000000f0: 02	jne	0x43219a <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   |	00000000000000f3: 06	cmpq	$23, 32(%r12,%rbx)
00000000000000f2: 03	movq	%r14, %rdi							   |	00000000000000f9: 06	jne	0x4320f7 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN
00000000000000f5: 05	callq	0x403e50 <_Unwind_Resume@plt>					   |	00000000000000ff: 04	leaq	(%r12,%rbx), %rsi
00000000000000fa: 04	addq	$40, %r13							   |	0000000000000103: 05	jmp	0x4320fb <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN
00000000000000fe: 02	jmp	0x4321b2 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   |	0000000000000108: 04	addq	$8, %rsp
0000000000000100: 08	movq	$-1, -16(%r13)							   |	000000000000010c: 01	popq	%rbx
0000000000000108: 04	addq	$56, %r13							   |	000000000000010d: 02	popq	%r12
000000000000010c: 04	addq	$-56, %rbx							   |	000000000000010f: 02	popq	%r13
0000000000000110: 02	je	0x432192 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   |	0000000000000111: 02	popq	%r14
0000000000000112: 05	cmpq	$23, -8(%r13)							   |	0000000000000113: 02	popq	%r15
0000000000000117: 02	je	0x4321a0 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   |	0000000000000115: 01	popq	%rbp
0000000000000119: 04	movq	-40(%r13), %rsi							   |	0000000000000116: 01	retq	
000000000000011d: 04	movq	(%r13), %rdi							   |	0000000000000117: 03	movq	%rax, %r14
0000000000000121: 03	movq	(%rdi), %rax							   |	000000000000011a: 03	testq	%rbx, %rbx
0000000000000124: 03	callq	*24(%rax)							   |	000000000000011d: 02	jne	0x4321f7 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN
0000000000000127: 02	jmp	0x4321a0 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN   |	000000000000011f: 03	movq	%r14, %rdi
0000000000000129: 03	movq	%rax, %rdi							   |	0000000000000122: 05	callq	0x403e50 <_Unwind_Resume@plt>
000000000000012c: 05	callq	0x42f650 <__clang_call_terminate>				   |	0000000000000127: 04	addq	$40, %r13
0000000000000131: 10	nopw	%cs:(%rax,%rax)							   |	000000000000012b: 02	jmp	0x432212 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN
000000000000013b: 05	nopl	(%rax,%rax)							   |	000000000000012d: 03	nopl	(%rax)
												   >	0000000000000130: 08	movq	$-1, -16(%r13)
												   >	0000000000000138: 04	addq	$56, %r13
												   >	000000000000013c: 04	addq	$-56, %rbx
												   >	0000000000000140: 02	je	0x4321ef <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN
												   >	0000000000000142: 05	cmpq	$23, -8(%r13)
												   >	0000000000000147: 02	je	0x432200 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN
												   >	0000000000000149: 04	movq	-40(%r13), %rsi
												   >	000000000000014d: 04	movq	(%r13), %rdi
												   >	0000000000000151: 03	movq	(%rdi), %rax
												   >	0000000000000154: 03	callq	*24(%rax)
												   >	0000000000000157: 02	jmp	0x432200 <void BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfN
												   >	0000000000000159: 03	movq	%rax, %rdi
												   >	000000000000015c: 05	callq	0x42f650 <__clang_call_terminate>
												   >	0000000000000161: 10	nopw	%cs:(%rax,%rax)
												   >	000000000000016b: 05	nopl	(%rax,%rax)
