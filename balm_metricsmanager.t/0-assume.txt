    ; assembly                                                                                                                                                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                 | /* balm_metricsmanager.t/assume @ 0x42b4a0 */
                                                                                                                                                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                                                                                                                                                 |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf.MemFnInstance_void__LockAndModifyWorker::_____LockAndModifyWorker____unsigned_long__BloombergLP::bdlf::MemFnInstance_void__LockAndModifyWorker::_____LockAndModifyWorker ()         | int64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf_MemFnInstance_void_LockAndModifyWorker::_LockAndModifyWorker_unsigned_long_BloombergLP::bdlf::MemFnInstance_void_LockAndModifyWorker::_LockAndModifyWorker (int64_t arg3, int64_t arg2, uint32_t arg1) {
                                                                                                                                                                                                                                                                                 |     int64_t var_18h;
                                                                                                                                                                                                                                                                                 |     uint32_t var_38h;
                                                                                                                                                                                                                                                                                 |     int64_t var_40h;
                                                                                                                                                                                                                                                                                 |     rdx = arg3;
                                                                                                                                                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                                                                                                                                                 |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::MemFnInstance<void (LockAndModifyWorker::*)(), LockAndModifyWorker*> >(unsigned long*, BloombergLP::bdlf::MemFnInstance<void (LockAndModifyWorker::*)(), LockAndModifyWorker*> const&, BloombergLP::bslma::Allocator*) */
    0x0042b4a0 push rbp                                                                                                                                                                                                                                                          |     
    0x0042b4a1 push r15                                                                                                                                                                                                                                                          |     
    0x0042b4a3 push r14                                                                                                                                                                                                                                                          |     
    0x0042b4a5 push rbx                                                                                                                                                                                                                                                          |     
    0x0042b4a6 sub rsp, 0x48                                                                                                                                                                                                                                                     |     
    0x0042b4aa mov r14, rdx                                                                                                                                                                                                                                                      |     r14 = rdx;
    0x0042b4ad mov rbp, rsi                                                                                                                                                                                                                                                      |     
    0x0042b4b0 mov r15, rdi                                                                                                                                                                                                                                                      |     r15 = rdi;
    0x0042b4b3 mov rax, qword [rdx]                                                                                                                                                                                                                                              |     rax = *(rdx);
    0x0042b4b6 mov esi, 0x50                                                                                                                                                                                                                                                     |     esi = 0x50;
    0x0042b4bb mov rdi, rdx                                                                                                                                                                                                                                                      |     rdi = rdx;
    0x0042b4be call qword [rax + 0x10]                                                                                                                                                                                                                                           |     rax = uint64_t (*rax + 0x10)(void, void, void) (rbx, r14, r15);
    0x0042b4c1 mov rbx, rax                                                                                                                                                                                                                                                      |     rbx = rax;
    0x0042b4c4 mov qword [rax], 0x42b620                                                                                                                                                                                                                                         |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_BloombergLP::bdlf.MemFnInstance_void__LockAndModifyWorker::_____LockAndModifyWorker___::invokerFunction_void_;
    0x0042b4cb movups xmm0, xmmword [rbp]                                                                                                                                                                                                                                        |     __asm ("movups xmm0, xmmword [rbp]");
    0x0042b4cf movups xmmword [rax + 8], xmm0                                                                                                                                                                                                                                    |     __asm ("movups xmmword [rax + 8], xmm0");
    0x0042b4d3 mov rax, qword [rbp + 0x10]                                                                                                                                                                                                                                       |     rax = *((rbp + 0x10));
    0x0042b4d7 mov qword [rbx + 0x18], rax                                                                                                                                                                                                                                       |     *((rbx + 0x18)) = rax;
    0x0042b4db lea rdi, [rbx + 0x20]                                                                                                                                                                                                                                             |     
    0x0042b4df mov qword [rbx + 0x20], 0                                                                                                                                                                                                                                         |     *((rbx + 0x20)) = 0;
    0x0042b4e7 mov qword [rbx + 0x48], r14                                                                                                                                                                                                                                       |     *((rbx + 0x48)) = r14;
    0x0042b4eb movaps xmm0, xmmword [rip + 0x3e9ae]                                                                                                                                                                                                                              |     xmm0 = .comment;
    0x0042b4f2 movups xmmword [rbx + 0x38], xmm0                                                                                                                                                                                                                                 |     __asm ("movups xmmword [rbx + 0x38], xmm0");
    0x0042b4f6 mov ecx, 0x46e748                                                                                                                                                                                                                                                 |     
    0x0042b4fb xor esi, esi                                                                                                                                                                                                                                                      |     
    0x0042b4fd xor edx, edx                                                                                                                                                                                                                                                      |     
    0x0042b4ff call 0x446d30                                                                                                                                                                                                                                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x20, 0, 0, "string<...>::assign<Iter>(i,j): string too long");
    0x0042b504 mov rdi, rsp                                                                                                                                                                                                                                                      |     
    0x0042b507 call 0x443540                                                                                                                                                                                                                                                     |     BloombergLP::bslmt::ThreadAttributes::ThreadAttributes() (rsp);
    0x0042b50c mov rsi, rsp                                                                                                                                                                                                                                                      |     
    0x0042b50f mov edx, 0x4432f0                                                                                                                                                                                                                                                 |     
    0x0042b514 mov rdi, r15                                                                                                                                                                                                                                                      |     
    0x0042b517 mov rcx, rbx                                                                                                                                                                                                                                                      |     
    0x0042b51a call 0x443a30                                                                                                                                                                                                                                                     |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (r15, rsp, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0042b51f mov ebp, eax                                                                                                                                                                                                                                                      |     
    0x0042b521 cmp qword [rsp + 0x38], 0x17                                                                                                                                                                                                                                      |     
                                                                                                                                                                                                                                                                                 |     if (*((rsp + 0x38)) != 0x17) {
    0x0042b527 je 0x42b539                                                                                                                                                                                                                                                       |         
    0x0042b529 mov rsi, qword [rsp + 0x18]                                                                                                                                                                                                                                       |         rsi = *((rsp + 0x18));
    0x0042b52e mov rdi, qword [rsp + 0x40]                                                                                                                                                                                                                                       |         rdi = *((rsp + 0x40));
    0x0042b533 mov rax, qword [rdi]                                                                                                                                                                                                                                              |         rax = *(rdi);
    0x0042b536 call qword [rax + 0x18]                                                                                                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |     }
    0x0042b539 test ebp, ebp                                                                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                                                                 |     if (ebp != 0) {
    0x0042b53b je 0x42b566                                                                                                                                                                                                                                                       |         
    0x0042b53d cmp qword [rbx + 0x40], 0x17                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |         if (*((rbx + 0x40)) != 0x17) {
    0x0042b542 je 0x42b552                                                                                                                                                                                                                                                       |             
    0x0042b544 mov rsi, qword [rbx + 0x20]                                                                                                                                                                                                                                       |             rsi = *((rbx + 0x20));
    0x0042b548 mov rdi, qword [rbx + 0x48]                                                                                                                                                                                                                                       |             rdi = *((rbx + 0x48));
    0x0042b54c mov rax, qword [rdi]                                                                                                                                                                                                                                              |             rax = *(rdi);
    0x0042b54f call qword [rax + 0x18]                                                                                                                                                                                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |         }
    0x0042b552 mov qword [rbx + 0x38], 0xffffffffffffffff                                                                                                                                                                                                                        |         *((rbx + 0x38)) = 0xffffffffffffffff;
    0x0042b55a mov rax, qword [r14]                                                                                                                                                                                                                                              |         rax = *(r14);
    0x0042b55d mov rdi, r14                                                                                                                                                                                                                                                      |         rdi = r14;
    0x0042b560 mov rsi, rbx                                                                                                                                                                                                                                                      |         rsi = rbx;
    0x0042b563 call qword [rax + 0x18]                                                                                                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |     }
    0x0042b566 mov eax, ebp                                                                                                                                                                                                                                                      |     eax = ebp;
    0x0042b568 add rsp, 0x48                                                                                                                                                                                                                                                     |     
    0x0042b56c pop rbx                                                                                                                                                                                                                                                           |     
    0x0042b56d pop r14                                                                                                                                                                                                                                                           |     
    0x0042b56f pop r15                                                                                                                                                                                                                                                           |     
    0x0042b571 pop rbp                                                                                                                                                                                                                                                           |     
    0x0042b572 ret                                                                                                                                                                                                                                                               |     return rax;
                                                                                                                                                                                                                                                                                 | }
