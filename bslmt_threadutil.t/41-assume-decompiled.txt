    ; assembly                                                                                                                                                                                                                                                               | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                             | /* bslmt_threadutil.t/assume @ 0x41b600 */
                                                                                                                                                                                                                                                                             | #include <stdint.h>
                                                                                                                                                                                                                                                                             |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_STACKSIZE_TEST_CASE_NAMESPACE.Func_36864____unsigned_long__BloombergLP::bslmt::ThreadAttributes_const__STACKSIZE_TEST_CASE_NAMESPACE::Func_36864__const__BloombergLP::bslma::Allocator_ ()        | int64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_STACKSIZE_TEST_CASE_NAMESPACE_Func_36864_unsigned_long_BloombergLP::bslmt::ThreadAttributes_const_STACKSIZE_TEST_CASE_NAMESPACE::Func_36864_const_BloombergLP::bslma::Allocator_ (int64_t arg4, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                             |     rcx = arg4;
                                                                                                                                                                                                                                                                             |     rsi = arg2;
                                                                                                                                                                                                                                                                             |     rdi = arg1;
                                                                                                                                                                                                                                                                             |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<STACKSIZE_TEST_CASE_NAMESPACE::Func<36864> >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, STACKSIZE_TEST_CASE_NAMESPACE::Func<36864> const&, BloombergLP::bslma::Allocator*) */
    0x0041b600 push rbp                                                                                                                                                                                                                                                      |     
    0x0041b601 push r15                                                                                                                                                                                                                                                      |     
    0x0041b603 push r14                                                                                                                                                                                                                                                      |     
    0x0041b605 push r13                                                                                                                                                                                                                                                      |     
    0x0041b607 push r12                                                                                                                                                                                                                                                      |     
    0x0041b609 push rbx                                                                                                                                                                                                                                                      |     
    0x0041b60a push rax                                                                                                                                                                                                                                                      |     
    0x0041b60b mov r14, rcx                                                                                                                                                                                                                                                  |     r14 = rcx;
    0x0041b60e mov r15, rsi                                                                                                                                                                                                                                                  |     r15 = rsi;
    0x0041b611 mov r12, rdi                                                                                                                                                                                                                                                  |     r12 = rdi;
    0x0041b614 mov r13, qword [rsi + 0x30]                                                                                                                                                                                                                                   |     r13 = *((rsi + 0x30));
    0x0041b618 cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                  |     
                                                                                                                                                                                                                                                                             |     if (*((rsi + 0x38)) != 0x17) {
    0x0041b61d je 0x41b625                                                                                                                                                                                                                                                   |         
    0x0041b61f mov rbp, qword [r15 + 0x18]                                                                                                                                                                                                                                   |         rbp = *((r15 + 0x18));
    0x0041b623 jmp 0x41b629                                                                                                                                                                                                                                                  |         
                                                                                                                                                                                                                                                                             |     } else {
    0x0041b625 lea rbp, [r15 + 0x18]                                                                                                                                                                                                                                         |         rbp = r15 + 0x18;
                                                                                                                                                                                                                                                                             |     }
    0x0041b629 mov rax, qword [r14]                                                                                                                                                                                                                                          |     rax = *(r14);
    0x0041b62c mov esi, 0x40                                                                                                                                                                                                                                                 |     esi = 0x40;
    0x0041b631 mov rdi, r14                                                                                                                                                                                                                                                  |     rdi = r14;
    0x0041b634 call qword [rax + 0x10]                                                                                                                                                                                                                                       |     rax = uint64_t (*rax + 0x10)() ();
    0x0041b637 mov rbx, rax                                                                                                                                                                                                                                                  |     rbx = rax;
    0x0041b63a mov qword [rax], 0x41b740                                                                                                                                                                                                                                     |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_STACKSIZE_TEST_CASE_NAMESPACE::Func_36864___.invokerFunction_void_;
    0x0041b641 lea rdi, [rax + 0x10]                                                                                                                                                                                                                                         |     
    0x0041b645 mov qword [rax + 0x10], 0                                                                                                                                                                                                                                     |     *((rax + 0x10)) = 0;
    0x0041b64d mov qword [rax + 0x38], r14                                                                                                                                                                                                                                   |     *((rax + 0x38)) = r14;
    0x0041b651 movaps xmm0, xmmword [rip + 0x15a18]                                                                                                                                                                                                                          |     xmm0 = .comment;
    0x0041b658 movups xmmword [rax + 0x28], xmm0                                                                                                                                                                                                                             |     __asm ("movups xmmword [rax + 0x28], xmm0");
    0x0041b65c mov ecx, 0x4327df                                                                                                                                                                                                                                             |     
    0x0041b661 mov rsi, rbp                                                                                                                                                                                                                                                  |     
    0x0041b664 mov rdx, r13                                                                                                                                                                                                                                                  |     
    0x0041b667 call 0x424f70                                                                                                                                                                                                                                                 |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rax + 0x10, rbp, r13, "string<...>::assign<Iter>(i,j): string too long");
    0x0041b66c mov edx, 0x4227b0                                                                                                                                                                                                                                             |     
    0x0041b671 mov rdi, r12                                                                                                                                                                                                                                                  |     
    0x0041b674 mov rsi, r15                                                                                                                                                                                                                                                  |     
    0x0041b677 mov rcx, rbx                                                                                                                                                                                                                                                  |     
    0x0041b67a call 0x422e20                                                                                                                                                                                                                                                 |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (r12, r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0041b67f mov ebp, eax                                                                                                                                                                                                                                                  |     
    0x0041b681 test eax, eax                                                                                                                                                                                                                                                 |     
                                                                                                                                                                                                                                                                             |     if (eax != 0) {
    0x0041b683 je 0x41b6ae                                                                                                                                                                                                                                                   |         
    0x0041b685 cmp qword [rbx + 0x30], 0x17                                                                                                                                                                                                                                  |         
                                                                                                                                                                                                                                                                             |         if (*((rbx + 0x30)) != 0x17) {
    0x0041b68a je 0x41b69a                                                                                                                                                                                                                                                   |             
    0x0041b68c mov rsi, qword [rbx + 0x10]                                                                                                                                                                                                                                   |             rsi = *((rbx + 0x10));
    0x0041b690 mov rdi, qword [rbx + 0x38]                                                                                                                                                                                                                                   |             rdi = *((rbx + 0x38));
    0x0041b694 mov rax, qword [rdi]                                                                                                                                                                                                                                          |             rax = *(rdi);
    0x0041b697 call qword [rax + 0x18]                                                                                                                                                                                                                                       |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                             |         }
    0x0041b69a mov qword [rbx + 0x28], 0xffffffffffffffff                                                                                                                                                                                                                    |         *((rbx + 0x28)) = 0xffffffffffffffff;
    0x0041b6a2 mov rax, qword [r14]                                                                                                                                                                                                                                          |         rax = *(r14);
    0x0041b6a5 mov rdi, r14                                                                                                                                                                                                                                                  |         rdi = r14;
    0x0041b6a8 mov rsi, rbx                                                                                                                                                                                                                                                  |         rsi = rbx;
    0x0041b6ab call qword [rax + 0x18]                                                                                                                                                                                                                                       |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                             |     }
    0x0041b6ae mov eax, ebp                                                                                                                                                                                                                                                  |     eax = ebp;
    0x0041b6b0 add rsp, 8                                                                                                                                                                                                                                                    |     
    0x0041b6b4 pop rbx                                                                                                                                                                                                                                                       |     
    0x0041b6b5 pop r12                                                                                                                                                                                                                                                       |     
    0x0041b6b7 pop r13                                                                                                                                                                                                                                                       |     
    0x0041b6b9 pop r14                                                                                                                                                                                                                                                       |     
    0x0041b6bb pop r15                                                                                                                                                                                                                                                       |     
    0x0041b6bd pop rbp                                                                                                                                                                                                                                                       |     
    0x0041b6be ret                                                                                                                                                                                                                                                           |     return rax;
                                                                                                                                                                                                                                                                             | }
