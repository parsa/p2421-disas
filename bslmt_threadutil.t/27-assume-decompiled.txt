    ; assembly                                                                                                                                                                                                                                                               | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                             | /* bslmt_threadutil.t/assume @ 0x41a940 */
                                                                                                                                                                                                                                                                             | #include <stdint.h>
                                                                                                                                                                                                                                                                             |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_STACKSIZE_TEST_CASE_NAMESPACE.Func_20480____unsigned_long__BloombergLP::bslmt::ThreadAttributes_const__STACKSIZE_TEST_CASE_NAMESPACE::Func_20480__const__BloombergLP::bslma::Allocator_ ()        | int64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_STACKSIZE_TEST_CASE_NAMESPACE_Func_20480_unsigned_long_BloombergLP::bslmt::ThreadAttributes_const_STACKSIZE_TEST_CASE_NAMESPACE::Func_20480_const_BloombergLP::bslma::Allocator_ (int64_t arg4, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                             |     rcx = arg4;
                                                                                                                                                                                                                                                                             |     rsi = arg2;
                                                                                                                                                                                                                                                                             |     rdi = arg1;
                                                                                                                                                                                                                                                                             |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<STACKSIZE_TEST_CASE_NAMESPACE::Func<20480> >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, STACKSIZE_TEST_CASE_NAMESPACE::Func<20480> const&, BloombergLP::bslma::Allocator*) */
    0x0041a940 push rbp                                                                                                                                                                                                                                                      |     
    0x0041a941 push r15                                                                                                                                                                                                                                                      |     
    0x0041a943 push r14                                                                                                                                                                                                                                                      |     
    0x0041a945 push r13                                                                                                                                                                                                                                                      |     
    0x0041a947 push r12                                                                                                                                                                                                                                                      |     
    0x0041a949 push rbx                                                                                                                                                                                                                                                      |     
    0x0041a94a push rax                                                                                                                                                                                                                                                      |     
    0x0041a94b mov r14, rcx                                                                                                                                                                                                                                                  |     r14 = rcx;
    0x0041a94e mov r15, rsi                                                                                                                                                                                                                                                  |     r15 = rsi;
    0x0041a951 mov r12, rdi                                                                                                                                                                                                                                                  |     r12 = rdi;
    0x0041a954 mov r13, qword [rsi + 0x30]                                                                                                                                                                                                                                   |     r13 = *((rsi + 0x30));
    0x0041a958 cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                  |     
                                                                                                                                                                                                                                                                             |     if (*((rsi + 0x38)) != 0x17) {
    0x0041a95d je 0x41a965                                                                                                                                                                                                                                                   |         
    0x0041a95f mov rbp, qword [r15 + 0x18]                                                                                                                                                                                                                                   |         rbp = *((r15 + 0x18));
    0x0041a963 jmp 0x41a969                                                                                                                                                                                                                                                  |         
                                                                                                                                                                                                                                                                             |     } else {
    0x0041a965 lea rbp, [r15 + 0x18]                                                                                                                                                                                                                                         |         rbp = r15 + 0x18;
                                                                                                                                                                                                                                                                             |     }
    0x0041a969 mov rax, qword [r14]                                                                                                                                                                                                                                          |     rax = *(r14);
    0x0041a96c mov esi, 0x40                                                                                                                                                                                                                                                 |     esi = 0x40;
    0x0041a971 mov rdi, r14                                                                                                                                                                                                                                                  |     rdi = r14;
    0x0041a974 call qword [rax + 0x10]                                                                                                                                                                                                                                       |     rax = uint64_t (*rax + 0x10)() ();
    0x0041a977 mov rbx, rax                                                                                                                                                                                                                                                  |     rbx = rax;
    0x0041a97a mov qword [rax], 0x41aa80                                                                                                                                                                                                                                     |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_STACKSIZE_TEST_CASE_NAMESPACE::Func_20480___.invokerFunction_void_;
    0x0041a981 lea rdi, [rax + 0x10]                                                                                                                                                                                                                                         |     
    0x0041a985 mov qword [rax + 0x10], 0                                                                                                                                                                                                                                     |     *((rax + 0x10)) = 0;
    0x0041a98d mov qword [rax + 0x38], r14                                                                                                                                                                                                                                   |     *((rax + 0x38)) = r14;
    0x0041a991 movaps xmm0, xmmword [rip + 0x166d8]                                                                                                                                                                                                                          |     xmm0 = .comment;
    0x0041a998 movups xmmword [rax + 0x28], xmm0                                                                                                                                                                                                                             |     __asm ("movups xmmword [rax + 0x28], xmm0");
    0x0041a99c mov ecx, 0x4327df                                                                                                                                                                                                                                             |     
    0x0041a9a1 mov rsi, rbp                                                                                                                                                                                                                                                  |     
    0x0041a9a4 mov rdx, r13                                                                                                                                                                                                                                                  |     
    0x0041a9a7 call 0x424f70                                                                                                                                                                                                                                                 |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rax + 0x10, rbp, r13, "string<...>::assign<Iter>(i,j): string too long");
    0x0041a9ac mov edx, 0x4227b0                                                                                                                                                                                                                                             |     
    0x0041a9b1 mov rdi, r12                                                                                                                                                                                                                                                  |     
    0x0041a9b4 mov rsi, r15                                                                                                                                                                                                                                                  |     
    0x0041a9b7 mov rcx, rbx                                                                                                                                                                                                                                                  |     
    0x0041a9ba call 0x422e20                                                                                                                                                                                                                                                 |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (r12, r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0041a9bf mov ebp, eax                                                                                                                                                                                                                                                  |     
    0x0041a9c1 test eax, eax                                                                                                                                                                                                                                                 |     
                                                                                                                                                                                                                                                                             |     if (eax != 0) {
    0x0041a9c3 je 0x41a9ee                                                                                                                                                                                                                                                   |         
    0x0041a9c5 cmp qword [rbx + 0x30], 0x17                                                                                                                                                                                                                                  |         
                                                                                                                                                                                                                                                                             |         if (*((rbx + 0x30)) != 0x17) {
    0x0041a9ca je 0x41a9da                                                                                                                                                                                                                                                   |             
    0x0041a9cc mov rsi, qword [rbx + 0x10]                                                                                                                                                                                                                                   |             rsi = *((rbx + 0x10));
    0x0041a9d0 mov rdi, qword [rbx + 0x38]                                                                                                                                                                                                                                   |             rdi = *((rbx + 0x38));
    0x0041a9d4 mov rax, qword [rdi]                                                                                                                                                                                                                                          |             rax = *(rdi);
    0x0041a9d7 call qword [rax + 0x18]                                                                                                                                                                                                                                       |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                             |         }
    0x0041a9da mov qword [rbx + 0x28], 0xffffffffffffffff                                                                                                                                                                                                                    |         *((rbx + 0x28)) = 0xffffffffffffffff;
    0x0041a9e2 mov rax, qword [r14]                                                                                                                                                                                                                                          |         rax = *(r14);
    0x0041a9e5 mov rdi, r14                                                                                                                                                                                                                                                  |         rdi = r14;
    0x0041a9e8 mov rsi, rbx                                                                                                                                                                                                                                                  |         rsi = rbx;
    0x0041a9eb call qword [rax + 0x18]                                                                                                                                                                                                                                       |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                             |     }
    0x0041a9ee mov eax, ebp                                                                                                                                                                                                                                                  |     eax = ebp;
    0x0041a9f0 add rsp, 8                                                                                                                                                                                                                                                    |     
    0x0041a9f4 pop rbx                                                                                                                                                                                                                                                       |     
    0x0041a9f5 pop r12                                                                                                                                                                                                                                                       |     
    0x0041a9f7 pop r13                                                                                                                                                                                                                                                       |     
    0x0041a9f9 pop r14                                                                                                                                                                                                                                                       |     
    0x0041a9fb pop r15                                                                                                                                                                                                                                                       |     
    0x0041a9fd pop rbp                                                                                                                                                                                                                                                       |     
    0x0041a9fe ret                                                                                                                                                                                                                                                           |     return rax;
                                                                                                                                                                                                                                                                             | }
