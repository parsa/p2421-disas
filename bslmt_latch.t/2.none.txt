    ; assembly                                                                                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                                                                                 | /* bslmt_latch.t/none @ 0x4090d0 */
                                                                                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                                                                                 |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil.createWithAllocator_ThreadBinder__unsigned_long__BloombergLP::bslmt::ThreadAttributes_const__ThreadBinder_const__BloombergLP::bslma::Allocator_ ()         | uint64_t method_int_BloombergLP::bslmt::ThreadUtil_createWithAllocator_ThreadBinder_unsigned_long_BloombergLP::bslmt::ThreadAttributes_const_ThreadBinder_const_BloombergLP::bslma::Allocator_ (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                 |     rcx = arg4;
                                                                                                                                                                                                                 |     rdx = arg3;
                                                                                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                                                                                 |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<ThreadBinder>(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, ThreadBinder const&, BloombergLP::bslma::Allocator*) */
    0x004090d0 push rbp                                                                                                                                                                                          |     
    0x004090d1 push r15                                                                                                                                                                                          |     
    0x004090d3 push r14                                                                                                                                                                                          |     
    0x004090d5 push r13                                                                                                                                                                                          |     
    0x004090d7 push r12                                                                                                                                                                                          |     
    0x004090d9 push rbx                                                                                                                                                                                          |     
    0x004090da push rax                                                                                                                                                                                          |     
    0x004090db mov r14, rcx                                                                                                                                                                                      |     r14 = rcx;
    0x004090de mov r12, rdx                                                                                                                                                                                      |     r12 = rdx;
    0x004090e1 mov r15, rsi                                                                                                                                                                                      |     r15 = rsi;
    0x004090e4 mov qword [rsp], rdi                                                                                                                                                                              |     *(rsp) = rdi;
    0x004090e8 cmp qword [rsi + 0x38], 0x17                                                                                                                                                                      |     
                                                                                                                                                                                                                 |     if (*((rsi + 0x38)) != 0x17) {
    0x004090ed je 0x4090f5                                                                                                                                                                                       |         
    0x004090ef mov r13, qword [r15 + 0x18]                                                                                                                                                                       |         r13 = *((r15 + 0x18));
    0x004090f3 jmp 0x4090f9                                                                                                                                                                                      |         
                                                                                                                                                                                                                 |     } else {
    0x004090f5 lea r13, [r15 + 0x18]                                                                                                                                                                             |         r13 = r15 + 0x18;
                                                                                                                                                                                                                 |     }
    0x004090f9 mov rbp, qword [r15 + 0x30]                                                                                                                                                                       |     rbp = *((r15 + 0x30));
    0x004090fd test r14, r14                                                                                                                                                                                     |     
                                                                                                                                                                                                                 |     if (r14 == 0) {
    0x00409100 jne 0x409116                                                                                                                                                                                      |         
    0x00409102 mov r14, qword [rip + 0x24097f]                                                                                                                                                                   |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00409109 test r14, r14                                                                                                                                                                                     |         
                                                                                                                                                                                                                 |         if (r14 != 0) {
    0x0040910c jne 0x409116                                                                                                                                                                                      |             goto label_0;
                                                                                                                                                                                                                 |         }
    0x0040910e call 0x42fb90                                                                                                                                                                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x00409113 mov r14, rax                                                                                                                                                                                      |         r14 = rax;
                                                                                                                                                                                                                 |     }
                                                                                                                                                                                                                 | label_0:
    0x00409116 mov rax, qword [r14]                                                                                                                                                                              |     rax = *(r14);
    0x00409119 mov esi, 0x50                                                                                                                                                                                     |     esi = 0x50;
    0x0040911e mov rdi, r14                                                                                                                                                                                      |     rdi = r14;
    0x00409121 call qword [rax + 0x10]                                                                                                                                                                           |     rax = uint64_t (*rax + 0x10)() ();
    0x00409124 mov rbx, rax                                                                                                                                                                                      |     rbx = rax;
    0x00409127 mov qword [rax], 0x409240                                                                                                                                                                         |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_ThreadBinder_.invokerFunction_void_;
    0x0040912e movups xmm0, xmmword [r12]                                                                                                                                                                        |     __asm ("movups xmm0, xmmword [r12]");
    0x00409133 movups xmmword [rax + 8], xmm0                                                                                                                                                                    |     __asm ("movups xmmword [rax + 8], xmm0");
    0x00409137 mov rax, qword [r12 + 0x10]                                                                                                                                                                       |     rax = *((r12 + 0x10));
    0x0040913c mov qword [rbx + 0x18], rax                                                                                                                                                                       |     *((rbx + 0x18)) = rax;
    0x00409140 lea rdi, [rbx + 0x20]                                                                                                                                                                             |     
    0x00409144 mov qword [rbx + 0x20], 0                                                                                                                                                                         |     *((rbx + 0x20)) = 0;
    0x0040914c mov qword [rbx + 0x48], r14                                                                                                                                                                       |     *((rbx + 0x48)) = r14;
    0x00409150 movaps xmm0, xmmword [rip + 0x28439]                                                                                                                                                              |     xmm0 = .comment;
    0x00409157 movups xmmword [rbx + 0x38], xmm0                                                                                                                                                                 |     __asm ("movups xmmword [rbx + 0x38], xmm0");
    0x0040915b mov ecx, 0x431c9f                                                                                                                                                                                 |     
    0x00409160 mov rsi, r13                                                                                                                                                                                      |     
    0x00409163 mov rdx, rbp                                                                                                                                                                                      |     
    0x00409166 call 0x40c8a0                                                                                                                                                                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x20, r13, rbp, "string<...>::assign<Iter>(i,j): string too long");
    0x0040916b mov edx, 0x409b70                                                                                                                                                                                 |     
    0x00409170 mov rdi, qword [rsp]                                                                                                                                                                              |     
    0x00409174 mov rsi, r15                                                                                                                                                                                      |     
    0x00409177 mov rcx, rbx                                                                                                                                                                                      |     
    0x0040917a call 0x40a480                                                                                                                                                                                     |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0040917f mov ebp, eax                                                                                                                                                                                      |     
    0x00409181 test eax, eax                                                                                                                                                                                     |     
                                                                                                                                                                                                                 |     if (eax != 0) {
    0x00409183 je 0x4091ae                                                                                                                                                                                       |         
    0x00409185 cmp qword [rbx + 0x40], 0x17                                                                                                                                                                      |         
                                                                                                                                                                                                                 |         if (*((rbx + 0x40)) != 0x17) {
    0x0040918a je 0x40919a                                                                                                                                                                                       |             
    0x0040918c mov rsi, qword [rbx + 0x20]                                                                                                                                                                       |             rsi = *((rbx + 0x20));
    0x00409190 mov rdi, qword [rbx + 0x48]                                                                                                                                                                       |             rdi = *((rbx + 0x48));
    0x00409194 mov rax, qword [rdi]                                                                                                                                                                              |             rax = *(rdi);
    0x00409197 call qword [rax + 0x18]                                                                                                                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                 |         }
    0x0040919a mov qword [rbx + 0x38], 0xffffffffffffffff                                                                                                                                                        |         *((rbx + 0x38)) = 0xffffffffffffffff;
    0x004091a2 mov rax, qword [r14]                                                                                                                                                                              |         rax = *(r14);
    0x004091a5 mov rdi, r14                                                                                                                                                                                      |         rdi = r14;
    0x004091a8 mov rsi, rbx                                                                                                                                                                                      |         rsi = rbx;
    0x004091ab call qword [rax + 0x18]                                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                 |     }
    0x004091ae mov eax, ebp                                                                                                                                                                                      |     eax = ebp;
    0x004091b0 add rsp, 8                                                                                                                                                                                        |     
    0x004091b4 pop rbx                                                                                                                                                                                           |     
    0x004091b5 pop r12                                                                                                                                                                                           |     
    0x004091b7 pop r13                                                                                                                                                                                           |     
    0x004091b9 pop r14                                                                                                                                                                                           |     
    0x004091bb pop r15                                                                                                                                                                                           |     
    0x004091bd pop rbp                                                                                                                                                                                           |     
    0x004091be ret                                                                                                                                                                                               |     return rax;
                                                                                                                                                                                                                 | }
