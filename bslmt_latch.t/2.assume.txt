    ; assembly                                                                                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                                                                                 | /* bslmt_latch.t/assume @ 0x409020 */
                                                                                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                                                                                 |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil.createWithAllocator_ThreadBinder__unsigned_long__BloombergLP::bslmt::ThreadAttributes_const__ThreadBinder_const__BloombergLP::bslma::Allocator_ ()         | int64_t method_int_BloombergLP::bslmt::ThreadUtil_createWithAllocator_ThreadBinder_unsigned_long_BloombergLP::bslmt::ThreadAttributes_const_ThreadBinder_const_BloombergLP::bslma::Allocator_ (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                 |     rcx = arg4;
                                                                                                                                                                                                                 |     rdx = arg3;
                                                                                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                                                                                 |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<ThreadBinder>(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, ThreadBinder const&, BloombergLP::bslma::Allocator*) */
    0x00409020 push rbp                                                                                                                                                                                          |     
    0x00409021 push r15                                                                                                                                                                                          |     
    0x00409023 push r14                                                                                                                                                                                          |     
    0x00409025 push r13                                                                                                                                                                                          |     
    0x00409027 push r12                                                                                                                                                                                          |     
    0x00409029 push rbx                                                                                                                                                                                          |     
    0x0040902a push rax                                                                                                                                                                                          |     
    0x0040902b mov r14, rcx                                                                                                                                                                                      |     r14 = rcx;
    0x0040902e mov r12, rdx                                                                                                                                                                                      |     r12 = rdx;
    0x00409031 mov r15, rsi                                                                                                                                                                                      |     r15 = rsi;
    0x00409034 mov qword [rsp], rdi                                                                                                                                                                              |     *(rsp) = rdi;
    0x00409038 mov r13, qword [rsi + 0x30]                                                                                                                                                                       |     r13 = *((rsi + 0x30));
    0x0040903c cmp qword [rsi + 0x38], 0x17                                                                                                                                                                      |     
                                                                                                                                                                                                                 |     if (*((rsi + 0x38)) != 0x17) {
    0x00409041 je 0x409049                                                                                                                                                                                       |         
    0x00409043 mov rbp, qword [r15 + 0x18]                                                                                                                                                                       |         rbp = *((r15 + 0x18));
    0x00409047 jmp 0x40904d                                                                                                                                                                                      |         
                                                                                                                                                                                                                 |     } else {
    0x00409049 lea rbp, [r15 + 0x18]                                                                                                                                                                             |         rbp = r15 + 0x18;
                                                                                                                                                                                                                 |     }
    0x0040904d mov rax, qword [r14]                                                                                                                                                                              |     rax = *(r14);
    0x00409050 mov esi, 0x50                                                                                                                                                                                     |     esi = 0x50;
    0x00409055 mov rdi, r14                                                                                                                                                                                      |     rdi = r14;
    0x00409058 call qword [rax + 0x10]                                                                                                                                                                           |     rax = uint64_t (*rax + 0x10)() ();
    0x0040905b mov rbx, rax                                                                                                                                                                                      |     rbx = rax;
    0x0040905e mov qword [rax], 0x409170                                                                                                                                                                         |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_ThreadBinder_.invokerFunction_void_;
    0x00409065 movups xmm0, xmmword [r12]                                                                                                                                                                        |     __asm ("movups xmm0, xmmword [r12]");
    0x0040906a movups xmmword [rax + 8], xmm0                                                                                                                                                                    |     __asm ("movups xmmword [rax + 8], xmm0");
    0x0040906e mov rax, qword [r12 + 0x10]                                                                                                                                                                       |     rax = *((r12 + 0x10));
    0x00409073 mov qword [rbx + 0x18], rax                                                                                                                                                                       |     *((rbx + 0x18)) = rax;
    0x00409077 lea rdi, [rbx + 0x20]                                                                                                                                                                             |     
    0x0040907b mov qword [rbx + 0x20], 0                                                                                                                                                                         |     *((rbx + 0x20)) = 0;
    0x00409083 mov qword [rbx + 0x48], r14                                                                                                                                                                       |     *((rbx + 0x48)) = r14;
    0x00409087 movaps xmm0, xmmword [rip + 0x28342]                                                                                                                                                              |     xmm0 = .comment;
    0x0040908e movups xmmword [rbx + 0x38], xmm0                                                                                                                                                                 |     __asm ("movups xmmword [rbx + 0x38], xmm0");
    0x00409092 mov ecx, 0x431ae3                                                                                                                                                                                 |     
    0x00409097 mov rsi, rbp                                                                                                                                                                                      |     
    0x0040909a mov rdx, r13                                                                                                                                                                                      |     
    0x0040909d call 0x40c710                                                                                                                                                                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x20, rbp, r13, "string<...>::assign<Iter>(i,j): string too long");
    0x004090a2 mov edx, 0x409a00                                                                                                                                                                                 |     
    0x004090a7 mov rdi, qword [rsp]                                                                                                                                                                              |     
    0x004090ab mov rsi, r15                                                                                                                                                                                      |     
    0x004090ae mov rcx, rbx                                                                                                                                                                                      |     
    0x004090b1 call 0x40a310                                                                                                                                                                                     |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x004090b6 mov ebp, eax                                                                                                                                                                                      |     
    0x004090b8 test eax, eax                                                                                                                                                                                     |     
                                                                                                                                                                                                                 |     if (eax != 0) {
    0x004090ba je 0x4090e5                                                                                                                                                                                       |         
    0x004090bc cmp qword [rbx + 0x40], 0x17                                                                                                                                                                      |         
                                                                                                                                                                                                                 |         if (*((rbx + 0x40)) != 0x17) {
    0x004090c1 je 0x4090d1                                                                                                                                                                                       |             
    0x004090c3 mov rsi, qword [rbx + 0x20]                                                                                                                                                                       |             rsi = *((rbx + 0x20));
    0x004090c7 mov rdi, qword [rbx + 0x48]                                                                                                                                                                       |             rdi = *((rbx + 0x48));
    0x004090cb mov rax, qword [rdi]                                                                                                                                                                              |             rax = *(rdi);
    0x004090ce call qword [rax + 0x18]                                                                                                                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                 |         }
    0x004090d1 mov qword [rbx + 0x38], 0xffffffffffffffff                                                                                                                                                        |         *((rbx + 0x38)) = 0xffffffffffffffff;
    0x004090d9 mov rax, qword [r14]                                                                                                                                                                              |         rax = *(r14);
    0x004090dc mov rdi, r14                                                                                                                                                                                      |         rdi = r14;
    0x004090df mov rsi, rbx                                                                                                                                                                                      |         rsi = rbx;
    0x004090e2 call qword [rax + 0x18]                                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                 |     }
    0x004090e5 mov eax, ebp                                                                                                                                                                                      |     eax = ebp;
    0x004090e7 add rsp, 8                                                                                                                                                                                        |     
    0x004090eb pop rbx                                                                                                                                                                                           |     
    0x004090ec pop r12                                                                                                                                                                                           |     
    0x004090ee pop r13                                                                                                                                                                                           |     
    0x004090f0 pop r14                                                                                                                                                                                           |     
    0x004090f2 pop r15                                                                                                                                                                                           |     
    0x004090f4 pop rbp                                                                                                                                                                                           |     
    0x004090f5 ret                                                                                                                                                                                               |     return rax;
                                                                                                                                                                                                                 | }
