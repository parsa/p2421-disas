    ; assembly                                                                                                                                                                                                                           | /* r2dec pseudo code output */
                                                                                                                                                                                                                                         | /* bslmt_sluice.t/none @ 0x406120 */
                                                                                                                                                                                                                                         | #include <stdint.h>
                                                                                                                                                                                                                                         |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil.createWithAllocator_EnterPostSleepAndWaitJob__unsigned_long__BloombergLP::bslmt::ThreadAttributes_const__EnterPostSleepAndWaitJob_const__BloombergLP::bslma::Allocator_ ()         | uint64_t method_int_BloombergLP::bslmt::ThreadUtil_createWithAllocator_EnterPostSleepAndWaitJob_unsigned_long_BloombergLP::bslmt::ThreadAttributes_const_EnterPostSleepAndWaitJob_const_BloombergLP::bslma::Allocator_ (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                         |     rcx = arg4;
                                                                                                                                                                                                                                         |     rdx = arg3;
                                                                                                                                                                                                                                         |     rsi = arg2;
                                                                                                                                                                                                                                         |     rdi = arg1;
                                                                                                                                                                                                                                         |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<EnterPostSleepAndWaitJob>(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, EnterPostSleepAndWaitJob const&, BloombergLP::bslma::Allocator*) */
    0x00406120 push rbp                                                                                                                                                                                                                  |     
    0x00406121 push r15                                                                                                                                                                                                                  |     
    0x00406123 push r14                                                                                                                                                                                                                  |     
    0x00406125 push r13                                                                                                                                                                                                                  |     
    0x00406127 push r12                                                                                                                                                                                                                  |     
    0x00406129 push rbx                                                                                                                                                                                                                  |     
    0x0040612a push rax                                                                                                                                                                                                                  |     
    0x0040612b mov r14, rcx                                                                                                                                                                                                              |     r14 = rcx;
    0x0040612e mov r12, rdx                                                                                                                                                                                                              |     r12 = rdx;
    0x00406131 mov r15, rsi                                                                                                                                                                                                              |     r15 = rsi;
    0x00406134 mov qword [rsp], rdi                                                                                                                                                                                                      |     *(rsp) = rdi;
    0x00406138 cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                              |     
                                                                                                                                                                                                                                         |     if (*((rsi + 0x38)) != 0x17) {
    0x0040613d je 0x406145                                                                                                                                                                                                               |         
    0x0040613f mov r13, qword [r15 + 0x18]                                                                                                                                                                                               |         r13 = *((r15 + 0x18));
    0x00406143 jmp 0x406149                                                                                                                                                                                                              |         
                                                                                                                                                                                                                                         |     } else {
    0x00406145 lea r13, [r15 + 0x18]                                                                                                                                                                                                     |         r13 = r15 + 0x18;
                                                                                                                                                                                                                                         |     }
    0x00406149 mov rbp, qword [r15 + 0x30]                                                                                                                                                                                               |     rbp = *((r15 + 0x30));
    0x0040614d test r14, r14                                                                                                                                                                                                             |     
                                                                                                                                                                                                                                         |     if (r14 == 0) {
    0x00406150 jne 0x406166                                                                                                                                                                                                              |         
    0x00406152 mov r14, qword [rip + 0x23f85f]                                                                                                                                                                                           |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00406159 test r14, r14                                                                                                                                                                                                             |         
                                                                                                                                                                                                                                         |         if (r14 != 0) {
    0x0040615c jne 0x406166                                                                                                                                                                                                              |             goto label_0;
                                                                                                                                                                                                                                         |         }
    0x0040615e call 0x42ca90                                                                                                                                                                                                             |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x00406163 mov r14, rax                                                                                                                                                                                                              |         r14 = rax;
                                                                                                                                                                                                                                         |     }
                                                                                                                                                                                                                                         | label_0:
    0x00406166 mov rax, qword [r14]                                                                                                                                                                                                      |     rax = *(r14);
    0x00406169 mov esi, 0x48                                                                                                                                                                                                             |     esi = 0x48;
    0x0040616e mov rdi, r14                                                                                                                                                                                                              |     rdi = r14;
    0x00406171 call qword [rax + 0x10]                                                                                                                                                                                                   |     rax = uint64_t (*rax + 0x10)() ();
    0x00406174 mov rbx, rax                                                                                                                                                                                                              |     rbx = rax;
    0x00406177 mov qword [rax], 0x405f60                                                                                                                                                                                                 |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_EnterPostSleepAndWaitJob_.invokerFunction_void_;
    0x0040617e movups xmm0, xmmword [r12]                                                                                                                                                                                                |     __asm ("movups xmm0, xmmword [r12]");
    0x00406183 movups xmmword [rax + 8], xmm0                                                                                                                                                                                            |     __asm ("movups xmmword [rax + 8], xmm0");
    0x00406187 lea rdi, [rax + 0x18]                                                                                                                                                                                                     |     
    0x0040618b mov qword [rax + 0x18], 0                                                                                                                                                                                                 |     *((rax + 0x18)) = 0;
    0x00406193 mov qword [rax + 0x40], r14                                                                                                                                                                                               |     *((rax + 0x40)) = r14;
    0x00406197 movaps xmm0, xmmword [rip + 0x28032]                                                                                                                                                                                      |     xmm0 = .comment;
    0x0040619e movups xmmword [rax + 0x30], xmm0                                                                                                                                                                                         |     __asm ("movups xmmword [rax + 0x30], xmm0");
    0x004061a2 mov ecx, 0x42e6b3                                                                                                                                                                                                         |     
    0x004061a7 mov rsi, r13                                                                                                                                                                                                              |     
    0x004061aa mov rdx, rbp                                                                                                                                                                                                              |     
    0x004061ad call 0x409770                                                                                                                                                                                                             |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rax + 0x18, r13, rbp, "string<...>::assign<Iter>(i,j): string too long");
    0x004061b2 mov edx, 0x4069e0                                                                                                                                                                                                         |     
    0x004061b7 mov rdi, qword [rsp]                                                                                                                                                                                                      |     
    0x004061bb mov rsi, r15                                                                                                                                                                                                              |     
    0x004061be mov rcx, rbx                                                                                                                                                                                                              |     
    0x004061c1 call 0x407410                                                                                                                                                                                                             |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x004061c6 mov ebp, eax                                                                                                                                                                                                              |     
    0x004061c8 test eax, eax                                                                                                                                                                                                             |     
                                                                                                                                                                                                                                         |     if (eax != 0) {
    0x004061ca je 0x4061f5                                                                                                                                                                                                               |         
    0x004061cc cmp qword [rbx + 0x38], 0x17                                                                                                                                                                                              |         
                                                                                                                                                                                                                                         |         if (*((rbx + 0x38)) != 0x17) {
    0x004061d1 je 0x4061e1                                                                                                                                                                                                               |             
    0x004061d3 mov rsi, qword [rbx + 0x18]                                                                                                                                                                                               |             rsi = *((rbx + 0x18));
    0x004061d7 mov rdi, qword [rbx + 0x40]                                                                                                                                                                                               |             rdi = *((rbx + 0x40));
    0x004061db mov rax, qword [rdi]                                                                                                                                                                                                      |             rax = *(rdi);
    0x004061de call qword [rax + 0x18]                                                                                                                                                                                                   |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                         |         }
    0x004061e1 mov qword [rbx + 0x30], 0xffffffffffffffff                                                                                                                                                                                |         *((rbx + 0x30)) = 0xffffffffffffffff;
    0x004061e9 mov rax, qword [r14]                                                                                                                                                                                                      |         rax = *(r14);
    0x004061ec mov rdi, r14                                                                                                                                                                                                              |         rdi = r14;
    0x004061ef mov rsi, rbx                                                                                                                                                                                                              |         rsi = rbx;
    0x004061f2 call qword [rax + 0x18]                                                                                                                                                                                                   |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                         |     }
    0x004061f5 mov eax, ebp                                                                                                                                                                                                              |     eax = ebp;
    0x004061f7 add rsp, 8                                                                                                                                                                                                                |     
    0x004061fb pop rbx                                                                                                                                                                                                                   |     
    0x004061fc pop r12                                                                                                                                                                                                                   |     
    0x004061fe pop r13                                                                                                                                                                                                                   |     
    0x00406200 pop r14                                                                                                                                                                                                                   |     
    0x00406202 pop r15                                                                                                                                                                                                                   |     
    0x00406204 pop rbp                                                                                                                                                                                                                   |     
    0x00406205 ret                                                                                                                                                                                                                       |     return rax;
                                                                                                                                                                                                                                         | }
