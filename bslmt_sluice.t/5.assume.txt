    ; assembly                                                                                                                                                                                                                           | /* r2dec pseudo code output */
                                                                                                                                                                                                                                         | /* bslmt_sluice.t/assume @ 0x405b50 */
                                                                                                                                                                                                                                         | #include <stdint.h>
                                                                                                                                                                                                                                         |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil.createWithAllocator_EnterAndWaitUntilDoneJob__unsigned_long__BloombergLP::bslmt::ThreadAttributes_const__EnterAndWaitUntilDoneJob_const__BloombergLP::bslma::Allocator_ ()         | int64_t method_int_BloombergLP::bslmt::ThreadUtil_createWithAllocator_EnterAndWaitUntilDoneJob_unsigned_long_BloombergLP::bslmt::ThreadAttributes_const_EnterAndWaitUntilDoneJob_const_BloombergLP::bslma::Allocator_ (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                         |     rcx = arg4;
                                                                                                                                                                                                                                         |     rdx = arg3;
                                                                                                                                                                                                                                         |     rsi = arg2;
                                                                                                                                                                                                                                         |     rdi = arg1;
                                                                                                                                                                                                                                         |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<EnterAndWaitUntilDoneJob>(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, EnterAndWaitUntilDoneJob const&, BloombergLP::bslma::Allocator*) */
    0x00405b50 push rbp                                                                                                                                                                                                                  |     
    0x00405b51 push r15                                                                                                                                                                                                                  |     
    0x00405b53 push r14                                                                                                                                                                                                                  |     
    0x00405b55 push r13                                                                                                                                                                                                                  |     
    0x00405b57 push r12                                                                                                                                                                                                                  |     
    0x00405b59 push rbx                                                                                                                                                                                                                  |     
    0x00405b5a push rax                                                                                                                                                                                                                  |     
    0x00405b5b mov r14, rcx                                                                                                                                                                                                              |     r14 = rcx;
    0x00405b5e mov r12, rdx                                                                                                                                                                                                              |     r12 = rdx;
    0x00405b61 mov r15, rsi                                                                                                                                                                                                              |     r15 = rsi;
    0x00405b64 mov qword [rsp], rdi                                                                                                                                                                                                      |     *(rsp) = rdi;
    0x00405b68 mov r13, qword [rsi + 0x30]                                                                                                                                                                                               |     r13 = *((rsi + 0x30));
    0x00405b6c cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                              |     
                                                                                                                                                                                                                                         |     if (*((rsi + 0x38)) != 0x17) {
    0x00405b71 je 0x405b79                                                                                                                                                                                                               |         
    0x00405b73 mov rbp, qword [r15 + 0x18]                                                                                                                                                                                               |         rbp = *((r15 + 0x18));
    0x00405b77 jmp 0x405b7d                                                                                                                                                                                                              |         
                                                                                                                                                                                                                                         |     } else {
    0x00405b79 lea rbp, [r15 + 0x18]                                                                                                                                                                                                     |         rbp = r15 + 0x18;
                                                                                                                                                                                                                                         |     }
    0x00405b7d mov rax, qword [r14]                                                                                                                                                                                                      |     rax = *(r14);
    0x00405b80 mov esi, 0x58                                                                                                                                                                                                             |     esi = 0x58;
    0x00405b85 mov rdi, r14                                                                                                                                                                                                              |     rdi = r14;
    0x00405b88 call qword [rax + 0x10]                                                                                                                                                                                                   |     rax = uint64_t (*rax + 0x10)() ();
    0x00405b8b mov rbx, rax                                                                                                                                                                                                              |     rbx = rax;
    0x00405b8e mov qword [rax], 0x405ca0                                                                                                                                                                                                 |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_EnterAndWaitUntilDoneJob_.invokerFunction_void_;
    0x00405b95 movups xmm0, xmmword [r12]                                                                                                                                                                                                |     __asm ("movups xmm0, xmmword [r12]");
    0x00405b9a movups xmm1, xmmword [r12 + 0x10]                                                                                                                                                                                         |     __asm ("movups xmm1, xmmword [r12 + 0x10]");
    0x00405ba0 movups xmmword [rax + 8], xmm0                                                                                                                                                                                            |     __asm ("movups xmmword [rax + 8], xmm0");
    0x00405ba4 movups xmmword [rax + 0x18], xmm1                                                                                                                                                                                         |     __asm ("movups xmmword [rax + 0x18], xmm1");
    0x00405ba8 lea rdi, [rax + 0x28]                                                                                                                                                                                                     |     
    0x00405bac mov qword [rax + 0x28], 0                                                                                                                                                                                                 |     *((rax + 0x28)) = 0;
    0x00405bb4 mov qword [rax + 0x50], r14                                                                                                                                                                                               |     *((rax + 0x50)) = r14;
    0x00405bb8 movaps xmm0, xmmword [rip + 0x28501]                                                                                                                                                                                      |     xmm0 = .comment;
    0x00405bbf movups xmmword [rax + 0x40], xmm0                                                                                                                                                                                         |     __asm ("movups xmmword [rax + 0x40], xmm0");
    0x00405bc3 mov ecx, 0x42e5a7                                                                                                                                                                                                         |     
    0x00405bc8 mov rsi, rbp                                                                                                                                                                                                              |     
    0x00405bcb mov rdx, r13                                                                                                                                                                                                              |     
    0x00405bce call 0x409680                                                                                                                                                                                                             |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rax + 0x28, rbp, r13, "string<...>::assign<Iter>(i,j): string too long");
    0x00405bd3 mov edx, 0x406910                                                                                                                                                                                                         |     
    0x00405bd8 mov rdi, qword [rsp]                                                                                                                                                                                                      |     
    0x00405bdc mov rsi, r15                                                                                                                                                                                                              |     
    0x00405bdf mov rcx, rbx                                                                                                                                                                                                              |     
    0x00405be2 call 0x407350                                                                                                                                                                                                             |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x00405be7 mov ebp, eax                                                                                                                                                                                                              |     
    0x00405be9 test eax, eax                                                                                                                                                                                                             |     
                                                                                                                                                                                                                                         |     if (eax != 0) {
    0x00405beb je 0x405c16                                                                                                                                                                                                               |         
    0x00405bed cmp qword [rbx + 0x48], 0x17                                                                                                                                                                                              |         
                                                                                                                                                                                                                                         |         if (*((rbx + 0x48)) != 0x17) {
    0x00405bf2 je 0x405c02                                                                                                                                                                                                               |             
    0x00405bf4 mov rsi, qword [rbx + 0x28]                                                                                                                                                                                               |             rsi = *((rbx + 0x28));
    0x00405bf8 mov rdi, qword [rbx + 0x50]                                                                                                                                                                                               |             rdi = *((rbx + 0x50));
    0x00405bfc mov rax, qword [rdi]                                                                                                                                                                                                      |             rax = *(rdi);
    0x00405bff call qword [rax + 0x18]                                                                                                                                                                                                   |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                         |         }
    0x00405c02 mov qword [rbx + 0x40], 0xffffffffffffffff                                                                                                                                                                                |         *((rbx + 0x40)) = 0xffffffffffffffff;
    0x00405c0a mov rax, qword [r14]                                                                                                                                                                                                      |         rax = *(r14);
    0x00405c0d mov rdi, r14                                                                                                                                                                                                              |         rdi = r14;
    0x00405c10 mov rsi, rbx                                                                                                                                                                                                              |         rsi = rbx;
    0x00405c13 call qword [rax + 0x18]                                                                                                                                                                                                   |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                         |     }
    0x00405c16 mov eax, ebp                                                                                                                                                                                                              |     eax = ebp;
    0x00405c18 add rsp, 8                                                                                                                                                                                                                |     
    0x00405c1c pop rbx                                                                                                                                                                                                                   |     
    0x00405c1d pop r12                                                                                                                                                                                                                   |     
    0x00405c1f pop r13                                                                                                                                                                                                                   |     
    0x00405c21 pop r14                                                                                                                                                                                                                   |     
    0x00405c23 pop r15                                                                                                                                                                                                                   |     
    0x00405c25 pop rbp                                                                                                                                                                                                                   |     
    0x00405c26 ret                                                                                                                                                                                                                       |     return rax;
                                                                                                                                                                                                                                         | }
