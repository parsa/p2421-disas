    ; assembly                                                                                                                                                                                                                           | /* r2dec pseudo code output */
                                                                                                                                                                                                                                         | /* bslmt_sluice.t/none @ 0x405b30 */
                                                                                                                                                                                                                                         | #include <stdint.h>
                                                                                                                                                                                                                                         |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil.createWithAllocator_EnterAndWaitUntilDoneJob__unsigned_long__BloombergLP::bslmt::ThreadAttributes_const__EnterAndWaitUntilDoneJob_const__BloombergLP::bslma::Allocator_ ()         | uint64_t method_int_BloombergLP::bslmt::ThreadUtil_createWithAllocator_EnterAndWaitUntilDoneJob_unsigned_long_BloombergLP::bslmt::ThreadAttributes_const_EnterAndWaitUntilDoneJob_const_BloombergLP::bslma::Allocator_ (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                         |     rcx = arg4;
                                                                                                                                                                                                                                         |     rdx = arg3;
                                                                                                                                                                                                                                         |     rsi = arg2;
                                                                                                                                                                                                                                         |     rdi = arg1;
                                                                                                                                                                                                                                         |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<EnterAndWaitUntilDoneJob>(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, EnterAndWaitUntilDoneJob const&, BloombergLP::bslma::Allocator*) */
    0x00405b30 push rbp                                                                                                                                                                                                                  |     
    0x00405b31 push r15                                                                                                                                                                                                                  |     
    0x00405b33 push r14                                                                                                                                                                                                                  |     
    0x00405b35 push r13                                                                                                                                                                                                                  |     
    0x00405b37 push r12                                                                                                                                                                                                                  |     
    0x00405b39 push rbx                                                                                                                                                                                                                  |     
    0x00405b3a push rax                                                                                                                                                                                                                  |     
    0x00405b3b mov r14, rcx                                                                                                                                                                                                              |     r14 = rcx;
    0x00405b3e mov r12, rdx                                                                                                                                                                                                              |     r12 = rdx;
    0x00405b41 mov r15, rsi                                                                                                                                                                                                              |     r15 = rsi;
    0x00405b44 mov qword [rsp], rdi                                                                                                                                                                                                      |     *(rsp) = rdi;
    0x00405b48 cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                              |     
                                                                                                                                                                                                                                         |     if (*((rsi + 0x38)) != 0x17) {
    0x00405b4d je 0x405b55                                                                                                                                                                                                               |         
    0x00405b4f mov r13, qword [r15 + 0x18]                                                                                                                                                                                               |         r13 = *((r15 + 0x18));
    0x00405b53 jmp 0x405b59                                                                                                                                                                                                              |         
                                                                                                                                                                                                                                         |     } else {
    0x00405b55 lea r13, [r15 + 0x18]                                                                                                                                                                                                     |         r13 = r15 + 0x18;
                                                                                                                                                                                                                                         |     }
    0x00405b59 mov rbp, qword [r15 + 0x30]                                                                                                                                                                                               |     rbp = *((r15 + 0x30));
    0x00405b5d test r14, r14                                                                                                                                                                                                             |     
                                                                                                                                                                                                                                         |     if (r14 == 0) {
    0x00405b60 jne 0x405b76                                                                                                                                                                                                              |         
    0x00405b62 mov r14, qword [rip + 0x23fe4f]                                                                                                                                                                                           |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00405b69 test r14, r14                                                                                                                                                                                                             |         
                                                                                                                                                                                                                                         |         if (r14 != 0) {
    0x00405b6c jne 0x405b76                                                                                                                                                                                                              |             goto label_0;
                                                                                                                                                                                                                                         |         }
    0x00405b6e call 0x42ca90                                                                                                                                                                                                             |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x00405b73 mov r14, rax                                                                                                                                                                                                              |         r14 = rax;
                                                                                                                                                                                                                                         |     }
                                                                                                                                                                                                                                         | label_0:
    0x00405b76 mov rax, qword [r14]                                                                                                                                                                                                      |     rax = *(r14);
    0x00405b79 mov esi, 0x58                                                                                                                                                                                                             |     esi = 0x58;
    0x00405b7e mov rdi, r14                                                                                                                                                                                                              |     rdi = r14;
    0x00405b81 call qword [rax + 0x10]                                                                                                                                                                                                   |     rax = uint64_t (*rax + 0x10)() ();
    0x00405b84 mov rbx, rax                                                                                                                                                                                                              |     rbx = rax;
    0x00405b87 mov qword [rax], 0x405ca0                                                                                                                                                                                                 |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_EnterAndWaitUntilDoneJob_.invokerFunction_void_;
    0x00405b8e movups xmm0, xmmword [r12]                                                                                                                                                                                                |     __asm ("movups xmm0, xmmword [r12]");
    0x00405b93 movups xmm1, xmmword [r12 + 0x10]                                                                                                                                                                                         |     __asm ("movups xmm1, xmmword [r12 + 0x10]");
    0x00405b99 movups xmmword [rax + 8], xmm0                                                                                                                                                                                            |     __asm ("movups xmmword [rax + 8], xmm0");
    0x00405b9d movups xmmword [rax + 0x18], xmm1                                                                                                                                                                                         |     __asm ("movups xmmword [rax + 0x18], xmm1");
    0x00405ba1 lea rdi, [rax + 0x28]                                                                                                                                                                                                     |     
    0x00405ba5 mov qword [rax + 0x28], 0                                                                                                                                                                                                 |     *((rax + 0x28)) = 0;
    0x00405bad mov qword [rax + 0x50], r14                                                                                                                                                                                               |     *((rax + 0x50)) = r14;
    0x00405bb1 movaps xmm0, xmmword [rip + 0x28618]                                                                                                                                                                                      |     xmm0 = .comment;
    0x00405bb8 movups xmmword [rax + 0x40], xmm0                                                                                                                                                                                         |     __asm ("movups xmmword [rax + 0x40], xmm0");
    0x00405bbc mov ecx, 0x42e6b3                                                                                                                                                                                                         |     
    0x00405bc1 mov rsi, r13                                                                                                                                                                                                              |     
    0x00405bc4 mov rdx, rbp                                                                                                                                                                                                              |     
    0x00405bc7 call 0x409770                                                                                                                                                                                                             |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rax + 0x28, r13, rbp, "string<...>::assign<Iter>(i,j): string too long");
    0x00405bcc mov edx, 0x4069e0                                                                                                                                                                                                         |     
    0x00405bd1 mov rdi, qword [rsp]                                                                                                                                                                                                      |     
    0x00405bd5 mov rsi, r15                                                                                                                                                                                                              |     
    0x00405bd8 mov rcx, rbx                                                                                                                                                                                                              |     
    0x00405bdb call 0x407410                                                                                                                                                                                                             |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x00405be0 mov ebp, eax                                                                                                                                                                                                              |     
    0x00405be2 test eax, eax                                                                                                                                                                                                             |     
                                                                                                                                                                                                                                         |     if (eax != 0) {
    0x00405be4 je 0x405c0f                                                                                                                                                                                                               |         
    0x00405be6 cmp qword [rbx + 0x48], 0x17                                                                                                                                                                                              |         
                                                                                                                                                                                                                                         |         if (*((rbx + 0x48)) != 0x17) {
    0x00405beb je 0x405bfb                                                                                                                                                                                                               |             
    0x00405bed mov rsi, qword [rbx + 0x28]                                                                                                                                                                                               |             rsi = *((rbx + 0x28));
    0x00405bf1 mov rdi, qword [rbx + 0x50]                                                                                                                                                                                               |             rdi = *((rbx + 0x50));
    0x00405bf5 mov rax, qword [rdi]                                                                                                                                                                                                      |             rax = *(rdi);
    0x00405bf8 call qword [rax + 0x18]                                                                                                                                                                                                   |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                         |         }
    0x00405bfb mov qword [rbx + 0x40], 0xffffffffffffffff                                                                                                                                                                                |         *((rbx + 0x40)) = 0xffffffffffffffff;
    0x00405c03 mov rax, qword [r14]                                                                                                                                                                                                      |         rax = *(r14);
    0x00405c06 mov rdi, r14                                                                                                                                                                                                              |         rdi = r14;
    0x00405c09 mov rsi, rbx                                                                                                                                                                                                              |         rsi = rbx;
    0x00405c0c call qword [rax + 0x18]                                                                                                                                                                                                   |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                         |     }
    0x00405c0f mov eax, ebp                                                                                                                                                                                                              |     eax = ebp;
    0x00405c11 add rsp, 8                                                                                                                                                                                                                |     
    0x00405c15 pop rbx                                                                                                                                                                                                                   |     
    0x00405c16 pop r12                                                                                                                                                                                                                   |     
    0x00405c18 pop r13                                                                                                                                                                                                                   |     
    0x00405c1a pop r14                                                                                                                                                                                                                   |     
    0x00405c1c pop r15                                                                                                                                                                                                                   |     
    0x00405c1e pop rbp                                                                                                                                                                                                                   |     
    0x00405c1f ret                                                                                                                                                                                                                       |     return rax;
                                                                                                                                                                                                                                         | }
