    ; assembly                                                                                                                                                                                                                                               | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                             | /* bdlcc_queue.t/assume @ 0x41ff30 */
                                                                                                                                                                                                                                                             | #include <stdint.h>
                                                                                                                                                                                                                                                             |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_QUEUE_TEST_CASE_MINUS_1.Producer__unsigned_long__BloombergLP::bslmt::ThreadAttributes_const__QUEUE_TEST_CASE_MINUS_1::Producer_const__BloombergLP::bslma::Allocator_ ()           | int64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_QUEUE_TEST_CASE_MINUS_1_Producer_unsigned_long_BloombergLP::bslmt::ThreadAttributes_const_QUEUE_TEST_CASE_MINUS_1::Producer_const_BloombergLP::bslma::Allocator_ (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                             |     rcx = arg4;
                                                                                                                                                                                                                                                             |     rdx = arg3;
                                                                                                                                                                                                                                                             |     rsi = arg2;
                                                                                                                                                                                                                                                             |     rdi = arg1;
                                                                                                                                                                                                                                                             |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<QUEUE_TEST_CASE_MINUS_1::Producer>(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, QUEUE_TEST_CASE_MINUS_1::Producer const&, BloombergLP::bslma::Allocator*) */
    0x0041ff30 push rbp                                                                                                                                                                                                                                      |     
    0x0041ff31 push r15                                                                                                                                                                                                                                      |     
    0x0041ff33 push r14                                                                                                                                                                                                                                      |     
    0x0041ff35 push r13                                                                                                                                                                                                                                      |     
    0x0041ff37 push r12                                                                                                                                                                                                                                      |     
    0x0041ff39 push rbx                                                                                                                                                                                                                                      |     
    0x0041ff3a push rax                                                                                                                                                                                                                                      |     
    0x0041ff3b mov r14, rcx                                                                                                                                                                                                                                  |     r14 = rcx;
    0x0041ff3e mov r12, rdx                                                                                                                                                                                                                                  |     r12 = rdx;
    0x0041ff41 mov r15, rsi                                                                                                                                                                                                                                  |     r15 = rsi;
    0x0041ff44 mov qword [rsp], rdi                                                                                                                                                                                                                          |     *(rsp) = rdi;
    0x0041ff48 mov r13, qword [rsi + 0x30]                                                                                                                                                                                                                   |     r13 = *((rsi + 0x30));
    0x0041ff4c cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                  |     
                                                                                                                                                                                                                                                             |     if (*((rsi + 0x38)) != 0x17) {
    0x0041ff51 je 0x41ff59                                                                                                                                                                                                                                   |         
    0x0041ff53 mov rbp, qword [r15 + 0x18]                                                                                                                                                                                                                   |         rbp = *((r15 + 0x18));
    0x0041ff57 jmp 0x41ff5d                                                                                                                                                                                                                                  |         
                                                                                                                                                                                                                                                             |     } else {
    0x0041ff59 lea rbp, [r15 + 0x18]                                                                                                                                                                                                                         |         rbp = r15 + 0x18;
                                                                                                                                                                                                                                                             |     }
    0x0041ff5d mov rax, qword [r14]                                                                                                                                                                                                                          |     rax = *(r14);
    0x0041ff60 mov esi, 0x48                                                                                                                                                                                                                                 |     esi = 0x48;
    0x0041ff65 mov rdi, r14                                                                                                                                                                                                                                  |     rdi = r14;
    0x0041ff68 call qword [rax + 0x10]                                                                                                                                                                                                                       |     rax = uint64_t (*rax + 0x10)() ();
    0x0041ff6b mov rbx, rax                                                                                                                                                                                                                                  |     rbx = rax;
    0x0041ff6e mov qword [rax], 0x420080                                                                                                                                                                                                                     |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_QUEUE_TEST_CASE_MINUS_1::Producer_.invokerFunction_void_;
    0x0041ff75 movups xmm0, xmmword [r12]                                                                                                                                                                                                                    |     __asm ("movups xmm0, xmmword [r12]");
    0x0041ff7a movups xmmword [rax + 8], xmm0                                                                                                                                                                                                                |     __asm ("movups xmmword [rax + 8], xmm0");
    0x0041ff7e lea rdi, [rax + 0x18]                                                                                                                                                                                                                         |     
    0x0041ff82 mov qword [rax + 0x18], 0                                                                                                                                                                                                                     |     *((rax + 0x18)) = 0;
    0x0041ff8a mov qword [rax + 0x40], r14                                                                                                                                                                                                                   |     *((rax + 0x40)) = r14;
    0x0041ff8e movaps xmm0, xmmword [rip + 0x28c3b]                                                                                                                                                                                                          |     xmm0 = .comment;
    0x0041ff95 movups xmmword [rax + 0x30], xmm0                                                                                                                                                                                                             |     __asm ("movups xmmword [rax + 0x30], xmm0");
    0x0041ff99 mov ecx, 0x449f1d                                                                                                                                                                                                                             |     
    0x0041ff9e mov rsi, rbp                                                                                                                                                                                                                                  |     
    0x0041ffa1 mov rdx, r13                                                                                                                                                                                                                                  |     
    0x0041ffa4 call 0x426630                                                                                                                                                                                                                                 |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rax + 0x18, rbp, r13, "string<...>::assign<Iter>(i,j): string too long");
    0x0041ffa9 mov edx, 0x423030                                                                                                                                                                                                                             |     
    0x0041ffae mov rdi, qword [rsp]                                                                                                                                                                                                                          |     
    0x0041ffb2 mov rsi, r15                                                                                                                                                                                                                                  |     
    0x0041ffb5 mov rcx, rbx                                                                                                                                                                                                                                  |     
    0x0041ffb8 call 0x423770                                                                                                                                                                                                                                 |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0041ffbd mov ebp, eax                                                                                                                                                                                                                                  |     
    0x0041ffbf test eax, eax                                                                                                                                                                                                                                 |     
                                                                                                                                                                                                                                                             |     if (eax != 0) {
    0x0041ffc1 je 0x41ffec                                                                                                                                                                                                                                   |         
    0x0041ffc3 cmp qword [rbx + 0x38], 0x17                                                                                                                                                                                                                  |         
                                                                                                                                                                                                                                                             |         if (*((rbx + 0x38)) != 0x17) {
    0x0041ffc8 je 0x41ffd8                                                                                                                                                                                                                                   |             
    0x0041ffca mov rsi, qword [rbx + 0x18]                                                                                                                                                                                                                   |             rsi = *((rbx + 0x18));
    0x0041ffce mov rdi, qword [rbx + 0x40]                                                                                                                                                                                                                   |             rdi = *((rbx + 0x40));
    0x0041ffd2 mov rax, qword [rdi]                                                                                                                                                                                                                          |             rax = *(rdi);
    0x0041ffd5 call qword [rax + 0x18]                                                                                                                                                                                                                       |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                             |         }
    0x0041ffd8 mov qword [rbx + 0x30], 0xffffffffffffffff                                                                                                                                                                                                    |         *((rbx + 0x30)) = 0xffffffffffffffff;
    0x0041ffe0 mov rax, qword [r14]                                                                                                                                                                                                                          |         rax = *(r14);
    0x0041ffe3 mov rdi, r14                                                                                                                                                                                                                                  |         rdi = r14;
    0x0041ffe6 mov rsi, rbx                                                                                                                                                                                                                                  |         rsi = rbx;
    0x0041ffe9 call qword [rax + 0x18]                                                                                                                                                                                                                       |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                             |     }
    0x0041ffec mov eax, ebp                                                                                                                                                                                                                                  |     eax = ebp;
    0x0041ffee add rsp, 8                                                                                                                                                                                                                                    |     
    0x0041fff2 pop rbx                                                                                                                                                                                                                                       |     
    0x0041fff3 pop r12                                                                                                                                                                                                                                       |     
    0x0041fff5 pop r13                                                                                                                                                                                                                                       |     
    0x0041fff7 pop r14                                                                                                                                                                                                                                       |     
    0x0041fff9 pop r15                                                                                                                                                                                                                                       |     
    0x0041fffb pop rbp                                                                                                                                                                                                                                       |     
    0x0041fffc ret                                                                                                                                                                                                                                           |     return rax;
                                                                                                                                                                                                                                                             | }
