    ; assembly                                                                                                                                                                                                                                               | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                             | /* bdlcc_queue.t/none @ 0x41fc30 */
                                                                                                                                                                                                                                                             | #include <stdint.h>
                                                                                                                                                                                                                                                             |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_QUEUE_TEST_CASE_MINUS_1.Consumer__unsigned_long__BloombergLP::bslmt::ThreadAttributes_const__QUEUE_TEST_CASE_MINUS_1::Consumer_const__BloombergLP::bslma::Allocator_ ()           | uint64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_QUEUE_TEST_CASE_MINUS_1_Consumer_unsigned_long_BloombergLP::bslmt::ThreadAttributes_const_QUEUE_TEST_CASE_MINUS_1::Consumer_const_BloombergLP::bslma::Allocator_ (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                             |     rcx = arg4;
                                                                                                                                                                                                                                                             |     rdx = arg3;
                                                                                                                                                                                                                                                             |     rsi = arg2;
                                                                                                                                                                                                                                                             |     rdi = arg1;
                                                                                                                                                                                                                                                             |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<QUEUE_TEST_CASE_MINUS_1::Consumer>(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, QUEUE_TEST_CASE_MINUS_1::Consumer const&, BloombergLP::bslma::Allocator*) */
    0x0041fc30 push rbp                                                                                                                                                                                                                                      |     
    0x0041fc31 push r15                                                                                                                                                                                                                                      |     
    0x0041fc33 push r14                                                                                                                                                                                                                                      |     
    0x0041fc35 push r13                                                                                                                                                                                                                                      |     
    0x0041fc37 push r12                                                                                                                                                                                                                                      |     
    0x0041fc39 push rbx                                                                                                                                                                                                                                      |     
    0x0041fc3a push rax                                                                                                                                                                                                                                      |     
    0x0041fc3b mov r14, rcx                                                                                                                                                                                                                                  |     r14 = rcx;
    0x0041fc3e mov r12, rdx                                                                                                                                                                                                                                  |     r12 = rdx;
    0x0041fc41 mov r15, rsi                                                                                                                                                                                                                                  |     r15 = rsi;
    0x0041fc44 mov qword [rsp], rdi                                                                                                                                                                                                                          |     *(rsp) = rdi;
    0x0041fc48 cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                  |     
                                                                                                                                                                                                                                                             |     if (*((rsi + 0x38)) != 0x17) {
    0x0041fc4d je 0x41fc55                                                                                                                                                                                                                                   |         
    0x0041fc4f mov r13, qword [r15 + 0x18]                                                                                                                                                                                                                   |         r13 = *((r15 + 0x18));
    0x0041fc53 jmp 0x41fc59                                                                                                                                                                                                                                  |         
                                                                                                                                                                                                                                                             |     } else {
    0x0041fc55 lea r13, [r15 + 0x18]                                                                                                                                                                                                                         |         r13 = r15 + 0x18;
                                                                                                                                                                                                                                                             |     }
    0x0041fc59 mov rbp, qword [r15 + 0x30]                                                                                                                                                                                                                   |     rbp = *((r15 + 0x30));
    0x0041fc5d test r14, r14                                                                                                                                                                                                                                 |     
                                                                                                                                                                                                                                                             |     if (r14 == 0) {
    0x0041fc60 jne 0x41fc76                                                                                                                                                                                                                                  |         
    0x0041fc62 mov r14, qword [rip + 0x247fa7]                                                                                                                                                                                                               |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0041fc69 test r14, r14                                                                                                                                                                                                                                 |         
                                                                                                                                                                                                                                                             |         if (r14 != 0) {
    0x0041fc6c jne 0x41fc76                                                                                                                                                                                                                                  |             goto label_0;
                                                                                                                                                                                                                                                             |         }
    0x0041fc6e call 0x421f80                                                                                                                                                                                                                                 |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x0041fc73 mov r14, rax                                                                                                                                                                                                                                  |         r14 = rax;
                                                                                                                                                                                                                                                             |     }
                                                                                                                                                                                                                                                             | label_0:
    0x0041fc76 mov rax, qword [r14]                                                                                                                                                                                                                          |     rax = *(r14);
    0x0041fc79 mov esi, 0x40                                                                                                                                                                                                                                 |     esi = 0x40;
    0x0041fc7e mov rdi, r14                                                                                                                                                                                                                                  |     rdi = r14;
    0x0041fc81 call qword [rax + 0x10]                                                                                                                                                                                                                       |     rax = uint64_t (*rax + 0x10)() ();
    0x0041fc84 mov rbx, rax                                                                                                                                                                                                                                  |     rbx = rax;
    0x0041fc87 mov qword [rax], 0x41fd90                                                                                                                                                                                                                     |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_QUEUE_TEST_CASE_MINUS_1::Consumer_.invokerFunction_void_;
    0x0041fc8e mov rax, qword [r12]                                                                                                                                                                                                                          |     rax = *(r12);
    0x0041fc92 mov qword [rbx + 8], rax                                                                                                                                                                                                                      |     *((rbx + 8)) = rax;
    0x0041fc96 lea rdi, [rbx + 0x10]                                                                                                                                                                                                                         |     
    0x0041fc9a mov qword [rbx + 0x10], 0                                                                                                                                                                                                                     |     *((rbx + 0x10)) = 0;
    0x0041fca2 mov qword [rbx + 0x38], r14                                                                                                                                                                                                                   |     *((rbx + 0x38)) = r14;
    0x0041fca6 movaps xmm0, xmmword [rip + 0x29073]                                                                                                                                                                                                          |     xmm0 = .comment;
    0x0041fcad movups xmmword [rbx + 0x28], xmm0                                                                                                                                                                                                             |     __asm ("movups xmmword [rbx + 0x28], xmm0");
    0x0041fcb1 mov ecx, 0x44a06b                                                                                                                                                                                                                             |     
    0x0041fcb6 mov rsi, r13                                                                                                                                                                                                                                  |     
    0x0041fcb9 mov rdx, rbp                                                                                                                                                                                                                                  |     
    0x0041fcbc call 0x4267a0                                                                                                                                                                                                                                 |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x10, r13, rbp, "string<...>::assign<Iter>(i,j): string too long");
    0x0041fcc1 mov edx, 0x423180                                                                                                                                                                                                                             |     
    0x0041fcc6 mov rdi, qword [rsp]                                                                                                                                                                                                                          |     
    0x0041fcca mov rsi, r15                                                                                                                                                                                                                                  |     
    0x0041fccd mov rcx, rbx                                                                                                                                                                                                                                  |     
    0x0041fcd0 call 0x4238c0                                                                                                                                                                                                                                 |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0041fcd5 mov ebp, eax                                                                                                                                                                                                                                  |     
    0x0041fcd7 test eax, eax                                                                                                                                                                                                                                 |     
                                                                                                                                                                                                                                                             |     if (eax != 0) {
    0x0041fcd9 je 0x41fd04                                                                                                                                                                                                                                   |         
    0x0041fcdb cmp qword [rbx + 0x30], 0x17                                                                                                                                                                                                                  |         
                                                                                                                                                                                                                                                             |         if (*((rbx + 0x30)) != 0x17) {
    0x0041fce0 je 0x41fcf0                                                                                                                                                                                                                                   |             
    0x0041fce2 mov rsi, qword [rbx + 0x10]                                                                                                                                                                                                                   |             rsi = *((rbx + 0x10));
    0x0041fce6 mov rdi, qword [rbx + 0x38]                                                                                                                                                                                                                   |             rdi = *((rbx + 0x38));
    0x0041fcea mov rax, qword [rdi]                                                                                                                                                                                                                          |             rax = *(rdi);
    0x0041fced call qword [rax + 0x18]                                                                                                                                                                                                                       |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                             |         }
    0x0041fcf0 mov qword [rbx + 0x28], 0xffffffffffffffff                                                                                                                                                                                                    |         *((rbx + 0x28)) = 0xffffffffffffffff;
    0x0041fcf8 mov rax, qword [r14]                                                                                                                                                                                                                          |         rax = *(r14);
    0x0041fcfb mov rdi, r14                                                                                                                                                                                                                                  |         rdi = r14;
    0x0041fcfe mov rsi, rbx                                                                                                                                                                                                                                  |         rsi = rbx;
    0x0041fd01 call qword [rax + 0x18]                                                                                                                                                                                                                       |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                             |     }
    0x0041fd04 mov eax, ebp                                                                                                                                                                                                                                  |     eax = ebp;
    0x0041fd06 add rsp, 8                                                                                                                                                                                                                                    |     
    0x0041fd0a pop rbx                                                                                                                                                                                                                                       |     
    0x0041fd0b pop r12                                                                                                                                                                                                                                       |     
    0x0041fd0d pop r13                                                                                                                                                                                                                                       |     
    0x0041fd0f pop r14                                                                                                                                                                                                                                       |     
    0x0041fd11 pop r15                                                                                                                                                                                                                                       |     
    0x0041fd13 pop rbp                                                                                                                                                                                                                                       |     
    0x0041fd14 ret                                                                                                                                                                                                                                           |     return rax;
                                                                                                                                                                                                                                                             | }
