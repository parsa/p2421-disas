    ; assembly                                                                                                                                                                                                                                               | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                             | /* bdlcc_queue.t/assume @ 0x41fb40 */
                                                                                                                                                                                                                                                             | #include <stdint.h>
                                                                                                                                                                                                                                                             |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_QUEUE_TEST_CASE_MINUS_1.Consumer__unsigned_long__BloombergLP::bslmt::ThreadAttributes_const__QUEUE_TEST_CASE_MINUS_1::Consumer_const__BloombergLP::bslma::Allocator_ ()           | int64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_QUEUE_TEST_CASE_MINUS_1_Consumer_unsigned_long_BloombergLP::bslmt::ThreadAttributes_const_QUEUE_TEST_CASE_MINUS_1::Consumer_const_BloombergLP::bslma::Allocator_ (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                             |     rcx = arg4;
                                                                                                                                                                                                                                                             |     rdx = arg3;
                                                                                                                                                                                                                                                             |     rsi = arg2;
                                                                                                                                                                                                                                                             |     rdi = arg1;
                                                                                                                                                                                                                                                             |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<QUEUE_TEST_CASE_MINUS_1::Consumer>(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, QUEUE_TEST_CASE_MINUS_1::Consumer const&, BloombergLP::bslma::Allocator*) */
    0x0041fb40 push rbp                                                                                                                                                                                                                                      |     
    0x0041fb41 push r15                                                                                                                                                                                                                                      |     
    0x0041fb43 push r14                                                                                                                                                                                                                                      |     
    0x0041fb45 push r13                                                                                                                                                                                                                                      |     
    0x0041fb47 push r12                                                                                                                                                                                                                                      |     
    0x0041fb49 push rbx                                                                                                                                                                                                                                      |     
    0x0041fb4a push rax                                                                                                                                                                                                                                      |     
    0x0041fb4b mov r14, rcx                                                                                                                                                                                                                                  |     r14 = rcx;
    0x0041fb4e mov r12, rdx                                                                                                                                                                                                                                  |     r12 = rdx;
    0x0041fb51 mov r15, rsi                                                                                                                                                                                                                                  |     r15 = rsi;
    0x0041fb54 mov qword [rsp], rdi                                                                                                                                                                                                                          |     *(rsp) = rdi;
    0x0041fb58 mov r13, qword [rsi + 0x30]                                                                                                                                                                                                                   |     r13 = *((rsi + 0x30));
    0x0041fb5c cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                  |     
                                                                                                                                                                                                                                                             |     if (*((rsi + 0x38)) != 0x17) {
    0x0041fb61 je 0x41fb69                                                                                                                                                                                                                                   |         
    0x0041fb63 mov rbp, qword [r15 + 0x18]                                                                                                                                                                                                                   |         rbp = *((r15 + 0x18));
    0x0041fb67 jmp 0x41fb6d                                                                                                                                                                                                                                  |         
                                                                                                                                                                                                                                                             |     } else {
    0x0041fb69 lea rbp, [r15 + 0x18]                                                                                                                                                                                                                         |         rbp = r15 + 0x18;
                                                                                                                                                                                                                                                             |     }
    0x0041fb6d mov rax, qword [r14]                                                                                                                                                                                                                          |     rax = *(r14);
    0x0041fb70 mov esi, 0x40                                                                                                                                                                                                                                 |     esi = 0x40;
    0x0041fb75 mov rdi, r14                                                                                                                                                                                                                                  |     rdi = r14;
    0x0041fb78 call qword [rax + 0x10]                                                                                                                                                                                                                       |     rax = uint64_t (*rax + 0x10)() ();
    0x0041fb7b mov rbx, rax                                                                                                                                                                                                                                  |     rbx = rax;
    0x0041fb7e mov qword [rax], 0x41fc90                                                                                                                                                                                                                     |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_QUEUE_TEST_CASE_MINUS_1::Consumer_.invokerFunction_void_;
    0x0041fb85 mov rax, qword [r12]                                                                                                                                                                                                                          |     rax = *(r12);
    0x0041fb89 mov qword [rbx + 8], rax                                                                                                                                                                                                                      |     *((rbx + 8)) = rax;
    0x0041fb8d lea rdi, [rbx + 0x10]                                                                                                                                                                                                                         |     
    0x0041fb91 mov qword [rbx + 0x10], 0                                                                                                                                                                                                                     |     *((rbx + 0x10)) = 0;
    0x0041fb99 mov qword [rbx + 0x38], r14                                                                                                                                                                                                                   |     *((rbx + 0x38)) = r14;
    0x0041fb9d movaps xmm0, xmmword [rip + 0x2902c]                                                                                                                                                                                                          |     xmm0 = .comment;
    0x0041fba4 movups xmmword [rbx + 0x28], xmm0                                                                                                                                                                                                             |     __asm ("movups xmmword [rbx + 0x28], xmm0");
    0x0041fba8 mov ecx, 0x449f1d                                                                                                                                                                                                                             |     
    0x0041fbad mov rsi, rbp                                                                                                                                                                                                                                  |     
    0x0041fbb0 mov rdx, r13                                                                                                                                                                                                                                  |     
    0x0041fbb3 call 0x426630                                                                                                                                                                                                                                 |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x10, rbp, r13, "string<...>::assign<Iter>(i,j): string too long");
    0x0041fbb8 mov edx, 0x423030                                                                                                                                                                                                                             |     
    0x0041fbbd mov rdi, qword [rsp]                                                                                                                                                                                                                          |     
    0x0041fbc1 mov rsi, r15                                                                                                                                                                                                                                  |     
    0x0041fbc4 mov rcx, rbx                                                                                                                                                                                                                                  |     
    0x0041fbc7 call 0x423770                                                                                                                                                                                                                                 |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0041fbcc mov ebp, eax                                                                                                                                                                                                                                  |     
    0x0041fbce test eax, eax                                                                                                                                                                                                                                 |     
                                                                                                                                                                                                                                                             |     if (eax != 0) {
    0x0041fbd0 je 0x41fbfb                                                                                                                                                                                                                                   |         
    0x0041fbd2 cmp qword [rbx + 0x30], 0x17                                                                                                                                                                                                                  |         
                                                                                                                                                                                                                                                             |         if (*((rbx + 0x30)) != 0x17) {
    0x0041fbd7 je 0x41fbe7                                                                                                                                                                                                                                   |             
    0x0041fbd9 mov rsi, qword [rbx + 0x10]                                                                                                                                                                                                                   |             rsi = *((rbx + 0x10));
    0x0041fbdd mov rdi, qword [rbx + 0x38]                                                                                                                                                                                                                   |             rdi = *((rbx + 0x38));
    0x0041fbe1 mov rax, qword [rdi]                                                                                                                                                                                                                          |             rax = *(rdi);
    0x0041fbe4 call qword [rax + 0x18]                                                                                                                                                                                                                       |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                             |         }
    0x0041fbe7 mov qword [rbx + 0x28], 0xffffffffffffffff                                                                                                                                                                                                    |         *((rbx + 0x28)) = 0xffffffffffffffff;
    0x0041fbef mov rax, qword [r14]                                                                                                                                                                                                                          |         rax = *(r14);
    0x0041fbf2 mov rdi, r14                                                                                                                                                                                                                                  |         rdi = r14;
    0x0041fbf5 mov rsi, rbx                                                                                                                                                                                                                                  |         rsi = rbx;
    0x0041fbf8 call qword [rax + 0x18]                                                                                                                                                                                                                       |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                             |     }
    0x0041fbfb mov eax, ebp                                                                                                                                                                                                                                  |     eax = ebp;
    0x0041fbfd add rsp, 8                                                                                                                                                                                                                                    |     
    0x0041fc01 pop rbx                                                                                                                                                                                                                                       |     
    0x0041fc02 pop r12                                                                                                                                                                                                                                       |     
    0x0041fc04 pop r13                                                                                                                                                                                                                                       |     
    0x0041fc06 pop r14                                                                                                                                                                                                                                       |     
    0x0041fc08 pop r15                                                                                                                                                                                                                                       |     
    0x0041fc0a pop rbp                                                                                                                                                                                                                                       |     
    0x0041fc0b ret                                                                                                                                                                                                                                           |     return rax;
                                                                                                                                                                                                                                                             | }
