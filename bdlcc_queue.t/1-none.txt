    ; assembly                                                                                                                                                                                                                                           | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                         | /* bdlcc_queue.t/none @ 0x420030 */
                                                                                                                                                                                                                                                         | #include <stdint.h>
                                                                                                                                                                                                                                                         |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_QUEUE_TEST_CASE_MINUS_1.Producer__unsigned_long__BloombergLP::bslmt::ThreadAttributes_const__QUEUE_TEST_CASE_MINUS_1::Producer_const__BloombergLP::bslma::Allocator_ ()       | uint64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_QUEUE_TEST_CASE_MINUS_1_Producer_unsigned_long_BloombergLP::bslmt::ThreadAttributes_const_QUEUE_TEST_CASE_MINUS_1::Producer_const_BloombergLP::bslma::Allocator_ (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                         |     rcx = arg4;
                                                                                                                                                                                                                                                         |     rdx = arg3;
                                                                                                                                                                                                                                                         |     rsi = arg2;
                                                                                                                                                                                                                                                         |     rdi = arg1;
                                                                                                                                                                                                                                                         |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<QUEUE_TEST_CASE_MINUS_1::Producer>(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, QUEUE_TEST_CASE_MINUS_1::Producer const&, BloombergLP::bslma::Allocator*) */
    0x00420030 push rbp                                                                                                                                                                                                                                  |     
    0x00420031 push r15                                                                                                                                                                                                                                  |     
    0x00420033 push r14                                                                                                                                                                                                                                  |     
    0x00420035 push r13                                                                                                                                                                                                                                  |     
    0x00420037 push r12                                                                                                                                                                                                                                  |     
    0x00420039 push rbx                                                                                                                                                                                                                                  |     
    0x0042003a push rax                                                                                                                                                                                                                                  |     
    0x0042003b mov r14, rcx                                                                                                                                                                                                                              |     r14 = rcx;
    0x0042003e mov r12, rdx                                                                                                                                                                                                                              |     r12 = rdx;
    0x00420041 mov r15, rsi                                                                                                                                                                                                                              |     r15 = rsi;
    0x00420044 mov qword [rsp], rdi                                                                                                                                                                                                                      |     *(rsp) = rdi;
    0x00420048 cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                              |     
                                                                                                                                                                                                                                                         |     if (*((rsi + 0x38)) != 0x17) {
    0x0042004d je 0x420055                                                                                                                                                                                                                               |         
    0x0042004f mov r13, qword [r15 + 0x18]                                                                                                                                                                                                               |         r13 = *((r15 + 0x18));
    0x00420053 jmp 0x420059                                                                                                                                                                                                                              |         
                                                                                                                                                                                                                                                         |     } else {
    0x00420055 lea r13, [r15 + 0x18]                                                                                                                                                                                                                     |         r13 = r15 + 0x18;
                                                                                                                                                                                                                                                         |     }
    0x00420059 mov rbp, qword [r15 + 0x30]                                                                                                                                                                                                               |     rbp = *((r15 + 0x30));
    0x0042005d test r14, r14                                                                                                                                                                                                                             |     
                                                                                                                                                                                                                                                         |     if (r14 == 0) {
    0x00420060 jne 0x420076                                                                                                                                                                                                                              |         
    0x00420062 mov r14, qword [rip + 0x247ba7]                                                                                                                                                                                                           |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00420069 test r14, r14                                                                                                                                                                                                                             |         
                                                                                                                                                                                                                                                         |         if (r14 != 0) {
    0x0042006c jne 0x420076                                                                                                                                                                                                                              |             goto label_0;
                                                                                                                                                                                                                                                         |         }
    0x0042006e call 0x421f80                                                                                                                                                                                                                             |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x00420073 mov r14, rax                                                                                                                                                                                                                              |         r14 = rax;
                                                                                                                                                                                                                                                         |     }
                                                                                                                                                                                                                                                         | label_0:
    0x00420076 mov rax, qword [r14]                                                                                                                                                                                                                      |     rax = *(r14);
    0x00420079 mov esi, 0x48                                                                                                                                                                                                                             |     esi = 0x48;
    0x0042007e mov rdi, r14                                                                                                                                                                                                                              |     rdi = r14;
    0x00420081 call qword [rax + 0x10]                                                                                                                                                                                                                   |     rax = uint64_t (*rax + 0x10)() ();
    0x00420084 mov rbx, rax                                                                                                                                                                                                                              |     rbx = rax;
    0x00420087 mov qword [rax], 0x420190                                                                                                                                                                                                                 |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_QUEUE_TEST_CASE_MINUS_1::Producer_.invokerFunction_void_;
    0x0042008e movups xmm0, xmmword [r12]                                                                                                                                                                                                                |     __asm ("movups xmm0, xmmword [r12]");
    0x00420093 movups xmmword [rax + 8], xmm0                                                                                                                                                                                                            |     __asm ("movups xmmword [rax + 8], xmm0");
    0x00420097 lea rdi, [rax + 0x18]                                                                                                                                                                                                                     |     
    0x0042009b mov qword [rax + 0x18], 0                                                                                                                                                                                                                 |     *((rax + 0x18)) = 0;
    0x004200a3 mov qword [rax + 0x40], r14                                                                                                                                                                                                               |     *((rax + 0x40)) = r14;
    0x004200a7 movaps xmm0, xmmword [rip + 0x28c72]                                                                                                                                                                                                      |     xmm0 = .comment;
    0x004200ae movups xmmword [rax + 0x30], xmm0                                                                                                                                                                                                         |     __asm ("movups xmmword [rax + 0x30], xmm0");
    0x004200b2 mov ecx, 0x44a06b                                                                                                                                                                                                                         |     
    0x004200b7 mov rsi, r13                                                                                                                                                                                                                              |     
    0x004200ba mov rdx, rbp                                                                                                                                                                                                                              |     
    0x004200bd call 0x4267a0                                                                                                                                                                                                                             |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rax + 0x18, r13, rbp, "string<...>::assign<Iter>(i,j): string too long");
    0x004200c2 mov edx, 0x423180                                                                                                                                                                                                                         |     
    0x004200c7 mov rdi, qword [rsp]                                                                                                                                                                                                                      |     
    0x004200cb mov rsi, r15                                                                                                                                                                                                                              |     
    0x004200ce mov rcx, rbx                                                                                                                                                                                                                              |     
    0x004200d1 call 0x4238c0                                                                                                                                                                                                                             |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x004200d6 mov ebp, eax                                                                                                                                                                                                                              |     
    0x004200d8 test eax, eax                                                                                                                                                                                                                             |     
                                                                                                                                                                                                                                                         |     if (eax != 0) {
    0x004200da je 0x420105                                                                                                                                                                                                                               |         
    0x004200dc cmp qword [rbx + 0x38], 0x17                                                                                                                                                                                                              |         
                                                                                                                                                                                                                                                         |         if (*((rbx + 0x38)) != 0x17) {
    0x004200e1 je 0x4200f1                                                                                                                                                                                                                               |             
    0x004200e3 mov rsi, qword [rbx + 0x18]                                                                                                                                                                                                               |             rsi = *((rbx + 0x18));
    0x004200e7 mov rdi, qword [rbx + 0x40]                                                                                                                                                                                                               |             rdi = *((rbx + 0x40));
    0x004200eb mov rax, qword [rdi]                                                                                                                                                                                                                      |             rax = *(rdi);
    0x004200ee call qword [rax + 0x18]                                                                                                                                                                                                                   |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                         |         }
    0x004200f1 mov qword [rbx + 0x30], 0xffffffffffffffff                                                                                                                                                                                                |         *((rbx + 0x30)) = 0xffffffffffffffff;
    0x004200f9 mov rax, qword [r14]                                                                                                                                                                                                                      |         rax = *(r14);
    0x004200fc mov rdi, r14                                                                                                                                                                                                                              |         rdi = r14;
    0x004200ff mov rsi, rbx                                                                                                                                                                                                                              |         rsi = rbx;
    0x00420102 call qword [rax + 0x18]                                                                                                                                                                                                                   |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                         |     }
    0x00420105 mov eax, ebp                                                                                                                                                                                                                              |     eax = ebp;
    0x00420107 add rsp, 8                                                                                                                                                                                                                                |     
    0x0042010b pop rbx                                                                                                                                                                                                                                   |     
    0x0042010c pop r12                                                                                                                                                                                                                                   |     
    0x0042010e pop r13                                                                                                                                                                                                                                   |     
    0x00420110 pop r14                                                                                                                                                                                                                                   |     
    0x00420112 pop r15                                                                                                                                                                                                                                   |     
    0x00420114 pop rbp                                                                                                                                                                                                                                   |     
    0x00420115 ret                                                                                                                                                                                                                                       |     return rax;
                                                                                                                                                                                                                                                         | }
