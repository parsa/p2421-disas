    ; assembly                                                                                                                                                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                 | /* bdlde_crc32c.t/none @ 0x40ccb0 */
                                                                                                                                                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                                                                                                                                                 |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____bsl::vector_unsigned_int__bsl::allocator_unsigned_int_____bsl::vector_char__bsl::allocator_char____const__BloombergLP::bslmt::Barr ()         | uint64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf_Nil_void_bsl::vector_unsigned_int_bsl::allocator_unsigned_int_bsl::vector_char_bsl::allocator_char_const_BloombergLP::bslmt::Barr (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                 |     int64_t var_8h;
                                                                                                                                                                                                                                                                                 |     int64_t var_10h;
                                                                                                                                                                                                                                                                                 |     rcx = arg4;
                                                                                                                                                                                                                                                                                 |     rdx = arg3;
                                                                                                                                                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                                                                                                                                                 |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(bsl::vector<unsigned int, bsl::allocator<unsigned int> >*, bsl::vector<char*, bsl::allocator<char*> > const&, BloombergLP::bslmt::Barrier*, bool), BloombergLP::bdlf::Bind_BoundTuple4<bsl::vector<unsigned int, bsl::allocator<unsigned int> >*, bsl::vector<char*, bsl::allocator<char*> >, BloombergLP::bslmt::Barrier*, bool> > >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(bsl::vector<unsigned int, bsl::allocator<unsigned int> >*, bsl::vector<char*, bsl::allocator<char*> > const&, BloombergLP::bslmt::Barrier*, bool), BloombergLP::bdlf::Bind_BoundTuple4<bsl::vector<unsigned int, bsl::allocator<unsigned int> >*, bsl::vector<char*, bsl::allocator<char*> >, BloombergLP::bslmt::Barrier*, bool> > const&, BloombergLP::bslma::Allocator*) */
    0x0040ccb0 push rbp                                                                                                                                                                                                                                                          |     
    0x0040ccb1 push r15                                                                                                                                                                                                                                                          |     
    0x0040ccb3 push r14                                                                                                                                                                                                                                                          |     
    0x0040ccb5 push r13                                                                                                                                                                                                                                                          |     
    0x0040ccb7 push r12                                                                                                                                                                                                                                                          |     
    0x0040ccb9 push rbx                                                                                                                                                                                                                                                          |     
    0x0040ccba sub rsp, 0x18                                                                                                                                                                                                                                                     |     
    0x0040ccbe mov r14, rcx                                                                                                                                                                                                                                                      |     r14 = rcx;
    0x0040ccc1 mov r12, rdx                                                                                                                                                                                                                                                      |     r12 = rdx;
    0x0040ccc4 mov r15, rsi                                                                                                                                                                                                                                                      |     r15 = rsi;
    0x0040ccc7 mov qword [rsp + 8], rdi                                                                                                                                                                                                                                          |     *((rsp + 8)) = rdi;
    0x0040cccc cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                      |     
                                                                                                                                                                                                                                                                                 |     if (*((rsi + 0x38)) != 0x17) {
    0x0040ccd1 je 0x40ccd9                                                                                                                                                                                                                                                       |         
    0x0040ccd3 mov r13, qword [r15 + 0x18]                                                                                                                                                                                                                                       |         r13 = *((r15 + 0x18));
    0x0040ccd7 jmp 0x40ccdd                                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |     } else {
    0x0040ccd9 lea r13, [r15 + 0x18]                                                                                                                                                                                                                                             |         r13 = r15 + 0x18;
                                                                                                                                                                                                                                                                                 |     }
    0x0040ccdd mov rbp, qword [r15 + 0x30]                                                                                                                                                                                                                                       |     rbp = *((r15 + 0x30));
    0x0040cce1 test r14, r14                                                                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                                                                 |     if (r14 == 0) {
    0x0040cce4 jne 0x40ccfa                                                                                                                                                                                                                                                      |         
    0x0040cce6 mov r14, qword [rip + 0x249013]                                                                                                                                                                                                                                   |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040cced test r14, r14                                                                                                                                                                                                                                                     |         
                                                                                                                                                                                                                                                                                 |         if (r14 != 0) {
    0x0040ccf0 jne 0x40ccfa                                                                                                                                                                                                                                                      |             goto label_0;
                                                                                                                                                                                                                                                                                 |         }
    0x0040ccf2 call 0x40fc60                                                                                                                                                                                                                                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x0040ccf7 mov r14, rax                                                                                                                                                                                                                                                      |         r14 = rax;
                                                                                                                                                                                                                                                                                 |     }
                                                                                                                                                                                                                                                                                 | label_0:
    0x0040ccfa mov rax, qword [r14]                                                                                                                                                                                                                                              |     rax = *(r14);
    0x0040ccfd mov esi, 0x78                                                                                                                                                                                                                                                     |     esi = 0x78;
    0x0040cd02 mov rdi, r14                                                                                                                                                                                                                                                      |     rdi = r14;
    0x0040cd05 call qword [rax + 0x10]                                                                                                                                                                                                                                           |     rax = uint64_t (*rax + 0x10)() ();
    0x0040cd08 mov rbx, rax                                                                                                                                                                                                                                                      |     rbx = rax;
    0x0040cd0b mov qword [rax], 0x40cea0                                                                                                                                                                                                                                         |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____bsl::vector_unsigned_int__bsl::allocator_unsigned_int_____bsl::vector_char__bsl::allocator_char____const__BloombergLP::bslmt::Barrier__bool_;
    0x0040cd12 mov rax, qword [r12]                                                                                                                                                                                                                                              |     rax = *(r12);
    0x0040cd16 mov qword [rbx + 8], rax                                                                                                                                                                                                                                          |     *((rbx + 8)) = rax;
    0x0040cd1a mov rax, qword [r12 + 8]                                                                                                                                                                                                                                          |     rax = *((r12 + 8));
    0x0040cd1f mov qword [rbx + 0x10], rax                                                                                                                                                                                                                                       |     *((rbx + 0x10)) = rax;
    0x0040cd23 lea rsi, [r12 + 0x10]                                                                                                                                                                                                                                             |     
    0x0040cd28 lea rdi, [rbx + 0x18]                                                                                                                                                                                                                                             |     
    0x0040cd2c mov qword [rsp + 0x10], r14                                                                                                                                                                                                                                       |     *((rsp + 0x10)) = r14;
    0x0040cd31 lea rdx, [rsp + 0x10]                                                                                                                                                                                                                                             |     
    0x0040cd36 call 0x42a4f0                                                                                                                                                                                                                                                     |     bsl::vector<unsigned long,bsl::allocator<unsigned long>>::vector(bsl::vector<unsigned long,bsl::allocator<unsigned long>>const&,bsl::allocator<unsigned long>const&) (rbx + 0x18, r12 + 0x10, rsp + 0x10);
    0x0040cd3b mov rax, qword [r12 + 0x30]                                                                                                                                                                                                                                       |     rax = *((r12 + 0x30));
    0x0040cd40 mov qword [rbx + 0x38], rax                                                                                                                                                                                                                                       |     *((rbx + 0x38)) = rax;
    0x0040cd44 mov al, byte [r12 + 0x38]                                                                                                                                                                                                                                         |     al = *((r12 + 0x38));
    0x0040cd49 mov byte [rbx + 0x40], al                                                                                                                                                                                                                                         |     *((rbx + 0x40)) = al;
    0x0040cd4c mov rdi, rbx                                                                                                                                                                                                                                                      |     
    0x0040cd4f add rdi, 0x48                                                                                                                                                                                                                                                     |     rdi += 0x48;
    0x0040cd53 mov qword [rbx + 0x48], 0                                                                                                                                                                                                                                         |     *((rbx + 0x48)) = 0;
    0x0040cd5b mov qword [rbx + 0x70], r14                                                                                                                                                                                                                                       |     *((rbx + 0x70)) = r14;
    0x0040cd5f movaps xmm0, xmmword [rip + 0x2b7ca]                                                                                                                                                                                                                              |     xmm0 = .comment;
    0x0040cd66 movups xmmword [rbx + 0x60], xmm0                                                                                                                                                                                                                                 |     __asm ("movups xmmword [rbx + 0x60], xmm0");
    0x0040cd6a mov ecx, 0x438dbd                                                                                                                                                                                                                                                 |     
    0x0040cd6f mov rsi, r13                                                                                                                                                                                                                                                      |     
    0x0040cd72 mov rdx, rbp                                                                                                                                                                                                                                                      |     
    0x0040cd75 call 0x4153b0                                                                                                                                                                                                                                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx, r13, rbp, "string<...>::assign<Iter>(i,j): string too long");
    0x0040cd7a mov edx, 0x410d50                                                                                                                                                                                                                                                 |     
    0x0040cd7f mov rdi, qword [rsp + 8]                                                                                                                                                                                                                                          |     
    0x0040cd84 mov rsi, r15                                                                                                                                                                                                                                                      |     
    0x0040cd87 mov rcx, rbx                                                                                                                                                                                                                                                      |     
    0x0040cd8a call 0x411ac0                                                                                                                                                                                                                                                     |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*((rsp + 8)), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0040cd8f mov ebp, eax                                                                                                                                                                                                                                                      |     
    0x0040cd91 test eax, eax                                                                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                                                                 |     if (eax != 0) {
    0x0040cd93 je 0x40cdd1                                                                                                                                                                                                                                                       |         
    0x0040cd95 cmp qword [rbx + 0x68], 0x17                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |         if (*((rbx + 0x68)) != 0x17) {
    0x0040cd9a je 0x40cdaa                                                                                                                                                                                                                                                       |             
    0x0040cd9c mov rsi, qword [rbx + 0x48]                                                                                                                                                                                                                                       |             rsi = *((rbx + 0x48));
    0x0040cda0 mov rdi, qword [rbx + 0x70]                                                                                                                                                                                                                                       |             rdi = *((rbx + 0x70));
    0x0040cda4 mov rax, qword [rdi]                                                                                                                                                                                                                                              |             rax = *(rdi);
    0x0040cda7 call qword [rax + 0x18]                                                                                                                                                                                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |         }
    0x0040cdaa mov qword [rbx + 0x60], 0xffffffffffffffff                                                                                                                                                                                                                        |         *((rbx + 0x60)) = 0xffffffffffffffff;
    0x0040cdb2 mov rsi, qword [rbx + 0x18]                                                                                                                                                                                                                                       |         rsi = *((rbx + 0x18));
    0x0040cdb6 test rsi, rsi                                                                                                                                                                                                                                                     |         
                                                                                                                                                                                                                                                                                 |         if (rsi != 0) {
    0x0040cdb9 je 0x40cdc5                                                                                                                                                                                                                                                       |             
    0x0040cdbb mov rdi, qword [rbx + 0x30]                                                                                                                                                                                                                                       |             rdi = *((rbx + 0x30));
    0x0040cdbf mov rax, qword [rdi]                                                                                                                                                                                                                                              |             rax = *(rdi);
    0x0040cdc2 call qword [rax + 0x18]                                                                                                                                                                                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |         }
    0x0040cdc5 mov rax, qword [r14]                                                                                                                                                                                                                                              |         rax = *(r14);
    0x0040cdc8 mov rdi, r14                                                                                                                                                                                                                                                      |         rdi = r14;
    0x0040cdcb mov rsi, rbx                                                                                                                                                                                                                                                      |         rsi = rbx;
    0x0040cdce call qword [rax + 0x18]                                                                                                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |     }
    0x0040cdd1 mov eax, ebp                                                                                                                                                                                                                                                      |     eax = ebp;
    0x0040cdd3 add rsp, 0x18                                                                                                                                                                                                                                                     |     
    0x0040cdd7 pop rbx                                                                                                                                                                                                                                                           |     
    0x0040cdd8 pop r12                                                                                                                                                                                                                                                           |     
    0x0040cdda pop r13                                                                                                                                                                                                                                                           |     
    0x0040cddc pop r14                                                                                                                                                                                                                                                           |     
    0x0040cdde pop r15                                                                                                                                                                                                                                                           |     
    0x0040cde0 pop rbp                                                                                                                                                                                                                                                           |     
    0x0040cde1 ret                                                                                                                                                                                                                                                               |     return rax;
                                                                                                                                                                                                                                                                                 | }
