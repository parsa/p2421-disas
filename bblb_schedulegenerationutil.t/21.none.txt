    ; assembly                                                                                                                                                                                                                                                                       | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                     | /* bblb_schedulegenerationutil.t/none @ 0x40b960 */
                                                                                                                                                                                                                                                                                     | #include <stdint.h>
                                                                                                                                                                                                                                                                                     |  
    ; (fcn) method.BloombergLP::bblb::ScheduleGenerationUtil.generateFromBusinessDayOfMonth_bsl::vector_BloombergLP::bdlt::Date__bsl::allocator_BloombergLP::bdlt::Date_____BloombergLP::bdlt::Date_const__BloombergLP::bdlt::Date_const__int__int__int__BloombergLP::b ()           | int64_t method_BloombergLP::bblb::ScheduleGenerationUtil_generateFromBusinessDayOfMonth_bsl::vector_BloombergLP::bdlt::Date_bsl::allocator_BloombergLP::bdlt::Date_BloombergLP::bdlt::Date_const_BloombergLP::bdlt::Date_const_int_int_int_BloombergLP::b (int64_t arg_1h, int64_t arg_50h, int64_t arg_58h, int64_t arg6, int64_t arg5, int64_t arg4, int64_t arg3, int64_t arg2, uint32_t arg1) {
                                                                                                                                                                                                                                                                                     |     int64_t var_4h;
                                                                                                                                                                                                                                                                                     |     uint32_t var_8h;
                                                                                                                                                                                                                                                                                     |     uint32_t var_ch;
                                                                                                                                                                                                                                                                                     |     uint32_t var_10h;
                                                                                                                                                                                                                                                                                     |     uint32_t var_14h;
                                                                                                                                                                                                                                                                                     |     r9 = arg6;
                                                                                                                                                                                                                                                                                     |     r8 = arg5;
                                                                                                                                                                                                                                                                                     |     rcx = arg4;
                                                                                                                                                                                                                                                                                     |     rdx = arg3;
                                                                                                                                                                                                                                                                                     |     rsi = arg2;
                                                                                                                                                                                                                                                                                     |     rdi = arg1;
                                                                                                                                                                                                                                                                                     |     /* BloombergLP::bblb::ScheduleGenerationUtil::generateFromBusinessDayOfMonth(bsl::vector<BloombergLP::bdlt::Date, bsl::allocator<BloombergLP::bdlt::Date> >*, BloombergLP::bdlt::Date const&, BloombergLP::bdlt::Date const&, int, int, int, BloombergLP::bdlt::Calendar const&, int) */
    0x0040b960 push rbp                                                                                                                                                                                                                                                              |     
    0x0040b961 push r15                                                                                                                                                                                                                                                              |     
    0x0040b963 push r14                                                                                                                                                                                                                                                              |     
    0x0040b965 push r13                                                                                                                                                                                                                                                              |     
    0x0040b967 push r12                                                                                                                                                                                                                                                              |     
    0x0040b969 push rbx                                                                                                                                                                                                                                                              |     
    0x0040b96a sub rsp, 0x18                                                                                                                                                                                                                                                         |     
    0x0040b96e mov r13d, r9d                                                                                                                                                                                                                                                         |     r13d = r9d;
    0x0040b971 mov r15d, r8d                                                                                                                                                                                                                                                         |     r15d = r8d;
    0x0040b974 mov ebp, ecx                                                                                                                                                                                                                                                          |     
    0x0040b976 mov rbx, rdx                                                                                                                                                                                                                                                          |     rbx = rdx;
    0x0040b979 mov r14, rdi                                                                                                                                                                                                                                                          |     r14 = rdi;
    0x0040b97c mov rax, qword [rdi]                                                                                                                                                                                                                                                  |     rax = *(rdi);
    0x0040b97f cmp qword [rdi + 8], rax                                                                                                                                                                                                                                              |     
                                                                                                                                                                                                                                                                                     |     if (*((rdi + 8)) != rax) {
    0x0040b983 je 0x40b989                                                                                                                                                                                                                                                           |         
    0x0040b985 mov qword [r14 + 8], rax                                                                                                                                                                                                                                              |         *((r14 + 8)) = rax;
                                                                                                                                                                                                                                                                                     |     }
    0x0040b989 mov ecx, dword [rsi]                                                                                                                                                                                                                                                  |     
    0x0040b98b mov rdi, rsp                                                                                                                                                                                                                                                          |     
    0x0040b98e lea rsi, [rsp + 4]                                                                                                                                                                                                                                                    |     
    0x0040b993 lea rdx, [rsp + 0x14]                                                                                                                                                                                                                                                 |     
    0x0040b998 call 0x414310                                                                                                                                                                                                                                                         |     BloombergLP::bdlt::PosixDateImpUtil::serialToYmd(int*,int*,int*,int) (rsp, rsp + 4, rsp + 0x14, *(rsi));
    0x0040b99d mov eax, dword [rsp]                                                                                                                                                                                                                                                  |     eax = *(rsp);
    0x0040b9a0 lea eax, [rax + rax*2]                                                                                                                                                                                                                                                |     eax = rax * 3;
    0x0040b9a3 mov ecx, dword [rsp + 4]                                                                                                                                                                                                                                              |     ecx = *((rsp + 4));
    0x0040b9a7 lea r12d, [rcx + rax*4 - 1]                                                                                                                                                                                                                                           |     r12d = rcx + rax*4 - 1;
    0x0040b9ac mov ecx, dword [rbx]                                                                                                                                                                                                                                                  |     
    0x0040b9ae mov rdi, rsp                                                                                                                                                                                                                                                          |     
    0x0040b9b1 lea rsi, [rsp + 4]                                                                                                                                                                                                                                                    |     
    0x0040b9b6 lea rdx, [rsp + 0x10]                                                                                                                                                                                                                                                 |     
    0x0040b9bb call 0x414310                                                                                                                                                                                                                                                         |     BloombergLP::bdlt::PosixDateImpUtil::serialToYmd(int*,int*,int*,int) (rsp, rsp + 4, rsp + 0x10, *(rbx));
    0x0040b9c0 mov eax, dword [rsp]                                                                                                                                                                                                                                                  |     eax = *(rsp);
    0x0040b9c3 lea eax, [rax + rax*2]                                                                                                                                                                                                                                                |     eax = rax * 3;
    0x0040b9c6 mov ecx, dword [rsp + 4]                                                                                                                                                                                                                                              |     ecx = *((rsp + 4));
    0x0040b9ca lea edi, [rcx + rax*4 - 1]                                                                                                                                                                                                                                            |     edi = rcx + rax*4 - 1;
    0x0040b9ce lea eax, [rbp + rbp*2]                                                                                                                                                                                                                                                |     eax = rbp + rbp*2;
    0x0040b9d2 lea esi, [r15 + rax*4 - 1]                                                                                                                                                                                                                                            |     esi = r15 + rax*4 - 1;
    0x0040b9d7 mov dword [rsp + 0xc], r12d                                                                                                                                                                                                                                           |     *((rsp + 0xc)) = r12d;
    0x0040b9dc sub r12d, esi                                                                                                                                                                                                                                                         |     r12d -= esi;
                                                                                                                                                                                                                                                                                     |     if (r12d > 0) {
    0x0040b9df jle 0x40b9f9                                                                                                                                                                                                                                                          |         
    0x0040b9e1 mov eax, r12d                                                                                                                                                                                                                                                         |         eax = r12d;
    0x0040b9e4 cdq                                                                                                                                                                                                                                                                   |         edx:eax = (int64_t) eax;
    0x0040b9e5 idiv r13d                                                                                                                                                                                                                                                             |         eax = edx:eax / r13d;
                                                                                                                                                                                                                                                                                     |         edx = edx:eax % r13d;
    0x0040b9e8 test edx, edx                                                                                                                                                                                                                                                         |         
                                                                                                                                                                                                                                                                                     |         if (edx != 0) {
    0x0040b9ea je 0x40b9f9                                                                                                                                                                                                                                                           |             
    0x0040b9ec mov eax, r12d                                                                                                                                                                                                                                                         |             eax = r12d;
    0x0040b9ef cdq                                                                                                                                                                                                                                                                   |             edx:eax = (int64_t) eax;
    0x0040b9f0 idiv r13d                                                                                                                                                                                                                                                             |             eax = edx:eax / r13d;
                                                                                                                                                                                                                                                                                     |             edx = edx:eax % r13d;
    0x0040b9f3 mov ebp, eax                                                                                                                                                                                                                                                          |             
    0x0040b9f5 inc ebp                                                                                                                                                                                                                                                               |             ebp++;
    0x0040b9f7 jmp 0x40ba02                                                                                                                                                                                                                                                          |             
                                                                                                                                                                                                                                                                                     |         }
                                                                                                                                                                                                                                                                                     |     } else {
    0x0040b9f9 mov eax, r12d                                                                                                                                                                                                                                                         |         eax = r12d;
    0x0040b9fc cdq                                                                                                                                                                                                                                                                   |         edx:eax = (int64_t) eax;
    0x0040b9fd idiv r13d                                                                                                                                                                                                                                                             |         eax = edx:eax / r13d;
                                                                                                                                                                                                                                                                                     |         edx = edx:eax % r13d;
    0x0040ba00 mov ebp, eax                                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |     }
    0x0040ba02 mov ecx, edi                                                                                                                                                                                                                                                          |     ecx = edi;
    0x0040ba04 sub ecx, esi                                                                                                                                                                                                                                                          |     ecx -= esi;
    0x0040ba06 js 0x40ba12                                                                                                                                                                                                                                                           |     
                                                                                                                                                                                                                                                                                     |     while (edx == 0) {
    0x0040ba08 mov eax, ecx                                                                                                                                                                                                                                                          |         eax = ecx;
    0x0040ba0a cdq                                                                                                                                                                                                                                                                   |         edx:eax = (int64_t) eax;
    0x0040ba0b idiv r13d                                                                                                                                                                                                                                                             |         eax = edx:eax / r13d;
                                                                                                                                                                                                                                                                                     |         edx = edx:eax % r13d;
    0x0040ba0e mov ebx, eax                                                                                                                                                                                                                                                          |         ebx = eax;
    0x0040ba10 jmp 0x40ba26                                                                                                                                                                                                                                                          |         goto label_1;
    0x0040ba12 mov eax, ecx                                                                                                                                                                                                                                                          |         eax = ecx;
    0x0040ba14 cdq                                                                                                                                                                                                                                                                   |         edx:eax = (int64_t) eax;
    0x0040ba15 idiv r13d                                                                                                                                                                                                                                                             |         eax = edx:eax / r13d;
                                                                                                                                                                                                                                                                                     |         edx = edx:eax % r13d;
    0x0040ba18 test edx, edx                                                                                                                                                                                                                                                         |         
    0x0040ba1a je 0x40ba08                                                                                                                                                                                                                                                           |         
                                                                                                                                                                                                                                                                                     |     }
    0x0040ba1c mov eax, ecx                                                                                                                                                                                                                                                          |     eax = ecx;
    0x0040ba1e cdq                                                                                                                                                                                                                                                                   |     edx:eax = (int64_t) eax;
    0x0040ba1f idiv r13d                                                                                                                                                                                                                                                             |     eax = edx:eax / r13d;
                                                                                                                                                                                                                                                                                     |     edx = edx:eax % r13d;
    0x0040ba22 mov ebx, eax                                                                                                                                                                                                                                                          |     ebx = eax;
    0x0040ba24 dec ebx                                                                                                                                                                                                                                                               |     ebx--;
                                                                                                                                                                                                                                                                                     | label_1:
    0x0040ba26 imul ebp, r13d                                                                                                                                                                                                                                                        |     ebp *= r13d;
    0x0040ba2a add ebp, esi                                                                                                                                                                                                                                                          |     ebp += esi;
    0x0040ba2c cmp ebp, 0x1d4bf                                                                                                                                                                                                                                                      |     
                                                                                                                                                                                                                                                                                     |     if (ebp > 0x1d4bf) {
    0x0040ba32 jg 0x40bad8                                                                                                                                                                                                                                                           |         goto label_0;
                                                                                                                                                                                                                                                                                     |     }
    0x0040ba38 imul ebx, r13d                                                                                                                                                                                                                                                        |     ebx *= r13d;
    0x0040ba3c add ebx, esi                                                                                                                                                                                                                                                          |     ebx += esi;
    0x0040ba3e cmp ebx, 0xc                                                                                                                                                                                                                                                          |     
                                                                                                                                                                                                                                                                                     |     if (ebx < 0xc) {
    0x0040ba41 jl 0x40bad8                                                                                                                                                                                                                                                           |         goto label_0;
                                                                                                                                                                                                                                                                                     |     }
    0x0040ba47 mov dword [rsp + 8], edi                                                                                                                                                                                                                                              |     *((rsp + 8)) = edi;
    0x0040ba4b mov r12d, dword [rsp + 0x58]                                                                                                                                                                                                                                          |     r12d = *((rsp + 0x58));
    0x0040ba50 mov r15, qword [rsp + 0x50]                                                                                                                                                                                                                                           |     r15 = *((rsp + 0x50));
    0x0040ba55 mov dword [rsp], 1                                                                                                                                                                                                                                                    |     *(rsp) = 1;
    0x0040ba5c movsxd rax, ebp                                                                                                                                                                                                                                                       |     rax = (int64_t) ebp;
    0x0040ba5f imul rdx, rax, 0x2aaaaaab                                                                                                                                                                                                                                             |     rdx = rax * 0x2aaaaaab;
    0x0040ba66 mov rax, rdx                                                                                                                                                                                                                                                          |     rax = rdx;
    0x0040ba69 shr rax, 0x3f                                                                                                                                                                                                                                                         |     rax >>= 0x3f;
    0x0040ba6d sar rdx, 0x21                                                                                                                                                                                                                                                         |     rdx >>= 0x21;
    0x0040ba71 add edx, eax                                                                                                                                                                                                                                                          |     edx += eax;
    0x0040ba73 lea eax, [rdx*4]                                                                                                                                                                                                                                                      |     eax = rdx*4;
    0x0040ba7a lea eax, [rax + rax*2]                                                                                                                                                                                                                                                |     eax = rax * 3;
    0x0040ba7d neg eax                                                                                                                                                                                                                                                               |     eax = -eax;
    0x0040ba7f lea ecx, [rbp + rax + 1]                                                                                                                                                                                                                                              |     
    0x0040ba83 mov rdi, rsp                                                                                                                                                                                                                                                          |     
    0x0040ba86 mov rsi, r15                                                                                                                                                                                                                                                          |     
    0x0040ba89 mov r8d, r12d                                                                                                                                                                                                                                                         |     
    0x0040ba8c call 0x40d6a0                                                                                                                                                                                                                                                         |     eax = BloombergLP::bdlt::CalendarUtil::nthBusinessDayOfMonthOrMaxIfValid(BloombergLP::bdlt::Date*,BloombergLP::bdlt::Calendarconst&,int,int,int) (rsp, r15, rdx, rbp + rax + 1, r12d);
    0x0040ba91 test eax, eax                                                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                                                     |     if (eax != 0) {
    0x0040ba93 jne 0x40bad8                                                                                                                                                                                                                                                          |         goto label_0;
                                                                                                                                                                                                                                                                                     |     }
    0x0040ba95 mov edi, dword [rsp]                                                                                                                                                                                                                                                  |     
    0x0040ba98 call 0x414250                                                                                                                                                                                                                                                         |     eax = BloombergLP::bdlt::PosixDateImpUtil::serialToDay(int) (*(rsp), rsi);
    0x0040ba9d mov rsi, r15                                                                                                                                                                                                                                                          |     
    0x0040baa0 mov r15d, eax                                                                                                                                                                                                                                                         |     r15d = eax;
    0x0040baa3 mov dword [rsp], 1                                                                                                                                                                                                                                                    |     *(rsp) = 1;
    0x0040baaa mov eax, ebx                                                                                                                                                                                                                                                          |     eax = ebx;
    0x0040baac mov edx, 0xaaaaaaab                                                                                                                                                                                                                                                   |     
    0x0040bab1 imul rdx, rax                                                                                                                                                                                                                                                         |     rdx *= rax;
    0x0040bab5 shr rdx, 0x23                                                                                                                                                                                                                                                         |     rdx >>= 0x23;
    0x0040bab9 lea eax, [rdx*4]                                                                                                                                                                                                                                                      |     eax = rdx*4;
    0x0040bac0 lea eax, [rax + rax*2]                                                                                                                                                                                                                                                |     eax = rax * 3;
    0x0040bac3 neg eax                                                                                                                                                                                                                                                               |     eax = -eax;
    0x0040bac5 lea ecx, [rbx + rax + 1]                                                                                                                                                                                                                                              |     
    0x0040bac9 mov rdi, rsp                                                                                                                                                                                                                                                          |     
    0x0040bacc mov r8d, r12d                                                                                                                                                                                                                                                         |     
    0x0040bacf call 0x40d6a0                                                                                                                                                                                                                                                         |     eax = BloombergLP::bdlt::CalendarUtil::nthBusinessDayOfMonthOrMaxIfValid(BloombergLP::bdlt::Date*,BloombergLP::bdlt::Calendarconst&,int,int,int) (rsp, r15, 0xaaaaaaab, rbx + rax + 1, r12d);
    0x0040bad4 test eax, eax                                                                                                                                                                                                                                                         |     
    0x0040bad6 je 0x40bae7                                                                                                                                                                                                                                                           |     
                                                                                                                                                                                                                                                                                     |     while (r15d > 0x1d4bf) {
                                                                                                                                                                                                                                                                                     | label_0:
    0x0040bad8 add rsp, 0x18                                                                                                                                                                                                                                                         |         
    0x0040badc pop rbx                                                                                                                                                                                                                                                               |         
    0x0040badd pop r12                                                                                                                                                                                                                                                               |         
    0x0040badf pop r13                                                                                                                                                                                                                                                               |         
    0x0040bae1 pop r14                                                                                                                                                                                                                                                               |         
    0x0040bae3 pop r15                                                                                                                                                                                                                                                               |         
    0x0040bae5 pop rbp                                                                                                                                                                                                                                                               |         
    0x0040bae6 ret                                                                                                                                                                                                                                                                   |         return rax;
    0x0040bae7 mov edi, dword [rsp]                                                                                                                                                                                                                                                  |         
    0x0040baea call 0x414250                                                                                                                                                                                                                                                         |         eax = BloombergLP::bdlt::PosixDateImpUtil::serialToDay(int) (*(rsp), rsi);
    0x0040baef xor ecx, ecx                                                                                                                                                                                                                                                          |         ecx = 0;
    0x0040baf1 cmp r15d, dword [rsp + 0x14]                                                                                                                                                                                                                                          |         
    0x0040baf6 mov r15d, 0                                                                                                                                                                                                                                                           |         r15d = 0;
                                                                                                                                                                                                                                                                                     |         if (r15d < *((rsp + 0x14))) {
    0x0040bafc cmovl r15d, r13d                                                                                                                                                                                                                                                      |             r15d = r13d;
                                                                                                                                                                                                                                                                                     |         }
    0x0040bb00 cmp ebp, dword [rsp + 0xc]                                                                                                                                                                                                                                            |         
                                                                                                                                                                                                                                                                                     |         if (ebp != *((rsp + 0xc))) {
    0x0040bb04 cmovne r15d, ecx                                                                                                                                                                                                                                                      |             r15d = ecx;
                                                                                                                                                                                                                                                                                     |         }
    0x0040bb08 add r15d, ebp                                                                                                                                                                                                                                                         |         r15d += ebp;
    0x0040bb0b cmp eax, dword [rsp + 0x10]                                                                                                                                                                                                                                           |         
    0x0040bb0f mov eax, 0                                                                                                                                                                                                                                                            |         eax = 0;
                                                                                                                                                                                                                                                                                     |         if (eax > *((rsp + 0x10))) {
    0x0040bb14 cmovg eax, r13d                                                                                                                                                                                                                                                       |             eax = r13d;
                                                                                                                                                                                                                                                                                     |         }
    0x0040bb18 cmp ebx, dword [rsp + 8]                                                                                                                                                                                                                                              |         
                                                                                                                                                                                                                                                                                     |         if (ebx != *((rsp + 8))) {
    0x0040bb1c cmovne eax, ecx                                                                                                                                                                                                                                                       |             eax = ecx;
                                                                                                                                                                                                                                                                                     |         }
    0x0040bb1f cmp r15d, 0x1d4bf                                                                                                                                                                                                                                                     |         
    0x0040bb26 jg 0x40bad8                                                                                                                                                                                                                                                           |         
                                                                                                                                                                                                                                                                                     |     }
    0x0040bb28 sub ebx, eax                                                                                                                                                                                                                                                          |     ebx -= eax;
    0x0040bb2a cmp ebx, 0xc                                                                                                                                                                                                                                                          |     
                                                                                                                                                                                                                                                                                     |     if (ebx < 0xc) {
    0x0040bb2d jl 0x40bad8                                                                                                                                                                                                                                                           |         goto label_0;
                                                                                                                                                                                                                                                                                     |     }
    0x0040bb2f mov eax, ebx                                                                                                                                                                                                                                                          |     eax = ebx;
    0x0040bb31 sub eax, r15d                                                                                                                                                                                                                                                         |     eax -= r15d;
    0x0040bb34 cdq                                                                                                                                                                                                                                                                   |     edx:eax = (int64_t) eax;
    0x0040bb35 idiv r13d                                                                                                                                                                                                                                                             |     eax = edx:eax / r13d;
                                                                                                                                                                                                                                                                                     |     edx = edx:eax % r13d;
    0x0040bb38 inc eax                                                                                                                                                                                                                                                               |     eax++;
    0x0040bb3a movsxd rsi, eax                                                                                                                                                                                                                                                       |     rsi = (int64_t) eax;
    0x0040bb3d mov rdi, r14                                                                                                                                                                                                                                                          |     
    0x0040bb40 call 0x40c1a0                                                                                                                                                                                                                                                         |     rax = bsl::vector<BloombergLP::bdlt::Date,bsl::allocator<BloombergLP::bdlt::Date>>::reserve(unsigned long) (r14, rsi);
    0x0040bb45 cmp ebx, r15d                                                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                                                     |     if (ebx < r15d) {
    0x0040bb48 jl 0x40bad8                                                                                                                                                                                                                                                           |         goto label_0;
                                                                                                                                                                                                                                                                                     |     }
    0x0040bb4a mov rbp, rsp                                                                                                                                                                                                                                                          |     
    0x0040bb4d nop dword [rax]                                                                                                                                                                                                                                                       |     
                                                                                                                                                                                                                                                                                     |     do {
    0x0040bb50 mov dword [rsp], 1                                                                                                                                                                                                                                                    |         *(rsp) = 1;
    0x0040bb57 movsxd rax, r15d                                                                                                                                                                                                                                                      |         rax = (int64_t) r15d;
    0x0040bb5a imul rdx, rax, 0x2aaaaaab                                                                                                                                                                                                                                             |         rdx = rax * 0x2aaaaaab;
    0x0040bb61 mov rcx, rdx                                                                                                                                                                                                                                                          |         rcx = rdx;
    0x0040bb64 shr rcx, 0x3f                                                                                                                                                                                                                                                         |         rcx >>= 0x3f;
    0x0040bb68 sar rdx, 0x21                                                                                                                                                                                                                                                         |         rdx >>= 0x21;
    0x0040bb6c add edx, ecx                                                                                                                                                                                                                                                          |         edx += ecx;
    0x0040bb6e lea ecx, [rdx*4]                                                                                                                                                                                                                                                      |         ecx = rdx*4;
    0x0040bb75 lea ecx, [rcx + rcx*2]                                                                                                                                                                                                                                                |         ecx = rcx * 3;
    0x0040bb78 neg ecx                                                                                                                                                                                                                                                               |         ecx = -ecx;
    0x0040bb7a lea ecx, [rax + rcx + 1]                                                                                                                                                                                                                                              |         
    0x0040bb7e mov rdi, rbp                                                                                                                                                                                                                                                          |         
    0x0040bb81 mov rsi, qword [rsp + 0x50]                                                                                                                                                                                                                                           |         
    0x0040bb86 mov r8d, r12d                                                                                                                                                                                                                                                         |         
    0x0040bb89 call 0x40d6a0                                                                                                                                                                                                                                                         |         eax = BloombergLP::bdlt::CalendarUtil::nthBusinessDayOfMonthOrMaxIfValid(BloombergLP::bdlt::Date*,BloombergLP::bdlt::Calendarconst&,int,int,int) (rbp, *((rsp + 0x50)), rdx, rax + rcx + 1, r12d);
    0x0040bb8e test eax, eax                                                                                                                                                                                                                                                         |         
                                                                                                                                                                                                                                                                                     |         if (eax != 0) {
    0x0040bb90 jne 0x40bbaa                                                                                                                                                                                                                                                          |             goto label_2;
                                                                                                                                                                                                                                                                                     |         }
    0x0040bb92 mov rdi, r14                                                                                                                                                                                                                                                          |         
    0x0040bb95 mov rsi, rbp                                                                                                                                                                                                                                                          |         
    0x0040bb98 call 0x40c2c0                                                                                                                                                                                                                                                         |         bsl::vector<BloombergLP::bdlt::Date,bsl::allocator<BloombergLP::bdlt::Date>>::push_back(BloombergLP::bdlt::Dateconst&) (r14, rbp);
    0x0040bb9d add r15d, r13d                                                                                                                                                                                                                                                        |         r15d += r13d;
    0x0040bba0 cmp r15d, ebx                                                                                                                                                                                                                                                         |         
    0x0040bba3 jle 0x40bb50                                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |     } while (r15d <= ebx);
    0x0040bba5 jmp 0x40bad8                                                                                                                                                                                                                                                          |     goto label_0;
                                                                                                                                                                                                                                                                                     | label_2:
    0x0040bbaa mov rax, qword [r14]                                                                                                                                                                                                                                                  |     rax = *(r14);
    0x0040bbad cmp qword [r14 + 8], rax                                                                                                                                                                                                                                              |     
                                                                                                                                                                                                                                                                                     |     if (*((r14 + 8)) == rax) {
    0x0040bbb1 je 0x40bad8                                                                                                                                                                                                                                                           |         goto label_0;
                                                                                                                                                                                                                                                                                     |     }
    0x0040bbb7 mov qword [r14 + 8], rax                                                                                                                                                                                                                                              |     *((r14 + 8)) = rax;
    0x0040bbbb jmp 0x40bad8                                                                                                                                                                                                                                                          |     goto label_0;
                                                                                                                                                                                                                                                                                     | }
