    ; assembly                                                                                                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                                                                                                 | /* bdlcc_deque.t/assume @ 0x4b5ec0 */
                                                                                                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                                                                                                 |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_TEST_CASE_11.HighWaterMarkFunctor_double____unsigned_long__TEST_CASE_11::HighWaterMarkFunctor_double__const__BloombergLP::bslma::Allocator_ ()        | int64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_TEST_CASE_11_HighWaterMarkFunctor_double_unsigned_long_TEST_CASE_11::HighWaterMarkFunctor_double_const_BloombergLP::bslma::Allocator_ (int64_t arg3, int64_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                 |     int64_t var_8h;
                                                                                                                                                                                                                                 |     int64_t var_20h;
                                                                                                                                                                                                                                 |     uint32_t var_40h;
                                                                                                                                                                                                                                 |     int64_t var_48h;
                                                                                                                                                                                                                                 |     rdx = arg3;
                                                                                                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                                                                                                 |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<TEST_CASE_11::HighWaterMarkFunctor<double> >(unsigned long*, TEST_CASE_11::HighWaterMarkFunctor<double> const&, BloombergLP::bslma::Allocator*) */
    0x004b5ec0 push rbp                                                                                                                                                                                                          |     
    0x004b5ec1 push r15                                                                                                                                                                                                          |     
    0x004b5ec3 push r14                                                                                                                                                                                                          |     
    0x004b5ec5 push r12                                                                                                                                                                                                          |     
    0x004b5ec7 push rbx                                                                                                                                                                                                          |     
    0x004b5ec8 sub rsp, 0x50                                                                                                                                                                                                     |     
    0x004b5ecc mov r14, rdx                                                                                                                                                                                                      |     r14 = rdx;
    0x004b5ecf mov rbp, rsi                                                                                                                                                                                                      |     
    0x004b5ed2 mov r12, rdi                                                                                                                                                                                                      |     r12 = rdi;
    0x004b5ed5 mov rax, qword [rdx]                                                                                                                                                                                              |     rax = *(rdx);
    0x004b5ed8 mov esi, 0x50                                                                                                                                                                                                     |     esi = 0x50;
    0x004b5edd mov rdi, rdx                                                                                                                                                                                                      |     rdi = rdx;
    0x004b5ee0 call qword [rax + 0x10]                                                                                                                                                                                           |     rax = uint64_t (*rax + 0x10)(void, void, void, void) (rbx, r12, r14, r15);
    0x004b5ee3 mov rbx, rax                                                                                                                                                                                                      |     rbx = rax;
    0x004b5ee6 mov qword [rax], 0x4b6060                                                                                                                                                                                         |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_TEST_CASE_11::HighWaterMarkFunctor_double___.invokerFunction_void_;
    0x004b5eed lea r15, [rax + 8]                                                                                                                                                                                                |     r15 = rax + 8;
    0x004b5ef1 movups xmm0, xmmword [rbp]                                                                                                                                                                                        |     __asm ("movups xmm0, xmmword [rbp]");
    0x004b5ef5 movups xmmword [rax + 8], xmm0                                                                                                                                                                                    |     __asm ("movups xmmword [rax + 8], xmm0");
    0x004b5ef9 mov rax, qword [rbp + 0x10]                                                                                                                                                                                       |     rax = *((rbp + 0x10));
    0x004b5efd mov qword [rbx + 0x18], rax                                                                                                                                                                                       |     *((rbx + 0x18)) = rax;
    0x004b5f01 lea rdi, [rbx + 0x20]                                                                                                                                                                                             |     
    0x004b5f05 mov qword [rbx + 0x20], 0                                                                                                                                                                                         |     *((rbx + 0x20)) = 0;
    0x004b5f0d mov qword [rbx + 0x48], r14                                                                                                                                                                                       |     *((rbx + 0x48)) = r14;
    0x004b5f11 movaps xmm0, xmmword [rip + 0x30378]                                                                                                                                                                              |     xmm0 = .comment;
    0x004b5f18 movups xmmword [rbx + 0x38], xmm0                                                                                                                                                                                 |     __asm ("movups xmmword [rbx + 0x38], xmm0");
    0x004b5f1c mov ecx, 0x4e90b0                                                                                                                                                                                                 |     
    0x004b5f21 xor esi, esi                                                                                                                                                                                                      |     
    0x004b5f23 xor edx, edx                                                                                                                                                                                                      |     
    0x004b5f25 call 0x4c2e20                                                                                                                                                                                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x20, 0, 0, "string<...>::assign<Iter>(i,j): string too long");
    0x004b5f2a lea rdi, [rsp + 8]                                                                                                                                                                                                |     
    0x004b5f2f call 0x4be750                                                                                                                                                                                                     |     BloombergLP::bslmt::ThreadAttributes::ThreadAttributes() (rsp + 8);
    0x004b5f34 lea rsi, [rsp + 8]                                                                                                                                                                                                |     
    0x004b5f39 mov edx, 0x4be2b0                                                                                                                                                                                                 |     
    0x004b5f3e mov rdi, r12                                                                                                                                                                                                      |     
    0x004b5f41 mov rcx, rbx                                                                                                                                                                                                      |     
    0x004b5f44 call 0x4bec40                                                                                                                                                                                                     |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (r12, rsp + 8, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x004b5f49 mov ebp, eax                                                                                                                                                                                                      |     
    0x004b5f4b cmp qword [rsp + 0x40], 0x17                                                                                                                                                                                      |     
                                                                                                                                                                                                                                 |     if (*((rsp + 0x40)) != 0x17) {
    0x004b5f51 je 0x4b5f63                                                                                                                                                                                                       |         
    0x004b5f53 mov rsi, qword [rsp + 0x20]                                                                                                                                                                                       |         rsi = *((rsp + 0x20));
    0x004b5f58 mov rdi, qword [rsp + 0x48]                                                                                                                                                                                       |         rdi = *((rsp + 0x48));
    0x004b5f5d mov rax, qword [rdi]                                                                                                                                                                                              |         rax = *(rdi);
    0x004b5f60 call qword [rax + 0x18]                                                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                 |     }
    0x004b5f63 test ebp, ebp                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                 |     if (ebp != 0) {
    0x004b5f65 je 0x4b5f98                                                                                                                                                                                                       |         
    0x004b5f67 cmp qword [rbx + 0x40], 0x17                                                                                                                                                                                      |         
                                                                                                                                                                                                                                 |         if (*((rbx + 0x40)) != 0x17) {
    0x004b5f6c je 0x4b5f7c                                                                                                                                                                                                       |             
    0x004b5f6e mov rsi, qword [rbx + 0x20]                                                                                                                                                                                       |             rsi = *((rbx + 0x20));
    0x004b5f72 mov rdi, qword [rbx + 0x48]                                                                                                                                                                                       |             rdi = *((rbx + 0x48));
    0x004b5f76 mov rax, qword [rdi]                                                                                                                                                                                              |             rax = *(rdi);
    0x004b5f79 call qword [rax + 0x18]                                                                                                                                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                 |         }
    0x004b5f7c mov qword [rbx + 0x38], 0xffffffffffffffff                                                                                                                                                                        |         *((rbx + 0x38)) = 0xffffffffffffffff;
    0x004b5f84 mov rdi, r15                                                                                                                                                                                                      |         
    0x004b5f87 call 0x4b5e40                                                                                                                                                                                                     |         TEST_CASE_11::HighWaterMarkFunctor<double>::~HighWaterMarkFunctor() (r15);
    0x004b5f8c mov rax, qword [r14]                                                                                                                                                                                              |         rax = *(r14);
    0x004b5f8f mov rdi, r14                                                                                                                                                                                                      |         rdi = r14;
    0x004b5f92 mov rsi, rbx                                                                                                                                                                                                      |         rsi = rbx;
    0x004b5f95 call qword [rax + 0x18]                                                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                 |     }
    0x004b5f98 mov eax, ebp                                                                                                                                                                                                      |     eax = ebp;
    0x004b5f9a add rsp, 0x50                                                                                                                                                                                                     |     
    0x004b5f9e pop rbx                                                                                                                                                                                                           |     
    0x004b5f9f pop r12                                                                                                                                                                                                           |     
    0x004b5fa1 pop r14                                                                                                                                                                                                           |     
    0x004b5fa3 pop r15                                                                                                                                                                                                           |     
    0x004b5fa5 pop rbp                                                                                                                                                                                                           |     
    0x004b5fa6 ret                                                                                                                                                                                                               |     return rax;
                                                                                                                                                                                                                                 | }
