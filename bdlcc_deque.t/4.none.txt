    ; assembly                                                                                                                                                                                                                                                       | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                     | /* bdlcc_deque.t/none @ 0x4aebd0 */
                                                                                                                                                                                                                                                                     | #include <stdint.h>
                                                                                                                                                                                                                                                                     |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_SEQUENCE_CONSTRAINT_TEST.PusherThread__unsigned_long__BloombergLP::bslmt::ThreadAttributes_const__SEQUENCE_CONSTRAINT_TEST::PusherThread_const__BloombergLP::bslma::Allocator_ ()         | uint64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_SEQUENCE_CONSTRAINT_TEST_PusherThread_unsigned_long_BloombergLP::bslmt::ThreadAttributes_const_SEQUENCE_CONSTRAINT_TEST::PusherThread_const_BloombergLP::bslma::Allocator_ (int64_t arg4, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                     |     rcx = arg4;
                                                                                                                                                                                                                                                                     |     rsi = arg2;
                                                                                                                                                                                                                                                                     |     rdi = arg1;
                                                                                                                                                                                                                                                                     |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<SEQUENCE_CONSTRAINT_TEST::PusherThread>(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, SEQUENCE_CONSTRAINT_TEST::PusherThread const&, BloombergLP::bslma::Allocator*) */
    0x004aebd0 push rbp                                                                                                                                                                                                                                              |     
    0x004aebd1 push r15                                                                                                                                                                                                                                              |     
    0x004aebd3 push r14                                                                                                                                                                                                                                              |     
    0x004aebd5 push r13                                                                                                                                                                                                                                              |     
    0x004aebd7 push r12                                                                                                                                                                                                                                              |     
    0x004aebd9 push rbx                                                                                                                                                                                                                                              |     
    0x004aebda push rax                                                                                                                                                                                                                                              |     
    0x004aebdb mov r14, rcx                                                                                                                                                                                                                                          |     r14 = rcx;
    0x004aebde mov r15, rsi                                                                                                                                                                                                                                          |     r15 = rsi;
    0x004aebe1 mov r12, rdi                                                                                                                                                                                                                                          |     r12 = rdi;
    0x004aebe4 cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                          |     
                                                                                                                                                                                                                                                                     |     if (*((rsi + 0x38)) != 0x17) {
    0x004aebe9 je 0x4aebf1                                                                                                                                                                                                                                           |         
    0x004aebeb mov r13, qword [r15 + 0x18]                                                                                                                                                                                                                           |         r13 = *((r15 + 0x18));
    0x004aebef jmp 0x4aebf5                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                     |     } else {
    0x004aebf1 lea r13, [r15 + 0x18]                                                                                                                                                                                                                                 |         r13 = r15 + 0x18;
                                                                                                                                                                                                                                                                     |     }
    0x004aebf5 mov rbp, qword [r15 + 0x30]                                                                                                                                                                                                                           |     rbp = *((r15 + 0x30));
    0x004aebf9 test r14, r14                                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                                     |     if (r14 == 0) {
    0x004aebfc jne 0x4aec12                                                                                                                                                                                                                                          |         
    0x004aebfe mov r14, qword [rip + 0x27791b]                                                                                                                                                                                                                       |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x004aec05 test r14, r14                                                                                                                                                                                                                                         |         
                                                                                                                                                                                                                                                                     |         if (r14 != 0) {
    0x004aec08 jne 0x4aec12                                                                                                                                                                                                                                          |             goto label_0;
                                                                                                                                                                                                                                                                     |         }
    0x004aec0a call 0x4bd7f0                                                                                                                                                                                                                                         |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x004aec0f mov r14, rax                                                                                                                                                                                                                                          |         r14 = rax;
                                                                                                                                                                                                                                                                     |     }
                                                                                                                                                                                                                                                                     | label_0:
    0x004aec12 mov rax, qword [r14]                                                                                                                                                                                                                                  |     rax = *(r14);
    0x004aec15 mov esi, 0x40                                                                                                                                                                                                                                         |     esi = 0x40;
    0x004aec1a mov rdi, r14                                                                                                                                                                                                                                          |     rdi = r14;
    0x004aec1d call qword [rax + 0x10]                                                                                                                                                                                                                               |     rax = uint64_t (*rax + 0x10)() ();
    0x004aec20 mov rbx, rax                                                                                                                                                                                                                                          |     rbx = rax;
    0x004aec23 mov qword [rax], 0x4aed20                                                                                                                                                                                                                             |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_SEQUENCE_CONSTRAINT_TEST::PusherThread_.invokerFunction_void_;
    0x004aec2a lea rdi, [rax + 0x10]                                                                                                                                                                                                                                 |     
    0x004aec2e mov qword [rax + 0x10], 0                                                                                                                                                                                                                             |     *((rax + 0x10)) = 0;
    0x004aec36 mov qword [rax + 0x38], r14                                                                                                                                                                                                                           |     *((rax + 0x38)) = r14;
    0x004aec3a movaps xmm0, xmmword [rip + 0x37dbf]                                                                                                                                                                                                                  |     xmm0 = .comment;
    0x004aec41 movups xmmword [rax + 0x28], xmm0                                                                                                                                                                                                                     |     __asm ("movups xmmword [rax + 0x28], xmm0");
    0x004aec45 mov ecx, 0x4e981a                                                                                                                                                                                                                                     |     
    0x004aec4a mov rsi, r13                                                                                                                                                                                                                                          |     
    0x004aec4d mov rdx, rbp                                                                                                                                                                                                                                          |     
    0x004aec50 call 0x4c35b0                                                                                                                                                                                                                                         |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rax + 0x10, r13, rbp, "string<...>::assign<Iter>(i,j): string too long");
    0x004aec55 mov edx, 0x4bea10                                                                                                                                                                                                                                     |     
    0x004aec5a mov rdi, r12                                                                                                                                                                                                                                          |     
    0x004aec5d mov rsi, r15                                                                                                                                                                                                                                          |     
    0x004aec60 mov rcx, rbx                                                                                                                                                                                                                                          |     
    0x004aec63 call 0x4bf3a0                                                                                                                                                                                                                                         |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (r12, r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x004aec68 mov ebp, eax                                                                                                                                                                                                                                          |     
    0x004aec6a test eax, eax                                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                                     |     if (eax != 0) {
    0x004aec6c je 0x4aec97                                                                                                                                                                                                                                           |         
    0x004aec6e cmp qword [rbx + 0x30], 0x17                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                     |         if (*((rbx + 0x30)) != 0x17) {
    0x004aec73 je 0x4aec83                                                                                                                                                                                                                                           |             
    0x004aec75 mov rsi, qword [rbx + 0x10]                                                                                                                                                                                                                           |             rsi = *((rbx + 0x10));
    0x004aec79 mov rdi, qword [rbx + 0x38]                                                                                                                                                                                                                           |             rdi = *((rbx + 0x38));
    0x004aec7d mov rax, qword [rdi]                                                                                                                                                                                                                                  |             rax = *(rdi);
    0x004aec80 call qword [rax + 0x18]                                                                                                                                                                                                                               |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                     |         }
    0x004aec83 mov qword [rbx + 0x28], 0xffffffffffffffff                                                                                                                                                                                                            |         *((rbx + 0x28)) = 0xffffffffffffffff;
    0x004aec8b mov rax, qword [r14]                                                                                                                                                                                                                                  |         rax = *(r14);
    0x004aec8e mov rdi, r14                                                                                                                                                                                                                                          |         rdi = r14;
    0x004aec91 mov rsi, rbx                                                                                                                                                                                                                                          |         rsi = rbx;
    0x004aec94 call qword [rax + 0x18]                                                                                                                                                                                                                               |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                     |     }
    0x004aec97 mov eax, ebp                                                                                                                                                                                                                                          |     eax = ebp;
    0x004aec99 add rsp, 8                                                                                                                                                                                                                                            |     
    0x004aec9d pop rbx                                                                                                                                                                                                                                               |     
    0x004aec9e pop r12                                                                                                                                                                                                                                               |     
    0x004aeca0 pop r13                                                                                                                                                                                                                                               |     
    0x004aeca2 pop r14                                                                                                                                                                                                                                               |     
    0x004aeca4 pop r15                                                                                                                                                                                                                                               |     
    0x004aeca6 pop rbp                                                                                                                                                                                                                                               |     
    0x004aeca7 ret                                                                                                                                                                                                                                                   |     return rax;
                                                                                                                                                                                                                                                                     | }
