    ; assembly                                                                                                                                                                                               | /* r2dec pseudo code output */
                                                                                                                                                                                                             | /* bdlcc_deque.t/assume @ 0x4b87a0 */
                                                                                                                                                                                                             | #include <stdint.h>
                                                                                                                                                                                                             |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_TEST_CASE_10.EmptyDequeFunctor__unsigned_long__TEST_CASE_10::EmptyDequeFunctor_const__BloombergLP::bslma::Allocator_ ()           | int64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_TEST_CASE_10_EmptyDequeFunctor_unsigned_long_TEST_CASE_10::EmptyDequeFunctor_const_BloombergLP::bslma::Allocator_ (int64_t arg3, char * arg2, int64_t arg1) {
                                                                                                                                                                                                             |     int64_t var_8h;
                                                                                                                                                                                                             |     int64_t var_20h;
                                                                                                                                                                                                             |     uint32_t var_40h;
                                                                                                                                                                                                             |     int64_t var_48h;
                                                                                                                                                                                                             |     rdx = arg3;
                                                                                                                                                                                                             |     rsi = arg2;
                                                                                                                                                                                                             |     rdi = arg1;
                                                                                                                                                                                                             |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<TEST_CASE_10::EmptyDequeFunctor>(unsigned long*, TEST_CASE_10::EmptyDequeFunctor const&, BloombergLP::bslma::Allocator*) */
    0x004b87a0 push rbp                                                                                                                                                                                      |     
    0x004b87a1 push r15                                                                                                                                                                                      |     
    0x004b87a3 push r14                                                                                                                                                                                      |     
    0x004b87a5 push r12                                                                                                                                                                                      |     
    0x004b87a7 push rbx                                                                                                                                                                                      |     
    0x004b87a8 sub rsp, 0x50                                                                                                                                                                                 |     
    0x004b87ac mov r14, rdx                                                                                                                                                                                  |     r14 = rdx;
    0x004b87af mov rbp, rsi                                                                                                                                                                                  |     
    0x004b87b2 mov r12, rdi                                                                                                                                                                                  |     r12 = rdi;
    0x004b87b5 mov rax, qword [rdx]                                                                                                                                                                          |     rax = *(rdx);
    0x004b87b8 mov esi, 0x58                                                                                                                                                                                 |     esi = 0x58;
    0x004b87bd mov rdi, rdx                                                                                                                                                                                  |     rdi = rdx;
    0x004b87c0 call qword [rax + 0x10]                                                                                                                                                                       |     rax = uint64_t (*rax + 0x10)(void, void, void, void) (rbx, r12, r14, r15);
    0x004b87c3 mov rbx, rax                                                                                                                                                                                  |     rbx = rax;
    0x004b87c6 mov qword [rax], 0x4b8940                                                                                                                                                                     |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_TEST_CASE_10::EmptyDequeFunctor_.invokerFunction_void_;
    0x004b87cd lea r15, [rax + 8]                                                                                                                                                                            |     r15 = rax + 8;
    0x004b87d1 movups xmm0, xmmword [rbp]                                                                                                                                                                    |     __asm ("movups xmm0, xmmword [rbp]");
    0x004b87d5 movups xmm1, xmmword [rbp + 0x10]                                                                                                                                                             |     __asm ("movups xmm1, xmmword [rbp + 0x10]");
    0x004b87d9 movups xmmword [rax + 8], xmm0                                                                                                                                                                |     __asm ("movups xmmword [rax + 8], xmm0");
    0x004b87dd movups xmmword [rax + 0x18], xmm1                                                                                                                                                             |     __asm ("movups xmmword [rax + 0x18], xmm1");
    0x004b87e1 lea rdi, [rax + 0x28]                                                                                                                                                                         |     
    0x004b87e5 mov qword [rax + 0x28], 0                                                                                                                                                                     |     *((rax + 0x28)) = 0;
    0x004b87ed mov qword [rax + 0x50], r14                                                                                                                                                                   |     *((rax + 0x50)) = r14;
    0x004b87f1 movaps xmm0, xmmword [rip + 0x2da98]                                                                                                                                                          |     xmm0 = .comment;
    0x004b87f8 movups xmmword [rax + 0x40], xmm0                                                                                                                                                             |     __asm ("movups xmmword [rax + 0x40], xmm0");
    0x004b87fc mov ecx, 0x4e90b0                                                                                                                                                                             |     
    0x004b8801 xor esi, esi                                                                                                                                                                                  |     
    0x004b8803 xor edx, edx                                                                                                                                                                                  |     
    0x004b8805 call 0x4c2e20                                                                                                                                                                                 |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rax + 0x28, 0, 0, "string<...>::assign<Iter>(i,j): string too long");
    0x004b880a lea rdi, [rsp + 8]                                                                                                                                                                            |     
    0x004b880f call 0x4be750                                                                                                                                                                                 |     BloombergLP::bslmt::ThreadAttributes::ThreadAttributes() (rsp + 8);
    0x004b8814 lea rsi, [rsp + 8]                                                                                                                                                                            |     
    0x004b8819 mov edx, 0x4be2b0                                                                                                                                                                             |     
    0x004b881e mov rdi, r12                                                                                                                                                                                  |     
    0x004b8821 mov rcx, rbx                                                                                                                                                                                  |     
    0x004b8824 call 0x4bec40                                                                                                                                                                                 |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (r12, rsp + 8, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x004b8829 mov ebp, eax                                                                                                                                                                                  |     
    0x004b882b cmp qword [rsp + 0x40], 0x17                                                                                                                                                                  |     
                                                                                                                                                                                                             |     if (*((rsp + 0x40)) != 0x17) {
    0x004b8831 je 0x4b8843                                                                                                                                                                                   |         
    0x004b8833 mov rsi, qword [rsp + 0x20]                                                                                                                                                                   |         rsi = *((rsp + 0x20));
    0x004b8838 mov rdi, qword [rsp + 0x48]                                                                                                                                                                   |         rdi = *((rsp + 0x48));
    0x004b883d mov rax, qword [rdi]                                                                                                                                                                          |         rax = *(rdi);
    0x004b8840 call qword [rax + 0x18]                                                                                                                                                                       |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                             |     }
    0x004b8843 test ebp, ebp                                                                                                                                                                                 |     
                                                                                                                                                                                                             |     if (ebp != 0) {
    0x004b8845 je 0x4b8878                                                                                                                                                                                   |         
    0x004b8847 cmp qword [rbx + 0x48], 0x17                                                                                                                                                                  |         
                                                                                                                                                                                                             |         if (*((rbx + 0x48)) != 0x17) {
    0x004b884c je 0x4b885c                                                                                                                                                                                   |             
    0x004b884e mov rsi, qword [rbx + 0x28]                                                                                                                                                                   |             rsi = *((rbx + 0x28));
    0x004b8852 mov rdi, qword [rbx + 0x50]                                                                                                                                                                   |             rdi = *((rbx + 0x50));
    0x004b8856 mov rax, qword [rdi]                                                                                                                                                                          |             rax = *(rdi);
    0x004b8859 call qword [rax + 0x18]                                                                                                                                                                       |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                             |         }
    0x004b885c mov qword [rbx + 0x40], 0xffffffffffffffff                                                                                                                                                    |         *((rbx + 0x40)) = 0xffffffffffffffff;
    0x004b8864 mov rdi, r15                                                                                                                                                                                  |         
    0x004b8867 call 0x476a40                                                                                                                                                                                 |         TEST_CASE_10::EmptyDequeFunctor::~EmptyDequeFunctor() (r15);
    0x004b886c mov rax, qword [r14]                                                                                                                                                                          |         rax = *(r14);
    0x004b886f mov rdi, r14                                                                                                                                                                                  |         rdi = r14;
    0x004b8872 mov rsi, rbx                                                                                                                                                                                  |         rsi = rbx;
    0x004b8875 call qword [rax + 0x18]                                                                                                                                                                       |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                             |     }
    0x004b8878 mov eax, ebp                                                                                                                                                                                  |     eax = ebp;
    0x004b887a add rsp, 0x50                                                                                                                                                                                 |     
    0x004b887e pop rbx                                                                                                                                                                                       |     
    0x004b887f pop r12                                                                                                                                                                                       |     
    0x004b8881 pop r14                                                                                                                                                                                       |     
    0x004b8883 pop r15                                                                                                                                                                                       |     
    0x004b8885 pop rbp                                                                                                                                                                                       |     
    0x004b8886 ret                                                                                                                                                                                           |     return rax;
                                                                                                                                                                                                             | }
