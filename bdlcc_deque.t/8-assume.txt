    ; assembly                                                                                                                                                                                                       | /* r2dec pseudo code output */
                                                                                                                                                                                                                     | /* bdlcc_deque.t/assume @ 0x4bb840 */
                                                                                                                                                                                                                     | #include <stdint.h>
                                                                                                                                                                                                                     |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_TEST_CASE_5.StraightHWMFunctorBack__unsigned_long__TEST_CASE_5::StraightHWMFunctorBack_const__BloombergLP::bslma::Allocator_ ()           | int64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_TEST_CASE_5_StraightHWMFunctorBack_unsigned_long_TEST_CASE_5::StraightHWMFunctorBack_const_BloombergLP::bslma::Allocator_ (int64_t arg3, int64_t arg2, char * arg1) {
                                                                                                                                                                                                                     |     int64_t var_18h;
                                                                                                                                                                                                                     |     uint32_t var_38h;
                                                                                                                                                                                                                     |     int64_t var_40h;
                                                                                                                                                                                                                     |     rdx = arg3;
                                                                                                                                                                                                                     |     rsi = arg2;
                                                                                                                                                                                                                     |     rdi = arg1;
                                                                                                                                                                                                                     |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<TEST_CASE_5::StraightHWMFunctorBack>(unsigned long*, TEST_CASE_5::StraightHWMFunctorBack const&, BloombergLP::bslma::Allocator*) */
    0x004bb840 push rbp                                                                                                                                                                                              |     
    0x004bb841 push r15                                                                                                                                                                                              |     
    0x004bb843 push r14                                                                                                                                                                                              |     
    0x004bb845 push rbx                                                                                                                                                                                              |     
    0x004bb846 sub rsp, 0x48                                                                                                                                                                                         |     
    0x004bb84a mov r14, rdx                                                                                                                                                                                          |     r14 = rdx;
    0x004bb84d mov rbp, rsi                                                                                                                                                                                          |     
    0x004bb850 mov r15, rdi                                                                                                                                                                                          |     r15 = rdi;
    0x004bb853 mov rax, qword [rdx]                                                                                                                                                                                  |     rax = *(rdx);
    0x004bb856 mov esi, 0x48                                                                                                                                                                                         |     esi = 0x48;
    0x004bb85b mov rdi, rdx                                                                                                                                                                                          |     rdi = rdx;
    0x004bb85e call qword [rax + 0x10]                                                                                                                                                                               |     rax = uint64_t (*rax + 0x10)(void, void, void) (rbx, r14, r15);
    0x004bb861 mov rbx, rax                                                                                                                                                                                          |     rbx = rax;
    0x004bb864 mov qword [rax], 0x4bb9b0                                                                                                                                                                             |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_TEST_CASE_5::StraightHWMFunctorBack_.invokerFunction_void_;
    0x004bb86b movups xmm0, xmmword [rbp]                                                                                                                                                                            |     __asm ("movups xmm0, xmmword [rbp]");
    0x004bb86f movups xmmword [rax + 8], xmm0                                                                                                                                                                        |     __asm ("movups xmmword [rax + 8], xmm0");
    0x004bb873 lea rdi, [rax + 0x18]                                                                                                                                                                                 |     
    0x004bb877 mov qword [rax + 0x18], 0                                                                                                                                                                             |     *((rax + 0x18)) = 0;
    0x004bb87f mov qword [rax + 0x40], r14                                                                                                                                                                           |     *((rax + 0x40)) = r14;
    0x004bb883 movaps xmm0, xmmword [rip + 0x2aa06]                                                                                                                                                                  |     xmm0 = .comment;
    0x004bb88a movups xmmword [rax + 0x30], xmm0                                                                                                                                                                     |     __asm ("movups xmmword [rax + 0x30], xmm0");
    0x004bb88e mov ecx, 0x4e90b0                                                                                                                                                                                     |     
    0x004bb893 xor esi, esi                                                                                                                                                                                          |     
    0x004bb895 xor edx, edx                                                                                                                                                                                          |     
    0x004bb897 call 0x4c2e20                                                                                                                                                                                         |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rax + 0x18, 0, 0, "string<...>::assign<Iter>(i,j): string too long");
    0x004bb89c mov rdi, rsp                                                                                                                                                                                          |     
    0x004bb89f call 0x4be750                                                                                                                                                                                         |     BloombergLP::bslmt::ThreadAttributes::ThreadAttributes() (rsp);
    0x004bb8a4 mov rsi, rsp                                                                                                                                                                                          |     
    0x004bb8a7 mov edx, 0x4be2b0                                                                                                                                                                                     |     
    0x004bb8ac mov rdi, r15                                                                                                                                                                                          |     
    0x004bb8af mov rcx, rbx                                                                                                                                                                                          |     
    0x004bb8b2 call 0x4bec40                                                                                                                                                                                         |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (r15, rsp, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x004bb8b7 mov ebp, eax                                                                                                                                                                                          |     
    0x004bb8b9 cmp qword [rsp + 0x38], 0x17                                                                                                                                                                          |     
                                                                                                                                                                                                                     |     if (*((rsp + 0x38)) != 0x17) {
    0x004bb8bf je 0x4bb8d1                                                                                                                                                                                           |         
    0x004bb8c1 mov rsi, qword [rsp + 0x18]                                                                                                                                                                           |         rsi = *((rsp + 0x18));
    0x004bb8c6 mov rdi, qword [rsp + 0x40]                                                                                                                                                                           |         rdi = *((rsp + 0x40));
    0x004bb8cb mov rax, qword [rdi]                                                                                                                                                                                  |         rax = *(rdi);
    0x004bb8ce call qword [rax + 0x18]                                                                                                                                                                               |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                     |     }
    0x004bb8d1 test ebp, ebp                                                                                                                                                                                         |     
                                                                                                                                                                                                                     |     if (ebp != 0) {
    0x004bb8d3 je 0x4bb8fe                                                                                                                                                                                           |         
    0x004bb8d5 cmp qword [rbx + 0x38], 0x17                                                                                                                                                                          |         
                                                                                                                                                                                                                     |         if (*((rbx + 0x38)) != 0x17) {
    0x004bb8da je 0x4bb8ea                                                                                                                                                                                           |             
    0x004bb8dc mov rsi, qword [rbx + 0x18]                                                                                                                                                                           |             rsi = *((rbx + 0x18));
    0x004bb8e0 mov rdi, qword [rbx + 0x40]                                                                                                                                                                           |             rdi = *((rbx + 0x40));
    0x004bb8e4 mov rax, qword [rdi]                                                                                                                                                                                  |             rax = *(rdi);
    0x004bb8e7 call qword [rax + 0x18]                                                                                                                                                                               |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                     |         }
    0x004bb8ea mov qword [rbx + 0x30], 0xffffffffffffffff                                                                                                                                                            |         *((rbx + 0x30)) = 0xffffffffffffffff;
    0x004bb8f2 mov rax, qword [r14]                                                                                                                                                                                  |         rax = *(r14);
    0x004bb8f5 mov rdi, r14                                                                                                                                                                                          |         rdi = r14;
    0x004bb8f8 mov rsi, rbx                                                                                                                                                                                          |         rsi = rbx;
    0x004bb8fb call qword [rax + 0x18]                                                                                                                                                                               |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                     |     }
    0x004bb8fe mov eax, ebp                                                                                                                                                                                          |     eax = ebp;
    0x004bb900 add rsp, 0x48                                                                                                                                                                                         |     
    0x004bb904 pop rbx                                                                                                                                                                                               |     
    0x004bb905 pop r14                                                                                                                                                                                               |     
    0x004bb907 pop r15                                                                                                                                                                                               |     
    0x004bb909 pop rbp                                                                                                                                                                                               |     
    0x004bb90a ret                                                                                                                                                                                                   |     return rax;
                                                                                                                                                                                                                     | }
