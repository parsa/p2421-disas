    ; assembly                                                                                                                                                                                                       | /* r2dec pseudo code output */
                                                                                                                                                                                                                     | /* bdlcc_deque.t/none @ 0x4bbf20 */
                                                                                                                                                                                                                     | #include <stdint.h>
                                                                                                                                                                                                                     |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_TEST_CASE_5.StraightHWMFunctorBack__unsigned_long__TEST_CASE_5::StraightHWMFunctorBack_const__BloombergLP::bslma::Allocator_ ()           | uint64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_TEST_CASE_5_StraightHWMFunctorBack_unsigned_long_TEST_CASE_5::StraightHWMFunctorBack_const_BloombergLP::bslma::Allocator_ (int64_t arg3, int64_t arg2, char * arg1) {
                                                                                                                                                                                                                     |     int64_t var_18h;
                                                                                                                                                                                                                     |     uint32_t var_38h;
                                                                                                                                                                                                                     |     int64_t var_40h;
                                                                                                                                                                                                                     |     rdx = arg3;
                                                                                                                                                                                                                     |     rsi = arg2;
                                                                                                                                                                                                                     |     rdi = arg1;
                                                                                                                                                                                                                     |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<TEST_CASE_5::StraightHWMFunctorBack>(unsigned long*, TEST_CASE_5::StraightHWMFunctorBack const&, BloombergLP::bslma::Allocator*) */
    0x004bbf20 push rbp                                                                                                                                                                                              |     
    0x004bbf21 push r15                                                                                                                                                                                              |     
    0x004bbf23 push r14                                                                                                                                                                                              |     
    0x004bbf25 push rbx                                                                                                                                                                                              |     
    0x004bbf26 sub rsp, 0x48                                                                                                                                                                                         |     
    0x004bbf2a mov r14, rdx                                                                                                                                                                                          |     r14 = rdx;
    0x004bbf2d mov rbp, rsi                                                                                                                                                                                          |     
    0x004bbf30 mov r15, rdi                                                                                                                                                                                          |     r15 = rdi;
    0x004bbf33 test rdx, rdx                                                                                                                                                                                         |     
                                                                                                                                                                                                                     |     if (rdx == 0) {
    0x004bbf36 jne 0x4bbf4c                                                                                                                                                                                          |         
    0x004bbf38 mov r14, qword [rip + 0x26a5e1]                                                                                                                                                                       |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x004bbf3f test r14, r14                                                                                                                                                                                         |         
                                                                                                                                                                                                                     |         if (r14 != 0) {
    0x004bbf42 jne 0x4bbf4c                                                                                                                                                                                          |             goto label_0;
                                                                                                                                                                                                                     |         }
    0x004bbf44 call 0x4bd7f0                                                                                                                                                                                         |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x004bbf49 mov r14, rax                                                                                                                                                                                          |         r14 = rax;
                                                                                                                                                                                                                     |     }
                                                                                                                                                                                                                     | label_0:
    0x004bbf4c mov rax, qword [r14]                                                                                                                                                                                  |     rax = *(r14);
    0x004bbf4f mov esi, 0x48                                                                                                                                                                                         |     esi = 0x48;
    0x004bbf54 mov rdi, r14                                                                                                                                                                                          |     rdi = r14;
    0x004bbf57 call qword [rax + 0x10]                                                                                                                                                                               |     rax = uint64_t (*rax + 0x10)() ();
    0x004bbf5a mov rbx, rax                                                                                                                                                                                          |     rbx = rax;
    0x004bbf5d mov qword [rax], 0x4bc0b0                                                                                                                                                                             |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_TEST_CASE_5::StraightHWMFunctorBack_.invokerFunction_void_;
    0x004bbf64 movups xmm0, xmmword [rbp]                                                                                                                                                                            |     __asm ("movups xmm0, xmmword [rbp]");
    0x004bbf68 movups xmmword [rax + 8], xmm0                                                                                                                                                                        |     __asm ("movups xmmword [rax + 8], xmm0");
    0x004bbf6c lea rdi, [rax + 0x18]                                                                                                                                                                                 |     
    0x004bbf70 mov qword [rax + 0x18], 0                                                                                                                                                                             |     *((rax + 0x18)) = 0;
    0x004bbf78 mov qword [rax + 0x40], r14                                                                                                                                                                           |     *((rax + 0x40)) = r14;
    0x004bbf7c movaps xmm0, xmmword [rip + 0x2aa7d]                                                                                                                                                                  |     xmm0 = .comment;
    0x004bbf83 movups xmmword [rax + 0x30], xmm0                                                                                                                                                                     |     __asm ("movups xmmword [rax + 0x30], xmm0");
    0x004bbf87 mov ecx, 0x4e981a                                                                                                                                                                                     |     
    0x004bbf8c xor esi, esi                                                                                                                                                                                          |     
    0x004bbf8e xor edx, edx                                                                                                                                                                                          |     
    0x004bbf90 call 0x4c35b0                                                                                                                                                                                         |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rax + 0x18, 0, 0, "string<...>::assign<Iter>(i,j): string too long");
    0x004bbf95 mov rdi, rsp                                                                                                                                                                                          |     
    0x004bbf98 call 0x4beeb0                                                                                                                                                                                         |     BloombergLP::bslmt::ThreadAttributes::ThreadAttributes() (rsp);
    0x004bbf9d mov rsi, rsp                                                                                                                                                                                          |     
    0x004bbfa0 mov edx, 0x4bea10                                                                                                                                                                                     |     
    0x004bbfa5 mov rdi, r15                                                                                                                                                                                          |     
    0x004bbfa8 mov rcx, rbx                                                                                                                                                                                          |     
    0x004bbfab call 0x4bf3a0                                                                                                                                                                                         |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (r15, rsp, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x004bbfb0 mov ebp, eax                                                                                                                                                                                          |     
    0x004bbfb2 cmp qword [rsp + 0x38], 0x17                                                                                                                                                                          |     
                                                                                                                                                                                                                     |     if (*((rsp + 0x38)) != 0x17) {
    0x004bbfb8 je 0x4bbfca                                                                                                                                                                                           |         
    0x004bbfba mov rsi, qword [rsp + 0x18]                                                                                                                                                                           |         rsi = *((rsp + 0x18));
    0x004bbfbf mov rdi, qword [rsp + 0x40]                                                                                                                                                                           |         rdi = *((rsp + 0x40));
    0x004bbfc4 mov rax, qword [rdi]                                                                                                                                                                                  |         rax = *(rdi);
    0x004bbfc7 call qword [rax + 0x18]                                                                                                                                                                               |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                     |     }
    0x004bbfca test ebp, ebp                                                                                                                                                                                         |     
                                                                                                                                                                                                                     |     if (ebp != 0) {
    0x004bbfcc je 0x4bbff7                                                                                                                                                                                           |         
    0x004bbfce cmp qword [rbx + 0x38], 0x17                                                                                                                                                                          |         
                                                                                                                                                                                                                     |         if (*((rbx + 0x38)) != 0x17) {
    0x004bbfd3 je 0x4bbfe3                                                                                                                                                                                           |             
    0x004bbfd5 mov rsi, qword [rbx + 0x18]                                                                                                                                                                           |             rsi = *((rbx + 0x18));
    0x004bbfd9 mov rdi, qword [rbx + 0x40]                                                                                                                                                                           |             rdi = *((rbx + 0x40));
    0x004bbfdd mov rax, qword [rdi]                                                                                                                                                                                  |             rax = *(rdi);
    0x004bbfe0 call qword [rax + 0x18]                                                                                                                                                                               |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                     |         }
    0x004bbfe3 mov qword [rbx + 0x30], 0xffffffffffffffff                                                                                                                                                            |         *((rbx + 0x30)) = 0xffffffffffffffff;
    0x004bbfeb mov rax, qword [r14]                                                                                                                                                                                  |         rax = *(r14);
    0x004bbfee mov rdi, r14                                                                                                                                                                                          |         rdi = r14;
    0x004bbff1 mov rsi, rbx                                                                                                                                                                                          |         rsi = rbx;
    0x004bbff4 call qword [rax + 0x18]                                                                                                                                                                               |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                     |     }
    0x004bbff7 mov eax, ebp                                                                                                                                                                                          |     eax = ebp;
    0x004bbff9 add rsp, 0x48                                                                                                                                                                                         |     
    0x004bbffd pop rbx                                                                                                                                                                                               |     
    0x004bbffe pop r14                                                                                                                                                                                               |     
    0x004bc000 pop r15                                                                                                                                                                                               |     
    0x004bc002 pop rbp                                                                                                                                                                                               |     
    0x004bc003 ret                                                                                                                                                                                                   |     return rax;
                                                                                                                                                                                                                     | }
