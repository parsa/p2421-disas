    ; assembly                                                                                                                                                                                               | /* r2dec pseudo code output */
                                                                                                                                                                                                             | /* bdlcc_deque.t/none @ 0x4b8e50 */
                                                                                                                                                                                                             | #include <stdint.h>
                                                                                                                                                                                                             |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_TEST_CASE_10.EmptyDequeFunctor__unsigned_long__TEST_CASE_10::EmptyDequeFunctor_const__BloombergLP::bslma::Allocator_ ()           | uint64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_TEST_CASE_10_EmptyDequeFunctor_unsigned_long_TEST_CASE_10::EmptyDequeFunctor_const_BloombergLP::bslma::Allocator_ (int64_t arg3, char * arg2, int64_t arg1) {
                                                                                                                                                                                                             |     int64_t var_8h;
                                                                                                                                                                                                             |     int64_t var_20h;
                                                                                                                                                                                                             |     uint32_t var_40h;
                                                                                                                                                                                                             |     int64_t var_48h;
                                                                                                                                                                                                             |     rdx = arg3;
                                                                                                                                                                                                             |     rsi = arg2;
                                                                                                                                                                                                             |     rdi = arg1;
                                                                                                                                                                                                             |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<TEST_CASE_10::EmptyDequeFunctor>(unsigned long*, TEST_CASE_10::EmptyDequeFunctor const&, BloombergLP::bslma::Allocator*) */
    0x004b8e50 push rbp                                                                                                                                                                                      |     
    0x004b8e51 push r15                                                                                                                                                                                      |     
    0x004b8e53 push r14                                                                                                                                                                                      |     
    0x004b8e55 push r12                                                                                                                                                                                      |     
    0x004b8e57 push rbx                                                                                                                                                                                      |     
    0x004b8e58 sub rsp, 0x50                                                                                                                                                                                 |     
    0x004b8e5c mov r14, rdx                                                                                                                                                                                  |     r14 = rdx;
    0x004b8e5f mov rbp, rsi                                                                                                                                                                                  |     
    0x004b8e62 mov r12, rdi                                                                                                                                                                                  |     r12 = rdi;
    0x004b8e65 test rdx, rdx                                                                                                                                                                                 |     
                                                                                                                                                                                                             |     if (rdx == 0) {
    0x004b8e68 jne 0x4b8e7e                                                                                                                                                                                  |         
    0x004b8e6a mov r14, qword [rip + 0x26d6af]                                                                                                                                                               |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x004b8e71 test r14, r14                                                                                                                                                                                 |         
                                                                                                                                                                                                             |         if (r14 != 0) {
    0x004b8e74 jne 0x4b8e7e                                                                                                                                                                                  |             goto label_0;
                                                                                                                                                                                                             |         }
    0x004b8e76 call 0x4bd7f0                                                                                                                                                                                 |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x004b8e7b mov r14, rax                                                                                                                                                                                  |         r14 = rax;
                                                                                                                                                                                                             |     }
                                                                                                                                                                                                             | label_0:
    0x004b8e7e mov rax, qword [r14]                                                                                                                                                                          |     rax = *(r14);
    0x004b8e81 mov esi, 0x58                                                                                                                                                                                 |     esi = 0x58;
    0x004b8e86 mov rdi, r14                                                                                                                                                                                  |     rdi = r14;
    0x004b8e89 call qword [rax + 0x10]                                                                                                                                                                       |     rax = uint64_t (*rax + 0x10)() ();
    0x004b8e8c mov rbx, rax                                                                                                                                                                                  |     rbx = rax;
    0x004b8e8f mov qword [rax], 0x4b9010                                                                                                                                                                     |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_TEST_CASE_10::EmptyDequeFunctor_.invokerFunction_void_;
    0x004b8e96 lea r15, [rax + 8]                                                                                                                                                                            |     r15 = rax + 8;
    0x004b8e9a movups xmm0, xmmword [rbp]                                                                                                                                                                    |     __asm ("movups xmm0, xmmword [rbp]");
    0x004b8e9e movups xmm1, xmmword [rbp + 0x10]                                                                                                                                                             |     __asm ("movups xmm1, xmmword [rbp + 0x10]");
    0x004b8ea2 movups xmmword [rax + 8], xmm0                                                                                                                                                                |     __asm ("movups xmmword [rax + 8], xmm0");
    0x004b8ea6 movups xmmword [rax + 0x18], xmm1                                                                                                                                                             |     __asm ("movups xmmword [rax + 0x18], xmm1");
    0x004b8eaa lea rdi, [rax + 0x28]                                                                                                                                                                         |     
    0x004b8eae mov qword [rax + 0x28], 0                                                                                                                                                                     |     *((rax + 0x28)) = 0;
    0x004b8eb6 mov qword [rax + 0x50], r14                                                                                                                                                                   |     *((rax + 0x50)) = r14;
    0x004b8eba movaps xmm0, xmmword [rip + 0x2db3f]                                                                                                                                                          |     xmm0 = .comment;
    0x004b8ec1 movups xmmword [rax + 0x40], xmm0                                                                                                                                                             |     __asm ("movups xmmword [rax + 0x40], xmm0");
    0x004b8ec5 mov ecx, 0x4e981a                                                                                                                                                                             |     
    0x004b8eca xor esi, esi                                                                                                                                                                                  |     
    0x004b8ecc xor edx, edx                                                                                                                                                                                  |     
    0x004b8ece call 0x4c35b0                                                                                                                                                                                 |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rax + 0x28, 0, 0, "string<...>::assign<Iter>(i,j): string too long");
    0x004b8ed3 lea rdi, [rsp + 8]                                                                                                                                                                            |     
    0x004b8ed8 call 0x4beeb0                                                                                                                                                                                 |     BloombergLP::bslmt::ThreadAttributes::ThreadAttributes() (rsp + 8);
    0x004b8edd lea rsi, [rsp + 8]                                                                                                                                                                            |     
    0x004b8ee2 mov edx, 0x4bea10                                                                                                                                                                             |     
    0x004b8ee7 mov rdi, r12                                                                                                                                                                                  |     
    0x004b8eea mov rcx, rbx                                                                                                                                                                                  |     
    0x004b8eed call 0x4bf3a0                                                                                                                                                                                 |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (r12, rsp + 8, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x004b8ef2 mov ebp, eax                                                                                                                                                                                  |     
    0x004b8ef4 cmp qword [rsp + 0x40], 0x17                                                                                                                                                                  |     
                                                                                                                                                                                                             |     if (*((rsp + 0x40)) != 0x17) {
    0x004b8efa je 0x4b8f0c                                                                                                                                                                                   |         
    0x004b8efc mov rsi, qword [rsp + 0x20]                                                                                                                                                                   |         rsi = *((rsp + 0x20));
    0x004b8f01 mov rdi, qword [rsp + 0x48]                                                                                                                                                                   |         rdi = *((rsp + 0x48));
    0x004b8f06 mov rax, qword [rdi]                                                                                                                                                                          |         rax = *(rdi);
    0x004b8f09 call qword [rax + 0x18]                                                                                                                                                                       |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                             |     }
    0x004b8f0c test ebp, ebp                                                                                                                                                                                 |     
                                                                                                                                                                                                             |     if (ebp != 0) {
    0x004b8f0e je 0x4b8f41                                                                                                                                                                                   |         
    0x004b8f10 cmp qword [rbx + 0x48], 0x17                                                                                                                                                                  |         
                                                                                                                                                                                                             |         if (*((rbx + 0x48)) != 0x17) {
    0x004b8f15 je 0x4b8f25                                                                                                                                                                                   |             
    0x004b8f17 mov rsi, qword [rbx + 0x28]                                                                                                                                                                   |             rsi = *((rbx + 0x28));
    0x004b8f1b mov rdi, qword [rbx + 0x50]                                                                                                                                                                   |             rdi = *((rbx + 0x50));
    0x004b8f1f mov rax, qword [rdi]                                                                                                                                                                          |             rax = *(rdi);
    0x004b8f22 call qword [rax + 0x18]                                                                                                                                                                       |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                             |         }
    0x004b8f25 mov qword [rbx + 0x40], 0xffffffffffffffff                                                                                                                                                    |         *((rbx + 0x40)) = 0xffffffffffffffff;
    0x004b8f2d mov rdi, r15                                                                                                                                                                                  |         
    0x004b8f30 call 0x476910                                                                                                                                                                                 |         TEST_CASE_10::EmptyDequeFunctor::~EmptyDequeFunctor() (r15);
    0x004b8f35 mov rax, qword [r14]                                                                                                                                                                          |         rax = *(r14);
    0x004b8f38 mov rdi, r14                                                                                                                                                                                  |         rdi = r14;
    0x004b8f3b mov rsi, rbx                                                                                                                                                                                  |         rsi = rbx;
    0x004b8f3e call qword [rax + 0x18]                                                                                                                                                                       |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                             |     }
    0x004b8f41 mov eax, ebp                                                                                                                                                                                  |     eax = ebp;
    0x004b8f43 add rsp, 0x50                                                                                                                                                                                 |     
    0x004b8f47 pop rbx                                                                                                                                                                                       |     
    0x004b8f48 pop r12                                                                                                                                                                                       |     
    0x004b8f4a pop r14                                                                                                                                                                                       |     
    0x004b8f4c pop r15                                                                                                                                                                                       |     
    0x004b8f4e pop rbp                                                                                                                                                                                       |     
    0x004b8f4f ret                                                                                                                                                                                           |     return rax;
                                                                                                                                                                                                             | }
