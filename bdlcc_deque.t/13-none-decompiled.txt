    ; assembly                                                                                                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                                                                                                 | /* bdlcc_deque.t/none @ 0x4b64f0 */
                                                                                                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                                                                                                 |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_TEST_CASE_11.HighWaterMarkFunctor_double____unsigned_long__TEST_CASE_11::HighWaterMarkFunctor_double__const__BloombergLP::bslma::Allocator_ ()        | uint64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_TEST_CASE_11_HighWaterMarkFunctor_double_unsigned_long_TEST_CASE_11::HighWaterMarkFunctor_double_const_BloombergLP::bslma::Allocator_ (int64_t arg3, int64_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                 |     int64_t var_8h;
                                                                                                                                                                                                                                 |     int64_t var_20h;
                                                                                                                                                                                                                                 |     uint32_t var_40h;
                                                                                                                                                                                                                                 |     int64_t var_48h;
                                                                                                                                                                                                                                 |     rdx = arg3;
                                                                                                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                                                                                                 |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<TEST_CASE_11::HighWaterMarkFunctor<double> >(unsigned long*, TEST_CASE_11::HighWaterMarkFunctor<double> const&, BloombergLP::bslma::Allocator*) */
    0x004b64f0 push rbp                                                                                                                                                                                                          |     
    0x004b64f1 push r15                                                                                                                                                                                                          |     
    0x004b64f3 push r14                                                                                                                                                                                                          |     
    0x004b64f5 push r12                                                                                                                                                                                                          |     
    0x004b64f7 push rbx                                                                                                                                                                                                          |     
    0x004b64f8 sub rsp, 0x50                                                                                                                                                                                                     |     
    0x004b64fc mov r14, rdx                                                                                                                                                                                                      |     r14 = rdx;
    0x004b64ff mov rbp, rsi                                                                                                                                                                                                      |     
    0x004b6502 mov r12, rdi                                                                                                                                                                                                      |     r12 = rdi;
    0x004b6505 test rdx, rdx                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                 |     if (rdx == 0) {
    0x004b6508 jne 0x4b651e                                                                                                                                                                                                      |         
    0x004b650a mov r14, qword [rip + 0x27000f]                                                                                                                                                                                   |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x004b6511 test r14, r14                                                                                                                                                                                                     |         
                                                                                                                                                                                                                                 |         if (r14 != 0) {
    0x004b6514 jne 0x4b651e                                                                                                                                                                                                      |             goto label_0;
                                                                                                                                                                                                                                 |         }
    0x004b6516 call 0x4bd7f0                                                                                                                                                                                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x004b651b mov r14, rax                                                                                                                                                                                                      |         r14 = rax;
                                                                                                                                                                                                                                 |     }
                                                                                                                                                                                                                                 | label_0:
    0x004b651e mov rax, qword [r14]                                                                                                                                                                                              |     rax = *(r14);
    0x004b6521 mov esi, 0x50                                                                                                                                                                                                     |     esi = 0x50;
    0x004b6526 mov rdi, r14                                                                                                                                                                                                      |     rdi = r14;
    0x004b6529 call qword [rax + 0x10]                                                                                                                                                                                           |     rax = uint64_t (*rax + 0x10)() ();
    0x004b652c mov rbx, rax                                                                                                                                                                                                      |     rbx = rax;
    0x004b652f mov qword [rax], 0x4b66b0                                                                                                                                                                                         |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_TEST_CASE_11::HighWaterMarkFunctor_double___.invokerFunction_void_;
    0x004b6536 lea r15, [rax + 8]                                                                                                                                                                                                |     r15 = rax + 8;
    0x004b653a movups xmm0, xmmword [rbp]                                                                                                                                                                                        |     __asm ("movups xmm0, xmmword [rbp]");
    0x004b653e movups xmmword [rax + 8], xmm0                                                                                                                                                                                    |     __asm ("movups xmmword [rax + 8], xmm0");
    0x004b6542 mov rax, qword [rbp + 0x10]                                                                                                                                                                                       |     rax = *((rbp + 0x10));
    0x004b6546 mov qword [rbx + 0x18], rax                                                                                                                                                                                       |     *((rbx + 0x18)) = rax;
    0x004b654a lea rdi, [rbx + 0x20]                                                                                                                                                                                             |     
    0x004b654e mov qword [rbx + 0x20], 0                                                                                                                                                                                         |     *((rbx + 0x20)) = 0;
    0x004b6556 mov qword [rbx + 0x48], r14                                                                                                                                                                                       |     *((rbx + 0x48)) = r14;
    0x004b655a movaps xmm0, xmmword [rip + 0x3049f]                                                                                                                                                                              |     xmm0 = .comment;
    0x004b6561 movups xmmword [rbx + 0x38], xmm0                                                                                                                                                                                 |     __asm ("movups xmmword [rbx + 0x38], xmm0");
    0x004b6565 mov ecx, 0x4e981a                                                                                                                                                                                                 |     
    0x004b656a xor esi, esi                                                                                                                                                                                                      |     
    0x004b656c xor edx, edx                                                                                                                                                                                                      |     
    0x004b656e call 0x4c35b0                                                                                                                                                                                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x20, 0, 0, "string<...>::assign<Iter>(i,j): string too long");
    0x004b6573 lea rdi, [rsp + 8]                                                                                                                                                                                                |     
    0x004b6578 call 0x4beeb0                                                                                                                                                                                                     |     BloombergLP::bslmt::ThreadAttributes::ThreadAttributes() (rsp + 8);
    0x004b657d lea rsi, [rsp + 8]                                                                                                                                                                                                |     
    0x004b6582 mov edx, 0x4bea10                                                                                                                                                                                                 |     
    0x004b6587 mov rdi, r12                                                                                                                                                                                                      |     
    0x004b658a mov rcx, rbx                                                                                                                                                                                                      |     
    0x004b658d call 0x4bf3a0                                                                                                                                                                                                     |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (r12, rsp + 8, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x004b6592 mov ebp, eax                                                                                                                                                                                                      |     
    0x004b6594 cmp qword [rsp + 0x40], 0x17                                                                                                                                                                                      |     
                                                                                                                                                                                                                                 |     if (*((rsp + 0x40)) != 0x17) {
    0x004b659a je 0x4b65ac                                                                                                                                                                                                       |         
    0x004b659c mov rsi, qword [rsp + 0x20]                                                                                                                                                                                       |         rsi = *((rsp + 0x20));
    0x004b65a1 mov rdi, qword [rsp + 0x48]                                                                                                                                                                                       |         rdi = *((rsp + 0x48));
    0x004b65a6 mov rax, qword [rdi]                                                                                                                                                                                              |         rax = *(rdi);
    0x004b65a9 call qword [rax + 0x18]                                                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                 |     }
    0x004b65ac test ebp, ebp                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                 |     if (ebp != 0) {
    0x004b65ae je 0x4b65e1                                                                                                                                                                                                       |         
    0x004b65b0 cmp qword [rbx + 0x40], 0x17                                                                                                                                                                                      |         
                                                                                                                                                                                                                                 |         if (*((rbx + 0x40)) != 0x17) {
    0x004b65b5 je 0x4b65c5                                                                                                                                                                                                       |             
    0x004b65b7 mov rsi, qword [rbx + 0x20]                                                                                                                                                                                       |             rsi = *((rbx + 0x20));
    0x004b65bb mov rdi, qword [rbx + 0x48]                                                                                                                                                                                       |             rdi = *((rbx + 0x48));
    0x004b65bf mov rax, qword [rdi]                                                                                                                                                                                              |             rax = *(rdi);
    0x004b65c2 call qword [rax + 0x18]                                                                                                                                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                 |         }
    0x004b65c5 mov qword [rbx + 0x38], 0xffffffffffffffff                                                                                                                                                                        |         *((rbx + 0x38)) = 0xffffffffffffffff;
    0x004b65cd mov rdi, r15                                                                                                                                                                                                      |         
    0x004b65d0 call 0x4b6470                                                                                                                                                                                                     |         TEST_CASE_11::HighWaterMarkFunctor<double>::~HighWaterMarkFunctor() (r15);
    0x004b65d5 mov rax, qword [r14]                                                                                                                                                                                              |         rax = *(r14);
    0x004b65d8 mov rdi, r14                                                                                                                                                                                                      |         rdi = r14;
    0x004b65db mov rsi, rbx                                                                                                                                                                                                      |         rsi = rbx;
    0x004b65de call qword [rax + 0x18]                                                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                 |     }
    0x004b65e1 mov eax, ebp                                                                                                                                                                                                      |     eax = ebp;
    0x004b65e3 add rsp, 0x50                                                                                                                                                                                                     |     
    0x004b65e7 pop rbx                                                                                                                                                                                                           |     
    0x004b65e8 pop r12                                                                                                                                                                                                           |     
    0x004b65ea pop r14                                                                                                                                                                                                           |     
    0x004b65ec pop r15                                                                                                                                                                                                           |     
    0x004b65ee pop rbp                                                                                                                                                                                                           |     
    0x004b65ef ret                                                                                                                                                                                                               |     return rax;
                                                                                                                                                                                                                                 | }
