    ; assembly                                                                                   | /* r2dec pseudo code output */
                                                                                                 | /* balb_controlmanager.t/assume @ 0x40d180 */
                                                                                                 | #include <stdint.h>
                                                                                                 |  
    ; (fcn) method.BloombergLP::bdlb::String.lowerCaseCmp_char_const__char_const__int_ ()        | uint32_t method_BloombergLP::bdlb::String_lowerCaseCmp_char_const_char_const_int_ (int64_t arg3, int64_t arg2, uint32_t arg1) {
                                                                                                 |     rdx = arg3;
                                                                                                 |     rsi = arg2;
                                                                                                 |     rdi = arg1;
                                                                                                 |     /* BloombergLP::bdlb::String::lowerCaseCmp(char const*, char const*, int) */
    0x0040d180 test edx, edx                                                                     |     
                                                                                                 |     if (edx == 0) {
    0x0040d182 je 0x40d1b4                                                                       |         goto label_0;
                                                                                                 |     }
    0x0040d184 mov r9, qword [rip + 0x2a2f5]                                                     |     r9 = BloombergLP::bdlb::CharType::s_toLower_p;
    0x0040d18b mov r8d, edx                                                                      |     r8d = edx;
    0x0040d18e xor edx, edx                                                                      |     edx = 0;
                                                                                                 |     do {
    0x0040d190 movzx eax, byte [rdi + rdx]                                                       |         eax = *((rdi + rdx));
    0x0040d194 movzx ecx, byte [r9 + rax]                                                        |         ecx = *((r9 + rax));
    0x0040d199 movzx eax, byte [rsi + rdx]                                                       |         eax = *((rsi + rdx));
    0x0040d19d movzx eax, byte [r9 + rax]                                                        |         eax = *((r9 + rax));
    0x0040d1a2 test cl, cl                                                                       |         
                                                                                                 |         if (cl == 0) {
    0x0040d1a4 je 0x40d1c2                                                                       |             goto label_1;
                                                                                                 |         }
    0x0040d1a6 cmp cl, al                                                                        |         
                                                                                                 |         if (cl != al) {
    0x0040d1a8 jne 0x40d1c2                                                                      |             goto label_1;
                                                                                                 |         }
    0x0040d1aa inc rdx                                                                           |         rdx++;
    0x0040d1ad cmp r8, rdx                                                                       |         
    0x0040d1b0 jne 0x40d190                                                                      |         
                                                                                                 |     } while (r8 != rdx);
    0x0040d1b2 jmp 0x40d1b7                                                                      |     goto label_2;
                                                                                                 | label_0:
    0x0040d1b4 xor r8d, r8d                                                                      |     r8d = 0;
                                                                                                 | label_2:
    0x0040d1b7 xor eax, eax                                                                      |     eax = 0;
    0x0040d1b9 cmp byte [rdi + r8], 0                                                            |     
    0x0040d1be setne al                                                                          |     al = (*((rdi + r8)) != 0) ? 1 : 0;
    0x0040d1c1 ret                                                                               |     return eax;
                                                                                                 | label_1:
    0x0040d1c2 xor edx, edx                                                                      |     edx = 0;
    0x0040d1c4 cmp cl, al                                                                        |     
    0x0040d1c6 setae dl                                                                          |     dl = (cl >= al) ? 1 : 0;
    0x0040d1c9 lea eax, [rdx + rdx - 1]                                                          |     eax = rdx + rdx - 1;
    0x0040d1cd ret                                                                               |     return eax;
                                                                                                 | }
