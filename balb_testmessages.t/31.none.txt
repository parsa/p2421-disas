    ; assembly                                                                       | /* r2dec pseudo code output */
                                                                                     | /* balb_testmessages.t/none @ 0x410ba0 */
                                                                                     | #include <stdint.h>
                                                                                     |  
    ; (fcn) method.BloombergLP::balb::SequenceWithAnonymityChoice2.reset__ ()        | int64_t method_BloombergLP::balb::SequenceWithAnonymityChoice2_reset_ (int64_t arg1) {
                                                                                     |     rdi = arg1;
                                                                                     |     /* BloombergLP::balb::SequenceWithAnonymityChoice2::reset() */
    0x00410ba0 push r15                                                              |     
    0x00410ba2 push r14                                                              |     
    0x00410ba4 push r13                                                              |     
    0x00410ba6 push r12                                                              |     
    0x00410ba8 push rbx                                                              |     
    0x00410ba9 mov rbx, rdi                                                          |     rbx = rdi;
    0x00410bac mov eax, dword [rdi + 8]                                              |     eax = *((rdi + 8));
    0x00410baf cmp eax, 1                                                            |     
                                                                                     |     if (eax != 1) {
    0x00410bb2 je 0x410bd2                                                           |         
    0x00410bb4 test eax, eax                                                         |         
                                                                                     |         if (eax != 0) {
    0x00410bb6 jne 0x410c3f                                                          |             goto label_0;
                                                                                     |         }
    0x00410bbc mov r14, qword [rbx]                                                  |         r14 = *(rbx);
    0x00410bbf test r14, r14                                                         |         
                                                                                     |         if (r14 == 0) {
    0x00410bc2 je 0x410c3f                                                           |             goto label_0;
                                                                                     |         }
    0x00410bc4 mov r15, qword [rbx + 0x10]                                           |         r15 = *((rbx + 0x10));
    0x00410bc8 mov rdi, r14                                                          |         
    0x00410bcb call 0x40e240                                                         |         BloombergLP::balb::Sequence4::~Sequence4() (r14);
    0x00410bd0 jmp 0x410c33                                                          |         
                                                                                     |     } else {
    0x00410bd2 mov r14, qword [rbx]                                                  |         r14 = *(rbx);
    0x00410bd5 test r14, r14                                                         |         
                                                                                     |         if (r14 == 0) {
    0x00410bd8 je 0x410c3f                                                           |             goto label_0;
                                                                                     |         }
    0x00410bda mov r15, qword [rbx + 0x10]                                           |         r15 = *((rbx + 0x10));
    0x00410bde mov eax, dword [r14 + 0x30]                                           |         eax = *((r14 + 0x30));
    0x00410be2 cmp eax, 2                                                            |         
                                                                                     |         if (eax != 2) {
    0x00410be5 je 0x410c0a                                                           |             
    0x00410be7 cmp eax, 1                                                            |             
                                                                                     |             if (eax != 1) {
    0x00410bea jne 0x410c2b                                                          |                 goto label_1;
                                                                                     |             }
    0x00410bec cmp qword [r14 + 0x20], 0x17                                          |             
                                                                                     |             if (*((r14 + 0x20)) != 0x17) {
    0x00410bf1 je 0x410c00                                                           |                 
    0x00410bf3 mov rsi, qword [r14]                                                  |                 rsi = *(r14);
    0x00410bf6 mov rdi, qword [r14 + 0x28]                                           |                 rdi = *((r14 + 0x28));
    0x00410bfa mov rax, qword [rdi]                                                  |                 rax = *(rdi);
    0x00410bfd call qword [rax + 0x18]                                               |                 uint64_t (*rax + 0x18)() ();
                                                                                     |             }
    0x00410c00 mov qword [r14 + 0x18], 0xffffffffffffffff                            |             *((r14 + 0x18)) = 0xffffffffffffffff;
    0x00410c08 jmp 0x410c2b                                                          |             
                                                                                     |         } else {
    0x00410c0a mov r12, qword [r14]                                                  |             r12 = *(r14);
    0x00410c0d test r12, r12                                                         |             
                                                                                     |             if (r12 == 0) {
    0x00410c10 je 0x410c2b                                                           |                 goto label_1;
                                                                                     |             }
    0x00410c12 mov r13, qword [r14 + 0x38]                                           |             r13 = *((r14 + 0x38));
    0x00410c16 mov rdi, r12                                                          |             
    0x00410c19 call 0x415670                                                         |             BloombergLP::balb::Choice1::~Choice1() (r12);
    0x00410c1e mov rax, qword [r13]                                                  |             rax = *(r13);
    0x00410c22 mov rdi, r13                                                          |             rdi = r13;
    0x00410c25 mov rsi, r12                                                          |             rsi = r12;
    0x00410c28 call qword [rax + 0x18]                                               |             uint64_t (*rax + 0x18)() ();
                                                                                     |         }
                                                                                     | label_1:
    0x00410c2b mov dword [r14 + 0x30], 0xffffffff                                    |         *((r14 + 0x30)) = 0xffffffff;
                                                                                     |     }
    0x00410c33 mov rax, qword [r15]                                                  |     rax = *(r15);
    0x00410c36 mov rdi, r15                                                          |     rdi = r15;
    0x00410c39 mov rsi, r14                                                          |     rsi = r14;
    0x00410c3c call qword [rax + 0x18]                                               |     uint64_t (*rax + 0x18)() ();
                                                                                     | label_0:
    0x00410c3f mov dword [rbx + 8], 0xffffffff                                       |     *((rbx + 8)) = 0xffffffff;
    0x00410c46 pop rbx                                                               |     
    0x00410c47 pop r12                                                               |     
    0x00410c49 pop r13                                                               |     
    0x00410c4b pop r14                                                               |     
    0x00410c4d pop r15                                                               |     
    0x00410c4f ret                                                                   |     return rax;
                                                                                     | }
