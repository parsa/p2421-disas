    ; assembly                                                                                                                               | /* r2dec pseudo code output */
                                                                                                                                             | /* balb_testmessages.t/none @ 0x405120 */
                                                                                                                                             | #include <stdint.h>
                                                                                                                                             |  
    ; (fcn) method.BloombergLP::balb::SequenceWithAnonymityChoice1.operator_BloombergLP::balb::SequenceWithAnonymityChoice1_const_ ()        | int64_t method_BloombergLP::balb::SequenceWithAnonymityChoice1_operator_BloombergLP::balb::SequenceWithAnonymityChoice1_const_ (int64_t arg2, uint32_t arg1) {
                                                                                                                                             |     rsi = arg2;
                                                                                                                                             |     rdi = arg1;
                                                                                                                                             |     /* BloombergLP::balb::SequenceWithAnonymityChoice1::operator=(BloombergLP::balb::SequenceWithAnonymityChoice1 const&) */
    0x00405120 push rbp                                                                                                                      |     
    0x00405121 push rbx                                                                                                                      |     
    0x00405122 push rax                                                                                                                      |     
    0x00405123 mov rbx, rdi                                                                                                                  |     rbx = rdi;
    0x00405126 cmp rdi, rsi                                                                                                                  |     
                                                                                                                                             |     if (rdi != rsi) {
    0x00405129 je 0x4051a6                                                                                                                   |         
    0x0040512b mov eax, dword [rsi + 0x30]                                                                                                   |         eax = *((rsi + 0x30));
    0x0040512e cmp eax, 1                                                                                                                    |         
                                                                                                                                             |         if (eax != 1) {
    0x00405131 je 0x40514b                                                                                                                   |             
    0x00405133 test eax, eax                                                                                                                 |             
                                                                                                                                             |             if (eax == 0) {
    0x00405135 jne 0x405155                                                                                                                  |                 
    0x00405137 mov bpl, byte [rsi]                                                                                                           |                 bpl = *(rsi);
    0x0040513a mov eax, dword [rbx + 0x30]                                                                                                   |                 eax = *((rbx + 0x30));
    0x0040513d cmp eax, 1                                                                                                                    |                 
                                                                                                                                             |                 if (eax != 1) {
    0x00405140 je 0x405180                                                                                                                   |                     
    0x00405142 test eax, eax                                                                                                                 |                     
                                                                                                                                             |                     if (eax == 0) {
    0x00405144 jne 0x40519c                                                                                                                  |                         
    0x00405146 mov byte [rbx], bpl                                                                                                           |                         *(rbx) = bpl;
    0x00405149 jmp 0x4051a6                                                                                                                  |                         
                                                                                                                                             |                     } else {
    0x0040514b mov rdi, rbx                                                                                                                  |                         
    0x0040514e call 0x405220                                                                                                                 |                         BloombergLP::balb::SequenceWithAnonymityChoice1::makeSelection6(bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>const&) (rbx, rsi);
    0x00405153 jmp 0x4051a6                                                                                                                  |                         
                                                                                                                                             |                     } else {
    0x00405155 cmp dword [rbx + 0x30], 1                                                                                                     |                         
                                                                                                                                             |                     }
                                                                                                                                             |                     if (*((rbx + 0x30)) == 1) {
    0x00405159 jne 0x405177                                                                                                                  |                         
    0x0040515b cmp qword [rbx + 0x20], 0x17                                                                                                  |                         
                                                                                                                                             |                         if (*((rbx + 0x20)) != 0x17) {
    0x00405160 je 0x40516f                                                                                                                   |                             
    0x00405162 mov rsi, qword [rbx]                                                                                                          |                             rsi = *(rbx);
    0x00405165 mov rdi, qword [rbx + 0x28]                                                                                                   |                             rdi = *((rbx + 0x28));
    0x00405169 mov rax, qword [rdi]                                                                                                          |                             rax = *(rdi);
    0x0040516c call qword [rax + 0x18]                                                                                                       |                             uint64_t (*rax + 0x18)() ();
                                                                                                                                             |                         }
    0x0040516f mov qword [rbx + 0x18], 0xffffffffffffffff                                                                                    |                         *((rbx + 0x18)) = 0xffffffffffffffff;
                                                                                                                                             |                     }
    0x00405177 mov dword [rbx + 0x30], 0xffffffff                                                                                            |                     *((rbx + 0x30)) = 0xffffffff;
    0x0040517e jmp 0x4051a6                                                                                                                  |                     
                                                                                                                                             |                 } else {
    0x00405180 cmp qword [rbx + 0x20], 0x17                                                                                                  |                     
                                                                                                                                             |                 }
                                                                                                                                             |             }
                                                                                                                                             |             if (*((rbx + 0x20)) != 0x17) {
    0x00405185 je 0x405194                                                                                                                   |                 
    0x00405187 mov rsi, qword [rbx]                                                                                                          |                 rsi = *(rbx);
    0x0040518a mov rdi, qword [rbx + 0x28]                                                                                                   |                 rdi = *((rbx + 0x28));
    0x0040518e mov rax, qword [rdi]                                                                                                          |                 rax = *(rdi);
    0x00405191 call qword [rax + 0x18]                                                                                                       |                 uint64_t (*rax + 0x18)() ();
                                                                                                                                             |             }
    0x00405194 mov qword [rbx + 0x18], 0xffffffffffffffff                                                                                    |             *((rbx + 0x18)) = 0xffffffffffffffff;
    0x0040519c mov byte [rbx], bpl                                                                                                           |             *(rbx) = bpl;
    0x0040519f mov dword [rbx + 0x30], 0                                                                                                     |             *((rbx + 0x30)) = 0;
                                                                                                                                             |         }
                                                                                                                                             |     }
    0x004051a6 mov rax, rbx                                                                                                                  |     rax = rbx;
    0x004051a9 add rsp, 8                                                                                                                    |     
    0x004051ad pop rbx                                                                                                                       |     
    0x004051ae pop rbp                                                                                                                       |     
    0x004051af ret                                                                                                                           |     return rax;
                                                                                                                                             | }
