    ; assembly                                                                                                                                                               | /* r2dec pseudo code output */
                                                                                                                                                                             | /* balb_testmessages.t/none @ 0x405220 */
                                                                                                                                                                             | #include <stdint.h>
                                                                                                                                                                             |  
    ; (fcn) method.BloombergLP::balb::SequenceWithAnonymityChoice1.makeSelection6_bsl::basic_string_char__std::__1::char_traits_char___bsl::allocator_char____const_ ()      | uint64_t method_BloombergLP::balb::SequenceWithAnonymityChoice1_makeSelection6_bsl::basic_string_char_std::_1::char_traits_char_bsl::allocator_char_const_ (int64_t arg2, uint32_t arg1) {
                                                                                                                                                                             |     rsi = arg2;
                                                                                                                                                                             |     rdi = arg1;
                                                                                                                                                                             |     /* BloombergLP::balb::SequenceWithAnonymityChoice1::makeSelection6(bsl::basic_string<char, std::__1::char_traits<char>, bsl::allocator<char> > const&) */
    0x00405220 push r15                                                                                                                                                      |     
    0x00405222 push r14                                                                                                                                                      |     
    0x00405224 push rbx                                                                                                                                                      |     
    0x00405225 mov r14, rsi                                                                                                                                                  |     r14 = rsi;
    0x00405228 mov rbx, rdi                                                                                                                                                  |     rbx = rdi;
    0x0040522b cmp dword [rdi + 0x30], 1                                                                                                                                     |     
                                                                                                                                                                             |     if (*((rdi + 0x30)) == 1) {
    0x0040522f jne 0x405269                                                                                                                                                  |         
    0x00405231 cmp rbx, r14                                                                                                                                                  |         
                                                                                                                                                                             |         if (rbx == r14) {
    0x00405234 je 0x405310                                                                                                                                                   |             goto label_0;
                                                                                                                                                                             |         }
    0x0040523a mov rdx, qword [r14 + 0x18]                                                                                                                                   |         rdx = *((r14 + 0x18));
    0x0040523e cmp qword [r14 + 0x20], 0x17                                                                                                                                  |         
                                                                                                                                                                             |         if (*((r14 + 0x20)) != 0x17) {
    0x00405243 je 0x405248                                                                                                                                                   |             
    0x00405245 mov r14, qword [r14]                                                                                                                                          |             r14 = *(r14);
                                                                                                                                                                             |         }
    0x00405248 mov r15, qword [rbx + 0x18]                                                                                                                                   |         r15 = *((rbx + 0x18));
    0x0040524c mov qword [rbx + 0x18], 0                                                                                                                                     |         *((rbx + 0x18)) = 0;
    0x00405254 mov ecx, 0x447e61                                                                                                                                             |         
    0x00405259 mov rdi, rbx                                                                                                                                                  |         
    0x0040525c mov rsi, r14                                                                                                                                                  |         
    0x0040525f call 0x422c80                                                                                                                                                 |         bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx, r14, rdx, "string<...>::operator=(const string&...): string too long");
    0x00405264 jmp 0x405310                                                                                                                                                  |         
                                                                                                                                                                             |     } else {
    0x00405269 mov dword [rbx + 0x30], 0xffffffff                                                                                                                            |         *((rbx + 0x30)) = 0xffffffff;
    0x00405270 mov rdi, qword [rbx + 0x38]                                                                                                                                   |         rdi = *((rbx + 0x38));
    0x00405274 test rdi, rdi                                                                                                                                                 |         
                                                                                                                                                                             |         if (rdi == 0) {
    0x00405277 jne 0x40528d                                                                                                                                                  |             
    0x00405279 mov rdi, qword [rip + 0x2798d0]                                                                                                                               |             rdi = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00405280 test rdi, rdi                                                                                                                                                 |             
                                                                                                                                                                             |             if (rdi != 0) {
    0x00405283 jne 0x40528d                                                                                                                                                  |                 goto label_1;
                                                                                                                                                                             |             }
    0x00405285 call 0x4207c0                                                                                                                                                 |             rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x0040528a mov rdi, rax                                                                                                                                                  |             rdi = rax;
                                                                                                                                                                             |         }
                                                                                                                                                                             | label_1:
    0x0040528d mov rax, qword [r14 + 0x20]                                                                                                                                   |         rax = *((r14 + 0x20));
    0x00405291 mov qword [rbx + 0x20], rax                                                                                                                                   |         *((rbx + 0x20)) = rax;
    0x00405295 movups xmm0, xmmword [r14]                                                                                                                                    |         __asm ("movups xmm0, xmmword [r14]");
    0x00405299 movups xmm1, xmmword [r14 + 0x10]                                                                                                                             |         __asm ("movups xmm1, xmmword [r14 + 0x10]");
    0x0040529e movups xmmword [rbx + 0x10], xmm1                                                                                                                             |         __asm ("movups xmmword [rbx + 0x10], xmm1");
    0x004052a2 movups xmmword [rbx], xmm0                                                                                                                                    |         __asm ("movups xmmword [rbx], xmm0");
    0x004052a5 mov qword [rbx + 0x28], rdi                                                                                                                                   |         *((rbx + 0x28)) = rdi;
    0x004052a9 cmp rax, 0x17                                                                                                                                                 |         
                                                                                                                                                                             |         if (rax != 0x17) {
    0x004052ad je 0x405309                                                                                                                                                   |             
    0x004052af mov rax, qword [r14 + 0x18]                                                                                                                                   |             rax = *((r14 + 0x18));
    0x004052b3 cmp rax, 0x17                                                                                                                                                 |             
    0x004052b7 mov esi, 0x17                                                                                                                                                 |             esi = 0x17;
                                                                                                                                                                             |             if (rax > 0x17) {
    0x004052bc cmova rsi, rax                                                                                                                                                |                 rsi = rax;
                                                                                                                                                                             |             }
    0x004052c0 mov qword [rbx], 0                                                                                                                                            |             *(rbx) = 0;
    0x004052c7 mov qword [rbx + 0x18], rax                                                                                                                                   |             *((rbx + 0x18)) = rax;
    0x004052cb mov qword [rbx + 0x20], rsi                                                                                                                                   |             *((rbx + 0x20)) = rsi;
    0x004052cf cmp rax, 0x18                                                                                                                                                 |             
                                                                                                                                                                             |             if (rax >= 0x18) {
    0x004052d3 jb 0x4052e8                                                                                                                                                   |                 
    0x004052d5 inc rsi                                                                                                                                                       |                 rsi++;
    0x004052d8 mov rax, qword [rdi]                                                                                                                                          |                 rax = *(rdi);
    0x004052db call qword [rax + 0x10]                                                                                                                                       |                 rax = uint64_t (*rax + 0x10)() ();
    0x004052de mov qword [rbx], rax                                                                                                                                          |                 *(rbx) = rax;
    0x004052e1 cmp qword [rbx + 0x20], 0x17                                                                                                                                  |                 
                                                                                                                                                                             |                 if (*((rbx + 0x20)) != 0x17) {
    0x004052e6 jne 0x4052eb                                                                                                                                                  |                     goto label_2;
                                                                                                                                                                             |                 }
                                                                                                                                                                             |             }
    0x004052e8 mov rax, rbx                                                                                                                                                  |             rax = rbx;
                                                                                                                                                                             | label_2:
    0x004052eb mov rdx, qword [rbx + 0x18]                                                                                                                                   |             rdx = *((rbx + 0x18));
    0x004052ef inc rdx                                                                                                                                                       |             rdx++;
                                                                                                                                                                             |             if (rdx == 0) {
    0x004052f2 je 0x405309                                                                                                                                                   |                 goto label_3;
                                                                                                                                                                             |             }
    0x004052f4 cmp qword [r14 + 0x20], 0x17                                                                                                                                  |             
                                                                                                                                                                             |             if (*((r14 + 0x20)) != 0x17) {
    0x004052f9 je 0x4052fe                                                                                                                                                   |                 
    0x004052fb mov r14, qword [r14]                                                                                                                                          |                 r14 = *(r14);
                                                                                                                                                                             |             }
    0x004052fe mov rdi, rax                                                                                                                                                  |             
    0x00405301 mov rsi, r14                                                                                                                                                  |             
    0x00405304 call 0x403a30                                                                                                                                                 |             memcpy (rax, r14, rdx);
                                                                                                                                                                             |         }
                                                                                                                                                                             | label_3:
    0x00405309 mov dword [rbx + 0x30], 1                                                                                                                                     |         *((rbx + 0x30)) = 1;
                                                                                                                                                                             |     }
                                                                                                                                                                             | label_0:
    0x00405310 mov rax, rbx                                                                                                                                                  |     rax = rbx;
    0x00405313 pop rbx                                                                                                                                                       |     
    0x00405314 pop r14                                                                                                                                                       |     
    0x00405316 pop r15                                                                                                                                                       |     
    0x00405318 ret                                                                                                                                                           |     return rax;
                                                                                                                                                                             | }
