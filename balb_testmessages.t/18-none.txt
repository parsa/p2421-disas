    ; assembly                                                                               | /* r2dec pseudo code output */
                                                                                             | /* balb_testmessages.t/none @ 0x4113f0 */
                                                                                             | #include <stdint.h>
                                                                                             |  
    ; (fcn) method.BloombergLP::balb::SequenceWithAnonymity.SequenceWithAnonymity__ ()       | int64_t method_BloombergLP::balb::SequenceWithAnonymity_SequenceWithAnonymity_ (int64_t arg1) {
                                                                                             |     rdi = arg1;
                                                                                             |     /* BloombergLP::balb::SequenceWithAnonymity::~SequenceWithAnonymity() */
    0x004113f0 push rbx                                                                      |     
    0x004113f1 mov rbx, rdi                                                                  |     rbx = rdi;
    0x004113f4 add rdi, 0x1e8                                                                |     rdi += 0x1e8;
    0x004113fb call 0x4093b0                                                                 |     BloombergLP::balb::Sequence6::~Sequence6() (rdi);
    0x00411400 mov eax, dword [rbx + 0x1d8]                                                  |     eax = *((rbx + 0x1d8));
    0x00411406 cmp eax, 2                                                                    |     
                                                                                             |     if (eax != 2) {
    0x00411409 je 0x41141a                                                                   |         
    0x0041140b test eax, eax                                                                 |         
                                                                                             |         if (eax != 0) {
    0x0041140d jne 0x411440                                                                  |             goto label_0;
                                                                                             |         }
    0x0041140f lea rdi, [rbx + 0x68]                                                         |         
    0x00411413 call 0x4093b0                                                                 |         BloombergLP::balb::Sequence6::~Sequence6() (rbx + 0x68);
    0x00411418 jmp 0x411440                                                                  |         
                                                                                             |     } else {
    0x0041141a cmp qword [rbx + 0x88], 0x17                                                  |         
                                                                                             |         if (*((rbx + 0x88)) != 0x17) {
    0x00411422 je 0x411435                                                                   |             
    0x00411424 mov rsi, qword [rbx + 0x68]                                                   |             rsi = *((rbx + 0x68));
    0x00411428 mov rdi, qword [rbx + 0x90]                                                   |             rdi = *((rbx + 0x90));
    0x0041142f mov rax, qword [rdi]                                                          |             rax = *(rdi);
    0x00411432 call qword [rax + 0x18]                                                       |             uint64_t (*rax + 0x18)() ();
                                                                                             |         }
    0x00411435 mov qword [rbx + 0x80], 0xffffffffffffffff                                    |         *((rbx + 0x80)) = 0xffffffffffffffff;
                                                                                             |     }
                                                                                             | label_0:
    0x00411440 mov dword [rbx + 0x1d8], 0xffffffff                                           |     *((rbx + 0x1d8)) = 0xffffffff;
    0x0041144a cmp dword [rbx + 0x58], 1                                                     |     
                                                                                             |     if (*((rbx + 0x58)) == 1) {
    0x0041144e jne 0x41146d                                                                  |         
    0x00411450 cmp qword [rbx + 0x48], 0x17                                                  |         
                                                                                             |         if (*((rbx + 0x48)) != 0x17) {
    0x00411455 je 0x411465                                                                   |             
    0x00411457 mov rsi, qword [rbx + 0x28]                                                   |             rsi = *((rbx + 0x28));
    0x0041145b mov rdi, qword [rbx + 0x50]                                                   |             rdi = *((rbx + 0x50));
    0x0041145f mov rax, qword [rdi]                                                          |             rax = *(rdi);
    0x00411462 call qword [rax + 0x18]                                                       |             uint64_t (*rax + 0x18)() ();
                                                                                             |         }
    0x00411465 mov qword [rbx + 0x40], 0xffffffffffffffff                                    |         *((rbx + 0x40)) = 0xffffffffffffffff;
                                                                                             |     }
    0x0041146d mov dword [rbx + 0x58], 0xffffffff                                            |     *((rbx + 0x58)) = 0xffffffff;
    0x00411474 cmp byte [rbx + 0x18], 0                                                      |     
                                                                                             |     if (*((rbx + 0x18)) != 0) {
    0x00411478 je 0x411486                                                                   |         
    0x0041147a mov byte [rbx + 0x18], 0                                                      |         *((rbx + 0x18)) = 0;
    0x0041147e mov rdi, rbx                                                                  |         
    0x00411481 call 0x410ba0                                                                 |         BloombergLP::balb::SequenceWithAnonymityChoice2::reset() (rbx);
                                                                                             |     }
    0x00411486 pop rbx                                                                       |     
    0x00411487 ret                                                                           |     return rax;
                                                                                             | }
