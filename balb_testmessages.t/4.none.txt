    ; assembly                                                           | /* r2dec pseudo code output */
                                                                         | /* balb_testmessages.t/none @ 0x40f900 */
                                                                         | #include <stdint.h>
                                                                         |  
    ; (fcn) method.BloombergLP::balb::Sequence1.Sequence1__ ()           | int64_t method_BloombergLP::balb::Sequence1_Sequence1_ (int64_t arg1) {
                                                                         |     rdi = arg1;
                                                                         |     /* BloombergLP::balb::Sequence1::~Sequence1() */
    0x0040f900 push r15                                                  |     
    0x0040f902 push r14                                                  |     
    0x0040f904 push r13                                                  |     
    0x0040f906 push r12                                                  |     
    0x0040f908 push rbx                                                  |     
    0x0040f909 mov r14, rdi                                              |     r14 = rdi;
    0x0040f90c mov rbx, qword [rdi + 0x1f8]                              |     rbx = *((rdi + 0x1f8));
    0x0040f913 test rbx, rbx                                             |     
                                                                         |     if (rbx != 0) {
    0x0040f916 je 0x40f97a                                               |         
    0x0040f918 mov r15, qword [r14]                                      |         r15 = *(r14);
    0x0040f91b mov eax, dword [rbx + 0x30]                               |         eax = *((rbx + 0x30));
    0x0040f91e cmp eax, 2                                                |         
                                                                         |         if (eax != 2) {
    0x0040f921 je 0x40f946                                               |             
    0x0040f923 cmp eax, 1                                                |             
                                                                         |             if (eax != 1) {
    0x0040f926 jne 0x40f967                                              |                 goto label_2;
                                                                         |             }
    0x0040f928 cmp qword [rbx + 0x20], 0x17                              |             
                                                                         |             if (*((rbx + 0x20)) != 0x17) {
    0x0040f92d je 0x40f93c                                               |                 
    0x0040f92f mov rsi, qword [rbx]                                      |                 rsi = *(rbx);
    0x0040f932 mov rdi, qword [rbx + 0x28]                               |                 rdi = *((rbx + 0x28));
    0x0040f936 mov rax, qword [rdi]                                      |                 rax = *(rdi);
    0x0040f939 call qword [rax + 0x18]                                   |                 uint64_t (*rax + 0x18)() ();
                                                                         |             }
    0x0040f93c mov qword [rbx + 0x18], 0xffffffffffffffff                |             *((rbx + 0x18)) = 0xffffffffffffffff;
    0x0040f944 jmp 0x40f967                                              |             
                                                                         |         } else {
    0x0040f946 mov r12, qword [rbx]                                      |             r12 = *(rbx);
    0x0040f949 test r12, r12                                             |             
                                                                         |             if (r12 == 0) {
    0x0040f94c je 0x40f967                                               |                 goto label_2;
                                                                         |             }
    0x0040f94e mov r13, qword [rbx + 0x38]                               |             r13 = *((rbx + 0x38));
    0x0040f952 mov rdi, r12                                              |             
    0x0040f955 call 0x415670                                             |             BloombergLP::balb::Choice1::~Choice1() (r12);
    0x0040f95a mov rax, qword [r13]                                      |             rax = *(r13);
    0x0040f95e mov rdi, r13                                              |             rdi = r13;
    0x0040f961 mov rsi, r12                                              |             rsi = r12;
    0x0040f964 call qword [rax + 0x18]                                   |             uint64_t (*rax + 0x18)() ();
                                                                         |         }
                                                                         | label_2:
    0x0040f967 mov dword [rbx + 0x30], 0xffffffff                        |         *((rbx + 0x30)) = 0xffffffff;
    0x0040f96e mov rax, qword [r15]                                      |         rax = *(r15);
    0x0040f971 mov rdi, r15                                              |         rdi = r15;
    0x0040f974 mov rsi, rbx                                              |         rsi = rbx;
    0x0040f977 call qword [rax + 0x18]                                   |         uint64_t (*rax + 0x18)() ();
                                                                         |     }
    0x0040f97a cmp byte [r14 + 0x1e8], 0                                 |     
                                                                         |     if (*((r14 + 0x1e8)) != 0) {
    0x0040f982 je 0x40f9d8                                               |         
    0x0040f984 mov byte [r14 + 0x1e8], 0                                 |         *((r14 + 0x1e8)) = 0;
    0x0040f98c mov eax, dword [r14 + 0x1d8]                              |         eax = *((r14 + 0x1d8));
    0x0040f993 cmp eax, 2                                                |         
                                                                         |         if (eax != 2) {
    0x0040f996 je 0x40f9a7                                               |             
    0x0040f998 test eax, eax                                             |             
                                                                         |             if (eax != 0) {
    0x0040f99a jne 0x40f9cd                                              |                 goto label_3;
                                                                         |             }
    0x0040f99c lea rdi, [r14 + 0x68]                                     |             
    0x0040f9a0 call 0x4093b0                                             |             BloombergLP::balb::Sequence6::~Sequence6() (r14 + 0x68);
    0x0040f9a5 jmp 0x40f9cd                                              |             
                                                                         |         } else {
    0x0040f9a7 cmp qword [r14 + 0x88], 0x17                              |             
                                                                         |             if (*((r14 + 0x88)) != 0x17) {
    0x0040f9af je 0x40f9c2                                               |                 
    0x0040f9b1 mov rsi, qword [r14 + 0x68]                               |                 rsi = *((r14 + 0x68));
    0x0040f9b5 mov rdi, qword [r14 + 0x90]                               |                 rdi = *((r14 + 0x90));
    0x0040f9bc mov rax, qword [rdi]                                      |                 rax = *(rdi);
    0x0040f9bf call qword [rax + 0x18]                                   |                 uint64_t (*rax + 0x18)() ();
                                                                         |             }
    0x0040f9c2 mov qword [r14 + 0x80], 0xffffffffffffffff                |             *((r14 + 0x80)) = 0xffffffffffffffff;
                                                                         |         }
                                                                         | label_3:
    0x0040f9cd mov dword [r14 + 0x1d8], 0xffffffff                       |         *((r14 + 0x1d8)) = 0xffffffff;
                                                                         |     }
    0x0040f9d8 lea rdi, [r14 + 0x48]                                     |     
    0x0040f9dc call 0x414be0                                             |     bsl::vector<BloombergLP::balb::Choice1,bsl::allocator<BloombergLP::balb::Choice1>>::~vector() (r14 + 0x48);
    0x0040f9e1 mov rbx, qword [r14 + 0x28]                               |     rbx = *((r14 + 0x28));
    0x0040f9e5 test rbx, rbx                                             |     
                                                                         |     if (rbx == 0) {
    0x0040f9e8 je 0x40fa67                                               |         goto label_4;
                                                                         |     }
    0x0040f9ea mov r15, qword [r14 + 0x30]                               |     r15 = *((r14 + 0x30));
    0x0040f9ee cmp rbx, r15                                              |     
                                                                         |     if (rbx != r15) {
    0x0040f9f1 jne 0x40fa1e                                              |         goto label_5;
                                                                         |     }
    0x0040f9f3 jmp 0x40fa5a                                              |     goto label_6;
                                                                         | label_1:
    0x0040fa00 mov qword [rbx + 0x18], 0xffffffffffffffff                |     *((rbx + 0x18)) = 0xffffffffffffffff;
                                                                         |     do {
                                                                         | label_0:
    0x0040fa08 mov dword [rbx + 0x170], 0xffffffff                       |         *((rbx + 0x170)) = 0xffffffff;
    0x0040fa12 add rbx, 0x180                                            |         rbx += 0x180;
    0x0040fa19 cmp r15, rbx                                              |         
                                                                         |         if (r15 == rbx) {
    0x0040fa1c je 0x40fa56                                               |             goto label_7;
                                                                         |         }
                                                                         | label_5:
    0x0040fa1e mov eax, dword [rbx + 0x170]                              |         eax = *((rbx + 0x170));
    0x0040fa24 cmp eax, 2                                                |         
                                                                         |         if (eax == 2) {
    0x0040fa27 je 0x40fa40                                               |             goto label_8;
                                                                         |         }
    0x0040fa29 test eax, eax                                             |         
    0x0040fa2b jne 0x40fa08                                              |         
                                                                         |     } while (eax != 0);
    0x0040fa2d mov rdi, rbx                                              |     
    0x0040fa30 call 0x4093b0                                             |     BloombergLP::balb::Sequence6::~Sequence6() (rbx);
    0x0040fa35 jmp 0x40fa08                                              |     goto label_0;
                                                                         | label_8:
    0x0040fa40 cmp qword [rbx + 0x20], 0x17                              |     
                                                                         |     if (*((rbx + 0x20)) == 0x17) {
    0x0040fa45 je 0x40fa00                                               |         goto label_1;
                                                                         |     }
    0x0040fa47 mov rsi, qword [rbx]                                      |     rsi = *(rbx);
    0x0040fa4a mov rdi, qword [rbx + 0x28]                               |     rdi = *((rbx + 0x28));
    0x0040fa4e mov rax, qword [rdi]                                      |     rax = *(rdi);
    0x0040fa51 call qword [rax + 0x18]                                   |     uint64_t (*rax + 0x18)() ();
    0x0040fa54 jmp 0x40fa00                                              |     goto label_1;
                                                                         | label_7:
    0x0040fa56 mov rbx, qword [r14 + 0x28]                               |     rbx = *((r14 + 0x28));
                                                                         | label_6:
    0x0040fa5a mov rdi, qword [r14 + 0x40]                               |     rdi = *((r14 + 0x40));
    0x0040fa5e mov rax, qword [rdi]                                      |     rax = *(rdi);
    0x0040fa61 mov rsi, rbx                                              |     rsi = rbx;
    0x0040fa64 call qword [rax + 0x18]                                   |     rax = uint64_t (*rax + 0x18)() ();
                                                                         | label_4:
    0x0040fa67 mov rbx, qword [r14 + 8]                                  |     rbx = *((r14 + 8));
    0x0040fa6b test rbx, rbx                                             |     
                                                                         |     if (rbx == 0) {
    0x0040fa6e je 0x40faa2                                               |         goto label_9;
                                                                         |     }
    0x0040fa70 mov r15, qword [r14 + 0x10]                               |     r15 = *((r14 + 0x10));
    0x0040fa74 cmp rbx, r15                                              |     
                                                                         |     if (rbx == r15) {
    0x0040fa77 je 0x40fa95                                               |         goto label_10;
                                                                         |     }
    0x0040fa79 nop dword [rax]                                           |     
                                                                         |     do {
    0x0040fa80 mov rdi, rbx                                              |         
    0x0040fa83 call 0x415580                                             |         BloombergLP::bslstl::Optional_DataImp<BloombergLP::balb::Choice1>::reset() (rbx);
    0x0040fa88 add rbx, 0x28                                             |         rbx += 0x28;
    0x0040fa8c cmp r15, rbx                                              |         
    0x0040fa8f jne 0x40fa80                                              |         
                                                                         |     } while (r15 != rbx);
    0x0040fa91 mov rbx, qword [r14 + 8]                                  |     rbx = *((r14 + 8));
                                                                         | label_10:
    0x0040fa95 mov rdi, qword [r14 + 0x20]                               |     rdi = *((r14 + 0x20));
    0x0040fa99 mov rax, qword [rdi]                                      |     rax = *(rdi);
    0x0040fa9c mov rsi, rbx                                              |     rsi = rbx;
    0x0040fa9f call qword [rax + 0x18]                                   |     uint64_t (*rax + 0x18)() ();
                                                                         | label_9:
    0x0040faa2 pop rbx                                                   |     
    0x0040faa3 pop r12                                                   |     
    0x0040faa5 pop r13                                                   |     
    0x0040faa7 pop r14                                                   |     
    0x0040faa9 pop r15                                                   |     
    0x0040faab ret                                                       |     return rax;
                                                                         | }
