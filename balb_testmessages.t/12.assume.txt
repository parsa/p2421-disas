    ; assembly                                                           | /* r2dec pseudo code output */
                                                                         | /* balb_testmessages.t/assume @ 0x406110 */
                                                                         | #include <stdint.h>
                                                                         |  
    ; (fcn) method.BloombergLP::balb::Choice5.makeSelection1__ ()        | int64_t method_BloombergLP::balb::Choice5_makeSelection1_ (uint32_t arg1) {
                                                                         |     rdi = arg1;
                                                                         |     /* BloombergLP::balb::Choice5::makeSelection1() */
    0x00406110 push r15                                                  |     
    0x00406112 push r14                                                  |     
    0x00406114 push rbx                                                  |     
    0x00406115 mov r14, rdi                                              |     r14 = rdi;
    0x00406118 cmp dword [rdi + 0x30], 0                                 |     
                                                                         |     if (*((rdi + 0x30)) != 0) {
    0x0040611c je 0x406156                                               |         
    0x0040611e mov rdi, r14                                              |         
    0x00406121 call 0x406010                                             |         BloombergLP::balb::Choice5::reset() (r14);
    0x00406126 mov rax, qword [r14 + 0x38]                               |         rax = *((r14 + 0x38));
    0x0040612a mov dword [r14 + 0x20], 0xffffffff                        |         *((r14 + 0x20)) = 0xffffffff;
    0x00406132 test rax, rax                                             |         
                                                                         |         if (rax == 0) {
    0x00406135 jne 0x406148                                              |             
    0x00406137 mov rax, qword [rip + 0x279a12]                           |             rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040613e test rax, rax                                             |             
                                                                         |             if (rax != 0) {
    0x00406141 jne 0x406148                                              |                 goto label_1;
                                                                         |             }
    0x00406143 call 0x4206c0                                             |             rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                         |         }
                                                                         | label_1:
    0x00406148 mov qword [r14 + 0x28], rax                               |         *((r14 + 0x28)) = rax;
    0x0040614c mov dword [r14 + 0x30], 0                                 |         *((r14 + 0x30)) = 0;
    0x00406154 jmp 0x4061bf                                              |         goto label_2;
                                                                         |     }
    0x00406156 mov eax, dword [r14 + 0x20]                               |     eax = *((r14 + 0x20));
    0x0040615a cmp eax, 1                                                |     
                                                                         |     if (eax == 1) {
    0x0040615d je 0x4061b7                                               |         goto label_3;
                                                                         |     }
    0x0040615f test eax, eax                                             |     
                                                                         |     if (eax != 0) {
    0x00406161 jne 0x4061b7                                              |         goto label_3;
                                                                         |     }
    0x00406163 mov rbx, qword [r14]                                      |     rbx = *(r14);
    0x00406166 test rbx, rbx                                             |     
                                                                         |     if (rbx == 0) {
    0x00406169 je 0x4061b7                                               |         goto label_3;
                                                                         |     }
    0x0040616b mov r15, qword [r14 + 8]                                  |     r15 = *((r14 + 8));
    0x0040616f cmp rbx, r15                                              |     
                                                                         |     if (rbx != r15) {
    0x00406172 jne 0x406191                                              |         goto label_4;
                                                                         |     }
    0x00406174 jmp 0x4061aa                                              |     goto label_5;
                                                                         |     do {
                                                                         | label_0:
    0x00406180 mov qword [rbx + 0x18], 0xffffffffffffffff                |         *((rbx + 0x18)) = 0xffffffffffffffff;
    0x00406188 add rbx, 0x30                                             |         rbx += 0x30;
    0x0040618c cmp r15, rbx                                              |         
                                                                         |         if (r15 == rbx) {
    0x0040618f je 0x4061a7                                               |             goto label_6;
                                                                         |         }
                                                                         | label_4:
    0x00406191 cmp qword [rbx + 0x20], 0x17                              |         
    0x00406196 je 0x406180                                               |         
                                                                         |     } while (*((rbx + 0x20)) == 0x17);
    0x00406198 mov rsi, qword [rbx]                                      |     rsi = *(rbx);
    0x0040619b mov rdi, qword [rbx + 0x28]                               |     rdi = *((rbx + 0x28));
    0x0040619f mov rax, qword [rdi]                                      |     rax = *(rdi);
    0x004061a2 call qword [rax + 0x18]                                   |     uint64_t (*rax + 0x18)() ();
    0x004061a5 jmp 0x406180                                              |     goto label_0;
                                                                         | label_6:
    0x004061a7 mov rbx, qword [r14]                                      |     rbx = *(r14);
                                                                         | label_5:
    0x004061aa mov rdi, qword [r14 + 0x18]                               |     rdi = *((r14 + 0x18));
    0x004061ae mov rax, qword [rdi]                                      |     rax = *(rdi);
    0x004061b1 mov rsi, rbx                                              |     rsi = rbx;
    0x004061b4 call qword [rax + 0x18]                                   |     uint64_t (*rax + 0x18)() ();
                                                                         | label_3:
    0x004061b7 mov dword [r14 + 0x20], 0xffffffff                        |     *((r14 + 0x20)) = 0xffffffff;
                                                                         | label_2:
    0x004061bf mov rax, r14                                              |     rax = r14;
    0x004061c2 pop rbx                                                   |     
    0x004061c3 pop r14                                                   |     
    0x004061c5 pop r15                                                   |     
    0x004061c7 ret                                                       |     return rax;
                                                                         | }
