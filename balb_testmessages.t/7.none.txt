    ; assembly                                                   | /* r2dec pseudo code output */
                                                                 | /* balb_testmessages.t/none @ 0x405fe0 */
                                                                 | #include <stdint.h>
                                                                 |  
    ; (fcn) method.BloombergLP::balb::Choice5.reset__ ()         | int64_t method_BloombergLP::balb::Choice5_reset_ (uint32_t arg1) {
                                                                 |     rdi = arg1;
                                                                 |     /* BloombergLP::balb::Choice5::reset() */
    0x00405fe0 push r15                                          |     
    0x00405fe2 push r14                                          |     
    0x00405fe4 push rbx                                          |     
    0x00405fe5 mov r14, rdi                                      |     r14 = rdi;
    0x00405fe8 cmp dword [rdi + 0x30], 0                         |     
                                                                 |     if (*((rdi + 0x30)) != 0) {
    0x00405fec jne 0x40604f                                      |         goto label_1;
                                                                 |     }
    0x00405fee cmp dword [r14 + 0x20], 0                         |     
                                                                 |     if (*((r14 + 0x20)) != 0) {
    0x00405ff3 jne 0x406047                                      |         goto label_2;
                                                                 |     }
    0x00405ff5 mov rbx, qword [r14]                              |     rbx = *(r14);
    0x00405ff8 test rbx, rbx                                     |     
                                                                 |     if (rbx == 0) {
    0x00405ffb je 0x406047                                       |         goto label_2;
                                                                 |     }
    0x00405ffd mov r15, qword [r14 + 8]                          |     r15 = *((r14 + 8));
    0x00406001 cmp rbx, r15                                      |     
                                                                 |     if (rbx != r15) {
    0x00406004 jne 0x406021                                      |         goto label_3;
                                                                 |     }
    0x00406006 jmp 0x40603a                                      |     goto label_4;
                                                                 |     do {
                                                                 | label_0:
    0x00406010 mov qword [rbx + 0x18], 0xffffffffffffffff        |         *((rbx + 0x18)) = 0xffffffffffffffff;
    0x00406018 add rbx, 0x30                                     |         rbx += 0x30;
    0x0040601c cmp r15, rbx                                      |         
                                                                 |         if (r15 == rbx) {
    0x0040601f je 0x406037                                       |             goto label_5;
                                                                 |         }
                                                                 | label_3:
    0x00406021 cmp qword [rbx + 0x20], 0x17                      |         
    0x00406026 je 0x406010                                       |         
                                                                 |     } while (*((rbx + 0x20)) == 0x17);
    0x00406028 mov rsi, qword [rbx]                              |     rsi = *(rbx);
    0x0040602b mov rdi, qword [rbx + 0x28]                       |     rdi = *((rbx + 0x28));
    0x0040602f mov rax, qword [rdi]                              |     rax = *(rdi);
    0x00406032 call qword [rax + 0x18]                           |     uint64_t (*rax + 0x18)() ();
    0x00406035 jmp 0x406010                                      |     goto label_0;
                                                                 | label_5:
    0x00406037 mov rbx, qword [r14]                              |     rbx = *(r14);
                                                                 | label_4:
    0x0040603a mov rdi, qword [r14 + 0x18]                       |     rdi = *((r14 + 0x18));
    0x0040603e mov rax, qword [rdi]                              |     rax = *(rdi);
    0x00406041 mov rsi, rbx                                      |     rsi = rbx;
    0x00406044 call qword [rax + 0x18]                           |     uint64_t (*rax + 0x18)() ();
                                                                 | label_2:
    0x00406047 mov dword [r14 + 0x20], 0xffffffff                |     *((r14 + 0x20)) = 0xffffffff;
                                                                 | label_1:
    0x0040604f mov dword [r14 + 0x30], 0xffffffff                |     *((r14 + 0x30)) = 0xffffffff;
    0x00406057 pop rbx                                           |     
    0x00406058 pop r14                                           |     
    0x0040605a pop r15                                           |     
    0x0040605c ret                                               |     return rax;
                                                                 | }
