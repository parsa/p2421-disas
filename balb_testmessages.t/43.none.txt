    ; assembly                                                                           | /* r2dec pseudo code output */
                                                                                         | /* balb_testmessages.t/none @ 0x40a480 */
                                                                                         | #include <stdint.h>
                                                                                         |  
    ; (fcn) method.BloombergLP::balb::Choice3.makeSelection2_unsigned_char_ ()           | int64_t method_BloombergLP::balb::Choice3_makeSelection2_unsigned_char_ (int64_t arg2, int64_t arg1) {
                                                                                         |     rsi = arg2;
                                                                                         |     rdi = arg1;
                                                                                         |     /* BloombergLP::balb::Choice3::makeSelection2(unsigned char) */
    0x0040a480 push rbp                                                                  |     
    0x0040a481 push rbx                                                                  |     
    0x0040a482 push rax                                                                  |     
    0x0040a483 mov ebp, esi                                                              |     
    0x0040a485 mov rbx, rdi                                                              |     rbx = rdi;
    0x0040a488 mov eax, dword [rdi + 0x170]                                              |     eax = *((rdi + 0x170));
    0x0040a48e test eax, eax                                                             |     
                                                                                         |     if (eax != 0) {
    0x0040a490 je 0x40a4a1                                                               |         
    0x0040a492 cmp eax, 2                                                                |         
                                                                                         |         if (eax != 2) {
    0x0040a495 je 0x40a4ab                                                               |             
    0x0040a497 cmp eax, 1                                                                |             
                                                                                         |             if (eax != 1) {
    0x0040a49a jne 0x40a4c7                                                              |                 goto label_0;
                                                                                         |             }
    0x0040a49c mov byte [rbx], bpl                                                       |             *(rbx) = bpl;
    0x0040a49f jmp 0x40a4d4                                                              |             
    0x0040a4a1 mov rdi, rbx                                                              |             
    0x0040a4a4 call 0x4093b0                                                             |             BloombergLP::balb::Sequence6::~Sequence6() (rbx);
    0x0040a4a9 jmp 0x40a4c7                                                              |             
                                                                                         |         } else {
                                                                                         |         } else {
    0x0040a4ab cmp qword [rbx + 0x20], 0x17                                              |             
                                                                                         |             if (*((rbx + 0x20)) != 0x17) {
    0x0040a4b0 je 0x40a4bf                                                               |                 
    0x0040a4b2 mov rsi, qword [rbx]                                                      |                 rsi = *(rbx);
    0x0040a4b5 mov rdi, qword [rbx + 0x28]                                               |                 rdi = *((rbx + 0x28));
    0x0040a4b9 mov rax, qword [rdi]                                                      |                 rax = *(rdi);
    0x0040a4bc call qword [rax + 0x18]                                                   |                 uint64_t (*rax + 0x18)() ();
                                                                                         |             }
    0x0040a4bf mov qword [rbx + 0x18], 0xffffffffffffffff                                |             *((rbx + 0x18)) = 0xffffffffffffffff;
                                                                                         |         }
                                                                                         | label_0:
    0x0040a4c7 mov byte [rbx], bpl                                                       |         *(rbx) = bpl;
    0x0040a4ca mov dword [rbx + 0x170], 1                                                |         *((rbx + 0x170)) = 1;
                                                                                         |     }
    0x0040a4d4 mov rax, rbx                                                              |     rax = rbx;
    0x0040a4d7 add rsp, 8                                                                |     
    0x0040a4db pop rbx                                                                   |     
    0x0040a4dc pop rbp                                                                   |     
    0x0040a4dd ret                                                                       |     return rax;
                                                                                         | }
