    ; assembly                                                           | /* r2dec pseudo code output */
                                                                         | /* balb_testmessages.t/none @ 0x40aa90 */
                                                                         | #include <stdint.h>
                                                                         |  
    ; (fcn) method.BloombergLP::balb::Choice3.makeSelection4__ ()        | int64_t method_BloombergLP::balb::Choice3_makeSelection4_ (int64_t arg1) {
                                                                         |     rdi = arg1;
                                                                         |     /* BloombergLP::balb::Choice3::makeSelection4() */
    0x0040aa90 push rbx                                                  |     
    0x0040aa91 mov rbx, rdi                                              |     rbx = rdi;
    0x0040aa94 mov eax, dword [rdi + 0x170]                              |     eax = *((rdi + 0x170));
    0x0040aa9a test eax, eax                                             |     
                                                                         |     if (eax != 0) {
    0x0040aa9c je 0x40aab0                                               |         
    0x0040aa9e cmp eax, 2                                                |         
                                                                         |         if (eax != 2) {
    0x0040aaa1 je 0x40aaba                                               |             
    0x0040aaa3 cmp eax, 3                                                |             
                                                                         |             if (eax != 3) {
    0x0040aaa6 jne 0x40aad6                                              |                 goto label_0;
                                                                         |             }
    0x0040aaa8 mov dword [rbx], 0                                        |             *(rbx) = 0;
    0x0040aaae jmp 0x40aae6                                              |             
    0x0040aab0 mov rdi, rbx                                              |             
    0x0040aab3 call 0x4093b0                                             |             BloombergLP::balb::Sequence6::~Sequence6() (rbx);
    0x0040aab8 jmp 0x40aad6                                              |             
                                                                         |         } else {
                                                                         |         } else {
    0x0040aaba cmp qword [rbx + 0x20], 0x17                              |             
                                                                         |             if (*((rbx + 0x20)) != 0x17) {
    0x0040aabf je 0x40aace                                               |                 
    0x0040aac1 mov rsi, qword [rbx]                                      |                 rsi = *(rbx);
    0x0040aac4 mov rdi, qword [rbx + 0x28]                               |                 rdi = *((rbx + 0x28));
    0x0040aac8 mov rax, qword [rdi]                                      |                 rax = *(rdi);
    0x0040aacb call qword [rax + 0x18]                                   |                 uint64_t (*rax + 0x18)() ();
                                                                         |             }
    0x0040aace mov qword [rbx + 0x18], 0xffffffffffffffff                |             *((rbx + 0x18)) = 0xffffffffffffffff;
                                                                         |         }
                                                                         | label_0:
    0x0040aad6 mov dword [rbx], 0                                        |         *(rbx) = 0;
    0x0040aadc mov dword [rbx + 0x170], 3                                |         *((rbx + 0x170)) = 3;
                                                                         |     }
    0x0040aae6 mov rax, rbx                                              |     rax = rbx;
    0x0040aae9 pop rbx                                                   |     
    0x0040aaea ret                                                       |     return rax;
                                                                         | }
