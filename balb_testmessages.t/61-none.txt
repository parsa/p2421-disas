    ; assembly                                                               | /* r2dec pseudo code output */
                                                                             | /* balb_testmessages.t/none @ 0x40a6e0 */
                                                                             | #include <stdint.h>
                                                                             |  
    ; (fcn) method.BloombergLP::balb::Choice3.makeSelection_int_ ()          | int64_t method_BloombergLP::balb::Choice3_makeSelection_int_ (uint32_t arg2, int64_t arg1) {
                                                                             |     rsi = arg2;
                                                                             |     rdi = arg1;
                                                                             |     /* BloombergLP::balb::Choice3::makeSelection(int) */
    0x0040a6e0 push r14                                                      |     
    0x0040a6e2 push rbx                                                      |     
    0x0040a6e3 push rax                                                      |     
    0x0040a6e4 inc esi                                                       |     esi++;
    0x0040a6e6 cmp esi, 4                                                    |     
                                                                             |     if (esi <= 4) {
    0x0040a6e9 ja 0x40a747                                                   |         
    0x0040a6eb mov r14, rdi                                                  |         r14 = rdi;
                                                                             |         /* switch table (5 cases) at 0x446210 */
    0x0040a6ee jmp qword [rsi*8 + 0x446210]                                  |         
    0x0040a6f5 mov eax, dword [r14 + 0x170]                                  |         eax = *((r14 + 0x170));
    0x0040a6fc cmp eax, 2                                                    |         
                                                                             |         if (eax != 2) {
    0x0040a6ff je 0x40a7d0                                                   |             
    0x0040a705 test eax, eax                                                 |             
                                                                             |             if (eax != 0) {
    0x0040a707 jne 0x40a7ec                                                  |                 goto label_0;
                                                                             |             }
    0x0040a70d mov rdi, r14                                                  |             
    0x0040a710 call 0x4093b0                                                 |             BloombergLP::balb::Sequence6::~Sequence6() (r14);
    0x0040a715 jmp 0x40a7ec                                                  |             goto label_0;
    0x0040a71a mov eax, dword [r14 + 0x170]                                  |             eax = *((r14 + 0x170));
    0x0040a721 test eax, eax                                                 |             
                                                                             |             if (eax == 0) {
    0x0040a723 je 0x40a89a                                                   |                 goto label_1;
                                                                             |             }
    0x0040a729 cmp eax, 2                                                    |             
                                                                             |             if (eax == 2) {
    0x0040a72c je 0x40a8a4                                                   |                 goto label_2;
                                                                             |             }
    0x0040a732 cmp eax, 3                                                    |             
                                                                             |             if (eax != 3) {
    0x0040a735 jne 0x40a8c0                                                  |                 goto label_3;
                                                                             |             }
    0x0040a73b mov dword [r14], 0                                            |             *(r14) = 0;
    0x0040a742 jmp 0x40a909                                                  |             
                                                                             |         } else {
    0x0040a747 mov ebx, 0xffffffff                                           |             ebx = 0xffffffff;
    0x0040a74c jmp 0x40a90b                                                  |             goto label_4;
    0x0040a751 mov eax, dword [r14 + 0x170]                                  |             eax = *((r14 + 0x170));
    0x0040a758 cmp eax, 2                                                    |             
                                                                             |             if (eax == 2) {
    0x0040a75b je 0x40a7fc                                                   |                 goto label_5;
                                                                             |             }
    0x0040a761 test eax, eax                                                 |             
                                                                             |             if (eax != 0) {
    0x0040a763 jne 0x40a818                                                  |                 goto label_6;
                                                                             |             }
    0x0040a769 mov rdi, r14                                                  |             
    0x0040a76c call 0x409810                                                 |             BloombergLP::balb::Sequence6::reset() (r14);
    0x0040a771 jmp 0x40a909                                                  |             goto label_7;
    0x0040a776 mov eax, dword [r14 + 0x170]                                  |             eax = *((r14 + 0x170));
    0x0040a77d test eax, eax                                                 |             
                                                                             |             if (eax == 0) {
    0x0040a77f je 0x40a8d4                                                   |                 goto label_8;
                                                                             |             }
    0x0040a785 cmp eax, 2                                                    |             
                                                                             |             if (eax == 2) {
    0x0040a788 je 0x40a8de                                                   |                 goto label_9;
                                                                             |             }
    0x0040a78e cmp eax, 1                                                    |             
                                                                             |             if (eax != 1) {
    0x0040a791 jne 0x40a8fa                                                  |                 goto label_10;
                                                                             |             }
    0x0040a797 mov byte [r14], 0                                             |             *(r14) = 0;
    0x0040a79b jmp 0x40a909                                                  |             goto label_7;
    0x0040a7a0 mov eax, dword [r14 + 0x170]                                  |             eax = *((r14 + 0x170));
    0x0040a7a7 test eax, eax                                                 |             
                                                                             |             if (eax == 0) {
    0x0040a7a9 je 0x40a842                                                   |                 goto label_11;
                                                                             |             }
    0x0040a7af cmp eax, 2                                                    |             
                                                                             |             if (eax != 2) {
    0x0040a7b2 jne 0x40a84a                                                  |                 goto label_12;
                                                                             |             }
    0x0040a7b8 xor ebx, ebx                                                  |             ebx = 0;
    0x0040a7ba mov rdi, r14                                                  |             
    0x0040a7bd xor esi, esi                                                  |             
    0x0040a7bf mov rdx, 0xffffffffffffffff                                   |             
    0x0040a7c6 call 0x424d20                                                 |             bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::erase(unsigned long,unsigned long) (r14, 0, 0xffffffffffffffff);
    0x0040a7cb jmp 0x40a90b                                                  |             goto label_4;
                                                                             |         }
    0x0040a7d0 cmp qword [r14 + 0x20], 0x17                                  |         
                                                                             |         if (*((r14 + 0x20)) != 0x17) {
    0x0040a7d5 je 0x40a7e4                                                   |             
    0x0040a7d7 mov rsi, qword [r14]                                          |             rsi = *(r14);
    0x0040a7da mov rdi, qword [r14 + 0x28]                                   |             rdi = *((r14 + 0x28));
    0x0040a7de mov rax, qword [rdi]                                          |             rax = *(rdi);
    0x0040a7e1 call qword [rax + 0x18]                                       |             uint64_t (*rax + 0x18)() ();
                                                                             |         }
    0x0040a7e4 mov qword [r14 + 0x18], 0xffffffffffffffff                    |         *((r14 + 0x18)) = 0xffffffffffffffff;
                                                                             | label_0:
    0x0040a7ec mov dword [r14 + 0x170], 0xffffffff                           |         *((r14 + 0x170)) = 0xffffffff;
    0x0040a7f7 jmp 0x40a909                                                  |         goto label_7;
                                                                             | label_5:
    0x0040a7fc cmp qword [r14 + 0x20], 0x17                                  |         
                                                                             |         if (*((r14 + 0x20)) != 0x17) {
    0x0040a801 je 0x40a810                                                   |             
    0x0040a803 mov rsi, qword [r14]                                          |             rsi = *(r14);
    0x0040a806 mov rdi, qword [r14 + 0x28]                                   |             rdi = *((r14 + 0x28));
    0x0040a80a mov rax, qword [rdi]                                          |             rax = *(rdi);
    0x0040a80d call qword [rax + 0x18]                                       |             uint64_t (*rax + 0x18)() ();
                                                                             |         }
    0x0040a810 mov qword [r14 + 0x18], 0xffffffffffffffff                    |         *((r14 + 0x18)) = 0xffffffffffffffff;
                                                                             | label_6:
    0x0040a818 mov dword [r14 + 0x170], 0xffffffff                           |         *((r14 + 0x170)) = 0xffffffff;
    0x0040a823 mov rsi, qword [r14 + 0x178]                                  |         
    0x0040a82a mov rdi, r14                                                  |         
    0x0040a82d call 0x408740                                                 |         BloombergLP::balb::Sequence6::Sequence6(BloombergLP::bslma::Allocator*) (r14, *((r14 + 0x178)));
    0x0040a832 mov dword [r14 + 0x170], 0                                    |         *((r14 + 0x170)) = 0;
    0x0040a83d jmp 0x40a909                                                  |         goto label_7;
                                                                             | label_11:
    0x0040a842 mov rdi, r14                                                  |         
    0x0040a845 call 0x4093b0                                                 |         BloombergLP::balb::Sequence6::~Sequence6() (r14);
                                                                             | label_12:
    0x0040a84a mov dword [r14 + 0x170], 0xffffffff                           |         *((r14 + 0x170)) = 0xffffffff;
    0x0040a855 mov rax, qword [r14 + 0x178]                                  |         rax = *((r14 + 0x178));
    0x0040a85c test rax, rax                                                 |         
                                                                             |         if (rax == 0) {
    0x0040a85f jne 0x40a872                                                  |             
    0x0040a861 mov rax, qword [rip + 0x2742e8]                               |             rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040a868 test rax, rax                                                 |             
                                                                             |             if (rax != 0) {
    0x0040a86b jne 0x40a872                                                  |                 goto label_13;
                                                                             |             }
    0x0040a86d call 0x4207c0                                                 |             rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                             |         }
                                                                             | label_13:
    0x0040a872 mov qword [r14], 0                                            |         *(r14) = 0;
    0x0040a879 movaps xmm0, xmmword [rip + 0x3b7a0]                          |         xmm0 = .comment;
    0x0040a880 movups xmmword [r14 + 0x18], xmm0                             |         __asm ("movups xmmword [r14 + 0x18], xmm0");
    0x0040a885 mov qword [r14 + 0x28], rax                                   |         *((r14 + 0x28)) = rax;
    0x0040a889 mov byte [r14], 0                                             |         *(r14) = 0;
    0x0040a88d mov dword [r14 + 0x170], 2                                    |         *((r14 + 0x170)) = 2;
    0x0040a898 jmp 0x40a909                                                  |         goto label_7;
                                                                             | label_1:
    0x0040a89a mov rdi, r14                                                  |         
    0x0040a89d call 0x4093b0                                                 |         BloombergLP::balb::Sequence6::~Sequence6() (r14);
    0x0040a8a2 jmp 0x40a8c0                                                  |         goto label_3;
                                                                             | label_2:
    0x0040a8a4 cmp qword [r14 + 0x20], 0x17                                  |         
                                                                             |         if (*((r14 + 0x20)) != 0x17) {
    0x0040a8a9 je 0x40a8b8                                                   |             
    0x0040a8ab mov rsi, qword [r14]                                          |             rsi = *(r14);
    0x0040a8ae mov rdi, qword [r14 + 0x28]                                   |             rdi = *((r14 + 0x28));
    0x0040a8b2 mov rax, qword [rdi]                                          |             rax = *(rdi);
    0x0040a8b5 call qword [rax + 0x18]                                       |             uint64_t (*rax + 0x18)() ();
                                                                             |         }
    0x0040a8b8 mov qword [r14 + 0x18], 0xffffffffffffffff                    |         *((r14 + 0x18)) = 0xffffffffffffffff;
                                                                             | label_3:
    0x0040a8c0 mov dword [r14], 0                                            |         *(r14) = 0;
    0x0040a8c7 mov dword [r14 + 0x170], 3                                    |         *((r14 + 0x170)) = 3;
    0x0040a8d2 jmp 0x40a909                                                  |         goto label_7;
                                                                             | label_8:
    0x0040a8d4 mov rdi, r14                                                  |         
    0x0040a8d7 call 0x4093b0                                                 |         BloombergLP::balb::Sequence6::~Sequence6() (r14);
    0x0040a8dc jmp 0x40a8fa                                                  |         goto label_10;
                                                                             | label_9:
    0x0040a8de cmp qword [r14 + 0x20], 0x17                                  |         
                                                                             |         if (*((r14 + 0x20)) != 0x17) {
    0x0040a8e3 je 0x40a8f2                                                   |             
    0x0040a8e5 mov rsi, qword [r14]                                          |             rsi = *(r14);
    0x0040a8e8 mov rdi, qword [r14 + 0x28]                                   |             rdi = *((r14 + 0x28));
    0x0040a8ec mov rax, qword [rdi]                                          |             rax = *(rdi);
    0x0040a8ef call qword [rax + 0x18]                                       |             uint64_t (*rax + 0x18)() ();
                                                                             |         }
    0x0040a8f2 mov qword [r14 + 0x18], 0xffffffffffffffff                    |         *((r14 + 0x18)) = 0xffffffffffffffff;
                                                                             | label_10:
    0x0040a8fa mov byte [r14], 0                                             |         *(r14) = 0;
    0x0040a8fe mov dword [r14 + 0x170], 1                                    |         *((r14 + 0x170)) = 1;
                                                                             |     }
                                                                             | label_7:
    0x0040a909 xor ebx, ebx                                                  |     ebx = 0;
                                                                             | label_4:
    0x0040a90b mov eax, ebx                                                  |     eax = ebx;
    0x0040a90d add rsp, 8                                                    |     
    0x0040a911 pop rbx                                                       |     
    0x0040a912 pop r14                                                       |     
    0x0040a914 ret                                                           |     return rax;
                                                                             | }
