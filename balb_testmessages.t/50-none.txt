    ; assembly                                                       | /* r2dec pseudo code output */
                                                                     | /* balb_testmessages.t/none @ 0x40fd20 */
                                                                     | #include <stdint.h>
                                                                     |  
    ; (fcn) method.BloombergLP::balb::Sequence1.reset__ ()           | int64_t method_BloombergLP::balb::Sequence1_reset_ (uint32_t arg1) {
                                                                     |     int64_t var_8h;
                                                                     |     rdi = arg1;
                                                                     |     /* BloombergLP::balb::Sequence1::reset() */
    0x0040fd20 push r15                                              |     
    0x0040fd22 push r14                                              |     
    0x0040fd24 push rbx                                              |     
    0x0040fd25 sub rsp, 0x10                                         |     
    0x0040fd29 mov r14, rdi                                          |     r14 = rdi;
    0x0040fd2c cmp byte [rdi + 0x1e8], 0                             |     
                                                                     |     if (*((rdi + 0x1e8)) != 0) {
    0x0040fd33 je 0x40fd89                                           |         
    0x0040fd35 mov byte [r14 + 0x1e8], 0                             |         *((r14 + 0x1e8)) = 0;
    0x0040fd3d mov eax, dword [r14 + 0x1d8]                          |         eax = *((r14 + 0x1d8));
    0x0040fd44 cmp eax, 2                                            |         
                                                                     |         if (eax != 2) {
    0x0040fd47 je 0x40fd58                                           |             
    0x0040fd49 test eax, eax                                         |             
                                                                     |             if (eax != 0) {
    0x0040fd4b jne 0x40fd7e                                          |                 goto label_2;
                                                                     |             }
    0x0040fd4d lea rdi, [r14 + 0x68]                                 |             
    0x0040fd51 call 0x4093b0                                         |             BloombergLP::balb::Sequence6::~Sequence6() (r14 + 0x68);
    0x0040fd56 jmp 0x40fd7e                                          |             
                                                                     |         } else {
    0x0040fd58 cmp qword [r14 + 0x88], 0x17                          |             
                                                                     |             if (*((r14 + 0x88)) != 0x17) {
    0x0040fd60 je 0x40fd73                                           |                 
    0x0040fd62 mov rsi, qword [r14 + 0x68]                           |                 rsi = *((r14 + 0x68));
    0x0040fd66 mov rdi, qword [r14 + 0x90]                           |                 rdi = *((r14 + 0x90));
    0x0040fd6d mov rax, qword [rdi]                                  |                 rax = *(rdi);
    0x0040fd70 call qword [rax + 0x18]                               |                 uint64_t (*rax + 0x18)() ();
                                                                     |             }
    0x0040fd73 mov qword [r14 + 0x80], 0xffffffffffffffff            |             *((r14 + 0x80)) = 0xffffffffffffffff;
                                                                     |         }
                                                                     | label_2:
    0x0040fd7e mov dword [r14 + 0x1d8], 0xffffffff                   |         *((r14 + 0x1d8)) = 0xffffffff;
                                                                     |     }
    0x0040fd89 mov rdi, qword [r14 + 0x48]                           |     rdi = *((r14 + 0x48));
    0x0040fd8d mov rsi, qword [r14 + 0x50]                           |     rsi = *((r14 + 0x50));
    0x0040fd91 cmp rsi, rdi                                          |     
                                                                     |     if (rsi != rdi) {
    0x0040fd94 je 0x40fdb1                                           |         
    0x0040fd96 mov rax, qword [r14 + 0x60]                           |         rax = *((r14 + 0x60));
    0x0040fd9a mov qword [rsp + 8], rax                              |         *((rsp + 8)) = rax;
    0x0040fd9f lea rdx, [rsp + 8]                                    |         rdx = rsp + 8;
    0x0040fda4 call 0x419d40                                         |         voidBloombergLP::bslalg::ArrayDestructionPrimitives::destroy<BloombergLP::balb::Choice1,bsl::allocator<BloombergLP::balb::Choice1>>(BloombergLP::balb::Choice1*,BloombergLP::balb::Choice1*,bsl::allocator<BloombergLP::balb::Choice1>) (rdi, rsi);
    0x0040fda9 mov rax, qword [r14 + 0x48]                           |         rax = *((r14 + 0x48));
    0x0040fdad mov qword [r14 + 0x50], rax                           |         *((r14 + 0x50)) = rax;
                                                                     |     }
    0x0040fdb1 mov rdi, qword [r14 + 0x1f8]                          |     
    0x0040fdb8 call 0x40cc40                                         |     BloombergLP::balb::Choice2::reset() (*((r14 + 0x1f8)));
    0x0040fdbd mov rbx, qword [r14 + 8]                              |     rbx = *((r14 + 8));
    0x0040fdc1 mov r15, qword [r14 + 0x10]                           |     r15 = *((r14 + 0x10));
    0x0040fdc5 cmp r15, rbx                                          |     
                                                                     |     if (r15 == rbx) {
    0x0040fdc8 je 0x40fde9                                           |         goto label_3;
                                                                     |     }
    0x0040fdca nop word [rax + rax]                                  |     
                                                                     |     do {
    0x0040fdd0 mov rdi, rbx                                          |         
    0x0040fdd3 call 0x415580                                         |         BloombergLP::bslstl::Optional_DataImp<BloombergLP::balb::Choice1>::reset() (rbx);
    0x0040fdd8 add rbx, 0x28                                         |         rbx += 0x28;
    0x0040fddc cmp r15, rbx                                          |         
    0x0040fddf jne 0x40fdd0                                          |         
                                                                     |     } while (r15 != rbx);
    0x0040fde1 mov rax, qword [r14 + 8]                              |     rax = *((r14 + 8));
    0x0040fde5 mov qword [r14 + 0x10], rax                           |     *((r14 + 0x10)) = rax;
                                                                     | label_3:
    0x0040fde9 mov rbx, qword [r14 + 0x28]                           |     rbx = *((r14 + 0x28));
    0x0040fded mov r15, qword [r14 + 0x30]                           |     r15 = *((r14 + 0x30));
    0x0040fdf1 cmp r15, rbx                                          |     
                                                                     |     if (r15 != rbx) {
    0x0040fdf4 jne 0x40fe1e                                          |         goto label_4;
                                                                     |     }
    0x0040fdf6 jmp 0x40fe5e                                          |     goto label_5;
                                                                     | label_1:
    0x0040fe00 mov qword [rbx + 0x18], 0xffffffffffffffff            |     *((rbx + 0x18)) = 0xffffffffffffffff;
                                                                     |     do {
                                                                     | label_0:
    0x0040fe08 mov dword [rbx + 0x170], 0xffffffff                   |         *((rbx + 0x170)) = 0xffffffff;
    0x0040fe12 add rbx, 0x180                                        |         rbx += 0x180;
    0x0040fe19 cmp r15, rbx                                          |         
                                                                     |         if (r15 == rbx) {
    0x0040fe1c je 0x40fe56                                           |             goto label_6;
                                                                     |         }
                                                                     | label_4:
    0x0040fe1e mov eax, dword [rbx + 0x170]                          |         eax = *((rbx + 0x170));
    0x0040fe24 cmp eax, 2                                            |         
                                                                     |         if (eax == 2) {
    0x0040fe27 je 0x40fe40                                           |             goto label_7;
                                                                     |         }
    0x0040fe29 test eax, eax                                         |         
    0x0040fe2b jne 0x40fe08                                          |         
                                                                     |     } while (eax != 0);
    0x0040fe2d mov rdi, rbx                                          |     
    0x0040fe30 call 0x4093b0                                         |     BloombergLP::balb::Sequence6::~Sequence6() (rbx);
    0x0040fe35 jmp 0x40fe08                                          |     goto label_0;
                                                                     | label_7:
    0x0040fe40 cmp qword [rbx + 0x20], 0x17                          |     
                                                                     |     if (*((rbx + 0x20)) == 0x17) {
    0x0040fe45 je 0x40fe00                                           |         goto label_1;
                                                                     |     }
    0x0040fe47 mov rsi, qword [rbx]                                  |     rsi = *(rbx);
    0x0040fe4a mov rdi, qword [rbx + 0x28]                           |     rdi = *((rbx + 0x28));
    0x0040fe4e mov rax, qword [rdi]                                  |     rax = *(rdi);
    0x0040fe51 call qword [rax + 0x18]                               |     uint64_t (*rax + 0x18)() ();
    0x0040fe54 jmp 0x40fe00                                          |     goto label_1;
                                                                     | label_6:
    0x0040fe56 mov rax, qword [r14 + 0x28]                           |     rax = *((r14 + 0x28));
    0x0040fe5a mov qword [r14 + 0x30], rax                           |     *((r14 + 0x30)) = rax;
                                                                     | label_5:
    0x0040fe5e add rsp, 0x10                                         |     
    0x0040fe62 pop rbx                                               |     
    0x0040fe63 pop r14                                               |     
    0x0040fe65 pop r15                                               |     
    0x0040fe67 ret                                                   |     return rax;
                                                                     | }
