    ; assembly                                                                                                               | /* r2dec pseudo code output */
                                                                                                                             | /* balb_testmessages.t/assume @ 0x414cf0 */
                                                                                                                             | #include <stdint.h>
                                                                                                                             |  
    ; (fcn) method.bsl::vector_BloombergLP::balb::Choice1__bsl::allocator_BloombergLP::balb::Choice1___.vector__ ()          | int64_t method_bsl::vector_BloombergLP::balb::Choice1_bsl::allocator_BloombergLP::balb::Choice1_vector_ (int64_t arg1) {
                                                                                                                             |     int64_t var_8h;
                                                                                                                             |     rdi = arg1;
                                                                                                                             |     /* bsl::vector<BloombergLP::balb::Choice1, bsl::allocator<BloombergLP::balb::Choice1> >::~vector() */
    0x00414cf0 push rbx                                                                                                      |     
    0x00414cf1 sub rsp, 0x10                                                                                                 |     
    0x00414cf5 mov rbx, rdi                                                                                                  |     rbx = rdi;
    0x00414cf8 mov rdi, qword [rdi]                                                                                          |     rdi = *(rdi);
    0x00414cfb test rdi, rdi                                                                                                 |     
                                                                                                                             |     if (rdi != 0) {
    0x00414cfe je 0x414d24                                                                                                   |         
    0x00414d00 mov rsi, qword [rbx + 8]                                                                                      |         
    0x00414d04 mov rax, qword [rbx + 0x18]                                                                                   |         rax = *((rbx + 0x18));
    0x00414d08 mov qword [rsp + 8], rax                                                                                      |         *((rsp + 8)) = rax;
    0x00414d0d lea rdx, [rsp + 8]                                                                                            |         rdx = rsp + 8;
    0x00414d12 call 0x419cc0                                                                                                 |         voidBloombergLP::bslalg::ArrayDestructionPrimitives::destroy<BloombergLP::balb::Choice1,bsl::allocator<BloombergLP::balb::Choice1>>(BloombergLP::balb::Choice1*,BloombergLP::balb::Choice1*,bsl::allocator<BloombergLP::balb::Choice1>,bsl::integral_constant<bool,false>) (rdi, *((rbx + 8)));
    0x00414d17 mov rsi, qword [rbx]                                                                                          |         rsi = *(rbx);
    0x00414d1a mov rdi, qword [rbx + 0x18]                                                                                   |         rdi = *((rbx + 0x18));
    0x00414d1e mov rax, qword [rdi]                                                                                          |         rax = *(rdi);
    0x00414d21 call qword [rax + 0x18]                                                                                       |         uint64_t (*rax + 0x18)() ();
                                                                                                                             |     }
    0x00414d24 add rsp, 0x10                                                                                                 |     
    0x00414d28 pop rbx                                                                                                       |     
    0x00414d29 ret                                                                                                           |     return rax;
                                                                                                                             | }
