    ; assembly                                                                                                                                                                                                                                                                       | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                     | /* balb_pipecontrolchannel.t/none @ 0x40f470 */
                                                                                                                                                                                                                                                                                     | #include <stdint.h>
                                                                                                                                                                                                                                                                                     |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____bsl::basic_string_char__std::__1::char_traits_char___bsl::allocator_char____const__bsl::basic_string_char__std::__1::char_traits_char ()          | uint64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf_Nil_void_bsl::basic_string_char_std::_1::char_traits_char_bsl::allocator_char_const_bsl::basic_string_char_std::_1::char_traits_char (int64_t arg4, int64_t arg3, char * arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                     |     rcx = arg4;
                                                                                                                                                                                                                                                                                     |     rdx = arg3;
                                                                                                                                                                                                                                                                                     |     rsi = arg2;
                                                                                                                                                                                                                                                                                     |     rdi = arg1;
                                                                                                                                                                                                                                                                                     |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(bsl::basic_string<char, std::__1::char_traits<char>, bsl::allocator<char> > const&, bsl::basic_string<char, std::__1::char_traits<char>, bsl::allocator<char> > const&, int), BloombergLP::bdlf::Bind_BoundTuple3<bsl::basic_string<char, std::__1::char_traits<char>, bsl::allocator<char> >, bsl::basic_string<char, std::__1::char_traits<char>, bsl::allocator<char> >, int> > >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(bsl::basic_string<char, std::__1::char_traits<char>, bsl::allocator<char> > const&, bsl::basic_string<char, std::__1::char_traits<char>, bsl::allocator<char> > const&, int), BloombergLP::bdlf::Bind_BoundTuple3<bsl::basic_string<char, std::__1::char_traits<char>, bsl::allocator<char> >, bsl::basic_string<char, std::__1::char_traits<char>, bsl::allocator<char> >, int> > const&, BloombergLP::bslma::Allocator*) */
    0x0040f470 push rbp                                                                                                                                                                                                                                                              |     
    0x0040f471 push r15                                                                                                                                                                                                                                                              |     
    0x0040f473 push r14                                                                                                                                                                                                                                                              |     
    0x0040f475 push r13                                                                                                                                                                                                                                                              |     
    0x0040f477 push r12                                                                                                                                                                                                                                                              |     
    0x0040f479 push rbx                                                                                                                                                                                                                                                              |     
    0x0040f47a push rax                                                                                                                                                                                                                                                              |     
    0x0040f47b mov r14, rcx                                                                                                                                                                                                                                                          |     r14 = rcx;
    0x0040f47e mov r12, rdx                                                                                                                                                                                                                                                          |     r12 = rdx;
    0x0040f481 mov r15, rsi                                                                                                                                                                                                                                                          |     r15 = rsi;
    0x0040f484 cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                          |     
    0x0040f489 mov qword [rsp], rdi                                                                                                                                                                                                                                                  |     *(rsp) = rdi;
                                                                                                                                                                                                                                                                                     |     if (*((rsi + 0x38)) != 0x17) {
    0x0040f48d je 0x40f495                                                                                                                                                                                                                                                           |         
    0x0040f48f mov r13, qword [r15 + 0x18]                                                                                                                                                                                                                                           |         r13 = *((r15 + 0x18));
    0x0040f493 jmp 0x40f499                                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |     } else {
    0x0040f495 lea r13, [r15 + 0x18]                                                                                                                                                                                                                                                 |         r13 = r15 + 0x18;
                                                                                                                                                                                                                                                                                     |     }
    0x0040f499 mov rbp, qword [r15 + 0x30]                                                                                                                                                                                                                                           |     rbp = *((r15 + 0x30));
    0x0040f49d test r14, r14                                                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                                                     |     if (r14 == 0) {
    0x0040f4a0 jne 0x40f4b6                                                                                                                                                                                                                                                          |         
    0x0040f4a2 mov r14, qword [rip + 0x265a67]                                                                                                                                                                                                                                       |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040f4a9 test r14, r14                                                                                                                                                                                                                                                         |         
                                                                                                                                                                                                                                                                                     |         if (r14 != 0) {
    0x0040f4ac jne 0x40f4b6                                                                                                                                                                                                                                                          |             goto label_0;
                                                                                                                                                                                                                                                                                     |         }
    0x0040f4ae call 0x4197b0                                                                                                                                                                                                                                                         |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x0040f4b3 mov r14, rax                                                                                                                                                                                                                                                          |         r14 = rax;
                                                                                                                                                                                                                                                                                     |     }
                                                                                                                                                                                                                                                                                     | label_0:
    0x0040f4b6 mov rax, qword [r14]                                                                                                                                                                                                                                                  |     rax = *(r14);
    0x0040f4b9 mov esi, 0xa8                                                                                                                                                                                                                                                         |     esi = 0xa8;
    0x0040f4be mov rdi, r14                                                                                                                                                                                                                                                          |     rdi = r14;
    0x0040f4c1 call qword [rax + 0x10]                                                                                                                                                                                                                                               |     rax = uint64_t (*rax + 0x10)() ();
    0x0040f4c4 mov rbx, rax                                                                                                                                                                                                                                                          |     rbx = rax;
    0x0040f4c7 mov qword [rax], 0x40f6f0                                                                                                                                                                                                                                             |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____bsl::basic_string_char__std::__1::char_traits_char___bsl::allocator_char____const__bsl::basic_string_char__std::__1::char_traits_char___bsl::all;
    0x0040f4ce mov rax, qword [r12]                                                                                                                                                                                                                                                  |     rax = *(r12);
    0x0040f4d2 mov qword [rbx + 8], rax                                                                                                                                                                                                                                              |     *((rbx + 8)) = rax;
    0x0040f4d6 lea rdi, [rbx + 0x10]                                                                                                                                                                                                                                                 |     
    0x0040f4da add r12, 8                                                                                                                                                                                                                                                            |     r12 += 8;
    0x0040f4de mov rsi, r12                                                                                                                                                                                                                                                          |     
    0x0040f4e1 mov rdx, r14                                                                                                                                                                                                                                                          |     
    0x0040f4e4 call 0x40f210                                                                                                                                                                                                                                                         |     BloombergLP::bdlf::Bind_BoundTuple3<bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>,int>::Bind_BoundTuple3(BloombergLP::bdlf::Bind_BoundTuple3<bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>,int>const&,BloombergLP::bslma::Allocator*) (rbx + 0x10, r12, r14);
    0x0040f4e9 mov rdi, rbx                                                                                                                                                                                                                                                          |     
    0x0040f4ec add rdi, 0x78                                                                                                                                                                                                                                                         |     rdi += 0x78;
    0x0040f4f0 mov qword [rbx + 0x78], 0                                                                                                                                                                                                                                             |     *((rbx + 0x78)) = 0;
    0x0040f4f8 mov qword [rbx + 0xa0], r14                                                                                                                                                                                                                                           |     *((rbx + 0xa0)) = r14;
    0x0040f4ff movaps xmm0, xmmword [rip + 0x30f7a]                                                                                                                                                                                                                                  |     xmm0 = .comment;
    0x0040f506 movups xmmword [rbx + 0x90], xmm0                                                                                                                                                                                                                                     |     __asm ("movups xmmword [rbx + 0x90], xmm0");
    0x0040f50d mov ecx, 0x441299                                                                                                                                                                                                                                                     |     
    0x0040f512 mov rsi, r13                                                                                                                                                                                                                                                          |     
    0x0040f515 mov rdx, rbp                                                                                                                                                                                                                                                          |     
    0x0040f518 call 0x41e2a0                                                                                                                                                                                                                                                         |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx, r13, rbp, "string<...>::assign<Iter>(i,j): string too long");
    0x0040f51d mov edx, 0x41a8a0                                                                                                                                                                                                                                                     |     
    0x0040f522 mov rdi, qword [rsp]                                                                                                                                                                                                                                                  |     
    0x0040f526 mov rsi, r15                                                                                                                                                                                                                                                          |     
    0x0040f529 mov rcx, rbx                                                                                                                                                                                                                                                          |     
    0x0040f52c call 0x41af70                                                                                                                                                                                                                                                         |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0040f531 mov ebp, eax                                                                                                                                                                                                                                                          |     
    0x0040f533 test eax, eax                                                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                                                     |     if (eax != 0) {
    0x0040f535 je 0x40f5a3                                                                                                                                                                                                                                                           |         
    0x0040f537 cmp qword [rbx + 0x98], 0x17                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |         if (*((rbx + 0x98)) != 0x17) {
    0x0040f53f je 0x40f552                                                                                                                                                                                                                                                           |             
    0x0040f541 mov rsi, qword [rbx + 0x78]                                                                                                                                                                                                                                           |             rsi = *((rbx + 0x78));
    0x0040f545 mov rdi, qword [rbx + 0xa0]                                                                                                                                                                                                                                           |             rdi = *((rbx + 0xa0));
    0x0040f54c mov rax, qword [rdi]                                                                                                                                                                                                                                                  |             rax = *(rdi);
    0x0040f54f call qword [rax + 0x18]                                                                                                                                                                                                                                               |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |         }
    0x0040f552 mov qword [rbx + 0x90], 0xffffffffffffffff                                                                                                                                                                                                                            |         *((rbx + 0x90)) = 0xffffffffffffffff;
    0x0040f55d cmp qword [rbx + 0x60], 0x17                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |         if (*((rbx + 0x60)) != 0x17) {
    0x0040f562 je 0x40f572                                                                                                                                                                                                                                                           |             
    0x0040f564 mov rsi, qword [rbx + 0x40]                                                                                                                                                                                                                                           |             rsi = *((rbx + 0x40));
    0x0040f568 mov rdi, qword [rbx + 0x68]                                                                                                                                                                                                                                           |             rdi = *((rbx + 0x68));
    0x0040f56c mov rax, qword [rdi]                                                                                                                                                                                                                                                  |             rax = *(rdi);
    0x0040f56f call qword [rax + 0x18]                                                                                                                                                                                                                                               |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |         }
    0x0040f572 mov qword [rbx + 0x58], 0xffffffffffffffff                                                                                                                                                                                                                            |         *((rbx + 0x58)) = 0xffffffffffffffff;
    0x0040f57a cmp qword [rbx + 0x30], 0x17                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |         if (*((rbx + 0x30)) != 0x17) {
    0x0040f57f je 0x40f58f                                                                                                                                                                                                                                                           |             
    0x0040f581 mov rsi, qword [rbx + 0x10]                                                                                                                                                                                                                                           |             rsi = *((rbx + 0x10));
    0x0040f585 mov rdi, qword [rbx + 0x38]                                                                                                                                                                                                                                           |             rdi = *((rbx + 0x38));
    0x0040f589 mov rax, qword [rdi]                                                                                                                                                                                                                                                  |             rax = *(rdi);
    0x0040f58c call qword [rax + 0x18]                                                                                                                                                                                                                                               |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |         }
    0x0040f58f mov qword [rbx + 0x28], 0xffffffffffffffff                                                                                                                                                                                                                            |         *((rbx + 0x28)) = 0xffffffffffffffff;
    0x0040f597 mov rax, qword [r14]                                                                                                                                                                                                                                                  |         rax = *(r14);
    0x0040f59a mov rdi, r14                                                                                                                                                                                                                                                          |         rdi = r14;
    0x0040f59d mov rsi, rbx                                                                                                                                                                                                                                                          |         rsi = rbx;
    0x0040f5a0 call qword [rax + 0x18]                                                                                                                                                                                                                                               |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |     }
    0x0040f5a3 mov eax, ebp                                                                                                                                                                                                                                                          |     eax = ebp;
    0x0040f5a5 add rsp, 8                                                                                                                                                                                                                                                            |     
    0x0040f5a9 pop rbx                                                                                                                                                                                                                                                               |     
    0x0040f5aa pop r12                                                                                                                                                                                                                                                               |     
    0x0040f5ac pop r13                                                                                                                                                                                                                                                               |     
    0x0040f5ae pop r14                                                                                                                                                                                                                                                               |     
    0x0040f5b0 pop r15                                                                                                                                                                                                                                                               |     
    0x0040f5b2 pop rbp                                                                                                                                                                                                                                                               |     
    0x0040f5b3 ret                                                                                                                                                                                                                                                                   |     return rax;
                                                                                                                                                                                                                                                                                     | }
