    ; assembly                                                                                                                                                                                                                               | /* r2dec pseudo code output */
                                                                                                                                                                                                                                             | /* bdlmt_multiprioritythreadpool.t/none @ 0x40ca90 */
                                                                                                                                                                                                                                             | #include <stdint.h>
                                                                                                                                                                                                                                             |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_MULTIPRIORITYTHREADPOOL_CASE_10.ProducerThread__unsigned_long__MULTIPRIORITYTHREADPOOL_CASE_10::ProducerThread_const__BloombergLP::bslma::Allocator_ ()           | uint64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_MULTIPRIORITYTHREADPOOL_CASE_10_ProducerThread_unsigned_long_MULTIPRIORITYTHREADPOOL_CASE_10::ProducerThread_const_BloombergLP::bslma::Allocator_ (int64_t arg3, int64_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                             |     int64_t var_18h;
                                                                                                                                                                                                                                             |     uint32_t var_38h;
                                                                                                                                                                                                                                             |     int64_t var_40h;
                                                                                                                                                                                                                                             |     rdx = arg3;
                                                                                                                                                                                                                                             |     rsi = arg2;
                                                                                                                                                                                                                                             |     rdi = arg1;
                                                                                                                                                                                                                                             |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<MULTIPRIORITYTHREADPOOL_CASE_10::ProducerThread>(unsigned long*, MULTIPRIORITYTHREADPOOL_CASE_10::ProducerThread const&, BloombergLP::bslma::Allocator*) */
    0x0040ca90 push rbp                                                                                                                                                                                                                      |     
    0x0040ca91 push r15                                                                                                                                                                                                                      |     
    0x0040ca93 push r14                                                                                                                                                                                                                      |     
    0x0040ca95 push rbx                                                                                                                                                                                                                      |     
    0x0040ca96 sub rsp, 0x48                                                                                                                                                                                                                 |     
    0x0040ca9a mov r14, rdx                                                                                                                                                                                                                  |     r14 = rdx;
    0x0040ca9d mov rbp, rsi                                                                                                                                                                                                                  |     
    0x0040caa0 mov r15, rdi                                                                                                                                                                                                                  |     r15 = rdi;
    0x0040caa3 test rdx, rdx                                                                                                                                                                                                                 |     
                                                                                                                                                                                                                                             |     if (rdx == 0) {
    0x0040caa6 jne 0x40cabc                                                                                                                                                                                                                  |         
    0x0040caa8 mov r14, qword [rip + 0x24bed1]                                                                                                                                                                                               |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040caaf test r14, r14                                                                                                                                                                                                                 |         
                                                                                                                                                                                                                                             |         if (r14 != 0) {
    0x0040cab2 jne 0x40cabc                                                                                                                                                                                                                  |             goto label_0;
                                                                                                                                                                                                                                             |         }
    0x0040cab4 call 0x40fc40                                                                                                                                                                                                                 |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x0040cab9 mov r14, rax                                                                                                                                                                                                                  |         r14 = rax;
                                                                                                                                                                                                                                             |     }
                                                                                                                                                                                                                                             | label_0:
    0x0040cabc mov rax, qword [r14]                                                                                                                                                                                                          |     rax = *(r14);
    0x0040cabf mov esi, 0x40                                                                                                                                                                                                                 |     esi = 0x40;
    0x0040cac4 mov rdi, r14                                                                                                                                                                                                                  |     rdi = r14;
    0x0040cac7 call qword [rax + 0x10]                                                                                                                                                                                                       |     rax = uint64_t (*rax + 0x10)() ();
    0x0040caca mov rbx, rax                                                                                                                                                                                                                  |     rbx = rax;
    0x0040cacd mov qword [rax], 0x40cc20                                                                                                                                                                                                     |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_MULTIPRIORITYTHREADPOOL_CASE_10::ProducerThread_.invokerFunction_void_;
    0x0040cad4 mov eax, dword [rbp]                                                                                                                                                                                                          |     eax = *(rbp);
    0x0040cad7 mov dword [rbx + 8], eax                                                                                                                                                                                                      |     *((rbx + 8)) = eax;
    0x0040cada lea rdi, [rbx + 0x10]                                                                                                                                                                                                         |     
    0x0040cade mov qword [rbx + 0x10], 0                                                                                                                                                                                                     |     *((rbx + 0x10)) = 0;
    0x0040cae6 mov qword [rbx + 0x38], r14                                                                                                                                                                                                   |     *((rbx + 0x38)) = r14;
    0x0040caea movaps xmm0, xmmword [rip + 0x2b7bf]                                                                                                                                                                                          |     xmm0 = .comment;
    0x0040caf1 movups xmmword [rbx + 0x28], xmm0                                                                                                                                                                                             |     __asm ("movups xmmword [rbx + 0x28], xmm0");
    0x0040caf5 mov ecx, 0x43903b                                                                                                                                                                                                             |     
    0x0040cafa xor esi, esi                                                                                                                                                                                                                  |     
    0x0040cafc xor edx, edx                                                                                                                                                                                                                  |     
    0x0040cafe call 0x414280                                                                                                                                                                                                                 |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x10, 0, 0, "string<...>::assign<Iter>(i,j): string too long");
    0x0040cb03 mov rdi, rsp                                                                                                                                                                                                                  |     
    0x0040cb06 call 0x411580                                                                                                                                                                                                                 |     BloombergLP::bslmt::ThreadAttributes::ThreadAttributes() (rsp);
    0x0040cb0b mov rsi, rsp                                                                                                                                                                                                                  |     
    0x0040cb0e mov edx, 0x410d80                                                                                                                                                                                                             |     
    0x0040cb13 mov rdi, r15                                                                                                                                                                                                                  |     
    0x0040cb16 mov rcx, rbx                                                                                                                                                                                                                  |     
    0x0040cb19 call 0x411a70                                                                                                                                                                                                                 |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (r15, rsp, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0040cb1e mov ebp, eax                                                                                                                                                                                                                  |     
    0x0040cb20 cmp qword [rsp + 0x38], 0x17                                                                                                                                                                                                  |     
                                                                                                                                                                                                                                             |     if (*((rsp + 0x38)) != 0x17) {
    0x0040cb26 je 0x40cb38                                                                                                                                                                                                                   |         
    0x0040cb28 mov rsi, qword [rsp + 0x18]                                                                                                                                                                                                   |         rsi = *((rsp + 0x18));
    0x0040cb2d mov rdi, qword [rsp + 0x40]                                                                                                                                                                                                   |         rdi = *((rsp + 0x40));
    0x0040cb32 mov rax, qword [rdi]                                                                                                                                                                                                          |         rax = *(rdi);
    0x0040cb35 call qword [rax + 0x18]                                                                                                                                                                                                       |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                             |     }
    0x0040cb38 test ebp, ebp                                                                                                                                                                                                                 |     
                                                                                                                                                                                                                                             |     if (ebp != 0) {
    0x0040cb3a je 0x40cb65                                                                                                                                                                                                                   |         
    0x0040cb3c cmp qword [rbx + 0x30], 0x17                                                                                                                                                                                                  |         
                                                                                                                                                                                                                                             |         if (*((rbx + 0x30)) != 0x17) {
    0x0040cb41 je 0x40cb51                                                                                                                                                                                                                   |             
    0x0040cb43 mov rsi, qword [rbx + 0x10]                                                                                                                                                                                                   |             rsi = *((rbx + 0x10));
    0x0040cb47 mov rdi, qword [rbx + 0x38]                                                                                                                                                                                                   |             rdi = *((rbx + 0x38));
    0x0040cb4b mov rax, qword [rdi]                                                                                                                                                                                                          |             rax = *(rdi);
    0x0040cb4e call qword [rax + 0x18]                                                                                                                                                                                                       |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                             |         }
    0x0040cb51 mov qword [rbx + 0x28], 0xffffffffffffffff                                                                                                                                                                                    |         *((rbx + 0x28)) = 0xffffffffffffffff;
    0x0040cb59 mov rax, qword [r14]                                                                                                                                                                                                          |         rax = *(r14);
    0x0040cb5c mov rdi, r14                                                                                                                                                                                                                  |         rdi = r14;
    0x0040cb5f mov rsi, rbx                                                                                                                                                                                                                  |         rsi = rbx;
    0x0040cb62 call qword [rax + 0x18]                                                                                                                                                                                                       |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                             |     }
    0x0040cb65 mov eax, ebp                                                                                                                                                                                                                  |     eax = ebp;
    0x0040cb67 add rsp, 0x48                                                                                                                                                                                                                 |     
    0x0040cb6b pop rbx                                                                                                                                                                                                                       |     
    0x0040cb6c pop r14                                                                                                                                                                                                                       |     
    0x0040cb6e pop r15                                                                                                                                                                                                                       |     
    0x0040cb70 pop rbp                                                                                                                                                                                                                       |     
    0x0040cb71 ret                                                                                                                                                                                                                           |     return rax;
                                                                                                                                                                                                                                             | }
