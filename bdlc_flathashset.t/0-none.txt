    ; assembly                                           | /* r2dec pseudo code output */
                                                         | /* bdlc_flathashset.t/none @ 0x44e1c0 */
                                                         | #include <stdint.h>
                                                         |  
    ; (fcn) fcn.0044e1c0 ()                              | uint64_t fcn_0044e1c0 (int64_t arg3, int64_t arg2, int64_t arg1) {
                                                         |     int64_t var_8h;
                                                         |     int64_t var_10h;
                                                         |     rdx = arg3;
                                                         |     rsi = arg2;
                                                         |     rdi = arg1;
    0x0044e1c0 push rbp                                  |     
    0x0044e1c1 push r15                                  |     
    0x0044e1c3 push r14                                  |     
    0x0044e1c5 push r13                                  |     
    0x0044e1c7 push r12                                  |     
    0x0044e1c9 push rbx                                  |     
    0x0044e1ca sub rsp, 0x18                             |     
    0x0044e1ce mov rbp, rdx                              |     
    0x0044e1d1 mov r15, rsi                              |     r15 = rsi;
    0x0044e1d4 mov r14, rdi                              |     r14 = rdi;
    0x0044e1d7 mov r12, qword [rsi + 0x28]               |     r12 = *((rsi + 0x28));
    0x0044e1db mov rdi, rsi                              |     rdi = rsi;
    0x0044e1de mov rsi, rdx                              |     rsi = rdx;
    0x0044e1e1 mov rdx, r12                              |     rdx = r12;
    0x0044e1e4 call 0x44e3a0                             |     rax = BloombergLP::bdlc::FlatHashTable<bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>,BloombergLP::bdlc::FlatHashSet_EntryUtil<bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>,SeedIsHash<bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>,EqualAndState<bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>>::findKey(bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>const&,unsigned long)const ();
    0x0044e1e9 mov rbx, rax                              |     rbx = rax;
    0x0044e1ec mov rax, qword [r15 + 0x18]               |     rax = *((r15 + 0x18));
    0x0044e1f0 cmp rbx, rax                              |     
                                                         |     if (rbx != rax) {
    0x0044e1f3 jne 0x44e270                              |         goto label_0;
                                                         |     }
    0x0044e1f5 mov qword [rsp + 8], rbp                  |     *((rsp + 8)) = rbp;
    0x0044e1fa mov rax, rbx                              |     rax = rbx;
    0x0044e1fd shr rax, 3                                |     rax >>= 3;
    0x0044e201 lea rcx, [rax*8]                          |     rcx = rax*8;
    0x0044e209 sub rcx, rax                              |     rcx -= rax;
    0x0044e20c cmp qword [r15 + 0x10], rcx               |     
                                                         |     if (*((r15 + 0x10)) >= rcx) {
    0x0044e210 jb 0x44e22e                               |         
    0x0044e212 lea rax, [rbx + rbx]                      |         rax = rbx + rbx;
    0x0044e216 test rbx, rbx                             |         
    0x0044e219 mov esi, 0x20                             |         esi = 0x20;
                                                         |         if (rbx != 0) {
    0x0044e21e cmovne rsi, rax                           |             rsi = rax;
                                                         |         }
    0x0044e222 mov rdi, r15                              |         rdi = r15;
    0x0044e225 call 0x44e520                             |         BloombergLP::bdlc::FlatHashTable<bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>,BloombergLP::bdlc::FlatHashSet_EntryUtil<bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>,SeedIsHash<bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>,EqualAndState<bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>>::rehashRaw(unsigned long) ();
    0x0044e22a mov rbx, qword [r15 + 0x18]               |         rbx = *((r15 + 0x18));
                                                         |     }
    0x0044e22e test rbx, rbx                             |     
    0x0044e231 mov qword [rsp + 0x10], r12               |     *((rsp + 0x10)) = r12;
                                                         |     if (rbx == 0) {
    0x0044e236 je 0x44e277                               |         goto label_1;
                                                         |     }
    0x0044e238 mov cl, byte [r15 + 0x20]                 |     cl = *((r15 + 0x20));
    0x0044e23c mov rax, r12                              |     rax = r12;
    0x0044e23f shr rax, cl                               |     rax >>= cl;
    0x0044e242 mov rcx, qword [r15 + 8]                  |     rcx = *((r15 + 8));
    0x0044e246 shl rax, 4                                |     rax <<= 4;
    0x0044e24a lea rdx, [rbx - 1]                        |     rdx = rbx - 1;
    0x0044e24e xor esi, esi                              |     esi = 0;
                                                         |     do {
    0x0044e250 movdqu xmm0, xmmword [rcx + rax]          |         __asm ("movdqu xmm0, xmmword [rcx + rax]");
    0x0044e255 pmovmskb edi, xmm0                        |         __asm ("pmovmskb edi, xmm0");
    0x0044e259 test di, di                               |         
                                                         |         if (di != 0) {
    0x0044e25c jne 0x44e27b                              |             goto label_2;
                                                         |         }
    0x0044e25e add rax, 0x10                             |         rax += 0x10;
    0x0044e262 and rax, rdx                              |         rax &= rdx;
    0x0044e265 add rsi, 0x10                             |         rsi += 0x10;
    0x0044e269 cmp rsi, rbx                              |         
    0x0044e26c jb 0x44e250                               |         
                                                         |     } while (rsi < rbx);
    0x0044e26e jmp 0x44e287                              |     goto label_3;
                                                         | label_0:
    0x0044e270 xor ecx, ecx                              |     ecx = 0;
    0x0044e272 jmp 0x44e366                              |     goto label_4;
                                                         | label_1:
    0x0044e277 xor ebx, ebx                              |     ebx = 0;
    0x0044e279 jmp 0x44e287                              |     goto label_3;
                                                         | label_2:
    0x0044e27b movzx ecx, di                             |     ecx = (int32_t) di;
    0x0044e27e bsf ecx, ecx                              |     __asm ("bsf ecx, ecx");
    0x0044e281 add rax, rcx                              |     rax += rcx;
    0x0044e284 mov rbx, rax                              |     rbx = rax;
                                                         | label_3:
    0x0044e287 mov rcx, qword [rsp + 8]                  |     rcx = *((rsp + 8));
    0x0044e28c mov r12, qword [r15]                      |     r12 = *(r15);
    0x0044e28f mov rdi, qword [r15 + 0x60]               |     rdi = *((r15 + 0x60));
    0x0044e293 lea r13, [rbx + rbx*2]                    |     r13 = rbx * 3;
    0x0044e297 shl r13, 4                                |     r13 <<= 4;
    0x0044e29b lea rbp, [r12 + r13]                      |     rbp = r12 + r13;
    0x0044e29f test rdi, rdi                             |     
                                                         |     if (rdi == 0) {
    0x0044e2a2 jne 0x44e2bd                              |         
    0x0044e2a4 mov rdi, qword [rip + 0x2547dd]           |         rdi = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0044e2ab test rdi, rdi                             |         
                                                         |         if (rdi != 0) {
    0x0044e2ae jne 0x44e2bd                              |             goto label_5;
                                                         |         }
    0x0044e2b0 call 0x457f90                             |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x0044e2b5 mov rcx, qword [rsp + 8]                  |         rcx = *((rsp + 8));
    0x0044e2ba mov rdi, rax                              |         rdi = rax;
                                                         |     }
                                                         | label_5:
    0x0044e2bd mov rax, qword [rcx + 0x20]               |     rax = *((rcx + 0x20));
    0x0044e2c1 mov qword [rbp + 0x20], rax               |     *((rbp + 0x20)) = rax;
    0x0044e2c5 movups xmm0, xmmword [rcx]                |     __asm ("movups xmm0, xmmword [rcx]");
    0x0044e2c8 movups xmm1, xmmword [rcx + 0x10]         |     __asm ("movups xmm1, xmmword [rcx + 0x10]");
    0x0044e2cc movups xmmword [rbp + 0x10], xmm1         |     __asm ("movups xmmword [rbp + 0x10], xmm1");
    0x0044e2d0 movups xmmword [rbp], xmm0                |     __asm ("movups xmmword [rbp], xmm0");
    0x0044e2d4 mov qword [r12 + r13 + 0x28], rdi         |     *((r12 + r13 + 0x28)) = rdi;
    0x0044e2d9 cmp qword [r12 + r13 + 0x20], 0x17        |     
                                                         |     if (*((r12 + r13 + 0x20)) != 0x17) {
    0x0044e2df je 0x44e34d                               |         
    0x0044e2e1 lea rdx, [r12 + r13 + 0x20]               |         rdx = r12 + r13 + 0x20;
    0x0044e2e6 mov rax, qword [rcx + 0x18]               |         rax = *((rcx + 0x18));
    0x0044e2ea cmp rax, 0x17                             |         
    0x0044e2ee mov esi, 0x17                             |         esi = 0x17;
                                                         |         if (rax > 0x17) {
    0x0044e2f3 cmova rsi, rax                            |             rsi = rax;
                                                         |         }
    0x0044e2f7 mov qword [rbp], 0                        |         *(rbp) = 0;
    0x0044e2ff mov qword [r12 + r13 + 0x18], rax         |         *((r12 + r13 + 0x18)) = rax;
    0x0044e304 mov qword [rdx], rsi                      |         *(rdx) = rsi;
    0x0044e307 cmp rax, 0x18                             |         
                                                         |         if (rax >= 0x18) {
    0x0044e30b jb 0x44e32c                               |             
    0x0044e30d inc rsi                                   |             rsi++;
    0x0044e310 mov rax, qword [rdi]                      |             rax = *(rdi);
    0x0044e313 mov r12, rdx                              |             r12 = rdx;
    0x0044e316 call qword [rax + 0x10]                   |             rax = uint64_t (*rax + 0x10)() ();
    0x0044e319 mov rdx, r12                              |             rdx = r12;
    0x0044e31c mov rcx, qword [rsp + 8]                  |             rcx = *((rsp + 8));
    0x0044e321 mov qword [rbp], rax                      |             *(rbp) = rax;
    0x0044e325 cmp qword [r12], 0x17                     |             
                                                         |             if (*(r12) != 0x17) {
    0x0044e32a jne 0x44e32f                              |                 goto label_6;
                                                         |             }
                                                         |         }
    0x0044e32c mov rax, rbp                              |         rax = rbp;
                                                         | label_6:
    0x0044e32f mov rdx, qword [rdx - 8]                  |         rdx = *((rdx - 8));
    0x0044e333 inc rdx                                   |         rdx++;
                                                         |         if (rdx == 0) {
    0x0044e336 je 0x44e34d                               |             goto label_7;
                                                         |         }
    0x0044e338 cmp qword [rcx + 0x20], 0x17              |         
                                                         |         if (*((rcx + 0x20)) != 0x17) {
    0x0044e33d je 0x44e342                               |             
    0x0044e33f mov rcx, qword [rcx]                      |             rcx = *(rcx);
                                                         |         }
    0x0044e342 mov rdi, rax                              |         
    0x0044e345 mov rsi, rcx                              |         
    0x0044e348 call 0x403e80                             |         memcpy (rax, rcx, rdx);
                                                         |     }
                                                         | label_7:
    0x0044e34d mov rcx, qword [rsp + 0x10]               |     rcx = *((rsp + 0x10));
    0x0044e352 and cl, 0x7f                              |     cl &= 0x7f;
    0x0044e355 mov rax, qword [r15 + 8]                  |     rax = *((r15 + 8));
    0x0044e359 mov byte [rax + rbx], cl                  |     *((rax + rbx)) = cl;
    0x0044e35c inc qword [r15 + 0x10]                    |     *((r15 + 0x10))++;
    0x0044e360 mov rax, qword [r15 + 0x18]               |     rax = *((r15 + 0x18));
    0x0044e364 mov cl, 1                                 |     cl = 1;
                                                         | label_4:
    0x0044e366 lea rdx, [rbx + rbx*2]                    |     rdx = rbx * 3;
    0x0044e36a shl rdx, 4                                |     rdx <<= 4;
    0x0044e36e add rdx, qword [r15]                      |     rdx += *(r15);
    0x0044e371 mov rsi, qword [r15 + 8]                  |     rsi = *((r15 + 8));
    0x0044e375 add rsi, rbx                              |     rsi += rbx;
    0x0044e378 not rbx                                   |     rbx = ~rbx;
    0x0044e37b add rbx, rax                              |     rbx += rax;
    0x0044e37e mov qword [r14], rdx                      |     *(r14) = rdx;
    0x0044e381 mov qword [r14 + 8], rsi                  |     *((r14 + 8)) = rsi;
    0x0044e385 mov qword [r14 + 0x10], rbx               |     *((r14 + 0x10)) = rbx;
    0x0044e389 mov byte [r14 + 0x18], cl                 |     *((r14 + 0x18)) = cl;
    0x0044e38d mov rax, r14                              |     rax = r14;
    0x0044e390 add rsp, 0x18                             |     
    0x0044e394 pop rbx                                   |     
    0x0044e395 pop r12                                   |     
    0x0044e397 pop r13                                   |     
    0x0044e399 pop r14                                   |     
    0x0044e39b pop r15                                   |     
    0x0044e39d pop rbp                                   |     
    0x0044e39e ret                                       |     return rax;
                                                         | }
