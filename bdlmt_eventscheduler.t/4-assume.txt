    ; assembly                                                                                                                                                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                 | /* bdlmt_eventscheduler.t/assume @ 0x42bc90 */
                                                                                                                                                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                                                                                                                                                 |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlmt::EventScheduler__int__BloombergLP::bsls::AtomicInt__BloombergLP::bsls::AtomicInt__BloombergLP::bslmt::Barrier__ ()         | int64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf_Nil_void_BloombergLP::bdlmt::EventScheduler_int_BloombergLP::bsls::AtomicInt_BloombergLP::bsls::AtomicInt_BloombergLP::bslmt::Barrier_ (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                 |     rcx = arg4;
                                                                                                                                                                                                                                                                                 |     rdx = arg3;
                                                                                                                                                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                                                                                                                                                 |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlmt::EventScheduler*, int, BloombergLP::bsls::AtomicInt*, BloombergLP::bsls::AtomicInt*, BloombergLP::bslmt::Barrier*), BloombergLP::bdlf::Bind_BoundTuple5<BloombergLP::bdlmt::EventScheduler*, int, BloombergLP::bsls::AtomicInt*, BloombergLP::bsls::AtomicInt*, BloombergLP::bslmt::Barrier*> > >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlmt::EventScheduler*, int, BloombergLP::bsls::AtomicInt*, BloombergLP::bsls::AtomicInt*, BloombergLP::bslmt::Barrier*), BloombergLP::bdlf::Bind_BoundTuple5<BloombergLP::bdlmt::EventScheduler*, int, BloombergLP::bsls::AtomicInt*, BloombergLP::bsls::AtomicInt*, BloombergLP::bslmt::Barrier*> > const&, BloombergLP::bslma::Allocator*) */
    0x0042bc90 push rbp                                                                                                                                                                                                                                                          |     
    0x0042bc91 push r15                                                                                                                                                                                                                                                          |     
    0x0042bc93 push r14                                                                                                                                                                                                                                                          |     
    0x0042bc95 push r13                                                                                                                                                                                                                                                          |     
    0x0042bc97 push r12                                                                                                                                                                                                                                                          |     
    0x0042bc99 push rbx                                                                                                                                                                                                                                                          |     
    0x0042bc9a push rax                                                                                                                                                                                                                                                          |     
    0x0042bc9b mov r14, rcx                                                                                                                                                                                                                                                      |     r14 = rcx;
    0x0042bc9e mov r12, rdx                                                                                                                                                                                                                                                      |     r12 = rdx;
    0x0042bca1 mov r15, rsi                                                                                                                                                                                                                                                      |     r15 = rsi;
    0x0042bca4 mov qword [rsp], rdi                                                                                                                                                                                                                                              |     *(rsp) = rdi;
    0x0042bca8 mov r13, qword [rsi + 0x30]                                                                                                                                                                                                                                       |     r13 = *((rsi + 0x30));
    0x0042bcac cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                      |     
                                                                                                                                                                                                                                                                                 |     if (*((rsi + 0x38)) != 0x17) {
    0x0042bcb1 je 0x42bcb9                                                                                                                                                                                                                                                       |         
    0x0042bcb3 mov rbp, qword [r15 + 0x18]                                                                                                                                                                                                                                       |         rbp = *((r15 + 0x18));
    0x0042bcb7 jmp 0x42bcbd                                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |     } else {
    0x0042bcb9 lea rbp, [r15 + 0x18]                                                                                                                                                                                                                                             |         rbp = r15 + 0x18;
                                                                                                                                                                                                                                                                                 |     }
    0x0042bcbd mov rax, qword [r14]                                                                                                                                                                                                                                              |     rax = *(r14);
    0x0042bcc0 mov esi, 0x68                                                                                                                                                                                                                                                     |     esi = 0x68;
    0x0042bcc5 mov rdi, r14                                                                                                                                                                                                                                                      |     rdi = r14;
    0x0042bcc8 call qword [rax + 0x10]                                                                                                                                                                                                                                           |     rax = uint64_t (*rax + 0x10)() ();
    0x0042bccb mov rbx, rax                                                                                                                                                                                                                                                      |     rbx = rax;
    0x0042bcce mov qword [rax], 0x42be00                                                                                                                                                                                                                                         |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlmt::EventScheduler__int__BloombergLP::bsls::AtomicInt__BloombergLP::bsls::AtomicInt__BloombergLP::bslmt::Barrier___BloombergL;
    0x0042bcd5 mov rax, qword [r12]                                                                                                                                                                                                                                              |     rax = *(r12);
    0x0042bcd9 mov qword [rbx + 8], rax                                                                                                                                                                                                                                          |     *((rbx + 8)) = rax;
    0x0042bcdd mov rax, qword [r12 + 8]                                                                                                                                                                                                                                          |     rax = *((r12 + 8));
    0x0042bce2 mov qword [rbx + 0x10], rax                                                                                                                                                                                                                                       |     *((rbx + 0x10)) = rax;
    0x0042bce6 mov eax, dword [r12 + 0x10]                                                                                                                                                                                                                                       |     eax = *((r12 + 0x10));
    0x0042bceb mov dword [rbx + 0x18], eax                                                                                                                                                                                                                                       |     *((rbx + 0x18)) = eax;
    0x0042bcee mov rax, qword [r12 + 0x18]                                                                                                                                                                                                                                       |     rax = *((r12 + 0x18));
    0x0042bcf3 mov qword [rbx + 0x20], rax                                                                                                                                                                                                                                       |     *((rbx + 0x20)) = rax;
    0x0042bcf7 mov rax, qword [r12 + 0x20]                                                                                                                                                                                                                                       |     rax = *((r12 + 0x20));
    0x0042bcfc mov qword [rbx + 0x28], rax                                                                                                                                                                                                                                       |     *((rbx + 0x28)) = rax;
    0x0042bd00 mov rax, qword [r12 + 0x28]                                                                                                                                                                                                                                       |     rax = *((r12 + 0x28));
    0x0042bd05 mov qword [rbx + 0x30], rax                                                                                                                                                                                                                                       |     *((rbx + 0x30)) = rax;
    0x0042bd09 lea rdi, [rbx + 0x38]                                                                                                                                                                                                                                             |     
    0x0042bd0d mov qword [rbx + 0x38], 0                                                                                                                                                                                                                                         |     *((rbx + 0x38)) = 0;
    0x0042bd15 mov qword [rbx + 0x60], r14                                                                                                                                                                                                                                       |     *((rbx + 0x60)) = r14;
    0x0042bd19 movaps xmm0, xmmword [rip + 0x35540]                                                                                                                                                                                                                              |     xmm0 = .comment;
    0x0042bd20 movups xmmword [rbx + 0x50], xmm0                                                                                                                                                                                                                                 |     __asm ("movups xmmword [rbx + 0x50], xmm0");
    0x0042bd24 mov ecx, 0x46490c                                                                                                                                                                                                                                                 |     
    0x0042bd29 mov rsi, rbp                                                                                                                                                                                                                                                      |     
    0x0042bd2c mov rdx, r13                                                                                                                                                                                                                                                      |     
    0x0042bd2f call 0x43df40                                                                                                                                                                                                                                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x38, rbp, r13, "string<...>::assign<Iter>(i,j): string too long");
    0x0042bd34 mov edx, 0x439350                                                                                                                                                                                                                                                 |     
    0x0042bd39 mov rdi, qword [rsp]                                                                                                                                                                                                                                              |     
    0x0042bd3d mov rsi, r15                                                                                                                                                                                                                                                      |     
    0x0042bd40 mov rcx, rbx                                                                                                                                                                                                                                                      |     
    0x0042bd43 call 0x439cd0                                                                                                                                                                                                                                                     |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x0042bd48 mov ebp, eax                                                                                                                                                                                                                                                      |     
    0x0042bd4a test eax, eax                                                                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                                                                 |     if (eax != 0) {
    0x0042bd4c je 0x42bd77                                                                                                                                                                                                                                                       |         
    0x0042bd4e cmp qword [rbx + 0x58], 0x17                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |         if (*((rbx + 0x58)) != 0x17) {
    0x0042bd53 je 0x42bd63                                                                                                                                                                                                                                                       |             
    0x0042bd55 mov rsi, qword [rbx + 0x38]                                                                                                                                                                                                                                       |             rsi = *((rbx + 0x38));
    0x0042bd59 mov rdi, qword [rbx + 0x60]                                                                                                                                                                                                                                       |             rdi = *((rbx + 0x60));
    0x0042bd5d mov rax, qword [rdi]                                                                                                                                                                                                                                              |             rax = *(rdi);
    0x0042bd60 call qword [rax + 0x18]                                                                                                                                                                                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |         }
    0x0042bd63 mov qword [rbx + 0x50], 0xffffffffffffffff                                                                                                                                                                                                                        |         *((rbx + 0x50)) = 0xffffffffffffffff;
    0x0042bd6b mov rax, qword [r14]                                                                                                                                                                                                                                              |         rax = *(r14);
    0x0042bd6e mov rdi, r14                                                                                                                                                                                                                                                      |         rdi = r14;
    0x0042bd71 mov rsi, rbx                                                                                                                                                                                                                                                      |         rsi = rbx;
    0x0042bd74 call qword [rax + 0x18]                                                                                                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |     }
    0x0042bd77 mov eax, ebp                                                                                                                                                                                                                                                      |     eax = ebp;
    0x0042bd79 add rsp, 8                                                                                                                                                                                                                                                        |     
    0x0042bd7d pop rbx                                                                                                                                                                                                                                                           |     
    0x0042bd7e pop r12                                                                                                                                                                                                                                                           |     
    0x0042bd80 pop r13                                                                                                                                                                                                                                                           |     
    0x0042bd82 pop r14                                                                                                                                                                                                                                                           |     
    0x0042bd84 pop r15                                                                                                                                                                                                                                                           |     
    0x0042bd86 pop rbp                                                                                                                                                                                                                                                           |     
    0x0042bd87 ret                                                                                                                                                                                                                                                               |     return rax;
                                                                                                                                                                                                                                                                                 | }
