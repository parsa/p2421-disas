    ; assembly                                                                                                                                                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                 | /* bdlmt_eventscheduler.t/none @ 0x434920 */
                                                                                                                                                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                                                                                                                                                 |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void__BloombergLP::bdlmt::EventScheduler::_____BloombergLP::bdlf::Bind_BoundTuple1_BloombergLP::bdlmt::EventScheduler______unsigned_long__Bl ()       | uint64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf_Nil_void_BloombergLP::bdlmt::EventScheduler::_BloombergLP::bdlf::Bind_BoundTuple1_BloombergLP::bdlmt::EventScheduler_unsigned_long_Bl (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                 |     rcx = arg4;
                                                                                                                                                                                                                                                                                 |     rdx = arg3;
                                                                                                                                                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                                                                                                                                                 |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (BloombergLP::bdlmt::EventScheduler::*)(), BloombergLP::bdlf::Bind_BoundTuple1<BloombergLP::bdlmt::EventScheduler*> > >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (BloombergLP::bdlmt::EventScheduler::*)(), BloombergLP::bdlf::Bind_BoundTuple1<BloombergLP::bdlmt::EventScheduler*> > const&, BloombergLP::bslma::Allocator*) */
    0x00434920 push rbp                                                                                                                                                                                                                                                          |     
    0x00434921 push r15                                                                                                                                                                                                                                                          |     
    0x00434923 push r14                                                                                                                                                                                                                                                          |     
    0x00434925 push r13                                                                                                                                                                                                                                                          |     
    0x00434927 push r12                                                                                                                                                                                                                                                          |     
    0x00434929 push rbx                                                                                                                                                                                                                                                          |     
    0x0043492a push rax                                                                                                                                                                                                                                                          |     
    0x0043492b mov r14, rcx                                                                                                                                                                                                                                                      |     r14 = rcx;
    0x0043492e mov r12, rdx                                                                                                                                                                                                                                                      |     r12 = rdx;
    0x00434931 mov r15, rsi                                                                                                                                                                                                                                                      |     r15 = rsi;
    0x00434934 mov qword [rsp], rdi                                                                                                                                                                                                                                              |     *(rsp) = rdi;
    0x00434938 cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                      |     
                                                                                                                                                                                                                                                                                 |     if (*((rsi + 0x38)) != 0x17) {
    0x0043493d je 0x434945                                                                                                                                                                                                                                                       |         
    0x0043493f mov r13, qword [r15 + 0x18]                                                                                                                                                                                                                                       |         r13 = *((r15 + 0x18));
    0x00434943 jmp 0x434949                                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |     } else {
    0x00434945 lea r13, [r15 + 0x18]                                                                                                                                                                                                                                             |         r13 = r15 + 0x18;
                                                                                                                                                                                                                                                                                 |     }
    0x00434949 mov rbp, qword [r15 + 0x30]                                                                                                                                                                                                                                       |     rbp = *((r15 + 0x30));
    0x0043494d test r14, r14                                                                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                                                                 |     if (r14 == 0) {
    0x00434950 jne 0x434966                                                                                                                                                                                                                                                      |         
    0x00434952 mov r14, qword [rip + 0x26cd2f]                                                                                                                                                                                                                                   |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00434959 test r14, r14                                                                                                                                                                                                                                                     |         
                                                                                                                                                                                                                                                                                 |         if (r14 != 0) {
    0x0043495c jne 0x434966                                                                                                                                                                                                                                                      |             goto label_0;
                                                                                                                                                                                                                                                                                 |         }
    0x0043495e call 0x4381c0                                                                                                                                                                                                                                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x00434963 mov r14, rax                                                                                                                                                                                                                                                      |         r14 = rax;
                                                                                                                                                                                                                                                                                 |     }
                                                                                                                                                                                                                                                                                 | label_0:
    0x00434966 mov rax, qword [r14]                                                                                                                                                                                                                                              |     rax = *(r14);
    0x00434969 mov esi, 0x50                                                                                                                                                                                                                                                     |     esi = 0x50;
    0x0043496e mov rdi, r14                                                                                                                                                                                                                                                      |     rdi = r14;
    0x00434971 call qword [rax + 0x10]                                                                                                                                                                                                                                           |     rax = uint64_t (*rax + 0x10)() ();
    0x00434974 mov rbx, rax                                                                                                                                                                                                                                                      |     rbx = rax;
    0x00434977 mov qword [rax], 0x435df0                                                                                                                                                                                                                                         |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void__BloombergLP::bdlmt::EventScheduler::_____BloombergLP::bdlf::Bind_BoundTuple1_BloombergLP::bdlmt::EventScheduler_____::invokerFunction_void_;
    0x0043497e movups xmm0, xmmword [r12]                                                                                                                                                                                                                                        |     __asm ("movups xmm0, xmmword [r12]");
    0x00434983 movups xmmword [rax + 8], xmm0                                                                                                                                                                                                                                    |     __asm ("movups xmmword [rax + 8], xmm0");
    0x00434987 mov rax, qword [r12 + 0x10]                                                                                                                                                                                                                                       |     rax = *((r12 + 0x10));
    0x0043498c mov qword [rbx + 0x18], rax                                                                                                                                                                                                                                       |     *((rbx + 0x18)) = rax;
    0x00434990 lea rdi, [rbx + 0x20]                                                                                                                                                                                                                                             |     
    0x00434994 mov qword [rbx + 0x20], 0                                                                                                                                                                                                                                         |     *((rbx + 0x20)) = 0;
    0x0043499c mov qword [rbx + 0x48], r14                                                                                                                                                                                                                                       |     *((rbx + 0x48)) = r14;
    0x004349a0 movaps xmm0, xmmword [rip + 0x2c989]                                                                                                                                                                                                                              |     xmm0 = .comment;
    0x004349a7 movups xmmword [rbx + 0x38], xmm0                                                                                                                                                                                                                                 |     __asm ("movups xmmword [rbx + 0x38], xmm0");
    0x004349ab mov ecx, 0x4649d6                                                                                                                                                                                                                                                 |     
    0x004349b0 mov rsi, r13                                                                                                                                                                                                                                                      |     
    0x004349b3 mov rdx, rbp                                                                                                                                                                                                                                                      |     
    0x004349b6 call 0x43dff0                                                                                                                                                                                                                                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x20, r13, rbp, "string<...>::assign<Iter>(i,j): string too long");
    0x004349bb mov edx, 0x4393c0                                                                                                                                                                                                                                                 |     
    0x004349c0 mov rdi, qword [rsp]                                                                                                                                                                                                                                              |     
    0x004349c4 mov rsi, r15                                                                                                                                                                                                                                                      |     
    0x004349c7 mov rcx, rbx                                                                                                                                                                                                                                                      |     
    0x004349ca call 0x439d40                                                                                                                                                                                                                                                     |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x004349cf mov ebp, eax                                                                                                                                                                                                                                                      |     
    0x004349d1 test eax, eax                                                                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                                                                 |     if (eax != 0) {
    0x004349d3 je 0x4349fe                                                                                                                                                                                                                                                       |         
    0x004349d5 cmp qword [rbx + 0x40], 0x17                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |         if (*((rbx + 0x40)) != 0x17) {
    0x004349da je 0x4349ea                                                                                                                                                                                                                                                       |             
    0x004349dc mov rsi, qword [rbx + 0x20]                                                                                                                                                                                                                                       |             rsi = *((rbx + 0x20));
    0x004349e0 mov rdi, qword [rbx + 0x48]                                                                                                                                                                                                                                       |             rdi = *((rbx + 0x48));
    0x004349e4 mov rax, qword [rdi]                                                                                                                                                                                                                                              |             rax = *(rdi);
    0x004349e7 call qword [rax + 0x18]                                                                                                                                                                                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |         }
    0x004349ea mov qword [rbx + 0x38], 0xffffffffffffffff                                                                                                                                                                                                                        |         *((rbx + 0x38)) = 0xffffffffffffffff;
    0x004349f2 mov rax, qword [r14]                                                                                                                                                                                                                                              |         rax = *(r14);
    0x004349f5 mov rdi, r14                                                                                                                                                                                                                                                      |         rdi = r14;
    0x004349f8 mov rsi, rbx                                                                                                                                                                                                                                                      |         rsi = rbx;
    0x004349fb call qword [rax + 0x18]                                                                                                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |     }
    0x004349fe mov eax, ebp                                                                                                                                                                                                                                                      |     eax = ebp;
    0x00434a00 add rsp, 8                                                                                                                                                                                                                                                        |     
    0x00434a04 pop rbx                                                                                                                                                                                                                                                           |     
    0x00434a05 pop r12                                                                                                                                                                                                                                                           |     
    0x00434a07 pop r13                                                                                                                                                                                                                                                           |     
    0x00434a09 pop r14                                                                                                                                                                                                                                                           |     
    0x00434a0b pop r15                                                                                                                                                                                                                                                           |     
    0x00434a0d pop rbp                                                                                                                                                                                                                                                           |     
    0x00434a0e ret                                                                                                                                                                                                                                                               |     return rax;
                                                                                                                                                                                                                                                                                 | }
