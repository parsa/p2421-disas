    ; assembly                                                                                                       | /* r2dec pseudo code output */
                                                                                                                     | /* baljsn_encoder.t/none @ 0x4b94d0 */
                                                                                                                     | #include <stdint.h>
                                                                                                                     |  
    ; (fcn) method.BloombergLP::s_baltst::Choice3.makeSelection1_BloombergLP::s_baltst::Sequence6_const_ ()          | int64_t method_BloombergLP::s_baltst::Choice3_makeSelection1_BloombergLP::s_baltst::Sequence6_const_ (int64_t arg2, int64_t arg1) {
                                                                                                                     |     rsi = arg2;
                                                                                                                     |     rdi = arg1;
                                                                                                                     |     /* BloombergLP::s_baltst::Choice3::makeSelection1(BloombergLP::s_baltst::Sequence6 const&) */
    0x004b94d0 push r14                                                                                              |     
    0x004b94d2 push rbx                                                                                              |     
    0x004b94d3 push rax                                                                                              |     
    0x004b94d4 mov r14, rsi                                                                                          |     r14 = rsi;
    0x004b94d7 mov rbx, rdi                                                                                          |     rbx = rdi;
    0x004b94da mov eax, dword [rdi + 0x170]                                                                          |     eax = *((rdi + 0x170));
    0x004b94e0 cmp eax, 2                                                                                            |     
                                                                                                                     |     if (eax != 2) {
    0x004b94e3 je 0x4b94f6                                                                                           |         
    0x004b94e5 test eax, eax                                                                                         |         
                                                                                                                     |         if (eax == 0) {
    0x004b94e7 jne 0x4b9512                                                                                          |             
    0x004b94e9 mov rdi, rbx                                                                                          |             
    0x004b94ec mov rsi, r14                                                                                          |             
    0x004b94ef call 0x4ba070                                                                                         |             BloombergLP::s_baltst::Sequence6::operator=(BloombergLP::s_baltst::Sequence6const&) (rbx, r14);
    0x004b94f4 jmp 0x4b9538                                                                                          |             
                                                                                                                     |         } else {
    0x004b94f6 cmp qword [rbx + 0x20], 0x17                                                                          |             
                                                                                                                     |             if (*((rbx + 0x20)) != 0x17) {
    0x004b94fb je 0x4b950a                                                                                           |                 
    0x004b94fd mov rsi, qword [rbx]                                                                                  |                 rsi = *(rbx);
    0x004b9500 mov rdi, qword [rbx + 0x28]                                                                           |                 rdi = *((rbx + 0x28));
    0x004b9504 mov rax, qword [rdi]                                                                                  |                 rax = *(rdi);
    0x004b9507 call qword [rax + 0x18]                                                                               |                 uint64_t (*rax + 0x18)() ();
                                                                                                                     |             }
    0x004b950a mov qword [rbx + 0x18], 0xffffffffffffffff                                                            |             *((rbx + 0x18)) = 0xffffffffffffffff;
                                                                                                                     |         }
    0x004b9512 mov dword [rbx + 0x170], 0xffffffff                                                                   |         *((rbx + 0x170)) = 0xffffffff;
    0x004b951c mov rdx, qword [rbx + 0x178]                                                                          |         
    0x004b9523 mov rdi, rbx                                                                                          |         
    0x004b9526 mov rsi, r14                                                                                          |         
    0x004b9529 call 0x4c3780                                                                                         |         BloombergLP::s_baltst::Sequence6::Sequence6(BloombergLP::s_baltst::Sequence6const&,BloombergLP::bslma::Allocator*) (rbx, r14, *((rbx + 0x178)));
    0x004b952e mov dword [rbx + 0x170], 0                                                                            |         *((rbx + 0x170)) = 0;
                                                                                                                     |     }
    0x004b9538 mov rax, rbx                                                                                          |     rax = rbx;
    0x004b953b add rsp, 8                                                                                            |     
    0x004b953f pop rbx                                                                                               |     
    0x004b9540 pop r14                                                                                               |     
    0x004b9542 ret                                                                                                   |     return rax;
                                                                                                                     | }
