    ; assembly                                                               | /* r2dec pseudo code output */
                                                                             | /* baljsn_encoder.t/assume @ 0x4b9cd0 */
                                                                             | #include <stdint.h>
                                                                             |  
    ; (fcn) method.BloombergLP::s_baltst::Choice3.makeSelection4__ ()        | int64_t method_BloombergLP::s_baltst::Choice3_makeSelection4_ (int64_t arg1) {
                                                                             |     rdi = arg1;
                                                                             |     /* BloombergLP::s_baltst::Choice3::makeSelection4() */
    0x004b9cd0 push rbx                                                      |     
    0x004b9cd1 mov rbx, rdi                                                  |     rbx = rdi;
    0x004b9cd4 mov eax, dword [rdi + 0x170]                                  |     eax = *((rdi + 0x170));
    0x004b9cda cmp rax, 3                                                    |     
                                                                             |     if (rax <= 3) {
    0x004b9cde ja 0x4b9d0d                                                   |         
                                                                             |         /* switch table (4 cases) at 0x648e28 */
    0x004b9ce0 jmp qword [rax*8 + 0x648e28]                                  |         
    0x004b9ce7 mov rdi, rbx                                                  |         
    0x004b9cea call 0x4c4a50                                                 |         BloombergLP::s_baltst::Sequence6::~Sequence6() (rbx);
    0x004b9cef jmp 0x4b9d0d                                                  |         goto label_0;
    0x004b9cf1 cmp qword [rbx + 0x20], 0x17                                  |         
                                                                             |         if (*((rbx + 0x20)) != 0x17) {
    0x004b9cf6 je 0x4b9d05                                                   |             
    0x004b9cf8 mov rsi, qword [rbx]                                          |             rsi = *(rbx);
    0x004b9cfb mov rdi, qword [rbx + 0x28]                                   |             rdi = *((rbx + 0x28));
    0x004b9cff mov rax, qword [rdi]                                          |             rax = *(rdi);
    0x004b9d02 call qword [rax + 0x18]                                       |             uint64_t (*rax + 0x18)() ();
                                                                             |         }
    0x004b9d05 mov qword [rbx + 0x18], 0xffffffffffffffff                    |         *((rbx + 0x18)) = 0xffffffffffffffff;
                                                                             |     }
                                                                             | label_0:
    0x004b9d0d mov dword [rbx], 0                                            |     *(rbx) = 0;
    0x004b9d13 mov dword [rbx + 0x170], 3                                    |     *((rbx + 0x170)) = 3;
    0x004b9d1d jmp 0x4b9d25                                                  |     goto label_1;
    0x004b9d1f mov dword [rbx], 0                                            |     *(rbx) = 0;
                                                                             | label_1:
    0x004b9d25 mov rax, rbx                                                  |     rax = rbx;
    0x004b9d28 pop rbx                                                       |     
    0x004b9d29 ret                                                           |     return rax;
                                                                             | }
