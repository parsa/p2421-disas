    ; assembly                                                                                               | /* r2dec pseudo code output */
                                                                                                             | /* baljsn_encoder.t/assume @ 0x4c98b0 */
                                                                                                             | #include <stdint.h>
                                                                                                             |  
    ; (fcn) method.BloombergLP::bslstl::Optional_DataImp_BloombergLP::s_baltst::Choice1_.reset__ ()          | int64_t method_BloombergLP::bslstl::Optional_DataImp_BloombergLP::s_baltst::Choice1_reset_ (uint32_t arg1) {
                                                                                                             |     rdi = arg1;
                                                                                                             |     /* BloombergLP::bslstl::Optional_DataImp<BloombergLP::s_baltst::Choice1>::reset() */
    0x004c98b0 push r15                                                                                      |     
    0x004c98b2 push r14                                                                                      |     
    0x004c98b4 push r13                                                                                      |     
    0x004c98b6 push r12                                                                                      |     
    0x004c98b8 push rbx                                                                                      |     
    0x004c98b9 cmp byte [rdi + 0x18], 0                                                                      |     
                                                                                                             |     if (*((rdi + 0x18)) != 0) {
    0x004c98bd je 0x4c9981                                                                                   |         
    0x004c98c3 mov rbx, rdi                                                                                  |         rbx = rdi;
    0x004c98c6 mov byte [rdi + 0x18], 0                                                                      |         *((rdi + 0x18)) = 0;
    0x004c98ca mov eax, dword [rdi + 8]                                                                      |         eax = *((rdi + 8));
    0x004c98cd cmp eax, 2                                                                                    |         
                                                                                                             |         if (eax >= 2) {
    0x004c98d0 jb 0x4c997a                                                                                   |             
    0x004c98d6 cmp eax, 3                                                                                    |             
                                                                                                             |             if (eax != 3) {
    0x004c98d9 je 0x4c990a                                                                                   |                 
    0x004c98db cmp eax, 2                                                                                    |                 
                                                                                                             |                 if (eax != 2) {
    0x004c98de jne 0x4c997a                                                                                  |                     goto label_0;
                                                                                                             |                 }
    0x004c98e4 mov r14, qword [rbx]                                                                          |                 r14 = *(rbx);
    0x004c98e7 test r14, r14                                                                                 |                 
                                                                                                             |                 if (r14 == 0) {
    0x004c98ea je 0x4c997a                                                                                   |                     goto label_0;
                                                                                                             |                 }
    0x004c98f0 mov r15, qword [rbx + 0x10]                                                                   |                 r15 = *((rbx + 0x10));
    0x004c98f4 mov rdi, r14                                                                                  |                 
    0x004c98f7 call 0x4c05f0                                                                                 |                 BloombergLP::s_baltst::Sequence4::~Sequence4() (r14);
    0x004c98fc mov rax, qword [r15]                                                                          |                 rax = *(r15);
    0x004c98ff mov rdi, r15                                                                                  |                 rdi = r15;
    0x004c9902 mov rsi, r14                                                                                  |                 rsi = r14;
    0x004c9905 call qword [rax + 0x18]                                                                       |                 uint64_t (*rax + 0x18)() ();
    0x004c9908 jmp 0x4c997a                                                                                  |                 
                                                                                                             |             } else {
    0x004c990a mov r14, qword [rbx]                                                                          |                 r14 = *(rbx);
    0x004c990d test r14, r14                                                                                 |                 
                                                                                                             |                 if (r14 == 0) {
    0x004c9910 je 0x4c997a                                                                                   |                     goto label_0;
                                                                                                             |                 }
    0x004c9912 mov r15, qword [rbx + 0x10]                                                                   |                 r15 = *((rbx + 0x10));
    0x004c9916 mov eax, dword [r14 + 0x30]                                                                   |                 eax = *((r14 + 0x30));
    0x004c991a cmp rax, 3                                                                                    |                 
                                                                                                             |                 if (rax <= 3) {
    0x004c991e ja 0x4c9966                                                                                   |                     
                                                                                                             |                     /* switch table (4 cases) at 0x649f60 */
    0x004c9920 jmp qword [rax*8 + 0x649f60]                                                                  |                     
    0x004c9927 cmp qword [r14 + 0x20], 0x17                                                                  |                     
                                                                                                             |                     if (*((r14 + 0x20)) != 0x17) {
    0x004c992c je 0x4c993b                                                                                   |                         
    0x004c992e mov rsi, qword [r14]                                                                          |                         rsi = *(r14);
    0x004c9931 mov rdi, qword [r14 + 0x28]                                                                   |                         rdi = *((r14 + 0x28));
    0x004c9935 mov rax, qword [rdi]                                                                          |                         rax = *(rdi);
    0x004c9938 call qword [rax + 0x18]                                                                       |                         uint64_t (*rax + 0x18)() ();
                                                                                                             |                     }
    0x004c993b mov qword [r14 + 0x18], 0xffffffffffffffff                                                    |                     *((r14 + 0x18)) = 0xffffffffffffffff;
    0x004c9943 jmp 0x4c9966                                                                                  |                     goto label_1;
    0x004c9945 mov r12, qword [r14]                                                                          |                     r12 = *(r14);
    0x004c9948 test r12, r12                                                                                 |                     
                                                                                                             |                     if (r12 == 0) {
    0x004c994b je 0x4c9966                                                                                   |                         goto label_1;
                                                                                                             |                     }
    0x004c994d mov r13, qword [r14 + 0x38]                                                                   |                     r13 = *((r14 + 0x38));
    0x004c9951 mov rdi, r12                                                                                  |                     
    0x004c9954 call 0x4c99b0                                                                                 |                     BloombergLP::s_baltst::Choice1::~Choice1() (r12);
    0x004c9959 mov rax, qword [r13]                                                                          |                     rax = *(r13);
    0x004c995d mov rdi, r13                                                                                  |                     rdi = r13;
    0x004c9960 mov rsi, r12                                                                                  |                     rsi = r12;
    0x004c9963 call qword [rax + 0x18]                                                                       |                     uint64_t (*rax + 0x18)() ();
                                                                                                             |                 }
                                                                                                             | label_1:
    0x004c9966 mov dword [r14 + 0x30], 0xffffffff                                                            |                 *((r14 + 0x30)) = 0xffffffff;
    0x004c996e mov rax, qword [r15]                                                                          |                 rax = *(r15);
    0x004c9971 mov rdi, r15                                                                                  |                 rdi = r15;
    0x004c9974 mov rsi, r14                                                                                  |                 rsi = r14;
    0x004c9977 call qword [rax + 0x18]                                                                       |                 uint64_t (*rax + 0x18)() ();
                                                                                                             |             }
                                                                                                             |         }
                                                                                                             | label_0:
    0x004c997a mov dword [rbx + 8], 0xffffffff                                                               |         *((rbx + 8)) = 0xffffffff;
                                                                                                             |     }
    0x004c9981 pop rbx                                                                                       |     
    0x004c9982 pop r12                                                                                       |     
    0x004c9984 pop r13                                                                                       |     
    0x004c9986 pop r14                                                                                       |     
    0x004c9988 pop r15                                                                                       |     
    0x004c998a ret                                                                                           |     return rax;
                                                                                                             | }
