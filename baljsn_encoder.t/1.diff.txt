00000000004ca060 <void bsl::vector<BloombergLP::s_baltst::Choice1, bsl::allocator<BloombergLP::s   |	00000000004ca190 <void bsl::vector<BloombergLP::s_baltst::Choice1, bsl::allocator<BloombergLP::s
0000000000000000: 01	pushq	%rbp									0000000000000000: 01	pushq	%rbp
0000000000000001: 02	pushq	%r15									0000000000000001: 02	pushq	%r15
0000000000000003: 02	pushq	%r14									0000000000000003: 02	pushq	%r14
0000000000000005: 02	pushq	%r13									0000000000000005: 02	pushq	%r13
0000000000000007: 02	pushq	%r12									0000000000000007: 02	pushq	%r12
0000000000000009: 01	pushq	%rbx									0000000000000009: 01	pushq	%rbx
000000000000000a: 04	subq	$72, %rsp							   |	000000000000000a: 04	subq	$56, %rsp
000000000000000e: 03	movq	%rdx, %r12							   |	000000000000000e: 03	movq	%rcx, %r15
0000000000000011: 03	movq	%rsi, %r8							   |	0000000000000011: 03	movq	%rdx, %r12
0000000000000014: 03	movq	%rdi, %r14							   |	0000000000000014: 03	movq	%rsi, %r8
0000000000000017: 10	movabsq	$768614336404564650, %rdx						0000000000000017: 10	movabsq	$768614336404564650, %rdx
0000000000000021: 03	movq	%rcx, %rdi							   |	0000000000000021: 03	subq	%r12, %rcx
0000000000000024: 03	subq	%r12, %rdi							   |	0000000000000024: 03	movq	%rcx, %rbx
0000000000000027: 03	movq	%rdi, %rbx							   |	0000000000000027: 04	sarq	$3, %rbx
000000000000002a: 04	sarq	$3, %rbx							   |	000000000000002b: 10	movabsq	$-6148914691236517205, %rax
000000000000002e: 10	movabsq	$-6148914691236517205, %rax					   |	0000000000000035: 04	imulq	%rax, %rbx
0000000000000038: 04	imulq	%rax, %rbx							   |	0000000000000039: 04	movq	8(%rdi), %rsi
000000000000003c: 04	movq	8(%r14), %rsi							   |	000000000000003d: 03	movq	%rsi, %rbp
0000000000000040: 03	movq	%rsi, %rbp							   |	0000000000000040: 03	subq	(%rdi), %rbp
0000000000000043: 03	subq	(%r14), %rbp							   |	0000000000000043: 04	sarq	$3, %rbp
0000000000000046: 04	sarq	$3, %rbp							   |	0000000000000047: 04	imulq	%rax, %rbp
000000000000004a: 04	imulq	%rax, %rbp							   |	000000000000004b: 03	movq	%rdx, %rax
000000000000004e: 03	movq	%rdx, %rax							   |	000000000000004e: 03	subq	%rbp, %rax
0000000000000051: 03	subq	%rbp, %rax							   |	0000000000000051: 03	cmpq	%rax, %rbx
0000000000000054: 03	cmpq	%rax, %rbx							   |	0000000000000054: 06	ja	0x4ca2f8 <void bsl::vector<BloombergLP::s_baltst::Choice1, bsl::
0000000000000057: 06	ja	0x4ca1f6 <void bsl::vector<BloombergLP::s_baltst::Choice1, bsl::   |	000000000000005a: 03	movq	%rdi, %r14
000000000000005d: 04	leaq	8(%r14), %r15							   |	000000000000005d: 04	leaq	8(%rdi), %r13
0000000000000061: 03	addq	%rbx, %rbp								0000000000000061: 03	addq	%rbx, %rbp
0000000000000064: 04	movq	16(%r14), %rax							   |	0000000000000064: 04	movq	16(%rdi), %rax
0000000000000068: 03	cmpq	%rax, %rbp								0000000000000068: 03	cmpq	%rax, %rbp
000000000000006b: 06	jbe	0x4ca1af <void bsl::vector<BloombergLP::s_baltst::Choice1, bsl::   |	000000000000006b: 06	jbe	0x4ca2ac <void bsl::vector<BloombergLP::s_baltst::Choice1, bsl::
0000000000000071: 05	movq	%r15, 40(%rsp)							   |	0000000000000071: 05	movq	%r13, 32(%rsp)
0000000000000076: 05	movq	%r8, 48(%rsp)							   |	0000000000000076: 05	movq	%r8, 40(%rsp)
000000000000007b: 05	movq	%rcx, 56(%rsp)							   |	000000000000007b: 03	movq	%rbp, %rdi
0000000000000080: 03	movq	%rbp, %rdi							   |	000000000000007e: 03	movq	%rax, %rsi
0000000000000083: 03	movq	%rax, %rsi							   |	0000000000000081: 05	callq	0x523400 <bsl::Vector_Util::computeNewCapacity(unsigned long, un
0000000000000086: 05	callq	0x5227c0 <bsl::Vector_Util::computeNewCapacity(unsigned long, un   |	0000000000000086: 03	movq	%rax, %r13
000000000000008b: 03	movq	%rax, %r15							   |	0000000000000089: 04	movq	24(%r14), %rdi
000000000000008e: 04	movq	24(%r14), %rdi							   |	000000000000008d: 03	xorps	%xmm0, %xmm0
0000000000000092: 03	xorps	%xmm0, %xmm0							   |	0000000000000090: 04	movaps	%xmm0, (%rsp)
0000000000000095: 04	movaps	%xmm0, (%rsp)							   |	0000000000000094: 09	movq	$0, 16(%rsp)
0000000000000099: 09	movq	$0, 16(%rsp)							   |	000000000000009d: 05	movq	%rdi, 24(%rsp)
00000000000000a2: 05	movq	%rdi, 24(%rsp)							   |	00000000000000a2: 08	leaq	(,%rax,8), %rax
00000000000000a7: 08	leaq	(,%rax,8), %rax							   |	00000000000000aa: 04	leaq	(%rax,%rax,2), %rsi
00000000000000af: 04	leaq	(%rax,%rax,2), %rsi						   |	00000000000000ae: 03	movq	(%rdi), %rax
00000000000000b3: 03	movq	(%rdi), %rax							   |	00000000000000b1: 03	callq	*16(%rax)
00000000000000b6: 03	callq	*16(%rax)							   |	00000000000000b4: 05	movq	%rax, 8(%rsp)
00000000000000b9: 03	movq	%rax, %r13							   |	00000000000000b9: 04	movq	%rax, (%rsp)
00000000000000bc: 05	movq	%rax, 8(%rsp)							   |	00000000000000bd: 05	movq	%r13, 16(%rsp)
00000000000000c1: 04	movq	%rax, (%rsp)							   |	00000000000000c2: 03	movq	(%r14), %rdx
00000000000000c5: 05	movq	%r15, 16(%rsp)							   |	00000000000000c5: 04	movq	8(%r14), %r8
00000000000000ca: 03	movq	(%r14), %rdx							   |	00000000000000c9: 04	movq	24(%r14), %rcx
00000000000000cd: 04	movq	8(%r14), %r8							   |	00000000000000cd: 05	movq	%rcx, 48(%rsp)
00000000000000d1: 04	movq	24(%r14), %rax							   |	00000000000000d2: 04	subq	$8, %rsp
00000000000000d5: 05	movq	%rax, 64(%rsp)							   |	00000000000000d6: 05	leaq	56(%rsp), %r10
00000000000000da: 04	subq	$8, %rsp							   |	00000000000000db: 03	movq	%rax, %rdi
00000000000000de: 05	leaq	72(%rsp), %rax							   |	00000000000000de: 05	movq	40(%rsp), %rsi
00000000000000e3: 03	movq	%r13, %rdi							   |	00000000000000e3: 05	movq	48(%rsp), %rcx
00000000000000e6: 05	movq	48(%rsp), %rsi							   |	00000000000000e8: 03	movq	%r12, %r9
00000000000000eb: 05	movq	56(%rsp), %rcx							   |	00000000000000eb: 02	pushq	%r10
00000000000000f0: 03	movq	%r12, %r9							   |	00000000000000ed: 01	pushq	%rbx
00000000000000f3: 01	pushq	%rax								   |	00000000000000ee: 02	pushq	%r15
00000000000000f4: 01	pushq	%rbx								   |	00000000000000f0: 05	callq	0x4ca320 <void BloombergLP::bslalg::ArrayPrimitives::destructive
00000000000000f5: 04	pushq	80(%rsp)							   |	00000000000000f5: 04	addq	$32, %rsp
00000000000000f9: 05	callq	0x4ca250 <void BloombergLP::bslalg::ArrayPrimitives::destructive   |	00000000000000f9: 05	leaq	(%rbp,%rbp,2), %rax
00000000000000fe: 04	addq	$32, %rsp							   |	00000000000000fe: 04	shlq	$3, %rax
0000000000000102: 05	leaq	(%rbp,%rbp,2), %rax						   |	0000000000000102: 05	addq	%rax, 8(%rsp)
0000000000000107: 05	leaq	(%r13,%rax,8), %rax						   |	0000000000000107: 03	movq	%rsp, %rsi
000000000000010c: 05	movq	%rax, 8(%rsp)							   |	000000000000010a: 03	movq	%r14, %rdi
0000000000000111: 03	movq	%rsp, %rsi							   |	000000000000010d: 05	callq	0x523430 <bsl::Vector_Util::swap(void*, void*)>
0000000000000114: 03	movq	%r14, %rdi							   |	0000000000000112: 03	movq	%rsp, %rdi
0000000000000117: 05	callq	0x5227f0 <bsl::Vector_Util::swap(void*, void*)>			   |	0000000000000115: 05	callq	0x4c56b0 <bsl::vector<BloombergLP::s_baltst::Choice1, bsl::alloc
000000000000011c: 04	movq	(%rsp), %rdi							   |	000000000000011a: 02	jmp	0x4ca2e9 <void bsl::vector<BloombergLP::s_baltst::Choice1, bsl::
0000000000000120: 03	testq	%rdi, %rdi							   |	000000000000011c: 03	testq	%rcx, %rcx
0000000000000123: 02	je	0x4ca1e7 <void bsl::vector<BloombergLP::s_baltst::Choice1, bsl::   |	000000000000011f: 02	je	0x4ca2dd <void bsl::vector<BloombergLP::s_baltst::Choice1, bsl::
0000000000000125: 05	movq	8(%rsp), %rsi							   |	0000000000000121: 04	movq	24(%r14), %rax
000000000000012a: 05	movq	24(%rsp), %rax							   |	0000000000000125: 04	movq	%rax, (%rsp)
000000000000012f: 05	movq	%rax, 32(%rsp)							   |	0000000000000129: 04	subq	$8, %rsp
0000000000000134: 05	leaq	32(%rsp), %rdx							   |	000000000000012d: 05	leaq	8(%rsp), %r9
0000000000000139: 05	callq	0x4c9aa0 <void BloombergLP::bslalg::ArrayDestructionPrimitives::   |	0000000000000132: 03	movq	%r8, %rdi
000000000000013e: 04	movq	(%rsp), %rsi							   |	0000000000000135: 03	movq	%r12, %rdx
0000000000000142: 05	movq	24(%rsp), %rdi							   |	0000000000000138: 03	movq	%r15, %rcx
0000000000000147: 03	movq	(%rdi), %rax							   |	000000000000013b: 03	movq	%rbx, %r8
000000000000014a: 03	callq	*24(%rax)							   |	000000000000013e: 02	pushq	$0
000000000000014d: 02	jmp	0x4ca1e7 <void bsl::vector<BloombergLP::s_baltst::Choice1, bsl::   |	0000000000000140: 05	callq	0x4ca450 <void BloombergLP::bslalg::ArrayPrimitives_Imp::insert<
000000000000014f: 03	testq	%rdi, %rdi							   |	0000000000000145: 04	addq	$16, %rsp
0000000000000152: 02	je	0x4ca1dc <void bsl::vector<BloombergLP::s_baltst::Choice1, bsl::   |	0000000000000149: 04	movq	(%r13), %rsi
0000000000000154: 04	movq	24(%r14), %rax							   |	000000000000014d: 04	leaq	(%rbx,%rbx,2), %rax
0000000000000158: 04	movq	%rax, (%rsp)							   |	0000000000000151: 04	leaq	(%rsi,%rax,8), %rax
000000000000015c: 04	subq	$8, %rsp							   |	0000000000000155: 04	movq	%rax, (%r13)
0000000000000160: 05	leaq	8(%rsp), %r9							   |	0000000000000159: 04	addq	$56, %rsp
0000000000000165: 03	movq	%r8, %rdi							   |	000000000000015d: 01	popq	%rbx
0000000000000168: 03	movq	%r12, %rdx							   |	000000000000015e: 02	popq	%r12
000000000000016b: 03	movq	%rbx, %r8							   |	0000000000000160: 02	popq	%r13
000000000000016e: 02	pushq	$0								   |	0000000000000162: 02	popq	%r14
0000000000000170: 05	callq	0x4ca380 <void BloombergLP::bslalg::ArrayPrimitives_Imp::insert<   |	0000000000000164: 02	popq	%r15
0000000000000175: 04	addq	$16, %rsp							   |	0000000000000166: 01	popq	%rbp
0000000000000179: 03	movq	(%r15), %rsi							   |	0000000000000167: 01	retq	
000000000000017c: 04	leaq	(%rbx,%rbx,2), %rax						   |	0000000000000168: 05	movl	$5567581, %edi
0000000000000180: 04	leaq	(%rsi,%rax,8), %rax						   |	000000000000016d: 05	callq	0x519650 <BloombergLP::bslstl::StdExceptUtil::throwLengthError(c
0000000000000184: 03	movq	%rax, (%r15)							   |	0000000000000172: 03	movq	%rax, %rbx
0000000000000187: 04	addq	$72, %rsp							   |	0000000000000175: 03	movq	%rsp, %rdi
000000000000018b: 01	popq	%rbx								   |	0000000000000178: 05	callq	0x4c56b0 <bsl::vector<BloombergLP::s_baltst::Choice1, bsl::alloc
000000000000018c: 02	popq	%r12								   |	000000000000017d: 03	movq	%rbx, %rdi
000000000000018e: 02	popq	%r13								   |	0000000000000180: 05	callq	0x405bb0 <_Unwind_Resume@plt>
0000000000000190: 02	popq	%r14								   |	0000000000000185: 10	nopw	%cs:(%rax,%rax)
0000000000000192: 02	popq	%r15								   |	000000000000018f: 01	nop	
0000000000000194: 01	popq	%rbp								   <
0000000000000195: 01	retq									   <
0000000000000196: 05	movl	$5566381, %edi							   <
000000000000019b: 05	callq	0x518a10 <BloombergLP::bslstl::StdExceptUtil::throwLengthError(c   <
00000000000001a0: 03	movq	%rax, %rdi							   <
00000000000001a3: 05	callq	0x428650 <__clang_call_terminate>				   <
00000000000001a8: 03	movq	%rax, %rbx							   <
00000000000001ab: 04	movq	(%rsp), %rdi							   <
00000000000001af: 03	testq	%rdi, %rdi							   <
00000000000001b2: 02	je	0x4ca23c <void bsl::vector<BloombergLP::s_baltst::Choice1, bsl::   <
00000000000001b4: 05	movq	8(%rsp), %rsi							   <
00000000000001b9: 05	movq	24(%rsp), %rax							   <
00000000000001be: 05	movq	%rax, 32(%rsp)							   <
00000000000001c3: 05	leaq	32(%rsp), %rdx							   <
00000000000001c8: 05	callq	0x4c9aa0 <void BloombergLP::bslalg::ArrayDestructionPrimitives::   <
00000000000001cd: 04	movq	(%rsp), %rsi							   <
00000000000001d1: 05	movq	24(%rsp), %rdi							   <
00000000000001d6: 03	movq	(%rdi), %rax							   <
00000000000001d9: 03	callq	*24(%rax)							   <
00000000000001dc: 03	movq	%rbx, %rdi							   <
00000000000001df: 05	callq	0x405b60 <_Unwind_Resume@plt>					   <
00000000000001e4: 03	movq	%rax, %rdi							   <
00000000000001e7: 05	callq	0x428650 <__clang_call_terminate>				   <
00000000000001ec: 04	nopl	(%rax)								   <
