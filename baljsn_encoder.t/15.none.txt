    ; assembly                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                 | /* baljsn_encoder.t/none @ 0x4d1120 */
                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                 |  
    ; (fcn) method.BloombergLP::s_baltst::SequenceWithAnonymityChoice1.operator_BloombergLP::s_baltst::SequenceWithAnonymityChoice1_ ()          | int64_t method_BloombergLP::s_baltst::SequenceWithAnonymityChoice1_operator_BloombergLP::s_baltst::SequenceWithAnonymityChoice1_ (int64_t arg2, uint32_t arg1) {
                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                 |     /* BloombergLP::s_baltst::SequenceWithAnonymityChoice1::operator=(BloombergLP::s_baltst::SequenceWithAnonymityChoice1&&) */
    0x004d1120 push rbp                                                                                                                          |     
    0x004d1121 push rbx                                                                                                                          |     
    0x004d1122 push rax                                                                                                                          |     
    0x004d1123 mov rbx, rdi                                                                                                                      |     rbx = rdi;
    0x004d1126 cmp rdi, rsi                                                                                                                      |     
                                                                                                                                                 |     if (rdi != rsi) {
    0x004d1129 je 0x4d11a6                                                                                                                       |         
    0x004d112b mov eax, dword [rsi + 0x30]                                                                                                       |         eax = *((rsi + 0x30));
    0x004d112e cmp eax, 1                                                                                                                        |         
                                                                                                                                                 |         if (eax != 1) {
    0x004d1131 je 0x4d114b                                                                                                                       |             
    0x004d1133 test eax, eax                                                                                                                     |             
                                                                                                                                                 |             if (eax == 0) {
    0x004d1135 jne 0x4d1155                                                                                                                      |                 
    0x004d1137 mov bpl, byte [rsi]                                                                                                               |                 bpl = *(rsi);
    0x004d113a mov eax, dword [rbx + 0x30]                                                                                                       |                 eax = *((rbx + 0x30));
    0x004d113d cmp eax, 1                                                                                                                        |                 
                                                                                                                                                 |                 if (eax != 1) {
    0x004d1140 je 0x4d1180                                                                                                                       |                     
    0x004d1142 test eax, eax                                                                                                                     |                     
                                                                                                                                                 |                     if (eax == 0) {
    0x004d1144 jne 0x4d119c                                                                                                                      |                         
    0x004d1146 mov byte [rbx], bpl                                                                                                               |                         *(rbx) = bpl;
    0x004d1149 jmp 0x4d11a6                                                                                                                      |                         
                                                                                                                                                 |                     } else {
    0x004d114b mov rdi, rbx                                                                                                                      |                         
    0x004d114e call 0x4d11c0                                                                                                                     |                         BloombergLP::s_baltst::SequenceWithAnonymityChoice1::makeSelection6(bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>&&) (rbx, rsi);
    0x004d1153 jmp 0x4d11a6                                                                                                                      |                         
                                                                                                                                                 |                     } else {
    0x004d1155 cmp dword [rbx + 0x30], 1                                                                                                         |                         
                                                                                                                                                 |                     }
                                                                                                                                                 |                     if (*((rbx + 0x30)) == 1) {
    0x004d1159 jne 0x4d1177                                                                                                                      |                         
    0x004d115b cmp qword [rbx + 0x20], 0x17                                                                                                      |                         
                                                                                                                                                 |                         if (*((rbx + 0x20)) != 0x17) {
    0x004d1160 je 0x4d116f                                                                                                                       |                             
    0x004d1162 mov rsi, qword [rbx]                                                                                                              |                             rsi = *(rbx);
    0x004d1165 mov rdi, qword [rbx + 0x28]                                                                                                       |                             rdi = *((rbx + 0x28));
    0x004d1169 mov rax, qword [rdi]                                                                                                              |                             rax = *(rdi);
    0x004d116c call qword [rax + 0x18]                                                                                                           |                             uint64_t (*rax + 0x18)() ();
                                                                                                                                                 |                         }
    0x004d116f mov qword [rbx + 0x18], 0xffffffffffffffff                                                                                        |                         *((rbx + 0x18)) = 0xffffffffffffffff;
                                                                                                                                                 |                     }
    0x004d1177 mov dword [rbx + 0x30], 0xffffffff                                                                                                |                     *((rbx + 0x30)) = 0xffffffff;
    0x004d117e jmp 0x4d11a6                                                                                                                      |                     
                                                                                                                                                 |                 } else {
    0x004d1180 cmp qword [rbx + 0x20], 0x17                                                                                                      |                     
                                                                                                                                                 |                 }
                                                                                                                                                 |             }
                                                                                                                                                 |             if (*((rbx + 0x20)) != 0x17) {
    0x004d1185 je 0x4d1194                                                                                                                       |                 
    0x004d1187 mov rsi, qword [rbx]                                                                                                              |                 rsi = *(rbx);
    0x004d118a mov rdi, qword [rbx + 0x28]                                                                                                       |                 rdi = *((rbx + 0x28));
    0x004d118e mov rax, qword [rdi]                                                                                                              |                 rax = *(rdi);
    0x004d1191 call qword [rax + 0x18]                                                                                                           |                 uint64_t (*rax + 0x18)() ();
                                                                                                                                                 |             }
    0x004d1194 mov qword [rbx + 0x18], 0xffffffffffffffff                                                                                        |             *((rbx + 0x18)) = 0xffffffffffffffff;
    0x004d119c mov byte [rbx], bpl                                                                                                               |             *(rbx) = bpl;
    0x004d119f mov dword [rbx + 0x30], 0                                                                                                         |             *((rbx + 0x30)) = 0;
                                                                                                                                                 |         }
                                                                                                                                                 |     }
    0x004d11a6 mov rax, rbx                                                                                                                      |     rax = rbx;
    0x004d11a9 add rsp, 8                                                                                                                        |     
    0x004d11ad pop rbx                                                                                                                           |     
    0x004d11ae pop rbp                                                                                                                           |     
    0x004d11af ret                                                                                                                               |     return rax;
                                                                                                                                                 | }
