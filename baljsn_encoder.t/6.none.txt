    ; assembly                                                               | /* r2dec pseudo code output */
                                                                             | /* baljsn_encoder.t/none @ 0x4bb380 */
                                                                             | #include <stdint.h>
                                                                             |  
    ; (fcn) method.BloombergLP::s_baltst::Sequence1.Sequence1__ ()           | int64_t method_BloombergLP::s_baltst::Sequence1_Sequence1_ (int64_t arg1) {
                                                                             |     rdi = arg1;
                                                                             |     /* BloombergLP::s_baltst::Sequence1::~Sequence1() */
    0x004bb380 push r15                                                      |     
    0x004bb382 push r14                                                      |     
    0x004bb384 push r13                                                      |     
    0x004bb386 push r12                                                      |     
    0x004bb388 push rbx                                                      |     
    0x004bb389 mov r14, rdi                                                  |     r14 = rdi;
    0x004bb38c mov rbx, qword [rdi + 0x1f8]                                  |     rbx = *((rdi + 0x1f8));
    0x004bb393 test rbx, rbx                                                 |     
                                                                             |     if (rbx != 0) {
    0x004bb396 je 0x4bb3fa                                                   |         
    0x004bb398 mov r15, qword [r14]                                          |         r15 = *(r14);
    0x004bb39b mov eax, dword [rbx + 0x30]                                   |         eax = *((rbx + 0x30));
    0x004bb39e cmp eax, 2                                                    |         
                                                                             |         if (eax != 2) {
    0x004bb3a1 je 0x4bb3c6                                                   |             
    0x004bb3a3 cmp eax, 1                                                    |             
                                                                             |             if (eax != 1) {
    0x004bb3a6 jne 0x4bb3e7                                                  |                 goto label_2;
                                                                             |             }
    0x004bb3a8 cmp qword [rbx + 0x20], 0x17                                  |             
                                                                             |             if (*((rbx + 0x20)) != 0x17) {
    0x004bb3ad je 0x4bb3bc                                                   |                 
    0x004bb3af mov rsi, qword [rbx]                                          |                 rsi = *(rbx);
    0x004bb3b2 mov rdi, qword [rbx + 0x28]                                   |                 rdi = *((rbx + 0x28));
    0x004bb3b6 mov rax, qword [rdi]                                          |                 rax = *(rdi);
    0x004bb3b9 call qword [rax + 0x18]                                       |                 uint64_t (*rax + 0x18)() ();
                                                                             |             }
    0x004bb3bc mov qword [rbx + 0x18], 0xffffffffffffffff                    |             *((rbx + 0x18)) = 0xffffffffffffffff;
    0x004bb3c4 jmp 0x4bb3e7                                                  |             
                                                                             |         } else {
    0x004bb3c6 mov r12, qword [rbx]                                          |             r12 = *(rbx);
    0x004bb3c9 test r12, r12                                                 |             
                                                                             |             if (r12 == 0) {
    0x004bb3cc je 0x4bb3e7                                                   |                 goto label_2;
                                                                             |             }
    0x004bb3ce mov r13, qword [rbx + 0x38]                                   |             r13 = *((rbx + 0x38));
    0x004bb3d2 mov rdi, r12                                                  |             
    0x004bb3d5 call 0x4c9c80                                                 |             BloombergLP::s_baltst::Choice1::~Choice1() (r12);
    0x004bb3da mov rax, qword [r13]                                          |             rax = *(r13);
    0x004bb3de mov rdi, r13                                                  |             rdi = r13;
    0x004bb3e1 mov rsi, r12                                                  |             rsi = r12;
    0x004bb3e4 call qword [rax + 0x18]                                       |             uint64_t (*rax + 0x18)() ();
                                                                             |         }
                                                                             | label_2:
    0x004bb3e7 mov dword [rbx + 0x30], 0xffffffff                            |         *((rbx + 0x30)) = 0xffffffff;
    0x004bb3ee mov rax, qword [r15]                                          |         rax = *(r15);
    0x004bb3f1 mov rdi, r15                                                  |         rdi = r15;
    0x004bb3f4 mov rsi, rbx                                                  |         rsi = rbx;
    0x004bb3f7 call qword [rax + 0x18]                                       |         uint64_t (*rax + 0x18)() ();
                                                                             |     }
    0x004bb3fa cmp byte [r14 + 0x1e8], 0                                     |     
                                                                             |     if (*((r14 + 0x1e8)) != 0) {
    0x004bb402 je 0x4bb458                                                   |         
    0x004bb404 mov byte [r14 + 0x1e8], 0                                     |         *((r14 + 0x1e8)) = 0;
    0x004bb40c mov eax, dword [r14 + 0x1d8]                                  |         eax = *((r14 + 0x1d8));
    0x004bb413 cmp eax, 2                                                    |         
                                                                             |         if (eax != 2) {
    0x004bb416 je 0x4bb427                                                   |             
    0x004bb418 test eax, eax                                                 |             
                                                                             |             if (eax != 0) {
    0x004bb41a jne 0x4bb44d                                                  |                 goto label_3;
                                                                             |             }
    0x004bb41c lea rdi, [r14 + 0x68]                                         |             
    0x004bb420 call 0x4c4be0                                                 |             BloombergLP::s_baltst::Sequence6::~Sequence6() (r14 + 0x68);
    0x004bb425 jmp 0x4bb44d                                                  |             
                                                                             |         } else {
    0x004bb427 cmp qword [r14 + 0x88], 0x17                                  |             
                                                                             |             if (*((r14 + 0x88)) != 0x17) {
    0x004bb42f je 0x4bb442                                                   |                 
    0x004bb431 mov rsi, qword [r14 + 0x68]                                   |                 rsi = *((r14 + 0x68));
    0x004bb435 mov rdi, qword [r14 + 0x90]                                   |                 rdi = *((r14 + 0x90));
    0x004bb43c mov rax, qword [rdi]                                          |                 rax = *(rdi);
    0x004bb43f call qword [rax + 0x18]                                       |                 uint64_t (*rax + 0x18)() ();
                                                                             |             }
    0x004bb442 mov qword [r14 + 0x80], 0xffffffffffffffff                    |             *((r14 + 0x80)) = 0xffffffffffffffff;
                                                                             |         }
                                                                             | label_3:
    0x004bb44d mov dword [r14 + 0x1d8], 0xffffffff                           |         *((r14 + 0x1d8)) = 0xffffffff;
                                                                             |     }
    0x004bb458 lea rdi, [r14 + 0x48]                                         |     
    0x004bb45c call 0x4c56b0                                                 |     bsl::vector<BloombergLP::s_baltst::Choice1,bsl::allocator<BloombergLP::s_baltst::Choice1>>::~vector() (r14 + 0x48);
    0x004bb461 mov rbx, qword [r14 + 0x28]                                   |     rbx = *((r14 + 0x28));
    0x004bb465 test rbx, rbx                                                 |     
                                                                             |     if (rbx == 0) {
    0x004bb468 je 0x4bb4e7                                                   |         goto label_4;
                                                                             |     }
    0x004bb46a mov r15, qword [r14 + 0x30]                                   |     r15 = *((r14 + 0x30));
    0x004bb46e cmp rbx, r15                                                  |     
                                                                             |     if (rbx != r15) {
    0x004bb471 jne 0x4bb49e                                                  |         goto label_5;
                                                                             |     }
    0x004bb473 jmp 0x4bb4da                                                  |     goto label_6;
                                                                             | label_1:
    0x004bb480 mov qword [rbx + 0x18], 0xffffffffffffffff                    |     *((rbx + 0x18)) = 0xffffffffffffffff;
                                                                             |     do {
                                                                             | label_0:
    0x004bb488 mov dword [rbx + 0x170], 0xffffffff                           |         *((rbx + 0x170)) = 0xffffffff;
    0x004bb492 add rbx, 0x180                                                |         rbx += 0x180;
    0x004bb499 cmp r15, rbx                                                  |         
                                                                             |         if (r15 == rbx) {
    0x004bb49c je 0x4bb4d6                                                   |             goto label_7;
                                                                             |         }
                                                                             | label_5:
    0x004bb49e mov eax, dword [rbx + 0x170]                                  |         eax = *((rbx + 0x170));
    0x004bb4a4 cmp eax, 2                                                    |         
                                                                             |         if (eax == 2) {
    0x004bb4a7 je 0x4bb4c0                                                   |             goto label_8;
                                                                             |         }
    0x004bb4a9 test eax, eax                                                 |         
    0x004bb4ab jne 0x4bb488                                                  |         
                                                                             |     } while (eax != 0);
    0x004bb4ad mov rdi, rbx                                                  |     
    0x004bb4b0 call 0x4c4be0                                                 |     BloombergLP::s_baltst::Sequence6::~Sequence6() (rbx);
    0x004bb4b5 jmp 0x4bb488                                                  |     goto label_0;
                                                                             | label_8:
    0x004bb4c0 cmp qword [rbx + 0x20], 0x17                                  |     
                                                                             |     if (*((rbx + 0x20)) == 0x17) {
    0x004bb4c5 je 0x4bb480                                                   |         goto label_1;
                                                                             |     }
    0x004bb4c7 mov rsi, qword [rbx]                                          |     rsi = *(rbx);
    0x004bb4ca mov rdi, qword [rbx + 0x28]                                   |     rdi = *((rbx + 0x28));
    0x004bb4ce mov rax, qword [rdi]                                          |     rax = *(rdi);
    0x004bb4d1 call qword [rax + 0x18]                                       |     uint64_t (*rax + 0x18)() ();
    0x004bb4d4 jmp 0x4bb480                                                  |     goto label_1;
                                                                             | label_7:
    0x004bb4d6 mov rbx, qword [r14 + 0x28]                                   |     rbx = *((r14 + 0x28));
                                                                             | label_6:
    0x004bb4da mov rdi, qword [r14 + 0x40]                                   |     rdi = *((r14 + 0x40));
    0x004bb4de mov rax, qword [rdi]                                          |     rax = *(rdi);
    0x004bb4e1 mov rsi, rbx                                                  |     rsi = rbx;
    0x004bb4e4 call qword [rax + 0x18]                                       |     rax = uint64_t (*rax + 0x18)() ();
                                                                             | label_4:
    0x004bb4e7 mov rbx, qword [r14 + 8]                                      |     rbx = *((r14 + 8));
    0x004bb4eb test rbx, rbx                                                 |     
                                                                             |     if (rbx == 0) {
    0x004bb4ee je 0x4bb522                                                   |         goto label_9;
                                                                             |     }
    0x004bb4f0 mov r15, qword [r14 + 0x10]                                   |     r15 = *((r14 + 0x10));
    0x004bb4f4 cmp rbx, r15                                                  |     
                                                                             |     if (rbx == r15) {
    0x004bb4f7 je 0x4bb515                                                   |         goto label_10;
                                                                             |     }
    0x004bb4f9 nop dword [rax]                                               |     
                                                                             |     do {
    0x004bb500 mov rdi, rbx                                                  |         
    0x004bb503 call 0x4c9b90                                                 |         BloombergLP::bslstl::Optional_DataImp<BloombergLP::s_baltst::Choice1>::reset() (rbx);
    0x004bb508 add rbx, 0x28                                                 |         rbx += 0x28;
    0x004bb50c cmp r15, rbx                                                  |         
    0x004bb50f jne 0x4bb500                                                  |         
                                                                             |     } while (r15 != rbx);
    0x004bb511 mov rbx, qword [r14 + 8]                                      |     rbx = *((r14 + 8));
                                                                             | label_10:
    0x004bb515 mov rdi, qword [r14 + 0x20]                                   |     rdi = *((r14 + 0x20));
    0x004bb519 mov rax, qword [rdi]                                          |     rax = *(rdi);
    0x004bb51c mov rsi, rbx                                                  |     rsi = rbx;
    0x004bb51f call qword [rax + 0x18]                                       |     uint64_t (*rax + 0x18)() ();
                                                                             | label_9:
    0x004bb522 pop rbx                                                       |     
    0x004bb523 pop r12                                                       |     
    0x004bb525 pop r13                                                       |     
    0x004bb527 pop r14                                                       |     
    0x004bb529 pop r15                                                       |     
    0x004bb52b ret                                                           |     return rax;
                                                                             | }
