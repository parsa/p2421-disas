    ; assembly                                                                                   | /* r2dec pseudo code output */
                                                                                                 | /* baljsn_encoder.t/none @ 0x4d07c0 */
                                                                                                 | #include <stdint.h>
                                                                                                 |  
    ; (fcn) method.BloombergLP::s_baltst::SequenceWithAnonymityChoice.makeSelection2__ ()        | int64_t method_BloombergLP::s_baltst::SequenceWithAnonymityChoice_makeSelection2_ (int64_t arg1) {
                                                                                                 |     rdi = arg1;
                                                                                                 |     /* BloombergLP::s_baltst::SequenceWithAnonymityChoice::makeSelection2() */
    0x004d07c0 push rbx                                                                          |     
    0x004d07c1 mov rbx, rdi                                                                      |     rbx = rdi;
    0x004d07c4 mov eax, dword [rdi + 0x170]                                                      |     eax = *((rdi + 0x170));
    0x004d07ca test eax, eax                                                                     |     
                                                                                                 |     if (eax != 0) {
    0x004d07cc je 0x4d07dd                                                                       |         
    0x004d07ce cmp eax, 2                                                                        |         
                                                                                                 |         if (eax != 2) {
    0x004d07d1 je 0x4d07e7                                                                       |             
    0x004d07d3 cmp eax, 1                                                                        |             
                                                                                                 |             if (eax != 1) {
    0x004d07d6 jne 0x4d0803                                                                      |                 goto label_0;
                                                                                                 |             }
    0x004d07d8 mov byte [rbx], 0                                                                 |             *(rbx) = 0;
    0x004d07db jmp 0x4d0810                                                                      |             
    0x004d07dd mov rdi, rbx                                                                      |             
    0x004d07e0 call 0x4c4be0                                                                     |             BloombergLP::s_baltst::Sequence6::~Sequence6() (rbx);
    0x004d07e5 jmp 0x4d0803                                                                      |             
                                                                                                 |         } else {
                                                                                                 |         } else {
    0x004d07e7 cmp qword [rbx + 0x20], 0x17                                                      |             
                                                                                                 |             if (*((rbx + 0x20)) != 0x17) {
    0x004d07ec je 0x4d07fb                                                                       |                 
    0x004d07ee mov rsi, qword [rbx]                                                              |                 rsi = *(rbx);
    0x004d07f1 mov rdi, qword [rbx + 0x28]                                                       |                 rdi = *((rbx + 0x28));
    0x004d07f5 mov rax, qword [rdi]                                                              |                 rax = *(rdi);
    0x004d07f8 call qword [rax + 0x18]                                                           |                 uint64_t (*rax + 0x18)() ();
                                                                                                 |             }
    0x004d07fb mov qword [rbx + 0x18], 0xffffffffffffffff                                        |             *((rbx + 0x18)) = 0xffffffffffffffff;
                                                                                                 |         }
                                                                                                 | label_0:
    0x004d0803 mov byte [rbx], 0                                                                 |         *(rbx) = 0;
    0x004d0806 mov dword [rbx + 0x170], 1                                                        |         *((rbx + 0x170)) = 1;
                                                                                                 |     }
    0x004d0810 mov rax, rbx                                                                      |     rax = rbx;
    0x004d0813 pop rbx                                                                           |     
    0x004d0814 ret                                                                               |     return rax;
                                                                                                 | }
