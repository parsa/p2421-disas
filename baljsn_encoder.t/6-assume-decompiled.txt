    ; assembly                                                               | /* r2dec pseudo code output */
                                                                             | /* baljsn_encoder.t/assume @ 0x4bb1a0 */
                                                                             | #include <stdint.h>
                                                                             |  
    ; (fcn) method.BloombergLP::s_baltst::Sequence1.Sequence1__ ()           | int64_t method_BloombergLP::s_baltst::Sequence1_Sequence1_ (int64_t arg1) {
                                                                             |     int64_t var_8h;
                                                                             |     rdi = arg1;
                                                                             |     /* BloombergLP::s_baltst::Sequence1::~Sequence1() */
    0x004bb1a0 push r15                                                      |     
    0x004bb1a2 push r14                                                      |     
    0x004bb1a4 push r13                                                      |     
    0x004bb1a6 push r12                                                      |     
    0x004bb1a8 push rbx                                                      |     
    0x004bb1a9 sub rsp, 0x10                                                 |     
    0x004bb1ad mov r14, rdi                                                  |     r14 = rdi;
    0x004bb1b0 mov rbx, qword [rdi + 0x1f8]                                  |     rbx = *((rdi + 0x1f8));
    0x004bb1b7 test rbx, rbx                                                 |     
                                                                             |     if (rbx != 0) {
    0x004bb1ba je 0x4bb221                                                   |         
    0x004bb1bc mov r15, qword [r14]                                          |         r15 = *(r14);
    0x004bb1bf mov eax, dword [rbx + 0x30]                                   |         eax = *((rbx + 0x30));
    0x004bb1c2 cmp rax, 3                                                    |         
                                                                             |         if (rax <= 3) {
    0x004bb1c6 ja 0x4bb20e                                                   |             
                                                                             |             /* switch table (4 cases) at 0x648f88 */
    0x004bb1c8 jmp qword [rax*8 + 0x648f88]                                  |             
    0x004bb1cf cmp qword [rbx + 0x20], 0x17                                  |             
                                                                             |             if (*((rbx + 0x20)) != 0x17) {
    0x004bb1d4 je 0x4bb1e3                                                   |                 
    0x004bb1d6 mov rsi, qword [rbx]                                          |                 rsi = *(rbx);
    0x004bb1d9 mov rdi, qword [rbx + 0x28]                                   |                 rdi = *((rbx + 0x28));
    0x004bb1dd mov rax, qword [rdi]                                          |                 rax = *(rdi);
    0x004bb1e0 call qword [rax + 0x18]                                       |                 uint64_t (*rax + 0x18)() ();
                                                                             |             }
    0x004bb1e3 mov qword [rbx + 0x18], 0xffffffffffffffff                    |             *((rbx + 0x18)) = 0xffffffffffffffff;
    0x004bb1eb jmp 0x4bb20e                                                  |             goto label_1;
    0x004bb1ed mov r12, qword [rbx]                                          |             r12 = *(rbx);
    0x004bb1f0 test r12, r12                                                 |             
                                                                             |             if (r12 == 0) {
    0x004bb1f3 je 0x4bb20e                                                   |                 goto label_1;
                                                                             |             }
    0x004bb1f5 mov r13, qword [rbx + 0x38]                                   |             r13 = *((rbx + 0x38));
    0x004bb1f9 mov rdi, r12                                                  |             
    0x004bb1fc call 0x4c99b0                                                 |             BloombergLP::s_baltst::Choice1::~Choice1() (r12);
    0x004bb201 mov rax, qword [r13]                                          |             rax = *(r13);
    0x004bb205 mov rdi, r13                                                  |             rdi = r13;
    0x004bb208 mov rsi, r12                                                  |             rsi = r12;
    0x004bb20b call qword [rax + 0x18]                                       |             uint64_t (*rax + 0x18)() ();
                                                                             |         }
                                                                             | label_1:
    0x004bb20e mov dword [rbx + 0x30], 0xffffffff                            |         *((rbx + 0x30)) = 0xffffffff;
    0x004bb215 mov rax, qword [r15]                                          |         rax = *(r15);
    0x004bb218 mov rdi, r15                                                  |         rdi = r15;
    0x004bb21b mov rsi, rbx                                                  |         rsi = rbx;
    0x004bb21e call qword [rax + 0x18]                                       |         uint64_t (*rax + 0x18)() ();
                                                                             |     }
    0x004bb221 cmp byte [r14 + 0x1e8], 0                                     |     
                                                                             |     if (*((r14 + 0x1e8)) != 0) {
    0x004bb229 je 0x4bb283                                                   |         
    0x004bb22b mov byte [r14 + 0x1e8], 0                                     |         *((r14 + 0x1e8)) = 0;
    0x004bb233 mov eax, dword [r14 + 0x1d8]                                  |         eax = *((r14 + 0x1d8));
    0x004bb23a cmp rax, 3                                                    |         
                                                                             |         if (rax <= 3) {
    0x004bb23e ja 0x4bb278                                                   |             
                                                                             |             /* switch table (4 cases) at 0x648fa8 */
    0x004bb240 jmp qword [rax*8 + 0x648fa8]                                  |             
    0x004bb247 lea rdi, [r14 + 0x68]                                         |             
    0x004bb24b call 0x4c4a50                                                 |             BloombergLP::s_baltst::Sequence6::~Sequence6() (r14 + 0x68);
    0x004bb250 jmp 0x4bb278                                                  |             goto label_2;
    0x004bb252 cmp qword [r14 + 0x88], 0x17                                  |             
                                                                             |             if (*((r14 + 0x88)) != 0x17) {
    0x004bb25a je 0x4bb26d                                                   |                 
    0x004bb25c mov rsi, qword [r14 + 0x68]                                   |                 rsi = *((r14 + 0x68));
    0x004bb260 mov rdi, qword [r14 + 0x90]                                   |                 rdi = *((r14 + 0x90));
    0x004bb267 mov rax, qword [rdi]                                          |                 rax = *(rdi);
    0x004bb26a call qword [rax + 0x18]                                       |                 uint64_t (*rax + 0x18)() ();
                                                                             |             }
    0x004bb26d mov qword [r14 + 0x80], 0xffffffffffffffff                    |             *((r14 + 0x80)) = 0xffffffffffffffff;
                                                                             |         }
                                                                             | label_2:
    0x004bb278 mov dword [r14 + 0x1d8], 0xffffffff                           |         *((r14 + 0x1d8)) = 0xffffffff;
                                                                             |     }
    0x004bb283 mov rdi, qword [r14 + 0x48]                                   |     rdi = *((r14 + 0x48));
    0x004bb287 test rdi, rdi                                                 |     
                                                                             |     if (rdi != 0) {
    0x004bb28a je 0x4bb2b1                                                   |         
    0x004bb28c mov rsi, qword [r14 + 0x50]                                   |         
    0x004bb290 mov rax, qword [r14 + 0x60]                                   |         rax = *((r14 + 0x60));
    0x004bb294 mov qword [rsp + 8], rax                                      |         *((rsp + 8)) = rax;
    0x004bb299 lea rdx, [rsp + 8]                                            |         rdx = rsp + 8;
    0x004bb29e call 0x4c9aa0                                                 |         voidBloombergLP::bslalg::ArrayDestructionPrimitives::destroy<BloombergLP::s_baltst::Choice1,bsl::allocator<BloombergLP::s_baltst::Choice1>>(BloombergLP::s_baltst::Choice1*,BloombergLP::s_baltst::Choice1*,bsl::allocator<BloombergLP::s_baltst::Choice1>,bsl::integral_constant<bool,false>) (rdi, *((r14 + 0x50)));
    0x004bb2a3 mov rsi, qword [r14 + 0x48]                                   |         rsi = *((r14 + 0x48));
    0x004bb2a7 mov rdi, qword [r14 + 0x60]                                   |         rdi = *((r14 + 0x60));
    0x004bb2ab mov rax, qword [rdi]                                          |         rax = *(rdi);
    0x004bb2ae call qword [rax + 0x18]                                       |         uint64_t (*rax + 0x18)() ();
                                                                             |     }
    0x004bb2b1 mov rbx, qword [r14 + 0x28]                                   |     rbx = *((r14 + 0x28));
    0x004bb2b5 test rbx, rbx                                                 |     
                                                                             |     if (rbx == 0) {
    0x004bb2b8 je 0x4bb330                                                   |         goto label_3;
                                                                             |     }
    0x004bb2ba mov r15, qword [r14 + 0x30]                                   |     r15 = *((r14 + 0x30));
    0x004bb2be cmp rbx, r15                                                  |     
                                                                             |     if (rbx != r15) {
    0x004bb2c1 jne 0x4bb2ee                                                  |         goto label_4;
                                                                             |     }
    0x004bb2c3 jmp 0x4bb323                                                  |     goto label_5;
    0x004bb2d0 mov rdi, rbx                                                  |     
    0x004bb2d3 call 0x4c4a50                                                 |     BloombergLP::s_baltst::Sequence6::~Sequence6() (rbx);
                                                                             |     do {
                                                                             | label_0:
    0x004bb2d8 mov dword [rbx + 0x170], 0xffffffff                           |         *((rbx + 0x170)) = 0xffffffff;
    0x004bb2e2 add rbx, 0x180                                                |         rbx += 0x180;
    0x004bb2e9 cmp r15, rbx                                                  |         
                                                                             |         if (r15 == rbx) {
    0x004bb2ec je 0x4bb31f                                                   |             goto label_6;
                                                                             |         }
                                                                             | label_4:
    0x004bb2ee mov eax, dword [rbx + 0x170]                                  |         eax = *((rbx + 0x170));
    0x004bb2f4 cmp rax, 3                                                    |         
    0x004bb2f8 ja 0x4bb2d8                                                   |         
                                                                             |     } while (rax > 3);
                                                                             |     /* switch table (4 cases) at 0x648fc8 */
    0x004bb2fa jmp qword [rax*8 + 0x648fc8]                                  |     
    0x004bb301 cmp qword [rbx + 0x20], 0x17                                  |     
                                                                             |     if (*((rbx + 0x20)) != 0x17) {
    0x004bb306 je 0x4bb315                                                   |         
    0x004bb308 mov rsi, qword [rbx]                                          |         rsi = *(rbx);
    0x004bb30b mov rdi, qword [rbx + 0x28]                                   |         rdi = *((rbx + 0x28));
    0x004bb30f mov rax, qword [rdi]                                          |         rax = *(rdi);
    0x004bb312 call qword [rax + 0x18]                                       |         uint64_t (*rax + 0x18)() ();
                                                                             |     }
    0x004bb315 mov qword [rbx + 0x18], 0xffffffffffffffff                    |     *((rbx + 0x18)) = 0xffffffffffffffff;
    0x004bb31d jmp 0x4bb2d8                                                  |     goto label_0;
                                                                             | label_6:
    0x004bb31f mov rbx, qword [r14 + 0x28]                                   |     rbx = *((r14 + 0x28));
                                                                             | label_5:
    0x004bb323 mov rdi, qword [r14 + 0x40]                                   |     rdi = *((r14 + 0x40));
    0x004bb327 mov rax, qword [rdi]                                          |     rax = *(rdi);
    0x004bb32a mov rsi, rbx                                                  |     rsi = rbx;
    0x004bb32d call qword [rax + 0x18]                                       |     rax = uint64_t (*rax + 0x18)() ();
                                                                             | label_3:
    0x004bb330 mov rbx, qword [r14 + 8]                                      |     rbx = *((r14 + 8));
    0x004bb334 test rbx, rbx                                                 |     
                                                                             |     if (rbx == 0) {
    0x004bb337 je 0x4bb372                                                   |         goto label_7;
                                                                             |     }
    0x004bb339 mov r15, qword [r14 + 0x10]                                   |     r15 = *((r14 + 0x10));
    0x004bb33d cmp rbx, r15                                                  |     
                                                                             |     if (rbx == r15) {
    0x004bb340 je 0x4bb365                                                   |         goto label_8;
                                                                             |     }
    0x004bb342 nop word cs:[rax + rax]                                       |     
    0x004bb34c nop dword [rax]                                               |     
                                                                             |     do {
    0x004bb350 mov rdi, rbx                                                  |         
    0x004bb353 call 0x4c98b0                                                 |         BloombergLP::bslstl::Optional_DataImp<BloombergLP::s_baltst::Choice1>::reset() (rbx);
    0x004bb358 add rbx, 0x28                                                 |         rbx += 0x28;
    0x004bb35c cmp r15, rbx                                                  |         
    0x004bb35f jne 0x4bb350                                                  |         
                                                                             |     } while (r15 != rbx);
    0x004bb361 mov rbx, qword [r14 + 8]                                      |     rbx = *((r14 + 8));
                                                                             | label_8:
    0x004bb365 mov rdi, qword [r14 + 0x20]                                   |     rdi = *((r14 + 0x20));
    0x004bb369 mov rax, qword [rdi]                                          |     rax = *(rdi);
    0x004bb36c mov rsi, rbx                                                  |     rsi = rbx;
    0x004bb36f call qword [rax + 0x18]                                       |     uint64_t (*rax + 0x18)() ();
                                                                             | label_7:
    0x004bb372 add rsp, 0x10                                                 |     
    0x004bb376 pop rbx                                                       |     
    0x004bb377 pop r12                                                       |     
    0x004bb379 pop r13                                                       |     
    0x004bb37b pop r14                                                       |     
    0x004bb37d pop r15                                                       |     
    0x004bb37f ret                                                           |     return rax;
                                                                             | }
