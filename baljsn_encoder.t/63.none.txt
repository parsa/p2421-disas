    ; assembly                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                 | /* baljsn_encoder.t/none @ 0x4d02e0 */
                                                                                                                                 | #include <stdint.h>
                                                                                                                                 |  
    ; (fcn) method.BloombergLP::s_baltst::SequenceWithAnonymityChoice.makeSelection1_BloombergLP::s_baltst::Sequence6_ ()        | int64_t method_BloombergLP::s_baltst::SequenceWithAnonymityChoice_makeSelection1_BloombergLP::s_baltst::Sequence6_ (int64_t arg2, int64_t arg1) {
                                                                                                                                 |     rsi = arg2;
                                                                                                                                 |     rdi = arg1;
                                                                                                                                 |     /* BloombergLP::s_baltst::SequenceWithAnonymityChoice::makeSelection1(BloombergLP::s_baltst::Sequence6&&) */
    0x004d02e0 push r14                                                                                                          |     
    0x004d02e2 push rbx                                                                                                          |     
    0x004d02e3 push rax                                                                                                          |     
    0x004d02e4 mov r14, rsi                                                                                                      |     r14 = rsi;
    0x004d02e7 mov rbx, rdi                                                                                                      |     rbx = rdi;
    0x004d02ea mov eax, dword [rdi + 0x170]                                                                                      |     eax = *((rdi + 0x170));
    0x004d02f0 cmp eax, 2                                                                                                        |     
                                                                                                                                 |     if (eax != 2) {
    0x004d02f3 je 0x4d0306                                                                                                       |         
    0x004d02f5 test eax, eax                                                                                                     |         
                                                                                                                                 |         if (eax == 0) {
    0x004d02f7 jne 0x4d0322                                                                                                      |             
    0x004d02f9 mov rdi, rbx                                                                                                      |             
    0x004d02fc mov rsi, r14                                                                                                      |             
    0x004d02ff call 0x4ba330                                                                                                     |             BloombergLP::s_baltst::Sequence6::operator=(BloombergLP::s_baltst::Sequence6&&) (rbx, r14);
    0x004d0304 jmp 0x4d0348                                                                                                      |             
                                                                                                                                 |         } else {
    0x004d0306 cmp qword [rbx + 0x20], 0x17                                                                                      |             
                                                                                                                                 |             if (*((rbx + 0x20)) != 0x17) {
    0x004d030b je 0x4d031a                                                                                                       |                 
    0x004d030d mov rsi, qword [rbx]                                                                                              |                 rsi = *(rbx);
    0x004d0310 mov rdi, qword [rbx + 0x28]                                                                                       |                 rdi = *((rbx + 0x28));
    0x004d0314 mov rax, qword [rdi]                                                                                              |                 rax = *(rdi);
    0x004d0317 call qword [rax + 0x18]                                                                                           |                 uint64_t (*rax + 0x18)() ();
                                                                                                                                 |             }
    0x004d031a mov qword [rbx + 0x18], 0xffffffffffffffff                                                                        |             *((rbx + 0x18)) = 0xffffffffffffffff;
                                                                                                                                 |         }
    0x004d0322 mov dword [rbx + 0x170], 0xffffffff                                                                               |         *((rbx + 0x170)) = 0xffffffff;
    0x004d032c mov rdx, qword [rbx + 0x178]                                                                                      |         
    0x004d0333 mov rdi, rbx                                                                                                      |         
    0x004d0336 mov rsi, r14                                                                                                      |         
    0x004d0339 call 0x4c42a0                                                                                                     |         BloombergLP::s_baltst::Sequence6::Sequence6(BloombergLP::s_baltst::Sequence6&&,BloombergLP::bslma::Allocator*) (rbx, r14, *((rbx + 0x178)));
    0x004d033e mov dword [rbx + 0x170], 0                                                                                        |         *((rbx + 0x170)) = 0;
                                                                                                                                 |     }
    0x004d0348 mov rax, rbx                                                                                                      |     rax = rbx;
    0x004d034b add rsp, 8                                                                                                        |     
    0x004d034f pop rbx                                                                                                           |     
    0x004d0350 pop r14                                                                                                           |     
    0x004d0352 ret                                                                                                               |     return rax;
                                                                                                                                 | }
