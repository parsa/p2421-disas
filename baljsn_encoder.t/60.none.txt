    ; assembly                                                                                           | /* r2dec pseudo code output */
                                                                                                         | /* baljsn_encoder.t/none @ 0x4bb7a0 */
                                                                                                         | #include <stdint.h>
                                                                                                         |  
    ; (fcn) method.BloombergLP::s_baltst::Sequence1.operator_BloombergLP::s_baltst::Sequence1_ ()        | int64_t method_BloombergLP::s_baltst::Sequence1_operator_BloombergLP::s_baltst::Sequence1_ (uint32_t arg2, uint32_t arg1) {
                                                                                                         |     rsi = arg2;
                                                                                                         |     rdi = arg1;
                                                                                                         |     /* BloombergLP::s_baltst::Sequence1::operator=(BloombergLP::s_baltst::Sequence1&&) */
    0x004bb7a0 push r14                                                                                  |     
    0x004bb7a2 push rbx                                                                                  |     
    0x004bb7a3 push rax                                                                                  |     
    0x004bb7a4 mov rbx, rdi                                                                              |     rbx = rdi;
    0x004bb7a7 cmp rdi, rsi                                                                              |     
                                                                                                         |     if (rdi != rsi) {
    0x004bb7aa je 0x4bb894                                                                               |         
    0x004bb7b0 mov r14, rsi                                                                              |         r14 = rsi;
    0x004bb7b3 lea rdi, [rbx + 0x68]                                                                     |         rdi = rbx + 0x68;
    0x004bb7b7 cmp byte [rsi + 0x1e8], 0                                                                 |         
    0x004bb7be mov al, byte [rbx + 0x1e8]                                                                |         al = *((rbx + 0x1e8));
                                                                                                         |         if (*((rsi + 0x1e8)) != 0) {
    0x004bb7c4 je 0x4bb7d5                                                                               |             
    0x004bb7c6 lea rsi, [r14 + 0x68]                                                                     |             rsi = r14 + 0x68;
    0x004bb7ca test al, al                                                                               |             
                                                                                                         |             if (al != 0) {
    0x004bb7cc je 0x4bb7f6                                                                               |                 
    0x004bb7ce call 0x4b97b0                                                                             |                 al = BloombergLP::s_baltst::Choice3::operator=(BloombergLP::s_baltst::Choice3&&) (rdi, rsi);
    0x004bb7d3 jmp 0x4bb83b                                                                              |                 
                                                                                                         |             } else {
    0x004bb7d5 test al, al                                                                               |                 
                                                                                                         |                 if (al == 0) {
    0x004bb7d7 je 0x4bb83b                                                                               |                     goto label_0;
                                                                                                         |                 }
    0x004bb7d9 mov byte [rbx + 0x1e8], 0                                                                 |                 *((rbx + 0x1e8)) = 0;
    0x004bb7e0 mov eax, dword [rbx + 0x1d8]                                                              |                 eax = *((rbx + 0x1d8));
    0x004bb7e6 cmp eax, 2                                                                                |                 
                                                                                                         |                 if (eax != 2) {
    0x004bb7e9 je 0x4bb80b                                                                               |                     
    0x004bb7eb test eax, eax                                                                             |                     
                                                                                                         |                     if (eax != 0) {
    0x004bb7ed jne 0x4bb831                                                                              |                         goto label_1;
                                                                                                         |                     }
    0x004bb7ef call 0x4c4be0                                                                             |                     BloombergLP::s_baltst::Sequence6::~Sequence6() (rdi);
    0x004bb7f4 jmp 0x4bb831                                                                              |                     
                                                                                                         |                 } else {
    0x004bb7f6 mov rdx, qword [rbx + 0x1f0]                                                              |                     
    0x004bb7fd call 0x4b91a0                                                                             |                     BloombergLP::s_baltst::Choice3::Choice3(BloombergLP::s_baltst::Choice3&&,BloombergLP::bslma::Allocator*) (rdi, rsi, *((rbx + 0x1f0)));
    0x004bb802 mov byte [rbx + 0x1e8], 1                                                                 |                     *((rbx + 0x1e8)) = 1;
    0x004bb809 jmp 0x4bb83b                                                                              |                     goto label_0;
                                                                                                         |                 }
    0x004bb80b cmp qword [rbx + 0x88], 0x17                                                              |                 
                                                                                                         |                 if (*((rbx + 0x88)) != 0x17) {
    0x004bb813 je 0x4bb826                                                                               |                     
    0x004bb815 mov rsi, qword [rbx + 0x68]                                                               |                     rsi = *((rbx + 0x68));
    0x004bb819 mov rdi, qword [rbx + 0x90]                                                               |                     rdi = *((rbx + 0x90));
    0x004bb820 mov rax, qword [rdi]                                                                      |                     rax = *(rdi);
    0x004bb823 call qword [rax + 0x18]                                                                   |                     uint64_t (*rax + 0x18)() ();
                                                                                                         |                 }
    0x004bb826 mov qword [rbx + 0x80], 0xffffffffffffffff                                                |                 *((rbx + 0x80)) = 0xffffffffffffffff;
                                                                                                         |             }
                                                                                                         | label_1:
    0x004bb831 mov dword [rbx + 0x1d8], 0xffffffff                                                       |             *((rbx + 0x1d8)) = 0xffffffff;
                                                                                                         |         }
                                                                                                         | label_0:
    0x004bb83b lea rsi, [r14 + 0x48]                                                                     |         
    0x004bb83f lea rdi, [rbx + 0x48]                                                                     |         
    0x004bb843 call 0x4c5ef0                                                                             |         bsl::vector<BloombergLP::s_baltst::Choice1,bsl::allocator<BloombergLP::s_baltst::Choice1>>::operator=(bsl::vector<BloombergLP::s_baltst::Choice1,bsl::allocator<BloombergLP::s_baltst::Choice1>>&&) (rbx + 0x48, r14 + 0x48);
    0x004bb848 mov rax, qword [rbx]                                                                      |         rax = *(rbx);
    0x004bb84b mov rsi, qword [r14 + 0x1f8]                                                              |         rsi = *((r14 + 0x1f8));
    0x004bb852 cmp rax, qword [r14]                                                                      |         
                                                                                                         |         if (rax != *(r14)) {
    0x004bb855 je 0x4bb865                                                                               |             
    0x004bb857 mov rdi, qword [rbx + 0x1f8]                                                              |             
    0x004bb85e call 0x4b7d30                                                                             |             BloombergLP::s_baltst::Choice2::operator=(BloombergLP::s_baltst::Choice2&&) (*((rbx + 0x1f8)), rsi);
    0x004bb863 jmp 0x4bb877                                                                              |             
                                                                                                         |         } else {
    0x004bb865 mov qword [rbx + 0x1f8], rsi                                                              |             *((rbx + 0x1f8)) = rsi;
    0x004bb86c mov qword [r14 + 0x1f8], 0                                                                |             *((r14 + 0x1f8)) = 0;
                                                                                                         |         }
    0x004bb877 lea rsi, [r14 + 8]                                                                        |         
    0x004bb87b lea rdi, [rbx + 8]                                                                        |         
    0x004bb87f call 0x4c5f80                                                                             |         bsl::vector<BloombergLP::bdlb::NullableValue<BloombergLP::s_baltst::Choice1>,bsl::allocator<BloombergLP::bdlb::NullableValue<BloombergLP::s_baltst::Choice1>>>::operator=(bsl::vector<BloombergLP::bdlb::NullableValue<BloombergLP::s_baltst::Choice1>,bsl::allocator<BloombergLP::bdlb::NullableValue<BloombergLP::s_baltst::Choice1>>>&&) (rbx + 8, r14 + 8);
    0x004bb884 add r14, 0x28                                                                             |         r14 += 0x28;
    0x004bb888 lea rdi, [rbx + 0x28]                                                                     |         
    0x004bb88c mov rsi, r14                                                                              |         
    0x004bb88f call 0x4c6110                                                                             |         bsl::vector<BloombergLP::s_baltst::Choice3,bsl::allocator<BloombergLP::s_baltst::Choice3>>::operator=(bsl::vector<BloombergLP::s_baltst::Choice3,bsl::allocator<BloombergLP::s_baltst::Choice3>>&&) (rbx + 0x28, r14);
                                                                                                         |     }
    0x004bb894 mov rax, rbx                                                                              |     rax = rbx;
    0x004bb897 add rsp, 8                                                                                |     
    0x004bb89b pop rbx                                                                                   |     
    0x004bb89c pop r14                                                                                   |     
    0x004bb89e ret                                                                                       |     return rax;
                                                                                                         | }
