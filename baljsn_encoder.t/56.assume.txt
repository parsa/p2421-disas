    ; assembly                                                                                                       | /* r2dec pseudo code output */
                                                                                                                     | /* baljsn_encoder.t/assume @ 0x4b9230 */
                                                                                                                     | #include <stdint.h>
                                                                                                                     |  
    ; (fcn) method.BloombergLP::s_baltst::Choice3.makeSelection1_BloombergLP::s_baltst::Sequence6_const_ ()          | int64_t method_BloombergLP::s_baltst::Choice3_makeSelection1_BloombergLP::s_baltst::Sequence6_const_ (int64_t arg2, int64_t arg1) {
                                                                                                                     |     rsi = arg2;
                                                                                                                     |     rdi = arg1;
                                                                                                                     |     /* BloombergLP::s_baltst::Choice3::makeSelection1(BloombergLP::s_baltst::Sequence6 const&) */
    0x004b9230 push r14                                                                                              |     
    0x004b9232 push rbx                                                                                              |     
    0x004b9233 push rax                                                                                              |     
    0x004b9234 mov r14, rsi                                                                                          |     r14 = rsi;
    0x004b9237 mov rbx, rdi                                                                                          |     rbx = rdi;
    0x004b923a mov eax, dword [rdi + 0x170]                                                                          |     eax = *((rdi + 0x170));
    0x004b9240 cmp rax, 3                                                                                            |     
                                                                                                                     |     if (rax <= 3) {
    0x004b9244 ja 0x4b9276                                                                                           |         
                                                                                                                     |         /* switch table (4 cases) at 0x648b60 */
    0x004b9246 jmp qword [rax*8 + 0x648b60]                                                                          |         
    0x004b924d mov rdi, rbx                                                                                          |         
    0x004b9250 mov rsi, r14                                                                                          |         
    0x004b9253 call 0x4b9de0                                                                                         |         BloombergLP::s_baltst::Sequence6::operator=(BloombergLP::s_baltst::Sequence6const&) (rbx, r14);
    0x004b9258 jmp 0x4b929c                                                                                          |         goto label_0;
    0x004b925a cmp qword [rbx + 0x20], 0x17                                                                          |         
                                                                                                                     |         if (*((rbx + 0x20)) != 0x17) {
    0x004b925f je 0x4b926e                                                                                           |             
    0x004b9261 mov rsi, qword [rbx]                                                                                  |             rsi = *(rbx);
    0x004b9264 mov rdi, qword [rbx + 0x28]                                                                           |             rdi = *((rbx + 0x28));
    0x004b9268 mov rax, qword [rdi]                                                                                  |             rax = *(rdi);
    0x004b926b call qword [rax + 0x18]                                                                               |             uint64_t (*rax + 0x18)() ();
                                                                                                                     |         }
    0x004b926e mov qword [rbx + 0x18], 0xffffffffffffffff                                                            |         *((rbx + 0x18)) = 0xffffffffffffffff;
                                                                                                                     |     }
    0x004b9276 mov dword [rbx + 0x170], 0xffffffff                                                                   |     *((rbx + 0x170)) = 0xffffffff;
    0x004b9280 mov rdx, qword [rbx + 0x178]                                                                          |     
    0x004b9287 mov rdi, rbx                                                                                          |     
    0x004b928a mov rsi, r14                                                                                          |     
    0x004b928d call 0x4c35f0                                                                                         |     BloombergLP::s_baltst::Sequence6::Sequence6(BloombergLP::s_baltst::Sequence6const&,BloombergLP::bslma::Allocator*) (rbx, r14, *((rbx + 0x178)));
    0x004b9292 mov dword [rbx + 0x170], 0                                                                            |     *((rbx + 0x170)) = 0;
                                                                                                                     | label_0:
    0x004b929c mov rax, rbx                                                                                          |     rax = rbx;
    0x004b929f add rsp, 8                                                                                            |     
    0x004b92a3 pop rbx                                                                                               |     
    0x004b92a4 pop r14                                                                                               |     
    0x004b92a6 ret                                                                                                   |     return rax;
                                                                                                                     | }
