    ; assembly                                                                                   | /* r2dec pseudo code output */
                                                                                                 | /* baljsn_encoder.t/none @ 0x4d0750 */
                                                                                                 | #include <stdint.h>
                                                                                                 |  
    ; (fcn) method.BloombergLP::s_baltst::SequenceWithAnonymityChoice.makeSelection1__ ()        | int64_t method_BloombergLP::s_baltst::SequenceWithAnonymityChoice_makeSelection1_ (int64_t arg1) {
                                                                                                 |     rdi = arg1;
                                                                                                 |     /* BloombergLP::s_baltst::SequenceWithAnonymityChoice::makeSelection1() */
    0x004d0750 push rbx                                                                          |     
    0x004d0751 mov rbx, rdi                                                                      |     rbx = rdi;
    0x004d0754 mov eax, dword [rdi + 0x170]                                                      |     eax = *((rdi + 0x170));
    0x004d075a cmp eax, 2                                                                        |     
                                                                                                 |     if (eax != 2) {
    0x004d075d je 0x4d076d                                                                       |         
    0x004d075f test eax, eax                                                                     |         
                                                                                                 |         if (eax == 0) {
    0x004d0761 jne 0x4d0789                                                                      |             
    0x004d0763 mov rdi, rbx                                                                      |             
    0x004d0766 call 0x4c4d80                                                                     |             BloombergLP::s_baltst::Sequence6::reset() (rbx);
    0x004d076b jmp 0x4d07ac                                                                      |             
                                                                                                 |         } else {
    0x004d076d cmp qword [rbx + 0x20], 0x17                                                      |             
                                                                                                 |             if (*((rbx + 0x20)) != 0x17) {
    0x004d0772 je 0x4d0781                                                                       |                 
    0x004d0774 mov rsi, qword [rbx]                                                              |                 rsi = *(rbx);
    0x004d0777 mov rdi, qword [rbx + 0x28]                                                       |                 rdi = *((rbx + 0x28));
    0x004d077b mov rax, qword [rdi]                                                              |                 rax = *(rdi);
    0x004d077e call qword [rax + 0x18]                                                           |                 uint64_t (*rax + 0x18)() ();
                                                                                                 |             }
    0x004d0781 mov qword [rbx + 0x18], 0xffffffffffffffff                                        |             *((rbx + 0x18)) = 0xffffffffffffffff;
                                                                                                 |         }
    0x004d0789 mov dword [rbx + 0x170], 0xffffffff                                               |         *((rbx + 0x170)) = 0xffffffff;
    0x004d0793 mov rsi, qword [rbx + 0x178]                                                      |         
    0x004d079a mov rdi, rbx                                                                      |         
    0x004d079d call 0x4c32d0                                                                     |         BloombergLP::s_baltst::Sequence6::Sequence6(BloombergLP::bslma::Allocator*) (rbx, *((rbx + 0x178)));
    0x004d07a2 mov dword [rbx + 0x170], 0                                                        |         *((rbx + 0x170)) = 0;
                                                                                                 |     }
    0x004d07ac mov rax, rbx                                                                      |     rax = rbx;
    0x004d07af pop rbx                                                                           |     
    0x004d07b0 ret                                                                               |     return rax;
                                                                                                 | }
