    ; assembly                                                                                                                               | /* r2dec pseudo code output */
                                                                                                                                             | /* baljsn_encoder.t/none @ 0x4cff00 */
                                                                                                                                             | #include <stdint.h>
                                                                                                                                             |  
    ; (fcn) method.BloombergLP::s_baltst::SequenceWithAnonymityChoice.makeSelection3_BloombergLP::s_baltst::CustomString_const_ ()           | uint64_t method_BloombergLP::s_baltst::SequenceWithAnonymityChoice_makeSelection3_BloombergLP::s_baltst::CustomString_const_ (int64_t arg2, int64_t arg1) {
                                                                                                                                             |     rsi = arg2;
                                                                                                                                             |     rdi = arg1;
                                                                                                                                             |     /* BloombergLP::s_baltst::SequenceWithAnonymityChoice::makeSelection3(BloombergLP::s_baltst::CustomString const&) */
    0x004cff00 push r15                                                                                                                      |     
    0x004cff02 push r14                                                                                                                      |     
    0x004cff04 push rbx                                                                                                                      |     
    0x004cff05 mov r14, rsi                                                                                                                  |     r14 = rsi;
    0x004cff08 mov rbx, rdi                                                                                                                  |     rbx = rdi;
    0x004cff0b mov eax, dword [rdi + 0x170]                                                                                                  |     eax = *((rdi + 0x170));
    0x004cff11 test eax, eax                                                                                                                 |     
                                                                                                                                             |     if (eax != 0) {
    0x004cff13 je 0x4cff52                                                                                                                   |         
    0x004cff15 cmp eax, 2                                                                                                                    |         
                                                                                                                                             |         if (eax == 2) {
    0x004cff18 jne 0x4cff5a                                                                                                                  |             
    0x004cff1a cmp rbx, r14                                                                                                                  |             
                                                                                                                                             |             if (rbx == r14) {
    0x004cff1d je 0x4d000a                                                                                                                   |                 goto label_0;
                                                                                                                                             |             }
    0x004cff23 mov rdx, qword [r14 + 0x18]                                                                                                   |             rdx = *((r14 + 0x18));
    0x004cff27 cmp qword [r14 + 0x20], 0x17                                                                                                  |             
                                                                                                                                             |             if (*((r14 + 0x20)) != 0x17) {
    0x004cff2c je 0x4cff31                                                                                                                   |                 
    0x004cff2e mov r14, qword [r14]                                                                                                          |                 r14 = *(r14);
                                                                                                                                             |             }
    0x004cff31 mov r15, qword [rbx + 0x18]                                                                                                   |             r15 = *((rbx + 0x18));
    0x004cff35 mov qword [rbx + 0x18], 0                                                                                                     |             *((rbx + 0x18)) = 0;
    0x004cff3d mov ecx, 0x543cdc                                                                                                             |             
    0x004cff42 mov rdi, rbx                                                                                                                  |             
    0x004cff45 mov rsi, r14                                                                                                                  |             
    0x004cff48 call 0x51b3c0                                                                                                                 |             bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx, r14, rdx, "string<...>::operator=(const string&...): string too long");
    0x004cff4d jmp 0x4d000a                                                                                                                  |             
                                                                                                                                             |         } else {
    0x004cff52 mov rdi, rbx                                                                                                                  |             
    0x004cff55 call 0x4c4be0                                                                                                                 |             BloombergLP::s_baltst::Sequence6::~Sequence6() (rbx);
                                                                                                                                             |         }
    0x004cff5a mov dword [rbx + 0x170], 0xffffffff                                                                                           |         *((rbx + 0x170)) = 0xffffffff;
    0x004cff64 mov rdi, qword [rbx + 0x178]                                                                                                  |         rdi = *((rbx + 0x178));
    0x004cff6b test rdi, rdi                                                                                                                 |         
                                                                                                                                             |         if (rdi == 0) {
    0x004cff6e jne 0x4cff84                                                                                                                  |             
    0x004cff70 mov rdi, qword [rip + 0x3fd131]                                                                                               |             rdi = BloombergLP::bslma::Default::s_defaultAllocator;
    0x004cff77 test rdi, rdi                                                                                                                 |             
                                                                                                                                             |             if (rdi != 0) {
    0x004cff7a jne 0x4cff84                                                                                                                  |                 goto label_1;
                                                                                                                                             |             }
    0x004cff7c call 0x518150                                                                                                                 |             rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x004cff81 mov rdi, rax                                                                                                                  |             rdi = rax;
                                                                                                                                             |         }
                                                                                                                                             | label_1:
    0x004cff84 mov rax, qword [r14 + 0x20]                                                                                                   |         rax = *((r14 + 0x20));
    0x004cff88 mov qword [rbx + 0x20], rax                                                                                                   |         *((rbx + 0x20)) = rax;
    0x004cff8c movups xmm0, xmmword [r14]                                                                                                    |         __asm ("movups xmm0, xmmword [r14]");
    0x004cff90 movups xmm1, xmmword [r14 + 0x10]                                                                                             |         __asm ("movups xmm1, xmmword [r14 + 0x10]");
    0x004cff95 movups xmmword [rbx + 0x10], xmm1                                                                                             |         __asm ("movups xmmword [rbx + 0x10], xmm1");
    0x004cff99 movups xmmword [rbx], xmm0                                                                                                    |         __asm ("movups xmmword [rbx], xmm0");
    0x004cff9c mov qword [rbx + 0x28], rdi                                                                                                   |         *((rbx + 0x28)) = rdi;
    0x004cffa0 cmp rax, 0x17                                                                                                                 |         
                                                                                                                                             |         if (rax != 0x17) {
    0x004cffa4 je 0x4d0000                                                                                                                   |             
    0x004cffa6 mov rax, qword [r14 + 0x18]                                                                                                   |             rax = *((r14 + 0x18));
    0x004cffaa cmp rax, 0x17                                                                                                                 |             
    0x004cffae mov esi, 0x17                                                                                                                 |             esi = 0x17;
                                                                                                                                             |             if (rax > 0x17) {
    0x004cffb3 cmova rsi, rax                                                                                                                |                 rsi = rax;
                                                                                                                                             |             }
    0x004cffb7 mov qword [rbx], 0                                                                                                            |             *(rbx) = 0;
    0x004cffbe mov qword [rbx + 0x18], rax                                                                                                   |             *((rbx + 0x18)) = rax;
    0x004cffc2 mov qword [rbx + 0x20], rsi                                                                                                   |             *((rbx + 0x20)) = rsi;
    0x004cffc6 cmp rax, 0x18                                                                                                                 |             
                                                                                                                                             |             if (rax >= 0x18) {
    0x004cffca jb 0x4cffdf                                                                                                                   |                 
    0x004cffcc inc rsi                                                                                                                       |                 rsi++;
    0x004cffcf mov rax, qword [rdi]                                                                                                          |                 rax = *(rdi);
    0x004cffd2 call qword [rax + 0x10]                                                                                                       |                 rax = uint64_t (*rax + 0x10)() ();
    0x004cffd5 mov qword [rbx], rax                                                                                                          |                 *(rbx) = rax;
    0x004cffd8 cmp qword [rbx + 0x20], 0x17                                                                                                  |                 
                                                                                                                                             |                 if (*((rbx + 0x20)) != 0x17) {
    0x004cffdd jne 0x4cffe2                                                                                                                  |                     goto label_2;
                                                                                                                                             |                 }
                                                                                                                                             |             }
    0x004cffdf mov rax, rbx                                                                                                                  |             rax = rbx;
                                                                                                                                             | label_2:
    0x004cffe2 mov rdx, qword [rbx + 0x18]                                                                                                   |             rdx = *((rbx + 0x18));
    0x004cffe6 inc rdx                                                                                                                       |             rdx++;
                                                                                                                                             |             if (rdx == 0) {
    0x004cffe9 je 0x4d0000                                                                                                                   |                 goto label_3;
                                                                                                                                             |             }
    0x004cffeb cmp qword [r14 + 0x20], 0x17                                                                                                  |             
                                                                                                                                             |             if (*((r14 + 0x20)) != 0x17) {
    0x004cfff0 je 0x4cfff5                                                                                                                   |                 
    0x004cfff2 mov r14, qword [r14]                                                                                                          |                 r14 = *(r14);
                                                                                                                                             |             }
    0x004cfff5 mov rdi, rax                                                                                                                  |             
    0x004cfff8 mov rsi, r14                                                                                                                  |             
    0x004cfffb call 0x405c20                                                                                                                 |             memcpy (rax, r14, rdx);
                                                                                                                                             |         }
                                                                                                                                             | label_3:
    0x004d0000 mov dword [rbx + 0x170], 2                                                                                                    |         *((rbx + 0x170)) = 2;
                                                                                                                                             |     }
                                                                                                                                             | label_0:
    0x004d000a mov rax, rbx                                                                                                                  |     rax = rbx;
    0x004d000d pop rbx                                                                                                                       |     
    0x004d000e pop r14                                                                                                                       |     
    0x004d0010 pop r15                                                                                                                       |     
    0x004d0012 ret                                                                                                                           |     return rax;
                                                                                                                                             | }
