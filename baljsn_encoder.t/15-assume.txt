    ; assembly                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                 | /* baljsn_encoder.t/assume @ 0x4d0f70 */
                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                 |  
    ; (fcn) method.BloombergLP::s_baltst::SequenceWithAnonymityChoice1.operator_BloombergLP::s_baltst::SequenceWithAnonymityChoice1_ ()          | int64_t method_BloombergLP::s_baltst::SequenceWithAnonymityChoice1_operator_BloombergLP::s_baltst::SequenceWithAnonymityChoice1_ (int64_t arg2, uint32_t arg1) {
                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                 |     /* BloombergLP::s_baltst::SequenceWithAnonymityChoice1::operator=(BloombergLP::s_baltst::SequenceWithAnonymityChoice1&&) */
    0x004d0f70 push rbp                                                                                                                          |     
    0x004d0f71 push rbx                                                                                                                          |     
    0x004d0f72 push rax                                                                                                                          |     
    0x004d0f73 mov rbx, rdi                                                                                                                      |     rbx = rdi;
    0x004d0f76 cmp rdi, rsi                                                                                                                      |     
                                                                                                                                                 |     if (rdi != rsi) {
    0x004d0f79 je 0x4d1000                                                                                                                       |         
    0x004d0f7f mov eax, dword [rsi + 0x30]                                                                                                       |         eax = *((rsi + 0x30));
    0x004d0f82 cmp eax, 1                                                                                                                        |         
                                                                                                                                                 |         if (eax != 1) {
    0x004d0f85 je 0x4d0f9f                                                                                                                       |             
    0x004d0f87 test eax, eax                                                                                                                     |             
                                                                                                                                                 |             if (eax == 0) {
    0x004d0f89 jne 0x4d0fa9                                                                                                                      |                 
    0x004d0f8b mov bpl, byte [rsi]                                                                                                               |                 bpl = *(rsi);
    0x004d0f8e mov eax, dword [rbx + 0x30]                                                                                                       |                 eax = *((rbx + 0x30));
    0x004d0f91 cmp eax, 1                                                                                                                        |                 
                                                                                                                                                 |                 if (eax != 1) {
    0x004d0f94 je 0x4d0fda                                                                                                                       |                     
    0x004d0f96 test eax, eax                                                                                                                     |                     
                                                                                                                                                 |                     if (eax == 0) {
    0x004d0f98 jne 0x4d0ff6                                                                                                                      |                         
    0x004d0f9a mov byte [rbx], bpl                                                                                                               |                         *(rbx) = bpl;
    0x004d0f9d jmp 0x4d1000                                                                                                                      |                         
                                                                                                                                                 |                     } else {
    0x004d0f9f mov rdi, rbx                                                                                                                      |                         
    0x004d0fa2 call 0x4d1020                                                                                                                     |                         BloombergLP::s_baltst::SequenceWithAnonymityChoice1::makeSelection6(bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>&&) (rbx, rsi);
    0x004d0fa7 jmp 0x4d1000                                                                                                                      |                         
                                                                                                                                                 |                     } else {
    0x004d0fa9 mov eax, dword [rbx + 0x30]                                                                                                       |                         eax = *((rbx + 0x30));
                                                                                                                                                 |                     }
    0x004d0fac test eax, eax                                                                                                                     |                     
                                                                                                                                                 |                     if (eax != 0) {
    0x004d0fae je 0x4d0fd1                                                                                                                       |                         
    0x004d0fb0 cmp eax, 1                                                                                                                        |                         
                                                                                                                                                 |                         if (eax != 1) {
    0x004d0fb3 jne 0x4d0fd1                                                                                                                      |                             goto label_0;
                                                                                                                                                 |                         }
    0x004d0fb5 cmp qword [rbx + 0x20], 0x17                                                                                                      |                         
                                                                                                                                                 |                         if (*((rbx + 0x20)) != 0x17) {
    0x004d0fba je 0x4d0fc9                                                                                                                       |                             
    0x004d0fbc mov rsi, qword [rbx]                                                                                                              |                             rsi = *(rbx);
    0x004d0fbf mov rdi, qword [rbx + 0x28]                                                                                                       |                             rdi = *((rbx + 0x28));
    0x004d0fc3 mov rax, qword [rdi]                                                                                                              |                             rax = *(rdi);
    0x004d0fc6 call qword [rax + 0x18]                                                                                                           |                             uint64_t (*rax + 0x18)() ();
                                                                                                                                                 |                         }
    0x004d0fc9 mov qword [rbx + 0x18], 0xffffffffffffffff                                                                                        |                         *((rbx + 0x18)) = 0xffffffffffffffff;
                                                                                                                                                 |                     }
                                                                                                                                                 | label_0:
    0x004d0fd1 mov dword [rbx + 0x30], 0xffffffff                                                                                                |                     *((rbx + 0x30)) = 0xffffffff;
    0x004d0fd8 jmp 0x4d1000                                                                                                                      |                     
                                                                                                                                                 |                 } else {
    0x004d0fda cmp qword [rbx + 0x20], 0x17                                                                                                      |                     
                                                                                                                                                 |                 }
                                                                                                                                                 |             }
                                                                                                                                                 |             if (*((rbx + 0x20)) != 0x17) {
    0x004d0fdf je 0x4d0fee                                                                                                                       |                 
    0x004d0fe1 mov rsi, qword [rbx]                                                                                                              |                 rsi = *(rbx);
    0x004d0fe4 mov rdi, qword [rbx + 0x28]                                                                                                       |                 rdi = *((rbx + 0x28));
    0x004d0fe8 mov rax, qword [rdi]                                                                                                              |                 rax = *(rdi);
    0x004d0feb call qword [rax + 0x18]                                                                                                           |                 uint64_t (*rax + 0x18)() ();
                                                                                                                                                 |             }
    0x004d0fee mov qword [rbx + 0x18], 0xffffffffffffffff                                                                                        |             *((rbx + 0x18)) = 0xffffffffffffffff;
    0x004d0ff6 mov byte [rbx], bpl                                                                                                               |             *(rbx) = bpl;
    0x004d0ff9 mov dword [rbx + 0x30], 0                                                                                                         |             *((rbx + 0x30)) = 0;
                                                                                                                                                 |         }
                                                                                                                                                 |     }
    0x004d1000 mov rax, rbx                                                                                                                      |     rax = rbx;
    0x004d1003 add rsp, 8                                                                                                                        |     
    0x004d1007 pop rbx                                                                                                                           |     
    0x004d1008 pop rbp                                                                                                                           |     
    0x004d1009 ret                                                                                                                               |     return rax;
                                                                                                                                                 | }
