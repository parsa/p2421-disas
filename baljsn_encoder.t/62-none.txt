    ; assembly                                                                                                                           | /* r2dec pseudo code output */
                                                                                                                                         | /* baljsn_encoder.t/none @ 0x4cfe10 */
                                                                                                                                         | #include <stdint.h>
                                                                                                                                         |  
    ; (fcn) method.BloombergLP::s_baltst::SequenceWithAnonymityChoice.makeSelection1_BloombergLP::s_baltst::Sequence6_const_ ()          | int64_t method_BloombergLP::s_baltst::SequenceWithAnonymityChoice_makeSelection1_BloombergLP::s_baltst::Sequence6_const_ (int64_t arg2, int64_t arg1) {
                                                                                                                                         |     rsi = arg2;
                                                                                                                                         |     rdi = arg1;
                                                                                                                                         |     /* BloombergLP::s_baltst::SequenceWithAnonymityChoice::makeSelection1(BloombergLP::s_baltst::Sequence6 const&) */
    0x004cfe10 push r14                                                                                                                  |     
    0x004cfe12 push rbx                                                                                                                  |     
    0x004cfe13 push rax                                                                                                                  |     
    0x004cfe14 mov r14, rsi                                                                                                              |     r14 = rsi;
    0x004cfe17 mov rbx, rdi                                                                                                              |     rbx = rdi;
    0x004cfe1a mov eax, dword [rdi + 0x170]                                                                                              |     eax = *((rdi + 0x170));
    0x004cfe20 cmp eax, 2                                                                                                                |     
                                                                                                                                         |     if (eax != 2) {
    0x004cfe23 je 0x4cfe36                                                                                                               |         
    0x004cfe25 test eax, eax                                                                                                             |         
                                                                                                                                         |         if (eax == 0) {
    0x004cfe27 jne 0x4cfe52                                                                                                              |             
    0x004cfe29 mov rdi, rbx                                                                                                              |             
    0x004cfe2c mov rsi, r14                                                                                                              |             
    0x004cfe2f call 0x4ba070                                                                                                             |             BloombergLP::s_baltst::Sequence6::operator=(BloombergLP::s_baltst::Sequence6const&) (rbx, r14);
    0x004cfe34 jmp 0x4cfe78                                                                                                              |             
                                                                                                                                         |         } else {
    0x004cfe36 cmp qword [rbx + 0x20], 0x17                                                                                              |             
                                                                                                                                         |             if (*((rbx + 0x20)) != 0x17) {
    0x004cfe3b je 0x4cfe4a                                                                                                               |                 
    0x004cfe3d mov rsi, qword [rbx]                                                                                                      |                 rsi = *(rbx);
    0x004cfe40 mov rdi, qword [rbx + 0x28]                                                                                               |                 rdi = *((rbx + 0x28));
    0x004cfe44 mov rax, qword [rdi]                                                                                                      |                 rax = *(rdi);
    0x004cfe47 call qword [rax + 0x18]                                                                                                   |                 uint64_t (*rax + 0x18)() ();
                                                                                                                                         |             }
    0x004cfe4a mov qword [rbx + 0x18], 0xffffffffffffffff                                                                                |             *((rbx + 0x18)) = 0xffffffffffffffff;
                                                                                                                                         |         }
    0x004cfe52 mov dword [rbx + 0x170], 0xffffffff                                                                                       |         *((rbx + 0x170)) = 0xffffffff;
    0x004cfe5c mov rdx, qword [rbx + 0x178]                                                                                              |         
    0x004cfe63 mov rdi, rbx                                                                                                              |         
    0x004cfe66 mov rsi, r14                                                                                                              |         
    0x004cfe69 call 0x4c3780                                                                                                             |         BloombergLP::s_baltst::Sequence6::Sequence6(BloombergLP::s_baltst::Sequence6const&,BloombergLP::bslma::Allocator*) (rbx, r14, *((rbx + 0x178)));
    0x004cfe6e mov dword [rbx + 0x170], 0                                                                                                |         *((rbx + 0x170)) = 0;
                                                                                                                                         |     }
    0x004cfe78 mov rax, rbx                                                                                                              |     rax = rbx;
    0x004cfe7b add rsp, 8                                                                                                                |     
    0x004cfe7f pop rbx                                                                                                                   |     
    0x004cfe80 pop r14                                                                                                                   |     
    0x004cfe82 ret                                                                                                                       |     return rax;
                                                                                                                                         | }
