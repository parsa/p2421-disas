    ; assembly                                                           | /* r2dec pseudo code output */
                                                                         | /* baljsn_encoder.t/assume @ 0x4bb720 */
                                                                         | #include <stdint.h>
                                                                         |  
    ; (fcn) method.BloombergLP::s_baltst::Sequence1.reset__ ()           | int64_t method_BloombergLP::s_baltst::Sequence1_reset_ (uint32_t arg1) {
                                                                         |     int64_t var_8h;
                                                                         |     rdi = arg1;
                                                                         |     /* BloombergLP::s_baltst::Sequence1::reset() */
    0x004bb720 push r15                                                  |     
    0x004bb722 push r14                                                  |     
    0x004bb724 push rbx                                                  |     
    0x004bb725 sub rsp, 0x10                                             |     
    0x004bb729 mov r14, rdi                                              |     r14 = rdi;
    0x004bb72c cmp byte [rdi + 0x1e8], 0                                 |     
                                                                         |     if (*((rdi + 0x1e8)) != 0) {
    0x004bb733 je 0x4bb78d                                               |         
    0x004bb735 mov byte [r14 + 0x1e8], 0                                 |         *((r14 + 0x1e8)) = 0;
    0x004bb73d mov eax, dword [r14 + 0x1d8]                              |         eax = *((r14 + 0x1d8));
    0x004bb744 cmp rax, 3                                                |         
                                                                         |         if (rax <= 3) {
    0x004bb748 ja 0x4bb782                                               |             
                                                                         |             /* switch table (4 cases) at 0x649048 */
    0x004bb74a jmp qword [rax*8 + 0x649048]                              |             
    0x004bb751 lea rdi, [r14 + 0x68]                                     |             
    0x004bb755 call 0x4c4a50                                             |             BloombergLP::s_baltst::Sequence6::~Sequence6() (r14 + 0x68);
    0x004bb75a jmp 0x4bb782                                              |             goto label_1;
    0x004bb75c cmp qword [r14 + 0x88], 0x17                              |             
                                                                         |             if (*((r14 + 0x88)) != 0x17) {
    0x004bb764 je 0x4bb777                                               |                 
    0x004bb766 mov rsi, qword [r14 + 0x68]                               |                 rsi = *((r14 + 0x68));
    0x004bb76a mov rdi, qword [r14 + 0x90]                               |                 rdi = *((r14 + 0x90));
    0x004bb771 mov rax, qword [rdi]                                      |                 rax = *(rdi);
    0x004bb774 call qword [rax + 0x18]                                   |                 uint64_t (*rax + 0x18)() ();
                                                                         |             }
    0x004bb777 mov qword [r14 + 0x80], 0xffffffffffffffff                |             *((r14 + 0x80)) = 0xffffffffffffffff;
                                                                         |         }
                                                                         | label_1:
    0x004bb782 mov dword [r14 + 0x1d8], 0xffffffff                       |         *((r14 + 0x1d8)) = 0xffffffff;
                                                                         |     }
    0x004bb78d mov rdi, qword [r14 + 0x48]                               |     rdi = *((r14 + 0x48));
    0x004bb791 mov rsi, qword [r14 + 0x50]                               |     rsi = *((r14 + 0x50));
    0x004bb795 cmp rsi, rdi                                              |     
                                                                         |     if (rsi != rdi) {
    0x004bb798 je 0x4bb7b5                                               |         
    0x004bb79a mov rax, qword [r14 + 0x60]                               |         rax = *((r14 + 0x60));
    0x004bb79e mov qword [rsp + 8], rax                                  |         *((rsp + 8)) = rax;
    0x004bb7a3 lea rdx, [rsp + 8]                                        |         rdx = rsp + 8;
    0x004bb7a8 call 0x4c9aa0                                             |         voidBloombergLP::bslalg::ArrayDestructionPrimitives::destroy<BloombergLP::s_baltst::Choice1,bsl::allocator<BloombergLP::s_baltst::Choice1>>(BloombergLP::s_baltst::Choice1*,BloombergLP::s_baltst::Choice1*,bsl::allocator<BloombergLP::s_baltst::Choice1>,bsl::integral_constant<bool,false>) (rdi, rsi);
    0x004bb7ad mov rax, qword [r14 + 0x48]                               |         rax = *((r14 + 0x48));
    0x004bb7b1 mov qword [r14 + 0x50], rax                               |         *((r14 + 0x50)) = rax;
                                                                         |     }
    0x004bb7b5 mov rdi, qword [r14 + 0x1f8]                              |     
    0x004bb7bc call 0x4b8420                                             |     BloombergLP::s_baltst::Choice2::reset() (*((r14 + 0x1f8)));
    0x004bb7c1 mov rbx, qword [r14 + 8]                                  |     rbx = *((r14 + 8));
    0x004bb7c5 mov r15, qword [r14 + 0x10]                               |     r15 = *((r14 + 0x10));
    0x004bb7c9 cmp r15, rbx                                              |     
                                                                         |     if (r15 == rbx) {
    0x004bb7cc je 0x4bb7e9                                               |         goto label_2;
                                                                         |     }
    0x004bb7ce nop                                                       |     
                                                                         |     do {
    0x004bb7d0 mov rdi, rbx                                              |         
    0x004bb7d3 call 0x4c98b0                                             |         BloombergLP::bslstl::Optional_DataImp<BloombergLP::s_baltst::Choice1>::reset() (rbx);
    0x004bb7d8 add rbx, 0x28                                             |         rbx += 0x28;
    0x004bb7dc cmp r15, rbx                                              |         
    0x004bb7df jne 0x4bb7d0                                              |         
                                                                         |     } while (r15 != rbx);
    0x004bb7e1 mov rax, qword [r14 + 8]                                  |     rax = *((r14 + 8));
    0x004bb7e5 mov qword [r14 + 0x10], rax                               |     *((r14 + 0x10)) = rax;
                                                                         | label_2:
    0x004bb7e9 mov rbx, qword [r14 + 0x28]                               |     rbx = *((r14 + 0x28));
    0x004bb7ed mov r15, qword [r14 + 0x30]                               |     r15 = *((r14 + 0x30));
    0x004bb7f1 cmp r15, rbx                                              |     
                                                                         |     if (r15 != rbx) {
    0x004bb7f4 jne 0x4bb81e                                              |         goto label_3;
                                                                         |     }
    0x004bb7f6 jmp 0x4bb857                                              |     goto label_4;
    0x004bb800 mov rdi, rbx                                              |     
    0x004bb803 call 0x4c4a50                                             |     BloombergLP::s_baltst::Sequence6::~Sequence6() (rbx);
                                                                         |     do {
                                                                         | label_0:
    0x004bb808 mov dword [rbx + 0x170], 0xffffffff                       |         *((rbx + 0x170)) = 0xffffffff;
    0x004bb812 add rbx, 0x180                                            |         rbx += 0x180;
    0x004bb819 cmp r15, rbx                                              |         
                                                                         |         if (r15 == rbx) {
    0x004bb81c je 0x4bb84f                                               |             goto label_5;
                                                                         |         }
                                                                         | label_3:
    0x004bb81e mov eax, dword [rbx + 0x170]                              |         eax = *((rbx + 0x170));
    0x004bb824 cmp rax, 3                                                |         
    0x004bb828 ja 0x4bb808                                               |         
                                                                         |     } while (rax > 3);
                                                                         |     /* switch table (4 cases) at 0x649068 */
    0x004bb82a jmp qword [rax*8 + 0x649068]                              |     
    0x004bb831 cmp qword [rbx + 0x20], 0x17                              |     
                                                                         |     if (*((rbx + 0x20)) != 0x17) {
    0x004bb836 je 0x4bb845                                               |         
    0x004bb838 mov rsi, qword [rbx]                                      |         rsi = *(rbx);
    0x004bb83b mov rdi, qword [rbx + 0x28]                               |         rdi = *((rbx + 0x28));
    0x004bb83f mov rax, qword [rdi]                                      |         rax = *(rdi);
    0x004bb842 call qword [rax + 0x18]                                   |         uint64_t (*rax + 0x18)() ();
                                                                         |     }
    0x004bb845 mov qword [rbx + 0x18], 0xffffffffffffffff                |     *((rbx + 0x18)) = 0xffffffffffffffff;
    0x004bb84d jmp 0x4bb808                                              |     goto label_0;
                                                                         | label_5:
    0x004bb84f mov rax, qword [r14 + 0x28]                               |     rax = *((r14 + 0x28));
    0x004bb853 mov qword [r14 + 0x30], rax                               |     *((r14 + 0x30)) = rax;
                                                                         | label_4:
    0x004bb857 add rsp, 0x10                                             |     
    0x004bb85b pop rbx                                                   |     
    0x004bb85c pop r14                                                   |     
    0x004bb85e pop r15                                                   |     
    0x004bb860 ret                                                       |     return rax;
                                                                         | }
