    ; assembly                                                                                                                                                                       | /* r2dec pseudo code output */
                                                                                                                                                                                     | /* baljsn_encoder.t/assume @ 0x4d0e20 */
                                                                                                                                                                                     | #include <stdint.h>
                                                                                                                                                                                     |  
    ; (fcn) method.BloombergLP::s_baltst::SequenceWithAnonymityChoice1.makeSelection6_bsl::basic_string_char__std::__1::char_traits_char___bsl::allocator_char____const_ ()          | uint64_t method_BloombergLP::s_baltst::SequenceWithAnonymityChoice1_makeSelection6_bsl::basic_string_char_std::_1::char_traits_char_bsl::allocator_char_const_ (int64_t arg2, int64_t arg1) {
                                                                                                                                                                                     |     rsi = arg2;
                                                                                                                                                                                     |     rdi = arg1;
                                                                                                                                                                                     |     /* BloombergLP::s_baltst::SequenceWithAnonymityChoice1::makeSelection6(bsl::basic_string<char, std::__1::char_traits<char>, bsl::allocator<char> > const&) */
    0x004d0e20 push r15                                                                                                                                                              |     
    0x004d0e22 push r14                                                                                                                                                              |     
    0x004d0e24 push rbx                                                                                                                                                              |     
    0x004d0e25 mov r14, rsi                                                                                                                                                          |     r14 = rsi;
    0x004d0e28 mov rbx, rdi                                                                                                                                                          |     rbx = rdi;
    0x004d0e2b mov eax, dword [rdi + 0x30]                                                                                                                                           |     eax = *((rdi + 0x30));
    0x004d0e2e test eax, eax                                                                                                                                                         |     
                                                                                                                                                                                     |     if (eax != 0) {
    0x004d0e30 je 0x4d0e6f                                                                                                                                                           |         
    0x004d0e32 cmp eax, 1                                                                                                                                                            |         
                                                                                                                                                                                     |         if (eax == 1) {
    0x004d0e35 jne 0x4d0e6f                                                                                                                                                          |             
    0x004d0e37 cmp rbx, r14                                                                                                                                                          |             
                                                                                                                                                                                     |             if (rbx == r14) {
    0x004d0e3a je 0x4d0f16                                                                                                                                                           |                 goto label_0;
                                                                                                                                                                                     |             }
    0x004d0e40 mov rdx, qword [r14 + 0x18]                                                                                                                                           |             rdx = *((r14 + 0x18));
    0x004d0e44 cmp qword [r14 + 0x20], 0x17                                                                                                                                          |             
                                                                                                                                                                                     |             if (*((r14 + 0x20)) != 0x17) {
    0x004d0e49 je 0x4d0e4e                                                                                                                                                           |                 
    0x004d0e4b mov r14, qword [r14]                                                                                                                                                  |                 r14 = *(r14);
                                                                                                                                                                                     |             }
    0x004d0e4e mov r15, qword [rbx + 0x18]                                                                                                                                           |             r15 = *((rbx + 0x18));
    0x004d0e52 mov qword [rbx + 0x18], 0                                                                                                                                             |             *((rbx + 0x18)) = 0;
    0x004d0e5a mov ecx, 0x5430c0                                                                                                                                                     |             
    0x004d0e5f mov rdi, rbx                                                                                                                                                          |             
    0x004d0e62 mov rsi, r14                                                                                                                                                          |             
    0x004d0e65 call 0x51a780                                                                                                                                                         |             bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx, r14, rdx, "string<...>::operator=(const string&...): string too long");
    0x004d0e6a jmp 0x4d0f16                                                                                                                                                          |             
                                                                                                                                                                                     |         }
                                                                                                                                                                                     |     } else {
    0x004d0e6f mov dword [rbx + 0x30], 0xffffffff                                                                                                                                    |         *((rbx + 0x30)) = 0xffffffff;
    0x004d0e76 mov rdi, qword [rbx + 0x38]                                                                                                                                           |         rdi = *((rbx + 0x38));
    0x004d0e7a test rdi, rdi                                                                                                                                                         |         
                                                                                                                                                                                     |         if (rdi == 0) {
    0x004d0e7d jne 0x4d0e93                                                                                                                                                          |             
    0x004d0e7f mov rdi, qword [rip + 0x3fc222]                                                                                                                                       |             rdi = BloombergLP::bslma::Default::s_defaultAllocator;
    0x004d0e86 test rdi, rdi                                                                                                                                                         |             
                                                                                                                                                                                     |             if (rdi != 0) {
    0x004d0e89 jne 0x4d0e93                                                                                                                                                          |                 goto label_1;
                                                                                                                                                                                     |             }
    0x004d0e8b call 0x517520                                                                                                                                                         |             rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x004d0e90 mov rdi, rax                                                                                                                                                          |             rdi = rax;
                                                                                                                                                                                     |         }
                                                                                                                                                                                     | label_1:
    0x004d0e93 mov rax, qword [r14 + 0x20]                                                                                                                                           |         rax = *((r14 + 0x20));
    0x004d0e97 mov qword [rbx + 0x20], rax                                                                                                                                           |         *((rbx + 0x20)) = rax;
    0x004d0e9b movups xmm0, xmmword [r14]                                                                                                                                            |         __asm ("movups xmm0, xmmword [r14]");
    0x004d0e9f movups xmm1, xmmword [r14 + 0x10]                                                                                                                                     |         __asm ("movups xmm1, xmmword [r14 + 0x10]");
    0x004d0ea4 movups xmmword [rbx + 0x10], xmm1                                                                                                                                     |         __asm ("movups xmmword [rbx + 0x10], xmm1");
    0x004d0ea8 movups xmmword [rbx], xmm0                                                                                                                                            |         __asm ("movups xmmword [rbx], xmm0");
    0x004d0eab mov qword [rbx + 0x28], rdi                                                                                                                                           |         *((rbx + 0x28)) = rdi;
    0x004d0eaf cmp rax, 0x17                                                                                                                                                         |         
                                                                                                                                                                                     |         if (rax != 0x17) {
    0x004d0eb3 je 0x4d0f0f                                                                                                                                                           |             
    0x004d0eb5 mov rax, qword [r14 + 0x18]                                                                                                                                           |             rax = *((r14 + 0x18));
    0x004d0eb9 cmp rax, 0x17                                                                                                                                                         |             
    0x004d0ebd mov esi, 0x17                                                                                                                                                         |             esi = 0x17;
                                                                                                                                                                                     |             if (rax > 0x17) {
    0x004d0ec2 cmova rsi, rax                                                                                                                                                        |                 rsi = rax;
                                                                                                                                                                                     |             }
    0x004d0ec6 mov qword [rbx], 0                                                                                                                                                    |             *(rbx) = 0;
    0x004d0ecd mov qword [rbx + 0x18], rax                                                                                                                                           |             *((rbx + 0x18)) = rax;
    0x004d0ed1 mov qword [rbx + 0x20], rsi                                                                                                                                           |             *((rbx + 0x20)) = rsi;
    0x004d0ed5 cmp rax, 0x18                                                                                                                                                         |             
                                                                                                                                                                                     |             if (rax >= 0x18) {
    0x004d0ed9 jb 0x4d0eee                                                                                                                                                           |                 
    0x004d0edb inc rsi                                                                                                                                                               |                 rsi++;
    0x004d0ede mov rax, qword [rdi]                                                                                                                                                  |                 rax = *(rdi);
    0x004d0ee1 call qword [rax + 0x10]                                                                                                                                               |                 rax = uint64_t (*rax + 0x10)() ();
    0x004d0ee4 mov qword [rbx], rax                                                                                                                                                  |                 *(rbx) = rax;
    0x004d0ee7 cmp qword [rbx + 0x20], 0x17                                                                                                                                          |                 
                                                                                                                                                                                     |                 if (*((rbx + 0x20)) != 0x17) {
    0x004d0eec jne 0x4d0ef1                                                                                                                                                          |                     goto label_2;
                                                                                                                                                                                     |                 }
                                                                                                                                                                                     |             }
    0x004d0eee mov rax, rbx                                                                                                                                                          |             rax = rbx;
                                                                                                                                                                                     | label_2:
    0x004d0ef1 mov rdx, qword [rbx + 0x18]                                                                                                                                           |             rdx = *((rbx + 0x18));
    0x004d0ef5 inc rdx                                                                                                                                                               |             rdx++;
                                                                                                                                                                                     |             if (rdx == 0) {
    0x004d0ef8 je 0x4d0f0f                                                                                                                                                           |                 goto label_3;
                                                                                                                                                                                     |             }
    0x004d0efa cmp qword [r14 + 0x20], 0x17                                                                                                                                          |             
                                                                                                                                                                                     |             if (*((r14 + 0x20)) != 0x17) {
    0x004d0eff je 0x4d0f04                                                                                                                                                           |                 
    0x004d0f01 mov r14, qword [r14]                                                                                                                                                  |                 r14 = *(r14);
                                                                                                                                                                                     |             }
    0x004d0f04 mov rdi, rax                                                                                                                                                          |             
    0x004d0f07 mov rsi, r14                                                                                                                                                          |             
    0x004d0f0a call 0x405bd0                                                                                                                                                         |             memcpy (rax, r14, rdx);
                                                                                                                                                                                     |         }
                                                                                                                                                                                     | label_3:
    0x004d0f0f mov dword [rbx + 0x30], 1                                                                                                                                             |         *((rbx + 0x30)) = 1;
                                                                                                                                                                                     |     }
                                                                                                                                                                                     | label_0:
    0x004d0f16 mov rax, rbx                                                                                                                                                          |     rax = rbx;
    0x004d0f19 pop rbx                                                                                                                                                               |     
    0x004d0f1a pop r14                                                                                                                                                               |     
    0x004d0f1c pop r15                                                                                                                                                               |     
    0x004d0f1e ret                                                                                                                                                                   |     return rax;
                                                                                                                                                                                     | }
