    ; assembly                                                           | /* r2dec pseudo code output */
                                                                         | /* baljsn_encoder.t/assume @ 0x4c99b0 */
                                                                         | #include <stdint.h>
                                                                         |  
    ; (fcn) method.BloombergLP::s_baltst::Choice1.Choice1__ ()           | int64_t method_BloombergLP::s_baltst::Choice1_Choice1_ (int64_t arg1) {
                                                                         |     rdi = arg1;
                                                                         |     do {
                                                                         |         /* BloombergLP::s_baltst::Choice1::~Choice1() */
    0x004c99b0 push r15                                                  |         
    0x004c99b2 push r14                                                  |         
    0x004c99b4 push r13                                                  |         
    0x004c99b6 push r12                                                  |         
    0x004c99b8 push rbx                                                  |         
    0x004c99b9 mov rbx, rdi                                              |         rbx = rdi;
    0x004c99bc mov eax, dword [rdi + 8]                                  |         eax = *((rdi + 8));
    0x004c99bf cmp eax, 2                                                |         
                                                                         |         if (eax < 2) {
    0x004c99c2 jb 0x4c9a6c                                               |             goto label_0;
                                                                         |         }
    0x004c99c8 cmp eax, 3                                                |         
                                                                         |         if (eax != 3) {
    0x004c99cb je 0x4c99fc                                               |             
    0x004c99cd cmp eax, 2                                                |             
                                                                         |             if (eax != 2) {
    0x004c99d0 jne 0x4c9a6c                                              |                 goto label_0;
                                                                         |             }
    0x004c99d6 mov r14, qword [rbx]                                      |             r14 = *(rbx);
    0x004c99d9 test r14, r14                                             |             
                                                                         |             if (r14 == 0) {
    0x004c99dc je 0x4c9a6c                                               |                 goto label_0;
                                                                         |             }
    0x004c99e2 mov r15, qword [rbx + 0x10]                               |             r15 = *((rbx + 0x10));
    0x004c99e6 mov rdi, r14                                              |             
    0x004c99e9 call 0x4c05f0                                             |             BloombergLP::s_baltst::Sequence4::~Sequence4() (r14);
    0x004c99ee mov rax, qword [r15]                                      |             rax = *(r15);
    0x004c99f1 mov rdi, r15                                              |             rdi = r15;
    0x004c99f4 mov rsi, r14                                              |             rsi = r14;
    0x004c99f7 call qword [rax + 0x18]                                   |             uint64_t (*rax + 0x18)() ();
    0x004c99fa jmp 0x4c9a6c                                              |             goto label_0;
                                                                         |         }
    0x004c99fc mov r14, qword [rbx]                                      |         r14 = *(rbx);
    0x004c99ff test r14, r14                                             |         
                                                                         |         if (r14 == 0) {
    0x004c9a02 je 0x4c9a6c                                               |             goto label_0;
                                                                         |         }
    0x004c9a04 mov r15, qword [rbx + 0x10]                               |         r15 = *((rbx + 0x10));
    0x004c9a08 mov eax, dword [r14 + 0x30]                               |         eax = *((r14 + 0x30));
    0x004c9a0c cmp rax, 3                                                |         
                                                                         |         if (rax > 3) {
    0x004c9a10 ja 0x4c9a58                                               |             goto label_1;
                                                                         |         }
                                                                         |         /* switch table (4 cases) at 0x649f80 */
    0x004c9a12 jmp qword [rax*8 + 0x649f80]                              |         
    0x004c9a19 cmp qword [r14 + 0x20], 0x17                              |         
                                                                         |         if (*((r14 + 0x20)) != 0x17) {
    0x004c9a1e je 0x4c9a2d                                               |             
    0x004c9a20 mov rsi, qword [r14]                                      |             rsi = *(r14);
    0x004c9a23 mov rdi, qword [r14 + 0x28]                               |             rdi = *((r14 + 0x28));
    0x004c9a27 mov rax, qword [rdi]                                      |             rax = *(rdi);
    0x004c9a2a call qword [rax + 0x18]                                   |             uint64_t (*rax + 0x18)() ();
                                                                         |         }
    0x004c9a2d mov qword [r14 + 0x18], 0xffffffffffffffff                |         *((r14 + 0x18)) = 0xffffffffffffffff;
    0x004c9a35 jmp 0x4c9a58                                              |         goto label_1;
    0x004c9a37 mov r12, qword [r14]                                      |         r12 = *(r14);
    0x004c9a3a test r12, r12                                             |         
                                                                         |         if (r12 == 0) {
    0x004c9a3d je 0x4c9a58                                               |             goto label_1;
                                                                         |         }
    0x004c9a3f mov r13, qword [r14 + 0x38]                               |         r13 = *((r14 + 0x38));
    0x004c9a43 mov rdi, r12                                              |         
    0x004c9a46 call 0x4c99b0                                             |         BloombergLP::s_baltst::Choice1::~Choice1() (r12);
                                                                         |     } while (1);
    0x004c9a4b mov rax, qword [r13]                                      |     rax = *(r13);
    0x004c9a4f mov rdi, r13                                              |     rdi = r13;
    0x004c9a52 mov rsi, r12                                              |     rsi = r12;
    0x004c9a55 call qword [rax + 0x18]                                   |     uint64_t (*rax + 0x18)() ();
                                                                         | label_1:
    0x004c9a58 mov dword [r14 + 0x30], 0xffffffff                        |     *((r14 + 0x30)) = 0xffffffff;
    0x004c9a60 mov rax, qword [r15]                                      |     rax = *(r15);
    0x004c9a63 mov rdi, r15                                              |     rdi = r15;
    0x004c9a66 mov rsi, r14                                              |     rsi = r14;
    0x004c9a69 call qword [rax + 0x18]                                   |     uint64_t (*rax + 0x18)() ();
                                                                         | label_0:
    0x004c9a6c mov dword [rbx + 8], 0xffffffff                           |     *((rbx + 8)) = 0xffffffff;
    0x004c9a73 pop rbx                                                   |     
    0x004c9a74 pop r12                                                   |     
    0x004c9a76 pop r13                                                   |     
    0x004c9a78 pop r14                                                   |     
    0x004c9a7a pop r15                                                   |     
    0x004c9a7c ret                                                       |     return rax;
                                                                         | }
