    ; assembly                                                                                                                           | /* r2dec pseudo code output */
                                                                                                                                         | /* baljsn_encoder.t/none @ 0x4d0020 */
                                                                                                                                         | #include <stdint.h>
                                                                                                                                         |  
    ; (fcn) method.BloombergLP::s_baltst::SequenceWithAnonymityChoice.makeSelection4_BloombergLP::s_baltst::CustomInt_const_ ()          | int64_t method_BloombergLP::s_baltst::SequenceWithAnonymityChoice_makeSelection4_BloombergLP::s_baltst::CustomInt_const_ (int64_t arg2, int64_t arg1) {
                                                                                                                                         |     rsi = arg2;
                                                                                                                                         |     rdi = arg1;
                                                                                                                                         |     /* BloombergLP::s_baltst::SequenceWithAnonymityChoice::makeSelection4(BloombergLP::s_baltst::CustomInt const&) */
    0x004d0020 push r14                                                                                                                  |     
    0x004d0022 push rbx                                                                                                                  |     
    0x004d0023 push rax                                                                                                                  |     
    0x004d0024 mov r14, rsi                                                                                                              |     r14 = rsi;
    0x004d0027 mov rbx, rdi                                                                                                              |     rbx = rdi;
    0x004d002a mov eax, dword [rdi + 0x170]                                                                                              |     eax = *((rdi + 0x170));
    0x004d0030 test eax, eax                                                                                                             |     
                                                                                                                                         |     if (eax != 0) {
    0x004d0032 je 0x4d0045                                                                                                               |         
    0x004d0034 cmp eax, 2                                                                                                                |         
                                                                                                                                         |         if (eax != 2) {
    0x004d0037 je 0x4d004f                                                                                                               |             
    0x004d0039 cmp eax, 3                                                                                                                |             
                                                                                                                                         |             if (eax != 3) {
    0x004d003c jne 0x4d006b                                                                                                              |                 goto label_0;
                                                                                                                                         |             }
    0x004d003e mov eax, dword [r14]                                                                                                      |             eax = *(r14);
    0x004d0041 mov dword [rbx], eax                                                                                                      |             *(rbx) = eax;
    0x004d0043 jmp 0x4d0084                                                                                                              |             
    0x004d0045 mov rdi, rbx                                                                                                              |             
    0x004d0048 call 0x4c4be0                                                                                                             |             BloombergLP::s_baltst::Sequence6::~Sequence6() (rbx);
    0x004d004d jmp 0x4d006b                                                                                                              |             
                                                                                                                                         |         } else {
                                                                                                                                         |         } else {
    0x004d004f cmp qword [rbx + 0x20], 0x17                                                                                              |             
                                                                                                                                         |             if (*((rbx + 0x20)) != 0x17) {
    0x004d0054 je 0x4d0063                                                                                                               |                 
    0x004d0056 mov rsi, qword [rbx]                                                                                                      |                 rsi = *(rbx);
    0x004d0059 mov rdi, qword [rbx + 0x28]                                                                                               |                 rdi = *((rbx + 0x28));
    0x004d005d mov rax, qword [rdi]                                                                                                      |                 rax = *(rdi);
    0x004d0060 call qword [rax + 0x18]                                                                                                   |                 uint64_t (*rax + 0x18)() ();
                                                                                                                                         |             }
    0x004d0063 mov qword [rbx + 0x18], 0xffffffffffffffff                                                                                |             *((rbx + 0x18)) = 0xffffffffffffffff;
                                                                                                                                         |         }
                                                                                                                                         | label_0:
    0x004d006b mov dword [rbx + 0x170], 0xffffffff                                                                                       |         *((rbx + 0x170)) = 0xffffffff;
    0x004d0075 mov eax, dword [r14]                                                                                                      |         eax = *(r14);
    0x004d0078 mov dword [rbx], eax                                                                                                      |         *(rbx) = eax;
    0x004d007a mov dword [rbx + 0x170], 3                                                                                                |         *((rbx + 0x170)) = 3;
                                                                                                                                         |     }
    0x004d0084 mov rax, rbx                                                                                                              |     rax = rbx;
    0x004d0087 add rsp, 8                                                                                                                |     
    0x004d008b pop rbx                                                                                                                   |     
    0x004d008c pop r14                                                                                                                   |     
    0x004d008e ret                                                                                                                       |     return rax;
                                                                                                                                         | }
