    ; assembly                                                                   | /* r2dec pseudo code output */
                                                                                 | /* baljsn_encoder.t/assume @ 0x4b9920 */
                                                                                 | #include <stdint.h>
                                                                                 |  
    ; (fcn) method.BloombergLP::s_baltst::Choice3.makeSelection_int_ ()          | int64_t method_BloombergLP::s_baltst::Choice3_makeSelection_int_ (uint32_t arg2, int64_t arg1) {
                                                                                 |     rsi = arg2;
                                                                                 |     rdi = arg1;
                                                                                 |     /* BloombergLP::s_baltst::Choice3::makeSelection(int) */
    0x004b9920 push r14                                                          |     
    0x004b9922 push rbx                                                          |     
    0x004b9923 push rax                                                          |     
    0x004b9924 inc esi                                                           |     esi++;
    0x004b9926 cmp esi, 4                                                        |     
                                                                                 |     if (esi <= 4) {
    0x004b9929 ja 0x4b997f                                                       |         
    0x004b992b mov r14, rdi                                                      |         r14 = rdi;
                                                                                 |         /* switch table (5 cases) at 0x648d00 */
    0x004b992e jmp qword [rsi*8 + 0x648d00]                                      |         
    0x004b9935 mov eax, dword [r14 + 0x170]                                      |         eax = *((r14 + 0x170));
    0x004b993c cmp rax, 3                                                        |         
                                                                                 |         if (rax > 3) {
    0x004b9940 ja 0x4b9ae8                                                       |             goto label_0;
                                                                                 |         }
                                                                                 |         /* switch table (4 cases) at 0x648d28 */
    0x004b9946 jmp qword [rax*8 + 0x648d28]                                      |         
    0x004b994d mov rdi, r14                                                      |         
    0x004b9950 call 0x4c4a50                                                     |         BloombergLP::s_baltst::Sequence6::~Sequence6() (r14);
    0x004b9955 jmp 0x4b9ae8                                                      |         goto label_0;
    0x004b995a mov eax, dword [r14 + 0x170]                                      |         eax = *((r14 + 0x170));
    0x004b9961 cmp rax, 3                                                        |         
                                                                                 |         if (rax > 3) {
    0x004b9965 ja 0x4b9a5e                                                       |             goto label_1;
                                                                                 |         }
                                                                                 |         /* switch table (4 cases) at 0x648d48 */
    0x004b996b jmp qword [rax*8 + 0x648d48]                                      |         
    0x004b9972 mov rdi, r14                                                      |         
    0x004b9975 call 0x4c4a50                                                     |         BloombergLP::s_baltst::Sequence6::~Sequence6() (r14);
    0x004b997a jmp 0x4b9a5e                                                      |         
                                                                                 |     } else {
    0x004b997f mov ebx, 0xffffffff                                               |         ebx = 0xffffffff;
    0x004b9984 jmp 0x4b9b38                                                      |         goto label_2;
    0x004b9989 mov eax, dword [r14 + 0x170]                                      |         eax = *((r14 + 0x170));
    0x004b9990 cmp rax, 3                                                        |         
                                                                                 |         if (rax > 3) {
    0x004b9994 ja 0x4b9b11                                                       |             goto label_3;
                                                                                 |         }
                                                                                 |         /* switch table (4 cases) at 0x648da8 */
    0x004b999a jmp qword [rax*8 + 0x648da8]                                      |         
    0x004b99a1 mov rdi, r14                                                      |         
    0x004b99a4 call 0x4c4bf0                                                     |         BloombergLP::s_baltst::Sequence6::reset() (r14);
    0x004b99a9 jmp 0x4b9b36                                                      |         goto label_4;
    0x004b99ae mov eax, dword [r14 + 0x170]                                      |         eax = *((r14 + 0x170));
    0x004b99b5 cmp rax, 3                                                        |         
                                                                                 |         if (rax > 3) {
    0x004b99b9 ja 0x4b9aa6                                                       |             goto label_5;
                                                                                 |         }
                                                                                 |         /* switch table (4 cases) at 0x648d88 */
    0x004b99bf jmp qword [rax*8 + 0x648d88]                                      |         
    0x004b99c6 mov rdi, r14                                                      |         
    0x004b99c9 call 0x4c4a50                                                     |         BloombergLP::s_baltst::Sequence6::~Sequence6() (r14);
    0x004b99ce jmp 0x4b9aa6                                                      |         goto label_5;
    0x004b99d3 mov eax, dword [r14 + 0x170]                                      |         eax = *((r14 + 0x170));
    0x004b99da cmp rax, 3                                                        |         
                                                                                 |         if (rax <= 3) {
    0x004b99de ja 0x4b99ef                                                       |             
                                                                                 |             /* switch table (4 cases) at 0x648d68 */
    0x004b99e0 jmp qword [rax*8 + 0x648d68]                                      |             
    0x004b99e7 mov rdi, r14                                                      |             
    0x004b99ea call 0x4c4a50                                                     |             BloombergLP::s_baltst::Sequence6::~Sequence6() (r14);
                                                                                 |         }
    0x004b99ef mov dword [r14 + 0x170], 0xffffffff                               |         *((r14 + 0x170)) = 0xffffffff;
    0x004b99fa mov rax, qword [r14 + 0x178]                                      |         rax = *((r14 + 0x178));
    0x004b9a01 test rax, rax                                                     |         
                                                                                 |         if (rax == 0) {
    0x004b9a04 jne 0x4b9a17                                                      |             
    0x004b9a06 mov rax, qword [rip + 0x41369b]                                   |             rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x004b9a0d test rax, rax                                                     |             
                                                                                 |             if (rax != 0) {
    0x004b9a10 jne 0x4b9a17                                                      |                 goto label_6;
                                                                                 |             }
    0x004b9a12 call 0x517520                                                     |             rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                                 |         }
                                                                                 | label_6:
    0x004b9a17 mov qword [r14], 0                                                |         *(r14) = 0;
    0x004b9a1e movaps xmm0, xmmword [rip + 0x82feb]                              |         xmm0 = .comment;
    0x004b9a25 movups xmmword [r14 + 0x18], xmm0                                 |         __asm ("movups xmmword [r14 + 0x18], xmm0");
    0x004b9a2a mov qword [r14 + 0x28], rax                                       |         *((r14 + 0x28)) = rax;
    0x004b9a2e mov byte [r14], 0                                                 |         *(r14) = 0;
    0x004b9a32 mov dword [r14 + 0x170], 2                                        |         *((r14 + 0x170)) = 2;
    0x004b9a3d jmp 0x4b9b36                                                      |         goto label_4;
    0x004b9a42 cmp qword [r14 + 0x20], 0x17                                      |         
                                                                                 |         if (*((r14 + 0x20)) != 0x17) {
    0x004b9a47 je 0x4b9a56                                                       |             
    0x004b9a49 mov rsi, qword [r14]                                              |             rsi = *(r14);
    0x004b9a4c mov rdi, qword [r14 + 0x28]                                       |             rdi = *((r14 + 0x28));
    0x004b9a50 mov rax, qword [rdi]                                              |             rax = *(rdi);
    0x004b9a53 call qword [rax + 0x18]                                           |             uint64_t (*rax + 0x18)() ();
                                                                                 |         }
    0x004b9a56 mov qword [r14 + 0x18], 0xffffffffffffffff                        |         *((r14 + 0x18)) = 0xffffffffffffffff;
                                                                                 |     }
                                                                                 | label_1:
    0x004b9a5e mov dword [r14], 0                                                |     *(r14) = 0;
    0x004b9a65 mov dword [r14 + 0x170], 3                                        |     *((r14 + 0x170)) = 3;
    0x004b9a70 jmp 0x4b9b36                                                      |     goto label_4;
    0x004b9a75 mov dword [r14], 0                                                |     *(r14) = 0;
    0x004b9a7c jmp 0x4b9b36                                                      |     goto label_4;
    0x004b9a81 mov byte [r14], 0                                                 |     *(r14) = 0;
    0x004b9a85 jmp 0x4b9b36                                                      |     goto label_4;
    0x004b9a8a cmp qword [r14 + 0x20], 0x17                                      |     
                                                                                 |     if (*((r14 + 0x20)) != 0x17) {
    0x004b9a8f je 0x4b9a9e                                                       |         
    0x004b9a91 mov rsi, qword [r14]                                              |         rsi = *(r14);
    0x004b9a94 mov rdi, qword [r14 + 0x28]                                       |         rdi = *((r14 + 0x28));
    0x004b9a98 mov rax, qword [rdi]                                              |         rax = *(rdi);
    0x004b9a9b call qword [rax + 0x18]                                           |         uint64_t (*rax + 0x18)() ();
                                                                                 |     }
    0x004b9a9e mov qword [r14 + 0x18], 0xffffffffffffffff                        |     *((r14 + 0x18)) = 0xffffffffffffffff;
                                                                                 | label_5:
    0x004b9aa6 mov byte [r14], 0                                                 |     *(r14) = 0;
    0x004b9aaa mov dword [r14 + 0x170], 1                                        |     *((r14 + 0x170)) = 1;
    0x004b9ab5 jmp 0x4b9b36                                                      |     goto label_4;
    0x004b9ab7 xor ebx, ebx                                                      |     ebx = 0;
    0x004b9ab9 mov rdi, r14                                                      |     
    0x004b9abc xor esi, esi                                                      |     
    0x004b9abe mov rdx, 0xffffffffffffffff                                       |     
    0x004b9ac5 call 0x51c820                                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::erase(unsigned long,unsigned long) (r14, 0, 0xffffffffffffffff);
    0x004b9aca jmp 0x4b9b38                                                      |     goto label_2;
    0x004b9acc cmp qword [r14 + 0x20], 0x17                                      |     
                                                                                 |     if (*((r14 + 0x20)) != 0x17) {
    0x004b9ad1 je 0x4b9ae0                                                       |         
    0x004b9ad3 mov rsi, qword [r14]                                              |         rsi = *(r14);
    0x004b9ad6 mov rdi, qword [r14 + 0x28]                                       |         rdi = *((r14 + 0x28));
    0x004b9ada mov rax, qword [rdi]                                              |         rax = *(rdi);
    0x004b9add call qword [rax + 0x18]                                           |         uint64_t (*rax + 0x18)() ();
                                                                                 |     }
    0x004b9ae0 mov qword [r14 + 0x18], 0xffffffffffffffff                        |     *((r14 + 0x18)) = 0xffffffffffffffff;
                                                                                 | label_0:
    0x004b9ae8 mov dword [r14 + 0x170], 0xffffffff                               |     *((r14 + 0x170)) = 0xffffffff;
    0x004b9af3 jmp 0x4b9b36                                                      |     goto label_4;
    0x004b9af5 cmp qword [r14 + 0x20], 0x17                                      |     
                                                                                 |     if (*((r14 + 0x20)) != 0x17) {
    0x004b9afa je 0x4b9b09                                                       |         
    0x004b9afc mov rsi, qword [r14]                                              |         rsi = *(r14);
    0x004b9aff mov rdi, qword [r14 + 0x28]                                       |         rdi = *((r14 + 0x28));
    0x004b9b03 mov rax, qword [rdi]                                              |         rax = *(rdi);
    0x004b9b06 call qword [rax + 0x18]                                           |         uint64_t (*rax + 0x18)() ();
                                                                                 |     }
    0x004b9b09 mov qword [r14 + 0x18], 0xffffffffffffffff                        |     *((r14 + 0x18)) = 0xffffffffffffffff;
                                                                                 | label_3:
    0x004b9b11 mov dword [r14 + 0x170], 0xffffffff                               |     *((r14 + 0x170)) = 0xffffffff;
    0x004b9b1c mov rsi, qword [r14 + 0x178]                                      |     
    0x004b9b23 mov rdi, r14                                                      |     
    0x004b9b26 call 0x4c3140                                                     |     BloombergLP::s_baltst::Sequence6::Sequence6(BloombergLP::bslma::Allocator*) (r14, *((r14 + 0x178)));
    0x004b9b2b mov dword [r14 + 0x170], 0                                        |     *((r14 + 0x170)) = 0;
                                                                                 | label_4:
    0x004b9b36 xor ebx, ebx                                                      |     ebx = 0;
                                                                                 | label_2:
    0x004b9b38 mov eax, ebx                                                      |     eax = ebx;
    0x004b9b3a add rsp, 8                                                        |     
    0x004b9b3e pop rbx                                                           |     
    0x004b9b3f pop r14                                                           |     
    0x004b9b41 ret                                                               |     return rax;
                                                                                 | }
