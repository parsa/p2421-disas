    ; assembly                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                 | /* baljsn_encoder.t/assume @ 0x4d0120 */
                                                                                                                                 | #include <stdint.h>
                                                                                                                                 |  
    ; (fcn) method.BloombergLP::s_baltst::SequenceWithAnonymityChoice.makeSelection1_BloombergLP::s_baltst::Sequence6_ ()        | int64_t method_BloombergLP::s_baltst::SequenceWithAnonymityChoice_makeSelection1_BloombergLP::s_baltst::Sequence6_ (int64_t arg2, int64_t arg1) {
                                                                                                                                 |     rsi = arg2;
                                                                                                                                 |     rdi = arg1;
                                                                                                                                 |     /* BloombergLP::s_baltst::SequenceWithAnonymityChoice::makeSelection1(BloombergLP::s_baltst::Sequence6&&) */
    0x004d0120 push r14                                                                                                          |     
    0x004d0122 push rbx                                                                                                          |     
    0x004d0123 push rax                                                                                                          |     
    0x004d0124 mov r14, rsi                                                                                                      |     r14 = rsi;
    0x004d0127 mov rbx, rdi                                                                                                      |     rbx = rdi;
    0x004d012a mov eax, dword [rdi + 0x170]                                                                                      |     eax = *((rdi + 0x170));
    0x004d0130 cmp rax, 3                                                                                                        |     
                                                                                                                                 |     if (rax <= 3) {
    0x004d0134 ja 0x4d0166                                                                                                       |         
                                                                                                                                 |         /* switch table (4 cases) at 0x64a3c0 */
    0x004d0136 jmp qword [rax*8 + 0x64a3c0]                                                                                      |         
    0x004d013d mov rdi, rbx                                                                                                      |         
    0x004d0140 mov rsi, r14                                                                                                      |         
    0x004d0143 call 0x4ba0a0                                                                                                     |         BloombergLP::s_baltst::Sequence6::operator=(BloombergLP::s_baltst::Sequence6&&) (rbx, r14);
    0x004d0148 jmp 0x4d018c                                                                                                      |         goto label_0;
    0x004d014a cmp qword [rbx + 0x20], 0x17                                                                                      |         
                                                                                                                                 |         if (*((rbx + 0x20)) != 0x17) {
    0x004d014f je 0x4d015e                                                                                                       |             
    0x004d0151 mov rsi, qword [rbx]                                                                                              |             rsi = *(rbx);
    0x004d0154 mov rdi, qword [rbx + 0x28]                                                                                       |             rdi = *((rbx + 0x28));
    0x004d0158 mov rax, qword [rdi]                                                                                              |             rax = *(rdi);
    0x004d015b call qword [rax + 0x18]                                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                                 |         }
    0x004d015e mov qword [rbx + 0x18], 0xffffffffffffffff                                                                        |         *((rbx + 0x18)) = 0xffffffffffffffff;
                                                                                                                                 |     }
    0x004d0166 mov dword [rbx + 0x170], 0xffffffff                                                                               |     *((rbx + 0x170)) = 0xffffffff;
    0x004d0170 mov rdx, qword [rbx + 0x178]                                                                                      |     
    0x004d0177 mov rdi, rbx                                                                                                      |     
    0x004d017a mov rsi, r14                                                                                                      |     
    0x004d017d call 0x4c4110                                                                                                     |     BloombergLP::s_baltst::Sequence6::Sequence6(BloombergLP::s_baltst::Sequence6&&,BloombergLP::bslma::Allocator*) (rbx, r14, *((rbx + 0x178)));
    0x004d0182 mov dword [rbx + 0x170], 0                                                                                        |     *((rbx + 0x170)) = 0;
                                                                                                                                 | label_0:
    0x004d018c mov rax, rbx                                                                                                      |     rax = rbx;
    0x004d018f add rsp, 8                                                                                                        |     
    0x004d0193 pop rbx                                                                                                           |     
    0x004d0194 pop r14                                                                                                           |     
    0x004d0196 ret                                                                                                               |     return rax;
                                                                                                                                 | }
