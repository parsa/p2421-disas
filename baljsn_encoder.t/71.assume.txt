    ; assembly                                                                                                   | /* r2dec pseudo code output */
                                                                                                                 | /* baljsn_encoder.t/assume @ 0x4cfcc0 */
                                                                                                                 | #include <stdint.h>
                                                                                                                 |  
    ; (fcn) method.BloombergLP::s_baltst::SequenceWithAnonymityChoice.makeSelection2_unsigned_char_ ()           | int64_t method_BloombergLP::s_baltst::SequenceWithAnonymityChoice_makeSelection2_unsigned_char_ (int64_t arg2, int64_t arg1) {
                                                                                                                 |     rsi = arg2;
                                                                                                                 |     rdi = arg1;
                                                                                                                 |     /* BloombergLP::s_baltst::SequenceWithAnonymityChoice::makeSelection2(unsigned char) */
    0x004cfcc0 push rbp                                                                                          |     
    0x004cfcc1 push rbx                                                                                          |     
    0x004cfcc2 push rax                                                                                          |     
    0x004cfcc3 mov ebp, esi                                                                                      |     
    0x004cfcc5 mov rbx, rdi                                                                                      |     rbx = rdi;
    0x004cfcc8 mov eax, dword [rdi + 0x170]                                                                      |     eax = *((rdi + 0x170));
    0x004cfcce cmp rax, 3                                                                                        |     
                                                                                                                 |     if (rax <= 3) {
    0x004cfcd2 ja 0x4cfd06                                                                                       |         
                                                                                                                 |         /* switch table (4 cases) at 0x64a2a0 */
    0x004cfcd4 jmp qword [rax*8 + 0x64a2a0]                                                                      |         
    0x004cfcdb mov rdi, rbx                                                                                      |         
    0x004cfcde call 0x4c4a50                                                                                     |         BloombergLP::s_baltst::Sequence6::~Sequence6() (rbx);
    0x004cfce3 jmp 0x4cfd06                                                                                      |         goto label_0;
    0x004cfce5 mov byte [rbx], bpl                                                                               |         *(rbx) = bpl;
    0x004cfce8 jmp 0x4cfd13                                                                                      |         goto label_1;
    0x004cfcea cmp qword [rbx + 0x20], 0x17                                                                      |         
                                                                                                                 |         if (*((rbx + 0x20)) != 0x17) {
    0x004cfcef je 0x4cfcfe                                                                                       |             
    0x004cfcf1 mov rsi, qword [rbx]                                                                              |             rsi = *(rbx);
    0x004cfcf4 mov rdi, qword [rbx + 0x28]                                                                       |             rdi = *((rbx + 0x28));
    0x004cfcf8 mov rax, qword [rdi]                                                                              |             rax = *(rdi);
    0x004cfcfb call qword [rax + 0x18]                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                 |         }
    0x004cfcfe mov qword [rbx + 0x18], 0xffffffffffffffff                                                        |         *((rbx + 0x18)) = 0xffffffffffffffff;
                                                                                                                 |     }
                                                                                                                 | label_0:
    0x004cfd06 mov byte [rbx], bpl                                                                               |     *(rbx) = bpl;
    0x004cfd09 mov dword [rbx + 0x170], 1                                                                        |     *((rbx + 0x170)) = 1;
                                                                                                                 | label_1:
    0x004cfd13 mov rax, rbx                                                                                      |     rax = rbx;
    0x004cfd16 add rsp, 8                                                                                        |     
    0x004cfd1a pop rbx                                                                                           |     
    0x004cfd1b pop rbp                                                                                           |     
    0x004cfd1c ret                                                                                               |     return rax;
                                                                                                                 | }
