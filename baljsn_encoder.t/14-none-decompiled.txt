    ; assembly                                                                                                                                       | /* r2dec pseudo code output */
                                                                                                                                                     | /* baljsn_encoder.t/none @ 0x4d0ed0 */
                                                                                                                                                     | #include <stdint.h>
                                                                                                                                                     |  
    ; (fcn) method.BloombergLP::s_baltst::SequenceWithAnonymityChoice1.operator_BloombergLP::s_baltst::SequenceWithAnonymityChoice1_const_ ()        | int64_t method_BloombergLP::s_baltst::SequenceWithAnonymityChoice1_operator_BloombergLP::s_baltst::SequenceWithAnonymityChoice1_const_ (int64_t arg2, uint32_t arg1) {
                                                                                                                                                     |     rsi = arg2;
                                                                                                                                                     |     rdi = arg1;
                                                                                                                                                     |     /* BloombergLP::s_baltst::SequenceWithAnonymityChoice1::operator=(BloombergLP::s_baltst::SequenceWithAnonymityChoice1 const&) */
    0x004d0ed0 push rbp                                                                                                                              |     
    0x004d0ed1 push rbx                                                                                                                              |     
    0x004d0ed2 push rax                                                                                                                              |     
    0x004d0ed3 mov rbx, rdi                                                                                                                          |     rbx = rdi;
    0x004d0ed6 cmp rdi, rsi                                                                                                                          |     
                                                                                                                                                     |     if (rdi != rsi) {
    0x004d0ed9 je 0x4d0f56                                                                                                                           |         
    0x004d0edb mov eax, dword [rsi + 0x30]                                                                                                           |         eax = *((rsi + 0x30));
    0x004d0ede cmp eax, 1                                                                                                                            |         
                                                                                                                                                     |         if (eax != 1) {
    0x004d0ee1 je 0x4d0efb                                                                                                                           |             
    0x004d0ee3 test eax, eax                                                                                                                         |             
                                                                                                                                                     |             if (eax == 0) {
    0x004d0ee5 jne 0x4d0f05                                                                                                                          |                 
    0x004d0ee7 mov bpl, byte [rsi]                                                                                                                   |                 bpl = *(rsi);
    0x004d0eea mov eax, dword [rbx + 0x30]                                                                                                           |                 eax = *((rbx + 0x30));
    0x004d0eed cmp eax, 1                                                                                                                            |                 
                                                                                                                                                     |                 if (eax != 1) {
    0x004d0ef0 je 0x4d0f30                                                                                                                           |                     
    0x004d0ef2 test eax, eax                                                                                                                         |                     
                                                                                                                                                     |                     if (eax == 0) {
    0x004d0ef4 jne 0x4d0f4c                                                                                                                          |                         
    0x004d0ef6 mov byte [rbx], bpl                                                                                                                   |                         *(rbx) = bpl;
    0x004d0ef9 jmp 0x4d0f56                                                                                                                          |                         
                                                                                                                                                     |                     } else {
    0x004d0efb mov rdi, rbx                                                                                                                          |                         
    0x004d0efe call 0x4d0fd0                                                                                                                         |                         BloombergLP::s_baltst::SequenceWithAnonymityChoice1::makeSelection6(bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>const&) (rbx, rsi);
    0x004d0f03 jmp 0x4d0f56                                                                                                                          |                         
                                                                                                                                                     |                     } else {
    0x004d0f05 cmp dword [rbx + 0x30], 1                                                                                                             |                         
                                                                                                                                                     |                     }
                                                                                                                                                     |                     if (*((rbx + 0x30)) == 1) {
    0x004d0f09 jne 0x4d0f27                                                                                                                          |                         
    0x004d0f0b cmp qword [rbx + 0x20], 0x17                                                                                                          |                         
                                                                                                                                                     |                         if (*((rbx + 0x20)) != 0x17) {
    0x004d0f10 je 0x4d0f1f                                                                                                                           |                             
    0x004d0f12 mov rsi, qword [rbx]                                                                                                                  |                             rsi = *(rbx);
    0x004d0f15 mov rdi, qword [rbx + 0x28]                                                                                                           |                             rdi = *((rbx + 0x28));
    0x004d0f19 mov rax, qword [rdi]                                                                                                                  |                             rax = *(rdi);
    0x004d0f1c call qword [rax + 0x18]                                                                                                               |                             uint64_t (*rax + 0x18)() ();
                                                                                                                                                     |                         }
    0x004d0f1f mov qword [rbx + 0x18], 0xffffffffffffffff                                                                                            |                         *((rbx + 0x18)) = 0xffffffffffffffff;
                                                                                                                                                     |                     }
    0x004d0f27 mov dword [rbx + 0x30], 0xffffffff                                                                                                    |                     *((rbx + 0x30)) = 0xffffffff;
    0x004d0f2e jmp 0x4d0f56                                                                                                                          |                     
                                                                                                                                                     |                 } else {
    0x004d0f30 cmp qword [rbx + 0x20], 0x17                                                                                                          |                     
                                                                                                                                                     |                 }
                                                                                                                                                     |             }
                                                                                                                                                     |             if (*((rbx + 0x20)) != 0x17) {
    0x004d0f35 je 0x4d0f44                                                                                                                           |                 
    0x004d0f37 mov rsi, qword [rbx]                                                                                                                  |                 rsi = *(rbx);
    0x004d0f3a mov rdi, qword [rbx + 0x28]                                                                                                           |                 rdi = *((rbx + 0x28));
    0x004d0f3e mov rax, qword [rdi]                                                                                                                  |                 rax = *(rdi);
    0x004d0f41 call qword [rax + 0x18]                                                                                                               |                 uint64_t (*rax + 0x18)() ();
                                                                                                                                                     |             }
    0x004d0f44 mov qword [rbx + 0x18], 0xffffffffffffffff                                                                                            |             *((rbx + 0x18)) = 0xffffffffffffffff;
    0x004d0f4c mov byte [rbx], bpl                                                                                                                   |             *(rbx) = bpl;
    0x004d0f4f mov dword [rbx + 0x30], 0                                                                                                             |             *((rbx + 0x30)) = 0;
                                                                                                                                                     |         }
                                                                                                                                                     |     }
    0x004d0f56 mov rax, rbx                                                                                                                          |     rax = rbx;
    0x004d0f59 add rsp, 8                                                                                                                            |     
    0x004d0f5d pop rbx                                                                                                                               |     
    0x004d0f5e pop rbp                                                                                                                               |     
    0x004d0f5f ret                                                                                                                                   |     return rax;
                                                                                                                                                     | }
