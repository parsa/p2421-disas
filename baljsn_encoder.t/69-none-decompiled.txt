    ; assembly                                                                               | /* r2dec pseudo code output */
                                                                                             | /* baljsn_encoder.t/none @ 0x4b9550 */
                                                                                             | #include <stdint.h>
                                                                                             |  
    ; (fcn) method.BloombergLP::s_baltst::Choice3.makeSelection2_unsigned_char_ ()           | int64_t method_BloombergLP::s_baltst::Choice3_makeSelection2_unsigned_char_ (int64_t arg2, int64_t arg1) {
                                                                                             |     rsi = arg2;
                                                                                             |     rdi = arg1;
                                                                                             |     /* BloombergLP::s_baltst::Choice3::makeSelection2(unsigned char) */
    0x004b9550 push rbp                                                                      |     
    0x004b9551 push rbx                                                                      |     
    0x004b9552 push rax                                                                      |     
    0x004b9553 mov ebp, esi                                                                  |     
    0x004b9555 mov rbx, rdi                                                                  |     rbx = rdi;
    0x004b9558 mov eax, dword [rdi + 0x170]                                                  |     eax = *((rdi + 0x170));
    0x004b955e test eax, eax                                                                 |     
                                                                                             |     if (eax != 0) {
    0x004b9560 je 0x4b9571                                                                   |         
    0x004b9562 cmp eax, 2                                                                    |         
                                                                                             |         if (eax != 2) {
    0x004b9565 je 0x4b957b                                                                   |             
    0x004b9567 cmp eax, 1                                                                    |             
                                                                                             |             if (eax != 1) {
    0x004b956a jne 0x4b9597                                                                  |                 goto label_0;
                                                                                             |             }
    0x004b956c mov byte [rbx], bpl                                                           |             *(rbx) = bpl;
    0x004b956f jmp 0x4b95a4                                                                  |             
    0x004b9571 mov rdi, rbx                                                                  |             
    0x004b9574 call 0x4c4be0                                                                 |             BloombergLP::s_baltst::Sequence6::~Sequence6() (rbx);
    0x004b9579 jmp 0x4b9597                                                                  |             
                                                                                             |         } else {
                                                                                             |         } else {
    0x004b957b cmp qword [rbx + 0x20], 0x17                                                  |             
                                                                                             |             if (*((rbx + 0x20)) != 0x17) {
    0x004b9580 je 0x4b958f                                                                   |                 
    0x004b9582 mov rsi, qword [rbx]                                                          |                 rsi = *(rbx);
    0x004b9585 mov rdi, qword [rbx + 0x28]                                                   |                 rdi = *((rbx + 0x28));
    0x004b9589 mov rax, qword [rdi]                                                          |                 rax = *(rdi);
    0x004b958c call qword [rax + 0x18]                                                       |                 uint64_t (*rax + 0x18)() ();
                                                                                             |             }
    0x004b958f mov qword [rbx + 0x18], 0xffffffffffffffff                                    |             *((rbx + 0x18)) = 0xffffffffffffffff;
                                                                                             |         }
                                                                                             | label_0:
    0x004b9597 mov byte [rbx], bpl                                                           |         *(rbx) = bpl;
    0x004b959a mov dword [rbx + 0x170], 1                                                    |         *((rbx + 0x170)) = 1;
                                                                                             |     }
    0x004b95a4 mov rax, rbx                                                                  |     rax = rbx;
    0x004b95a7 add rsp, 8                                                                    |     
    0x004b95ab pop rbx                                                                       |     
    0x004b95ac pop rbp                                                                       |     
    0x004b95ad ret                                                                           |     return rax;
                                                                                             | }
