    ; assembly                                                           | /* r2dec pseudo code output */
                                                                         | /* baljsn_encoder.t/none @ 0x4bb8b0 */
                                                                         | #include <stdint.h>
                                                                         |  
    ; (fcn) method.BloombergLP::s_baltst::Sequence1.reset__ ()           | int64_t method_BloombergLP::s_baltst::Sequence1_reset_ (uint32_t arg1) {
                                                                         |     int64_t var_8h;
                                                                         |     rdi = arg1;
                                                                         |     /* BloombergLP::s_baltst::Sequence1::reset() */
    0x004bb8b0 push r15                                                  |     
    0x004bb8b2 push r14                                                  |     
    0x004bb8b4 push rbx                                                  |     
    0x004bb8b5 sub rsp, 0x10                                             |     
    0x004bb8b9 mov r14, rdi                                              |     r14 = rdi;
    0x004bb8bc cmp byte [rdi + 0x1e8], 0                                 |     
                                                                         |     if (*((rdi + 0x1e8)) != 0) {
    0x004bb8c3 je 0x4bb919                                               |         
    0x004bb8c5 mov byte [r14 + 0x1e8], 0                                 |         *((r14 + 0x1e8)) = 0;
    0x004bb8cd mov eax, dword [r14 + 0x1d8]                              |         eax = *((r14 + 0x1d8));
    0x004bb8d4 cmp eax, 2                                                |         
                                                                         |         if (eax != 2) {
    0x004bb8d7 je 0x4bb8e8                                               |             
    0x004bb8d9 test eax, eax                                             |             
                                                                         |             if (eax != 0) {
    0x004bb8db jne 0x4bb90e                                              |                 goto label_2;
                                                                         |             }
    0x004bb8dd lea rdi, [r14 + 0x68]                                     |             
    0x004bb8e1 call 0x4c4be0                                             |             BloombergLP::s_baltst::Sequence6::~Sequence6() (r14 + 0x68);
    0x004bb8e6 jmp 0x4bb90e                                              |             
                                                                         |         } else {
    0x004bb8e8 cmp qword [r14 + 0x88], 0x17                              |             
                                                                         |             if (*((r14 + 0x88)) != 0x17) {
    0x004bb8f0 je 0x4bb903                                               |                 
    0x004bb8f2 mov rsi, qword [r14 + 0x68]                               |                 rsi = *((r14 + 0x68));
    0x004bb8f6 mov rdi, qword [r14 + 0x90]                               |                 rdi = *((r14 + 0x90));
    0x004bb8fd mov rax, qword [rdi]                                      |                 rax = *(rdi);
    0x004bb900 call qword [rax + 0x18]                                   |                 uint64_t (*rax + 0x18)() ();
                                                                         |             }
    0x004bb903 mov qword [r14 + 0x80], 0xffffffffffffffff                |             *((r14 + 0x80)) = 0xffffffffffffffff;
                                                                         |         }
                                                                         | label_2:
    0x004bb90e mov dword [r14 + 0x1d8], 0xffffffff                       |         *((r14 + 0x1d8)) = 0xffffffff;
                                                                         |     }
    0x004bb919 mov rdi, qword [r14 + 0x48]                               |     rdi = *((r14 + 0x48));
    0x004bb91d mov rsi, qword [r14 + 0x50]                               |     rsi = *((r14 + 0x50));
    0x004bb921 cmp rsi, rdi                                              |     
                                                                         |     if (rsi != rdi) {
    0x004bb924 je 0x4bb941                                               |         
    0x004bb926 mov rax, qword [r14 + 0x60]                               |         rax = *((r14 + 0x60));
    0x004bb92a mov qword [rsp + 8], rax                                  |         *((rsp + 8)) = rax;
    0x004bb92f lea rdx, [rsp + 8]                                        |         rdx = rsp + 8;
    0x004bb934 call 0x4c9d60                                             |         voidBloombergLP::bslalg::ArrayDestructionPrimitives::destroy<BloombergLP::s_baltst::Choice1,bsl::allocator<BloombergLP::s_baltst::Choice1>>(BloombergLP::s_baltst::Choice1*,BloombergLP::s_baltst::Choice1*,bsl::allocator<BloombergLP::s_baltst::Choice1>) (rdi, rsi);
    0x004bb939 mov rax, qword [r14 + 0x48]                               |         rax = *((r14 + 0x48));
    0x004bb93d mov qword [r14 + 0x50], rax                               |         *((r14 + 0x50)) = rax;
                                                                         |     }
    0x004bb941 mov rdi, qword [r14 + 0x1f8]                              |     
    0x004bb948 call 0x4b86d0                                             |     BloombergLP::s_baltst::Choice2::reset() (*((r14 + 0x1f8)));
    0x004bb94d mov rbx, qword [r14 + 8]                                  |     rbx = *((r14 + 8));
    0x004bb951 mov r15, qword [r14 + 0x10]                               |     r15 = *((r14 + 0x10));
    0x004bb955 cmp r15, rbx                                              |     
                                                                         |     if (r15 == rbx) {
    0x004bb958 je 0x4bb979                                               |         goto label_3;
                                                                         |     }
    0x004bb95a nop word [rax + rax]                                      |     
                                                                         |     do {
    0x004bb960 mov rdi, rbx                                              |         
    0x004bb963 call 0x4c9b90                                             |         BloombergLP::bslstl::Optional_DataImp<BloombergLP::s_baltst::Choice1>::reset() (rbx);
    0x004bb968 add rbx, 0x28                                             |         rbx += 0x28;
    0x004bb96c cmp r15, rbx                                              |         
    0x004bb96f jne 0x4bb960                                              |         
                                                                         |     } while (r15 != rbx);
    0x004bb971 mov rax, qword [r14 + 8]                                  |     rax = *((r14 + 8));
    0x004bb975 mov qword [r14 + 0x10], rax                               |     *((r14 + 0x10)) = rax;
                                                                         | label_3:
    0x004bb979 mov rbx, qword [r14 + 0x28]                               |     rbx = *((r14 + 0x28));
    0x004bb97d mov r15, qword [r14 + 0x30]                               |     r15 = *((r14 + 0x30));
    0x004bb981 cmp r15, rbx                                              |     
                                                                         |     if (r15 != rbx) {
    0x004bb984 jne 0x4bb9ae                                              |         goto label_4;
                                                                         |     }
    0x004bb986 jmp 0x4bb9ee                                              |     goto label_5;
                                                                         | label_1:
    0x004bb990 mov qword [rbx + 0x18], 0xffffffffffffffff                |     *((rbx + 0x18)) = 0xffffffffffffffff;
                                                                         |     do {
                                                                         | label_0:
    0x004bb998 mov dword [rbx + 0x170], 0xffffffff                       |         *((rbx + 0x170)) = 0xffffffff;
    0x004bb9a2 add rbx, 0x180                                            |         rbx += 0x180;
    0x004bb9a9 cmp r15, rbx                                              |         
                                                                         |         if (r15 == rbx) {
    0x004bb9ac je 0x4bb9e6                                               |             goto label_6;
                                                                         |         }
                                                                         | label_4:
    0x004bb9ae mov eax, dword [rbx + 0x170]                              |         eax = *((rbx + 0x170));
    0x004bb9b4 cmp eax, 2                                                |         
                                                                         |         if (eax == 2) {
    0x004bb9b7 je 0x4bb9d0                                               |             goto label_7;
                                                                         |         }
    0x004bb9b9 test eax, eax                                             |         
    0x004bb9bb jne 0x4bb998                                              |         
                                                                         |     } while (eax != 0);
    0x004bb9bd mov rdi, rbx                                              |     
    0x004bb9c0 call 0x4c4be0                                             |     BloombergLP::s_baltst::Sequence6::~Sequence6() (rbx);
    0x004bb9c5 jmp 0x4bb998                                              |     goto label_0;
                                                                         | label_7:
    0x004bb9d0 cmp qword [rbx + 0x20], 0x17                              |     
                                                                         |     if (*((rbx + 0x20)) == 0x17) {
    0x004bb9d5 je 0x4bb990                                               |         goto label_1;
                                                                         |     }
    0x004bb9d7 mov rsi, qword [rbx]                                      |     rsi = *(rbx);
    0x004bb9da mov rdi, qword [rbx + 0x28]                               |     rdi = *((rbx + 0x28));
    0x004bb9de mov rax, qword [rdi]                                      |     rax = *(rdi);
    0x004bb9e1 call qword [rax + 0x18]                                   |     uint64_t (*rax + 0x18)() ();
    0x004bb9e4 jmp 0x4bb990                                              |     goto label_1;
                                                                         | label_6:
    0x004bb9e6 mov rax, qword [r14 + 0x28]                               |     rax = *((r14 + 0x28));
    0x004bb9ea mov qword [r14 + 0x30], rax                               |     *((r14 + 0x30)) = rax;
                                                                         | label_5:
    0x004bb9ee add rsp, 0x10                                             |     
    0x004bb9f2 pop rbx                                                   |     
    0x004bb9f3 pop r14                                                   |     
    0x004bb9f5 pop r15                                                   |     
    0x004bb9f7 ret                                                       |     return rax;
                                                                         | }
