    ; assembly                                                               | /* r2dec pseudo code output */
                                                                             | /* baljsn_encoder.t/assume @ 0x4b9b70 */
                                                                             | #include <stdint.h>
                                                                             |  
    ; (fcn) method.BloombergLP::s_baltst::Choice3.makeSelection1__ ()        | int64_t method_BloombergLP::s_baltst::Choice3_makeSelection1_ (int64_t arg1) {
                                                                             |     rdi = arg1;
                                                                             |     /* BloombergLP::s_baltst::Choice3::makeSelection1() */
    0x004b9b70 push rbx                                                      |     
    0x004b9b71 mov rbx, rdi                                                  |     rbx = rdi;
    0x004b9b74 mov eax, dword [rdi + 0x170]                                  |     eax = *((rdi + 0x170));
    0x004b9b7a cmp rax, 3                                                    |     
                                                                             |     if (rax <= 3) {
    0x004b9b7e ja 0x4b9bad                                                   |         
                                                                             |         /* switch table (4 cases) at 0x648dc8 */
    0x004b9b80 jmp qword [rax*8 + 0x648dc8]                                  |         
    0x004b9b87 mov rdi, rbx                                                  |         
    0x004b9b8a call 0x4c4bf0                                                 |         BloombergLP::s_baltst::Sequence6::reset() (rbx);
    0x004b9b8f jmp 0x4b9bd0                                                  |         goto label_0;
    0x004b9b91 cmp qword [rbx + 0x20], 0x17                                  |         
                                                                             |         if (*((rbx + 0x20)) != 0x17) {
    0x004b9b96 je 0x4b9ba5                                                   |             
    0x004b9b98 mov rsi, qword [rbx]                                          |             rsi = *(rbx);
    0x004b9b9b mov rdi, qword [rbx + 0x28]                                   |             rdi = *((rbx + 0x28));
    0x004b9b9f mov rax, qword [rdi]                                          |             rax = *(rdi);
    0x004b9ba2 call qword [rax + 0x18]                                       |             uint64_t (*rax + 0x18)() ();
                                                                             |         }
    0x004b9ba5 mov qword [rbx + 0x18], 0xffffffffffffffff                    |         *((rbx + 0x18)) = 0xffffffffffffffff;
                                                                             |     }
    0x004b9bad mov dword [rbx + 0x170], 0xffffffff                           |     *((rbx + 0x170)) = 0xffffffff;
    0x004b9bb7 mov rsi, qword [rbx + 0x178]                                  |     
    0x004b9bbe mov rdi, rbx                                                  |     
    0x004b9bc1 call 0x4c3140                                                 |     BloombergLP::s_baltst::Sequence6::Sequence6(BloombergLP::bslma::Allocator*) (rbx, *((rbx + 0x178)));
    0x004b9bc6 mov dword [rbx + 0x170], 0                                    |     *((rbx + 0x170)) = 0;
                                                                             | label_0:
    0x004b9bd0 mov rax, rbx                                                  |     rax = rbx;
    0x004b9bd3 pop rbx                                                       |     
    0x004b9bd4 ret                                                           |     return rax;
                                                                             | }
