    ; assembly                                                                                               | /* r2dec pseudo code output */
                                                                                                             | /* baljsn_encoder.t/none @ 0x4b99a0 */
                                                                                                             | #include <stdint.h>
                                                                                                             |  
    ; (fcn) method.BloombergLP::s_baltst::Choice3.makeSelection1_BloombergLP::s_baltst::Sequence6_ ()        | int64_t method_BloombergLP::s_baltst::Choice3_makeSelection1_BloombergLP::s_baltst::Sequence6_ (int64_t arg2, int64_t arg1) {
                                                                                                             |     rsi = arg2;
                                                                                                             |     rdi = arg1;
                                                                                                             |     /* BloombergLP::s_baltst::Choice3::makeSelection1(BloombergLP::s_baltst::Sequence6&&) */
    0x004b99a0 push r14                                                                                      |     
    0x004b99a2 push rbx                                                                                      |     
    0x004b99a3 push rax                                                                                      |     
    0x004b99a4 mov r14, rsi                                                                                  |     r14 = rsi;
    0x004b99a7 mov rbx, rdi                                                                                  |     rbx = rdi;
    0x004b99aa mov eax, dword [rdi + 0x170]                                                                  |     eax = *((rdi + 0x170));
    0x004b99b0 cmp eax, 2                                                                                    |     
                                                                                                             |     if (eax != 2) {
    0x004b99b3 je 0x4b99c6                                                                                   |         
    0x004b99b5 test eax, eax                                                                                 |         
                                                                                                             |         if (eax == 0) {
    0x004b99b7 jne 0x4b99e2                                                                                  |             
    0x004b99b9 mov rdi, rbx                                                                                  |             
    0x004b99bc mov rsi, r14                                                                                  |             
    0x004b99bf call 0x4ba330                                                                                 |             BloombergLP::s_baltst::Sequence6::operator=(BloombergLP::s_baltst::Sequence6&&) (rbx, r14);
    0x004b99c4 jmp 0x4b9a08                                                                                  |             
                                                                                                             |         } else {
    0x004b99c6 cmp qword [rbx + 0x20], 0x17                                                                  |             
                                                                                                             |             if (*((rbx + 0x20)) != 0x17) {
    0x004b99cb je 0x4b99da                                                                                   |                 
    0x004b99cd mov rsi, qword [rbx]                                                                          |                 rsi = *(rbx);
    0x004b99d0 mov rdi, qword [rbx + 0x28]                                                                   |                 rdi = *((rbx + 0x28));
    0x004b99d4 mov rax, qword [rdi]                                                                          |                 rax = *(rdi);
    0x004b99d7 call qword [rax + 0x18]                                                                       |                 uint64_t (*rax + 0x18)() ();
                                                                                                             |             }
    0x004b99da mov qword [rbx + 0x18], 0xffffffffffffffff                                                    |             *((rbx + 0x18)) = 0xffffffffffffffff;
                                                                                                             |         }
    0x004b99e2 mov dword [rbx + 0x170], 0xffffffff                                                           |         *((rbx + 0x170)) = 0xffffffff;
    0x004b99ec mov rdx, qword [rbx + 0x178]                                                                  |         
    0x004b99f3 mov rdi, rbx                                                                                  |         
    0x004b99f6 mov rsi, r14                                                                                  |         
    0x004b99f9 call 0x4c42a0                                                                                 |         BloombergLP::s_baltst::Sequence6::Sequence6(BloombergLP::s_baltst::Sequence6&&,BloombergLP::bslma::Allocator*) (rbx, r14, *((rbx + 0x178)));
    0x004b99fe mov dword [rbx + 0x170], 0                                                                    |         *((rbx + 0x170)) = 0;
                                                                                                             |     }
    0x004b9a08 mov rax, rbx                                                                                  |     rax = rbx;
    0x004b9a0b add rsp, 8                                                                                    |     
    0x004b9a0f pop rbx                                                                                       |     
    0x004b9a10 pop r14                                                                                       |     
    0x004b9a12 ret                                                                                           |     return rax;
                                                                                                             | }
