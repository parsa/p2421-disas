    ; assembly                                                   | /* r2dec pseudo code output */
                                                                 | /* bdlcc_skiplist.t/assume @ 0x407c20 */
                                                                 | #include <stdint.h>
                                                                 |  
    ; (fcn) main ()                                              | int32_t main (char ** argv, int32_t argc) {
                                                                 |     int64_t var_sp_8h;
                                                                 |     int64_t var_10h;
                                                                 |     uint32_t var_sp_18h;
                                                                 |     uint32_t var_20h;
                                                                 |     int64_t var_sp_28h;
                                                                 |     uint32_t var_sp_38h;
                                                                 |     uint32_t var_40h;
                                                                 |     int64_t var_48h;
                                                                 |     int64_t var_50h;
                                                                 |     int64_t var_58h;
                                                                 |     int64_t var_60h;
                                                                 |     signed int64_t var_68h;
                                                                 |     int64_t var_70h;
                                                                 |     uint32_t var_78h;
                                                                 |     int64_t var_80h;
                                                                 |     uint32_t var_90h;
                                                                 |     uint32_t var_98h;
                                                                 |     uint32_t var_a0h;
                                                                 |     uint32_t var_b0h;
                                                                 |     int64_t var_b8h;
                                                                 |     char * var_c0h;
                                                                 |     char * var_c8h;
                                                                 |     int64_t var_d0h;
                                                                 |     char * var_d8h;
                                                                 |     uint32_t var_e0h;
                                                                 |     char * var_e8h;
                                                                 |     int64_t var_f0h;
                                                                 |     int64_t var_f8h;
                                                                 |     int64_t var_100h;
                                                                 |     int64_t var_108h;
                                                                 |     int64_t var_110h;
                                                                 |     uint32_t var_118h;
                                                                 |     int64_t var_120h;
                                                                 |     int64_t var_130h;
                                                                 |     int64_t var_1c0h;
                                                                 |     uint32_t var_1c8h;
                                                                 |     uint32_t var_1e0h;
                                                                 |     int64_t var_1e8h;
                                                                 |     int64_t var_1f0h;
                                                                 |     int64_t var_1f8h;
                                                                 |     int64_t var_200h;
                                                                 |     uint32_t var_208h;
                                                                 |     uint32_t var_210h;
                                                                 |     int64_t var_218h;
                                                                 |     int64_t var_220h;
                                                                 |     int64_t var_230h;
                                                                 |     int64_t var_238h;
                                                                 |     int64_t var_240h;
                                                                 |     int64_t var_248h;
                                                                 |     int64_t var_250h;
                                                                 |     int64_t var_260h;
                                                                 |     char * s1;
                                                                 |     int64_t var_2c4h;
                                                                 |     int64_t var_2d0h;
                                                                 |     uint32_t var_2e0h;
                                                                 |     char * var_2e8h;
                                                                 |     int64_t var_2f0h;
                                                                 |     int64_t var_300h;
                                                                 |     int64_t var_308h;
                                                                 |     int64_t var_310h;
                                                                 |     int64_t var_320h;
                                                                 |     uint32_t var_328h;
                                                                 |     int64_t var_330h;
                                                                 |     int64_t var_348h;
                                                                 |     int64_t var_360h;
                                                                 |     int64_t var_3d0h;
                                                                 |     int64_t var_3d8h;
                                                                 |     int64_t var_410h;
                                                                 |     uint32_t var_438h;
                                                                 |     char * var_440h;
                                                                 |     uint32_t var_448h;
                                                                 |     int64_t var_450h;
                                                                 |     uint32_t var_458h;
                                                                 |     int64_t var_460h;
                                                                 |     int64_t var_480h;
                                                                 |     int64_t var_488h;
                                                                 |     int64_t var_490h;
                                                                 |     uint32_t var_498h;
                                                                 |     int64_t var_4a0h;
                                                                 |     int64_t var_4b0h;
                                                                 |     int64_t var_510h;
                                                                 |     uint32_t var_518h;
                                                                 |     int64_t var_520h;
                                                                 |     int64_t var_530h;
                                                                 |     uint32_t var_548h;
                                                                 |     int64_t var_549h;
                                                                 |     int64_t var_558h;
                                                                 |     int64_t var_560h;
                                                                 |     int64_t var_568h;
                                                                 |     int64_t var_570h;
                                                                 |     int64_t var_578h;
                                                                 |     int64_t var_580h;
                                                                 |     int64_t var_5b0h;
                                                                 |     rsi = argv;
                                                                 |     rdi = argc;
    0x00407320 push rbp                                          |     
    0x00407321 push r15                                          |     
    0x00407323 push r14                                          |     
    0x00407325 push r13                                          |     
    0x00407327 push r12                                          |     
    0x00407329 push rbx                                          |     
    0x0040732a sub rsp, 0x5b8                                    |     
    0x00407331 mov r15, rsi                                      |     r15 = rsi;
    0x00407334 mov ebx, edi                                      |     ebx = edi;
    0x00407336 xor r12d, r12d                                    |     r12d = 0;
    0x00407339 cmp edi, 2                                        |     
                                                                 |     if (edi >= 2) {
    0x0040733c jl 0x407351                                       |         
    0x0040733e mov rdi, qword [r15 + 8]                          |         
    0x00407342 xor esi, esi                                      |         
    0x00407344 mov edx, 0xa                                      |         
    0x00407349 call 0x404f50                                     |         rax = strtol (*((r15 + 8)), 0, 0xa);
    0x0040734e mov r12, rax                                      |         r12 = rax;
                                                                 |     }
    0x00407351 xor eax, eax                                      |     eax = 0;
    0x00407353 cmp ebx, 2                                        |     
    0x00407356 setg al                                           |     al = (ebx > 2) ? 1 : 0;
    0x00407359 mov dword [rip + 0x513079], eax                   |     *(obj.verbose) = eax;
    0x0040735f xor eax, eax                                      |     eax = 0;
    0x00407361 cmp ebx, 3                                        |     
    0x00407364 setg al                                           |     al = (ebx > 3) ? 1 : 0;
    0x00407367 mov dword [rip + 0x51306f], eax                   |     *(obj.veryVerbose) = eax;
    0x0040736d xor eax, eax                                      |     eax = 0;
    0x0040736f cmp ebx, 4                                        |     
    0x00407372 setg al                                           |     al = (ebx > 4) ? 1 : 0;
    0x00407375 mov dword [rip + 0x513065], eax                   |     *(obj.veryVeryVerbose) = eax;
    0x0040737b xor eax, eax                                      |     eax = 0;
    0x0040737d cmp ebx, 5                                        |     
    0x00407380 setg al                                           |     al = (ebx > 5) ? 1 : 0;
    0x00407383 mov dword [rip + 0x51305b], eax                   |     *(obj.veryVeryVeryVerbose) = eax;
    0x00407389 mov edi, 0x91a328                                 |     
    0x0040738e mov esi, 0x67b0f9                                 |     
    0x00407393 mov edx, 5                                        |     
    0x00407398 call 0x5bce00                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "TEST ", 5);
    0x0040739d mov esi, 0x67b0ff                                 |     
    0x004073a2 mov edx, 0x5a                                     |     
    0x004073a7 mov rdi, rax                                      |     
    0x004073aa call 0x5bce00                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, "/home/parsa/experiments/assumptions/crush/ccm-assume/groups/bdl/bdlcc/bdlcc_skiplist.t.cpp", 0x5a);
    0x004073af mov esi, 0x67b15a                                 |     
    0x004073b4 mov edx, 6                                        |     
    0x004073b9 mov rdi, rax                                      |     
    0x004073bc call 0x5bce00                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, " CASE ", 6);
    0x004073c1 mov rdi, rax                                      |     rdi = rax;
    0x004073c4 mov esi, r12d                                     |     esi = r12d;
    0x004073c7 call 0x405010                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x004073cc mov rbx, rax                                      |     rbx = rax;
    0x004073cf mov rax, qword [rax]                              |     rax = *(rax);
    0x004073d2 mov rsi, qword [rax - 0x18]                       |     rsi = *((rax - 0x18));
    0x004073d6 add rsi, rbx                                      |     rsi += rbx;
    0x004073d9 lea rbp, [rsp + 0x2c0]                            |     rbp = rsp + 0x2c0;
    0x004073e1 mov rdi, rbp                                      |     rdi = rbp;
    0x004073e4 call 0x405070                                     |     std::_1::ios_base::getloc()const ();
    0x004073e9 mov esi, 0x91a270                                 |     esi = obj.std::__1::ctype_char_::id;
    0x004073ee mov rdi, rbp                                      |     rdi = rbp;
    0x004073f1 call 0x4051a0                                     |     rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x004073f6 mov rcx, qword [rax]                              |     rcx = *(rax);
    0x004073f9 mov rdi, rax                                      |     rdi = rax;
    0x004073fc mov esi, 0xa                                      |     esi = 0xa;
    0x00407401 call qword [rcx + 0x38]                           |     eax = uint64_t (*rcx + 0x38)() ();
    0x00407404 mov r14d, eax                                     |     r14d = eax;
    0x00407407 lea rdi, [rsp + 0x2c0]                            |     rdi = rsp + 0x2c0;
    0x0040740f call 0x405240                                     |     std::_1::locale::~locale() ();
    0x00407414 movsx esi, r14b                                   |     esi = (int32_t) r14b;
    0x00407418 mov rdi, rbx                                      |     rdi = rbx;
    0x0040741b call 0x404e30                                     |     std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00407420 mov rdi, rbx                                      |     rdi = rbx;
    0x00407423 call 0x405040                                     |     std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x00407428 lea rdi, [rsp + 0x5b0]                            |     
    0x00407430 mov esi, 0x650c90                                 |     
    0x00407435 call 0x650d90                                     |     BloombergLP::bsls::ReviewFailureHandlerGuard::ReviewFailureHandlerGuard(void(*)(BloombergLP::bsls::ReviewViolationconst&)) (rsp + 0x5b0, method.BloombergLP::bsls::Review.failByAbort_BloombergLP::bsls::ReviewViolation_const_);
    0x0040743a lea eax, [r12 + 0x65]                             |     eax = r12 + 0x65;
    0x0040743f cmp eax, 0x80                                     |     
                                                                 |     if (eax <= 0x80) {
    0x00407444 ja 0x4074c0                                       |         
                                                                 |         /* switch table (129 cases) at 0x6771d0 */
    0x00407446 jmp qword [rax*8 + 0x6771d0]                      |         
    0x0040744d call 0x438900                                     |         TestDriver<signedchar,signedchar>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x00407452 call 0x438fa0                                     |         TestDriver<unsigned long,unsigned long>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x00407457 call 0x439640                                     |         TestDriver<BloombergLP::bsltf::TemplateTestFacility_StubClass*,BloombergLP::bsltf::TemplateTestFacility_StubClass*>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x0040745c call 0x439ce0                                     |         TestDriver<void(*)(),void(*)()>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x00407461 call 0x43a380                                     |         TestDriver<BloombergLP::bsltf::EnumeratedTestType::Enum,BloombergLP::bsltf::EnumeratedTestType::Enum>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x00407466 call 0x43aa20                                     |         TestDriver<BloombergLP::bsltf::UnionTestType,BloombergLP::bsltf::UnionTestType>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x0040746b call 0x43b0e0                                     |         TestDriver<BloombergLP::bsltf::SimpleTestType,BloombergLP::bsltf::SimpleTestType>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x00407470 call 0x43b6f0                                     |         TestDriver<BloombergLP::bsltf::AllocTestType,BloombergLP::bsltf::AllocTestType>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x00407475 call 0x43bd00                                     |         TestDriver<BloombergLP::bsltf::BitwiseCopyableTestType,BloombergLP::bsltf::BitwiseCopyableTestType>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x0040747a call 0x43c310                                     |         TestDriver<BloombergLP::bsltf::BitwiseMoveableTestType,BloombergLP::bsltf::BitwiseMoveableTestType>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x0040747f call 0x43c920                                     |         TestDriver<BloombergLP::bsltf::AllocBitwiseMoveableTestType,BloombergLP::bsltf::AllocBitwiseMoveableTestType>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x00407484 call 0x43cf30                                     |         TestDriver<BloombergLP::bsltf::MovableTestType,BloombergLP::bsltf::MovableTestType>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x00407489 call 0x43d540                                     |         TestDriver<BloombergLP::bsltf::MovableAllocTestType,BloombergLP::bsltf::MovableAllocTestType>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x0040748e call 0x43db50                                     |         TestDriver<BloombergLP::bsltf::NonTypicalOverloadsTestType,BloombergLP::bsltf::NonTypicalOverloadsTestType>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x00407493 call 0x43e160                                     |         TestDriver<int,int(BloombergLP::bsltf::TemplateTestFacility_StubClass::*)()>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x00407498 call 0x43e810                                     |         TestDriver<int,BloombergLP::bsltf::AllocTestType>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x0040749d call 0x43ee30                                     |         TestDriver<int,BloombergLP::bsltf::MovableAllocTestType>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x004074a2 call 0x43f450                                     |         TestDriver<int,BloombergLP::bsltf::SimpleTestType>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x004074a7 jmp 0x411d4d                                      |         void (*0x411d4d)() ();
    0x004074ac call 0x406120                                     |         SKIPLIST_OLD_TEST_CASES_NAMEPSACE::run() ();
    0x004074b1 jmp 0x411d4d                                      |         void (*0x411d4d)() ();
    0x004074b6 call 0x406e60                                     |         SKIPLIST_TEST_CASE_MINUS_100::run() ();
    0x004074bb jmp 0x411d4d                                      |         void (*0x411d4d)() ();
                                                                 |     }
    0x004074c0 mov edi, 0x91a280                                 |     
    0x004074c5 mov esi, 0x67bf44                                 |     
    0x004074ca mov edx, 0xf                                      |     
    0x004074cf call 0x5bce00                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cerr, "WARNING: CASE `", 0xf);
    0x004074d4 mov rdi, rax                                      |     rdi = rax;
    0x004074d7 mov esi, r12d                                     |     esi = r12d;
    0x004074da call 0x405010                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x004074df mov esi, 0x67bf54                                 |     
    0x004074e4 mov edx, 0xc                                      |     
    0x004074e9 mov rdi, rax                                      |     
    0x004074ec call 0x5bce00                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, ' NOT FOUND.", 0xc);
    0x004074f1 mov rbx, rax                                      |     rbx = rax;
    0x004074f4 mov rax, qword [rax]                              |     rax = *(rax);
    0x004074f7 mov rsi, qword [rax - 0x18]                       |     rsi = *((rax - 0x18));
    0x004074fb add rsi, rbx                                      |     rsi += rbx;
    0x004074fe lea rdi, [rsp + 0x2c0]                            |     rdi = rsp + 0x2c0;
    0x00407506 call 0x405070                                     |     std::_1::ios_base::getloc()const ();
    0x0040750b lea rdi, [rsp + 0x2c0]                            |     rdi = rsp + 0x2c0;
    0x00407513 mov esi, 0x91a270                                 |     esi = obj.std::__1::ctype_char_::id;
    0x00407518 call 0x4051a0                                     |     rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040751d mov rcx, qword [rax]                              |     rcx = *(rax);
    0x00407520 mov rdi, rax                                      |     rdi = rax;
    0x00407523 mov esi, 0xa                                      |     esi = 0xa;
    0x00407528 call qword [rcx + 0x38]                           |     eax = uint64_t (*rcx + 0x38)() ();
    0x0040752b mov ebp, eax                                      |     
    0x0040752d lea rdi, [rsp + 0x2c0]                            |     rdi = rsp + 0x2c0;
    0x00407535 call 0x405240                                     |     std::_1::locale::~locale() ();
    0x0040753a movsx esi, bpl                                    |     esi = (int32_t) bpl;
    0x0040753e mov rdi, rbx                                      |     rdi = rbx;
    0x00407541 call 0x404e30                                     |     std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00407546 mov rdi, rbx                                      |     rdi = rbx;
    0x00407549 call 0x405040                                     |     std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040754e mov dword [rip + 0x512ecc], 0xffffffff            |     *(obj._anonymous_namespace_::testStatus) = 0xffffffff;
    0x00407558 mov ebx, 0xffffffff                               |     ebx = 0xffffffff;
    0x0040755d jmp 0x411df2                                      |     void (*0x411df2)() ();
    0x00407562 cmp dword [rip + 0x512e6f], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x00407569 je 0x4076b2                                       |         
    0x0040756f mov rax, qword [rip + 0x512db2]                   |         rax = std::__1::cout;
    0x00407576 mov esi, 0x91a328                                 |         esi = std::__1::cout;
    0x0040757b add rsi, qword [rax - 0x18]                       |         rsi += *((rax - 0x18));
    0x0040757f lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00407587 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040758c lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00407594 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00407599 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040759e mov rcx, qword [rax]                              |         rcx = *(rax);
    0x004075a1 mov rdi, rax                                      |         rdi = rax;
    0x004075a4 mov esi, 0xa                                      |         esi = 0xa;
    0x004075a9 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x004075ac mov ebx, eax                                      |         ebx = eax;
    0x004075ae lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x004075b6 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x004075bb movsx esi, bl                                     |         esi = (int32_t) bl;
    0x004075be mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x004075c3 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x004075c8 mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x004075cd call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x004075d2 mov edi, 0x91a328                                 |         
    0x004075d7 mov esi, 0x67be0e                                 |         
    0x004075dc mov edx, 0xe                                      |         
    0x004075e1 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "BREATHING TEST", 0xe);
    0x004075e6 mov rbx, rax                                      |         rbx = rax;
    0x004075e9 mov rax, qword [rax]                              |         rax = *(rax);
    0x004075ec mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x004075f0 add rsi, rbx                                      |         rsi += rbx;
    0x004075f3 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x004075fb call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00407600 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00407608 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040760d call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00407612 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00407615 mov rdi, rax                                      |         rdi = rax;
    0x00407618 mov esi, 0xa                                      |         esi = 0xa;
    0x0040761d call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00407620 mov ebp, eax                                      |         
    0x00407622 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040762a call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040762f movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x00407633 mov rdi, rbx                                      |         rdi = rbx;
    0x00407636 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040763b mov rdi, rbx                                      |         rdi = rbx;
    0x0040763e call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x00407643 mov esi, 0x67b970                                 |         
    0x00407648 mov edx, 0xe                                      |         
    0x0040764d mov rdi, rbx                                      |         
    0x00407650 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rbx, 0x67b970, 0xe);
    0x00407655 mov rbx, rax                                      |         rbx = rax;
    0x00407658 mov rax, qword [rax]                              |         rax = *(rax);
    0x0040765b mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040765f add rsi, rbx                                      |         rsi += rbx;
    0x00407662 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040766a call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040766f lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00407677 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040767c call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00407681 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00407684 mov rdi, rax                                      |         rdi = rax;
    0x00407687 mov esi, 0xa                                      |         esi = 0xa;
    0x0040768c call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040768f mov ebp, eax                                      |         
    0x00407691 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00407699 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040769e movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x004076a2 mov rdi, rbx                                      |         rdi = rbx;
    0x004076a5 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x004076aa mov rdi, rbx                                      |         rdi = rbx;
    0x004076ad call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x004076b2 lea rdi, [rsp + 0xc0]                             |     
    0x004076ba call 0x649c40                                     |     BloombergLP::bdlcc::SkipList_RandomLevelGenerator::SkipList_RandomLevelGenerator() (rsp + 0xc0);
    0x004076bf mov dword [rsp + 0xc8], 0                         |     *((rsp + 0xc8)) = 0;
    0x004076ca lea rbx, [rsp + 0xe0]                             |     rbx = rsp + 0xe0;
    0x004076d2 mov rdi, rbx                                      |     rdi = rbx;
    0x004076d5 xor esi, esi                                      |     esi = 0;
    0x004076d7 call 0x404cc0                                     |     pthread_mutex_init ();
    0x004076dc mov dword [rsp + 0x108], 0                        |     *((rsp + 0x108)) = 0;
    0x004076e7 mov qword [rsp + 0x110], 0                        |     *((rsp + 0x110)) = 0;
    0x004076f3 mov rdx, qword [rip + 0x513446]                   |     rdx = BloombergLP::bslma::Default::s_defaultAllocator;
    0x004076fa test rdx, rdx                                     |     
                                                                 |     if (rdx == 0) {
    0x004076fd jne 0x407707                                      |         
    0x004076ff call 0x64e700                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x00407704 mov rdx, rax                                      |         
                                                                 |     }
    0x00407707 mov qword [rsp + 0x118], rdx                      |     *((rsp + 0x118)) = rdx;
    0x0040770f movaps xmm0, xmmword [rip + 0x272c2a]             |     xmm0 = "(8HXhx";
    0x00407716 movaps xmmword [rsp + 0x2c0], xmm0                |     *((rsp + 0x2c0)) = xmm0;
    0x0040771e movaps xmm0, xmmword [rip + 0x272c2b]             |     xmm0 = *(0x0067a350);
    0x00407725 movaps xmmword [rsp + 0x2d0], xmm0                |     *((rsp + 0x2d0)) = xmm0;
    0x0040772d movaps xmm0, xmmword [rip + 0x272c2c]             |     xmm0 = *(0x0067a360);
    0x00407734 movaps xmmword [rsp + 0x2e0], xmm0                |     *((rsp + 0x2e0)) = xmm0;
    0x0040773c movaps xmm0, xmmword [rip + 0x272c2d]             |     xmm0 = *(0x0067a370);
    0x00407743 movaps xmmword [rsp + 0x2f0], xmm0                |     *((rsp + 0x2f0)) = xmm0;
    0x0040774b movaps xmm0, xmmword [rip + 0x272c2e]             |     xmm0 = *(0x0067a380);
    0x00407752 movaps xmmword [rsp + 0x300], xmm0                |     *((rsp + 0x300)) = xmm0;
    0x0040775a movaps xmm0, xmmword [rip + 0x272c2f]             |     xmm0 = *(0x0067a390);
    0x00407761 movaps xmmword [rsp + 0x310], xmm0                |     *((rsp + 0x310)) = xmm0;
    0x00407769 movaps xmm0, xmmword [rip + 0x272c30]             |     xmm0 = *(0x0067a3a0);
    0x00407770 movaps xmmword [rsp + 0x320], xmm0                |     *((rsp + 0x320)) = xmm0;
    0x00407778 movapd xmm0, xmmword [rip + 0x272c30]             |     __asm ("movapd xmm0, xmmword [0x0067a3b0]");
    0x00407780 movapd xmmword [rsp + 0x330], xmm0                |     __asm ("movapd xmmword [rsp + 0x330], xmm0");
    0x00407789 lea rdi, [rsp + 0x2c0]                            |     
    0x00407791 mov esi, 0x20                                     |     
    0x00407796 call 0x64a120                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::createPoolManager(int*,int,BloombergLP::bslma::Allocator*) (rsp + 0x2c0, 0x20, rax);
    0x0040779b mov qword [rsp + 0x110], rax                      |     *((rsp + 0x110)) = rax;
    0x004077a3 mov rdi, rax                                      |     
    0x004077a6 mov esi, 0x1f                                     |     
    0x004077ab call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (rax, 0x1f);
    0x004077b0 mov qword [rsp + 0xd0], rax                       |     *((rsp + 0xd0)) = rax;
    0x004077b8 mov rdi, qword [rsp + 0x110]                      |     
    0x004077c0 mov esi, 0x1f                                     |     
    0x004077c5 call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x110)), 0x1f);
    0x004077ca mov qword [rsp + 0xd8], rax                       |     *((rsp + 0xd8)) = rax;
    0x004077d2 xor ecx, ecx                                      |     ecx = 0;
    0x004077d4 nop word cs:[rax + rax]                           |     
    0x004077de nop                                               |     
                                                                 |     do {
    0x004077e0 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x004077e8 mov qword [rax + rcx + 0x20], 0                   |         *((rax + rcx + 0x20)) = 0;
    0x004077f1 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x004077f9 mov rdx, qword [rsp + 0xd8]                       |         rdx = *((rsp + 0xd8));
    0x00407801 mov qword [rax + rcx + 0x18], rdx                 |         *((rax + rcx + 0x18)) = rdx;
    0x00407806 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x0040780e mov rdx, qword [rsp + 0xd8]                       |         rdx = *((rsp + 0xd8));
    0x00407816 mov qword [rdx + rcx + 0x20], rax                 |         *((rdx + rcx + 0x20)) = rax;
    0x0040781b mov rax, qword [rsp + 0xd8]                       |         rax = *((rsp + 0xd8));
    0x00407823 mov qword [rax + rcx + 0x18], 0                   |         *((rax + rcx + 0x18)) = 0;
    0x0040782c add rcx, 0x10                                     |         rcx += 0x10;
    0x00407830 cmp rcx, 0x200                                    |         
    0x00407837 jne 0x4077e0                                      |         
                                                                 |     } while (rcx != 0x200);
    0x00407839 lea r12, [rsp + 0xe0]                             |     r12 = rsp + 0xe0;
    0x00407841 mov rdi, r12                                      |     rdi = r12;
    0x00407844 call 0x4052c0                                     |     pthread_mutex_lock ();
    0x00407849 mov rax, qword [rsp + 0xd0]                       |     rax = *((rsp + 0xd0));
    0x00407851 mov rbx, qword [rsp + 0xd8]                       |     rbx = *((rsp + 0xd8));
    0x00407859 mov rbp, qword [rax + 0x18]                       |     rbp = *((rax + 0x18));
    0x0040785d mov rdi, r12                                      |     rdi = r12;
    0x00407860 call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x00407865 cmp rbx, rbp                                      |     
                                                                 |     if (rbx != rbp) {
    0x00407868 je 0x407891                                       |         
    0x0040786a call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040786f mov rbp, rax                                      |         
    0x00407872 mov rdi, rax                                      |         
    0x00407875 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040787a mov edi, 0x67cea3                                 |         edi = 0x67cea3;
    0x0040787f mov esi, 0x1698                                   |         esi = 0x1698;
    0x00407884 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00407889 mov rdi, rbp                                      |         
    0x0040788c call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbp);
                                                                 |     }
    0x00407891 mov rdi, r12                                      |     rdi = r12;
    0x00407894 call 0x4052c0                                     |     pthread_mutex_lock ();
    0x00407899 mov ebx, dword [rsp + 0x108]                      |     ebx = *((rsp + 0x108));
    0x004078a0 mov rdi, r12                                      |     rdi = r12;
    0x004078a3 call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x004078a8 test ebx, ebx                                     |     
                                                                 |     if (ebx != 0) {
    0x004078aa je 0x4078d3                                       |         
    0x004078ac call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x004078b1 mov rbp, rax                                      |         
    0x004078b4 mov rdi, rax                                      |         
    0x004078b7 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x004078bc mov edi, 0x67be1d                                 |         edi = "0 == X.length()";
    0x004078c1 mov esi, 0x1699                                   |         esi = 0x1699;
    0x004078c6 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x004078cb mov rdi, rbp                                      |         
    0x004078ce call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbp);
                                                                 |     }
    0x004078d3 lea rdi, [rsp + 0xc0]                             |     
    0x004078db call 0x649c50                                     |     eax = BloombergLP::bdlcc::SkipList_RandomLevelGenerator::randomLevel() (rsp + 0xc0);
    0x004078e0 mov ecx, dword [rsp + 0xc8]                       |     ecx = *((rsp + 0xc8));
    0x004078e7 lea esi, [rcx + 1]                                |     esi = rcx + 1;
    0x004078ea cmp ecx, eax                                      |     
                                                                 |     if (ecx >= eax) {
    0x004078ec cmovge esi, eax                                   |         esi = eax;
                                                                 |     }
    0x004078ef mov rdi, qword [rsp + 0x110]                      |     
    0x004078f7 call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x110)), rsi);
    0x004078fc mov rbp, rax                                      |     
    0x004078ff cmp qword [rsp + 0x118], 0                        |     
                                                                 |     if (*((rsp + 0x118)) == 0) {
    0x00407908 jne 0x40791b                                      |         
    0x0040790a mov rax, qword [rip + 0x51322f]                   |         rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00407911 test rax, rax                                     |         
                                                                 |         if (rax != 0) {
    0x00407914 jne 0x40791b                                      |             goto label_17;
                                                                 |         }
    0x00407916 call 0x64e700                                     |         BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |     }
                                                                 | label_17:
    0x0040791b mov dword [rbp + 0x10], 0                         |     *((rbp + 0x10)) = 0;
    0x00407922 mov qword [rbp + 8], 0x67be2d                     |     *((rbp + 8)) = 0x67be2d;
    0x0040792a mov rdi, rbp                                      |     
    0x0040792d call 0x649be0                                     |     BloombergLP::bdlcc::SkipList_Control::incrementRefCount() (rbp);
    0x00407932 mov qword [rbp + 0x18], 0                         |     *((rbp + 0x18)) = 0;
    0x0040793a lea rdi, [rsp + 0xc0]                             |     
    0x00407942 xor esi, esi                                      |     
    0x00407944 mov rdx, rbp                                      |     
    0x00407947 call 0x6497e0                                     |     BloombergLP::bdlcc::SkipList<int,char const*>::addNode(bool*,BloombergLP::bdlcc::SkipList_Node<int,char const*>*) (rsp + 0xc0, 0, rbp);
    0x0040794c mov rdi, r12                                      |     rdi = r12;
    0x0040794f call 0x4052c0                                     |     pthread_mutex_lock ();
    0x00407954 mov rax, qword [rsp + 0xd0]                       |     rax = *((rsp + 0xd0));
    0x0040795c mov rbx, qword [rsp + 0xd8]                       |     rbx = *((rsp + 0xd8));
    0x00407964 mov rbp, qword [rax + 0x18]                       |     rbp = *((rax + 0x18));
    0x00407968 mov rdi, r12                                      |     rdi = r12;
    0x0040796b call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x00407970 cmp rbx, rbp                                      |     
                                                                 |     if (rbx == rbp) {
    0x00407973 jne 0x40799c                                      |         
    0x00407975 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040797a mov rbp, rax                                      |         
    0x0040797d mov rdi, rax                                      |         
    0x00407980 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00407985 mov edi, 0x67be30                                 |         edi = "!X.isEmpty()";
    0x0040798a mov esi, 0x169b                                   |         esi = 0x169b;
    0x0040798f call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00407994 mov rdi, rbp                                      |         
    0x00407997 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbp);
                                                                 |     }
    0x0040799c mov rdi, r12                                      |     rdi = r12;
    0x0040799f call 0x4052c0                                     |     pthread_mutex_lock ();
    0x004079a4 mov ebx, dword [rsp + 0x108]                      |     ebx = *((rsp + 0x108));
    0x004079ab mov rdi, r12                                      |     rdi = r12;
    0x004079ae call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x004079b3 cmp ebx, 1                                        |     
                                                                 |     if (ebx != 1) {
    0x004079b6 je 0x4079df                                       |         
    0x004079b8 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x004079bd mov rbp, rax                                      |         
    0x004079c0 mov rdi, rax                                      |         
    0x004079c3 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x004079c8 mov edi, 0x67be3d                                 |         edi = "1 == X.length()";
    0x004079cd mov esi, 0x169c                                   |         esi = 0x169c;
    0x004079d2 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x004079d7 mov rdi, rbp                                      |         
    0x004079da call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbp);
                                                                 |     }
    0x004079df lea rdi, [rsp + 0xc0]                             |     
    0x004079e7 call 0x6499b0                                     |     rax = BloombergLP::bdlcc::SkipList<int,char const*>::popFrontImp() (rsp + 0xc0);
    0x004079ec mov r14, rax                                      |     r14 = rax;
    0x004079ef test rax, rax                                     |     
                                                                 |     if (rax == 0) {
    0x004079f2 jne 0x407a1e                                      |         
    0x004079f4 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x004079f9 mov rbp, rax                                      |         
    0x004079fc mov rdi, rax                                      |         
    0x004079ff call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00407a04 mov edi, 0x67be4d                                 |         edi = "ret==0";
    0x00407a09 mov esi, 0x169f                                   |         esi = 0x169f;
    0x00407a0e call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00407a13 mov rdi, rbp                                      |         
    0x00407a16 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbp);
    0x00407a1b xor r14d, r14d                                    |         r14d = 0;
                                                                 |     }
    0x00407a1e mov rdi, r12                                      |     rdi = r12;
    0x00407a21 call 0x4052c0                                     |     pthread_mutex_lock ();
    0x00407a26 mov rax, qword [rsp + 0xd0]                       |     rax = *((rsp + 0xd0));
    0x00407a2e mov rbx, qword [rsp + 0xd8]                       |     rbx = *((rsp + 0xd8));
    0x00407a36 mov rbp, qword [rax + 0x18]                       |     rbp = *((rax + 0x18));
    0x00407a3a mov rdi, r12                                      |     rdi = r12;
    0x00407a3d call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x00407a42 cmp rbx, rbp                                      |     
                                                                 |     if (rbx != rbp) {
    0x00407a45 je 0x407a6e                                       |         
    0x00407a47 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00407a4c mov rbp, rax                                      |         
    0x00407a4f mov rdi, rax                                      |         
    0x00407a52 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00407a57 mov edi, 0x67cea3                                 |         edi = 0x67cea3;
    0x00407a5c mov esi, 0x16a0                                   |         esi = 0x16a0;
    0x00407a61 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00407a66 mov rdi, rbp                                      |         
    0x00407a69 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbp);
                                                                 |     }
    0x00407a6e mov rdi, r12                                      |     rdi = r12;
    0x00407a71 call 0x4052c0                                     |     pthread_mutex_lock ();
    0x00407a76 mov ebx, dword [rsp + 0x108]                      |     ebx = *((rsp + 0x108));
    0x00407a7d mov rdi, r12                                      |     rdi = r12;
    0x00407a80 call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x00407a85 test ebx, ebx                                     |     
                                                                 |     if (ebx != 0) {
    0x00407a87 je 0x407b10                                       |         
    0x00407a8d call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00407a92 mov r13, rax                                      |         r13 = rax;
    0x00407a95 mov rdi, rax                                      |         
    0x00407a98 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00407a9d mov edi, 0x91a328                                 |         
    0x00407aa2 mov esi, 0x67be22                                 |         
    0x00407aa7 mov edx, 0xa                                      |         
    0x00407aac call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, 0x67be22, 0xa);
    0x00407ab1 mov esi, 0x67aff6                                 |         
    0x00407ab6 mov edx, 2                                        |         
    0x00407abb mov rdi, rax                                      |         
    0x00407abe call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67aff6, 2);
    0x00407ac3 mov rbx, rax                                      |         rbx = rax;
    0x00407ac6 mov rdi, r12                                      |         rdi = r12;
    0x00407ac9 call 0x4052c0                                     |         pthread_mutex_lock ();
    0x00407ace mov ebp, dword [rsp + 0x108]                      |         ebp = *((rsp + 0x108));
    0x00407ad5 mov rdi, r12                                      |         rdi = r12;
    0x00407ad8 call 0x4053c0                                     |         pthread_mutex_unlock ();
    0x00407add mov rdi, rbx                                      |         rdi = rbx;
    0x00407ae0 mov esi, ebp                                      |         esi = ebp;
    0x00407ae2 call 0x405010                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x00407ae7 mov esi, 0x696200                                 |         
    0x00407aec mov edx, 1                                        |         
    0x00407af1 mov rdi, rax                                      |         
    0x00407af4 call 0x5bce00                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x696200, 1);
    0x00407af9 mov edi, 0x67be1d                                 |         edi = "0 == X.length()";
    0x00407afe mov esi, 0x16a1                                   |         esi = 0x16a1;
    0x00407b03 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00407b08 mov rdi, r13                                      |         
    0x00407b0b call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r13);
                                                                 |     }
    0x00407b10 mov rbp, qword [r14 + 8]                          |     rbp = *((r14 + 8));
    0x00407b14 mov rax, qword [rip + 0x513025]                   |     rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00407b1b test rax, rax                                     |     
                                                                 |     if (rax == 0) {
    0x00407b1e jne 0x407b25                                      |         
    0x00407b20 call 0x64e700                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |     }
    0x00407b25 mov qword [rsp + 0x1f0], 0                        |     *((rsp + 0x1f0)) = 0;
    0x00407b31 movapd xmm0, xmmword [rip + 0x272887]             |     __asm ("movapd xmm0, xmmword [0x0067a3c0]");
    0x00407b39 movupd xmmword [rsp + 0x208], xmm0                |     __asm ("movupd xmmword [rsp + 0x208], xmm0");
    0x00407b42 mov qword [rsp + 0x218], rax                      |     *((rsp + 0x218)) = rax;
    0x00407b4a mov rdi, rbp                                      |     
    0x00407b4d call 0x404d40                                     |     rax = strlen (rbp);
    0x00407b52 mov qword [rsp + 0x208], 0                        |     *((rsp + 0x208)) = 0;
    0x00407b5e lea r13, [rsp + 0x1f0]                            |     r13 = rsp + 0x1f0;
    0x00407b66 mov ecx, 0x67cde6                                 |     
    0x00407b6b mov rdi, r13                                      |     
    0x00407b6e mov rsi, rbp                                      |     
    0x00407b71 mov rdx, rax                                      |     
    0x00407b74 call 0x653850                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (r13, rbp, rax, "string<...>::assign(char*...): string too long");
    0x00407b79 cmp dword [rip + 0x512858], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x00407b80 je 0x407c1e                                       |         
    0x00407b86 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00407b8b mov r12, rax                                      |         r12 = rax;
    0x00407b8e mov rdi, rax                                      |         
    0x00407b91 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00407b96 mov edi, 0x91a328                                 |         
    0x00407b9b mov esi, 0x67b2aa                                 |         
    0x00407ba0 mov edx, 4                                        |         
    0x00407ba5 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, 0x67b2aa, 4);
    0x00407baa lea rsi, [rsp + 0x1f0]                            |         
    0x00407bb2 mov rdi, rax                                      |         
    0x00407bb5 call 0x5b9ea0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&bsl::operator << <char,std::_1::char_traits<char>,bsl::allocator<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>const&) (rax, rsp + 0x1f0);
    0x00407bba mov rbp, rax                                      |         
    0x00407bbd mov rax, qword [rax]                              |         rax = *(rax);
    0x00407bc0 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x00407bc4 add rsi, rbp                                      |         rsi += rbp;
    0x00407bc7 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00407bcf call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00407bd4 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00407bdc mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00407be1 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00407be6 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00407be9 mov rdi, rax                                      |         rdi = rax;
    0x00407bec mov esi, 0xa                                      |         esi = 0xa;
    0x00407bf1 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00407bf4 mov ebx, eax                                      |         ebx = eax;
    0x00407bf6 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00407bfe call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00407c03 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x00407c06 mov rdi, rbp                                      |         rdi = rbp;
    0x00407c09 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00407c0e mov rdi, rbp                                      |         rdi = rbp;
    0x00407c11 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x00407c16 mov rdi, r12                                      |         
    0x00407c19 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r12);
                                                                 |     }
    0x00407c1e mov rdi, r14                                      |     
    0x00407c21 call 0x649ba0                                     |     eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (r14);
    0x00407c26 test eax, eax                                     |     
                                                                 |     if (eax == 0) {
    0x00407c28 jne 0x407c3a                                      |         
    0x00407c2a mov rdi, qword [rsp + 0x110]                      |         
    0x00407c32 mov rsi, r14                                      |         
    0x00407c35 call 0x64a300                                     |         BloombergLP::bdlcc::SkipList_PoolUtil::deallocate(BloombergLP::bdlcc::SkipList_PoolManager*,void*) (*((rsp + 0x110)), r14);
                                                                 |     }
    0x00407c3a cmp qword [rsp + 0x208], 2                        |     
                                                                 |     if (*((rsp + 0x208)) == 2) {
    0x00407c43 jne 0x407c64                                      |         
    0x00407c45 cmp qword [rsp + 0x210], 0x17                     |         
                                                                 |         if (*((rsp + 0x210)) != 0x17) {
    0x00407c4e je 0x407c58                                       |             
    0x00407c50 mov r13, qword [rsp + 0x1f0]                      |             r13 = *((rsp + 0x1f0));
                                                                 |         }
    0x00407c58 movzx eax, word [r13]                             |         eax = *(r13);
    0x00407c5d cmp eax, 0x6948                                   |         
                                                                 |         if (eax == 0x6948) {
    0x00407c62 je 0x407c8b                                       |             goto label_18;
                                                                 |         }
                                                                 |     }
    0x00407c64 call 0x64fbf0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00407c69 mov rbx, rax                                      |     rbx = rax;
    0x00407c6c mov rdi, rax                                      |     
    0x00407c6f call 0x64f8a0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00407c74 mov edi, 0x67be54                                 |     edi = "d==\"Hi\";
    0x00407c79 mov esi, 0x16a5                                   |     esi = 0x16a5;
    0x00407c7e call 0x405800                                     |     (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00407c83 mov rdi, rbx                                      |     
    0x00407c86 call 0x64f9f0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 | label_18:
    0x00407c8b lea rdi, [rsp + 0x440]                            |     
    0x00407c93 call 0x649c40                                     |     BloombergLP::bdlcc::SkipList_RandomLevelGenerator::SkipList_RandomLevelGenerator() (rsp + 0x440);
    0x00407c98 mov dword [rsp + 0x448], 0                        |     *((rsp + 0x448)) = 0;
    0x00407ca3 lea rbx, [rsp + 0x460]                            |     rbx = rsp + 0x460;
    0x00407cab mov rdi, rbx                                      |     rdi = rbx;
    0x00407cae xor esi, esi                                      |     esi = 0;
    0x00407cb0 call 0x404cc0                                     |     pthread_mutex_init ();
    0x00407cb5 mov dword [rsp + 0x488], 0                        |     *((rsp + 0x488)) = 0;
    0x00407cc0 mov qword [rsp + 0x490], 0                        |     *((rsp + 0x490)) = 0;
    0x00407ccc mov rdx, qword [rip + 0x512e6d]                   |     rdx = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00407cd3 test rdx, rdx                                     |     
                                                                 |     if (rdx == 0) {
    0x00407cd6 jne 0x407ce0                                      |         
    0x00407cd8 call 0x64e700                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x00407cdd mov rdx, rax                                      |         
                                                                 |     }
    0x00407ce0 mov qword [rsp + 0x498], rdx                      |     *((rsp + 0x498)) = rdx;
    0x00407ce8 movaps xmm0, xmmword [rip + 0x2726e1]             |     xmm0 = *(0x0067a3d0);
    0x00407cef movaps xmmword [rsp + 0x2c0], xmm0                |     *((rsp + 0x2c0)) = xmm0;
    0x00407cf7 movaps xmm0, xmmword [rip + 0x2726e2]             |     xmm0 = *(0x0067a3e0);
    0x00407cfe movaps xmmword [rsp + 0x2d0], xmm0                |     *((rsp + 0x2d0)) = xmm0;
    0x00407d06 movaps xmm0, xmmword [rip + 0x2726e3]             |     xmm0 = *(0x0067a3f0);
    0x00407d0d movaps xmmword [rsp + 0x2e0], xmm0                |     *((rsp + 0x2e0)) = xmm0;
    0x00407d15 movaps xmm0, xmmword [rip + 0x2726e4]             |     xmm0 = *(0x0067a400);
    0x00407d1c movaps xmmword [rsp + 0x2f0], xmm0                |     *((rsp + 0x2f0)) = xmm0;
    0x00407d24 movaps xmm0, xmmword [rip + 0x2726e5]             |     xmm0 = *(0x0067a410);
    0x00407d2b movaps xmmword [rsp + 0x300], xmm0                |     *((rsp + 0x300)) = xmm0;
    0x00407d33 movaps xmm0, xmmword [rip + 0x2726e6]             |     xmm0 = *(0x0067a420);
    0x00407d3a movaps xmmword [rsp + 0x310], xmm0                |     *((rsp + 0x310)) = xmm0;
    0x00407d42 movaps xmm0, xmmword [rip + 0x2726e7]             |     xmm0 = *(0x0067a430);
    0x00407d49 movaps xmmword [rsp + 0x320], xmm0                |     *((rsp + 0x320)) = xmm0;
    0x00407d51 movapd xmm0, xmmword [rip + 0x2726e7]             |     __asm ("movapd xmm0, xmmword [0x0067a440]");
    0x00407d59 movapd xmmword [rsp + 0x330], xmm0                |     __asm ("movapd xmmword [rsp + 0x330], xmm0");
    0x00407d62 lea rdi, [rsp + 0x2c0]                            |     
    0x00407d6a mov esi, 0x20                                     |     
    0x00407d6f call 0x64a120                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::createPoolManager(int*,int,BloombergLP::bslma::Allocator*) (rsp + 0x2c0, 0x20, rax);
    0x00407d74 mov qword [rsp + 0x490], rax                      |     *((rsp + 0x490)) = rax;
    0x00407d7c mov rdi, rax                                      |     
    0x00407d7f mov esi, 0x1f                                     |     
    0x00407d84 call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (rax, 0x1f);
    0x00407d89 mov qword [rsp + 0x450], rax                      |     *((rsp + 0x450)) = rax;
    0x00407d91 mov rdi, qword [rsp + 0x490]                      |     
    0x00407d99 mov esi, 0x1f                                     |     
    0x00407d9e call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x490)), 0x1f);
    0x00407da3 mov qword [rsp + 0x458], rax                      |     *((rsp + 0x458)) = rax;
    0x00407dab xor ecx, ecx                                      |     ecx = 0;
    0x00407dad nop dword [rax]                                   |     
                                                                 |     do {
    0x00407db0 mov rax, qword [rsp + 0x450]                      |         rax = *((rsp + 0x450));
    0x00407db8 mov qword [rax + rcx + 0x48], 0                   |         *((rax + rcx + 0x48)) = 0;
    0x00407dc1 mov rax, qword [rsp + 0x450]                      |         rax = *((rsp + 0x450));
    0x00407dc9 mov rdx, qword [rsp + 0x458]                      |         rdx = *((rsp + 0x458));
    0x00407dd1 mov qword [rax + rcx + 0x40], rdx                 |         *((rax + rcx + 0x40)) = rdx;
    0x00407dd6 mov rax, qword [rsp + 0x450]                      |         rax = *((rsp + 0x450));
    0x00407dde mov rdx, qword [rsp + 0x458]                      |         rdx = *((rsp + 0x458));
    0x00407de6 mov qword [rdx + rcx + 0x48], rax                 |         *((rdx + rcx + 0x48)) = rax;
    0x00407deb mov rax, qword [rsp + 0x458]                      |         rax = *((rsp + 0x458));
    0x00407df3 mov qword [rax + rcx + 0x40], 0                   |         *((rax + rcx + 0x40)) = 0;
    0x00407dfc add rcx, 0x10                                     |         rcx += 0x10;
    0x00407e00 cmp rcx, 0x200                                    |         
    0x00407e07 jne 0x407db0                                      |         
                                                                 |     } while (rcx != 0x200);
    0x00407e09 lea r14, [rsp + 0x460]                            |     r14 = rsp + 0x460;
    0x00407e11 mov rdi, r14                                      |     rdi = r14;
    0x00407e14 call 0x4052c0                                     |     pthread_mutex_lock ();
    0x00407e19 mov rax, qword [rsp + 0x450]                      |     rax = *((rsp + 0x450));
    0x00407e21 mov rbx, qword [rsp + 0x458]                      |     rbx = *((rsp + 0x458));
    0x00407e29 mov rbp, qword [rax + 0x40]                       |     rbp = *((rax + 0x40));
    0x00407e2d mov rdi, r14                                      |     rdi = r14;
    0x00407e30 call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x00407e35 cmp rbx, rbp                                      |     
                                                                 |     if (rbx != rbp) {
    0x00407e38 je 0x407e61                                       |         
    0x00407e3a call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00407e3f mov rbx, rax                                      |         rbx = rax;
    0x00407e42 mov rdi, rax                                      |         
    0x00407e45 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00407e4a mov edi, 0x67be6e                                 |         edi = 0x67be6e;
    0x00407e4f mov esi, 0x16aa                                   |         esi = 0x16aa;
    0x00407e54 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00407e59 mov rdi, rbx                                      |         
    0x00407e5c call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x00407e61 mov dword [rsp + 8], 3                            |     *((rsp + 8)) = 3;
    0x00407e69 mov rax, qword [rip + 0x512cd0]                   |     rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00407e70 test rax, rax                                     |     
                                                                 |     if (rax == 0) {
    0x00407e73 jne 0x407e7a                                      |         
    0x00407e75 call 0x64e700                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |     }
    0x00407e7a mov qword [rsp + 0x2c0], 0                        |     *((rsp + 0x2c0)) = 0;
    0x00407e86 mov qword [rsp + 0x2e8], rax                      |     *((rsp + 0x2e8)) = rax;
    0x00407e8e movapd xmm0, xmmword [rip + 0x27252a]             |     __asm ("movapd xmm0, xmmword [0x0067a3c0]");
    0x00407e96 movupd xmmword [rsp + 0x2d8], xmm0                |     __asm ("movupd xmmword [rsp + 0x2d8], xmm0");
    0x00407e9f lea rdi, [rsp + 0x2c0]                            |     
    0x00407ea7 mov esi, 0x67dac8                                 |     
    0x00407eac mov edx, 1                                        |     
    0x00407eb1 mov ecx, 0x67cde6                                 |     
    0x00407eb6 call 0x653850                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rsp + 0x2c0, 0x67dac8, 1, "string<...>::assign(char*...): string too long");
    0x00407ebb lea rdi, [rsp + 0x440]                            |     
    0x00407ec3 call 0x649c50                                     |     eax = BloombergLP::bdlcc::SkipList_RandomLevelGenerator::randomLevel() (rsp + 0x440);
    0x00407ec8 lea rdi, [rsp + 0x440]                            |     
    0x00407ed0 lea rdx, [rsp + 8]                                |     
    0x00407ed5 lea rcx, [rsp + 0x2c0]                            |     
    0x00407edd mov esi, eax                                      |     
    0x00407edf call 0x5e9830                                     |     rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::allocateNode(int,intconst&,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>const&) (rsp + 0x440, eax, rsp + 8, rsp + 0x2c0);
    0x00407ee4 lea rdi, [rsp + 0x440]                            |     
    0x00407eec xor esi, esi                                      |     
    0x00407eee mov rdx, rax                                      |     
    0x00407ef1 call 0x5e9c40                                     |     BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::addNode(bool*,BloombergLP::bdlcc::SkipList_Node<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*) (rsp + 0x440, 0, rax);
    0x00407ef6 cmp qword [rsp + 0x2e0], 0x17                     |     
                                                                 |     if (*((rsp + 0x2e0)) != 0x17) {
    0x00407eff je 0x407f17                                       |         
    0x00407f01 mov rsi, qword [rsp + 0x2c0]                      |         rsi = *((rsp + 0x2c0));
    0x00407f09 mov rdi, qword [rsp + 0x2e8]                      |         rdi = *((rsp + 0x2e8));
    0x00407f11 mov rax, qword [rdi]                              |         rax = *(rdi);
    0x00407f14 call qword [rax + 0x18]                           |         uint64_t (*rax + 0x18)() ();
                                                                 |     }
    0x00407f17 mov dword [rsp + 8], 2                            |     *((rsp + 8)) = 2;
    0x00407f1f mov rax, qword [rip + 0x512c1a]                   |     rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00407f26 test rax, rax                                     |     
                                                                 |     if (rax == 0) {
    0x00407f29 jne 0x407f30                                      |         
    0x00407f2b call 0x64e700                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |     }
    0x00407f30 mov qword [rsp + 0x2c0], 0                        |     *((rsp + 0x2c0)) = 0;
    0x00407f3c mov qword [rsp + 0x2e8], rax                      |     *((rsp + 0x2e8)) = rax;
    0x00407f44 movapd xmm0, xmmword [rip + 0x272474]             |     __asm ("movapd xmm0, xmmword [0x0067a3c0]");
    0x00407f4c movupd xmmword [rsp + 0x2d8], xmm0                |     __asm ("movupd xmmword [rsp + 0x2d8], xmm0");
    0x00407f55 lea rdi, [rsp + 0x2c0]                            |     
    0x00407f5d mov esi, 0x67d1db                                 |     
    0x00407f62 mov edx, 1                                        |     
    0x00407f67 mov ecx, 0x67cde6                                 |     
    0x00407f6c call 0x653850                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rsp + 0x2c0, 0x67d1db, 1, "string<...>::assign(char*...): string too long");
    0x00407f71 lea rdi, [rsp + 0x440]                            |     
    0x00407f79 call 0x649c50                                     |     eax = BloombergLP::bdlcc::SkipList_RandomLevelGenerator::randomLevel() (rsp + 0x440);
    0x00407f7e lea rdi, [rsp + 0x440]                            |     
    0x00407f86 lea rdx, [rsp + 8]                                |     
    0x00407f8b lea rcx, [rsp + 0x2c0]                            |     
    0x00407f93 mov esi, eax                                      |     
    0x00407f95 call 0x5e9830                                     |     rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::allocateNode(int,intconst&,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>const&) (rsp + 0x440, eax, rsp + 8, rsp + 0x2c0);
    0x00407f9a lea rdi, [rsp + 0x440]                            |     
    0x00407fa2 xor esi, esi                                      |     
    0x00407fa4 mov rdx, rax                                      |     
    0x00407fa7 call 0x5e9c40                                     |     BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::addNode(bool*,BloombergLP::bdlcc::SkipList_Node<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*) (rsp + 0x440, 0, rax);
    0x00407fac cmp qword [rsp + 0x2e0], 0x17                     |     
                                                                 |     if (*((rsp + 0x2e0)) != 0x17) {
    0x00407fb5 je 0x407fcd                                       |         
    0x00407fb7 mov rsi, qword [rsp + 0x2c0]                      |         rsi = *((rsp + 0x2c0));
    0x00407fbf mov rdi, qword [rsp + 0x2e8]                      |         rdi = *((rsp + 0x2e8));
    0x00407fc7 mov rax, qword [rdi]                              |         rax = *(rdi);
    0x00407fca call qword [rax + 0x18]                           |         uint64_t (*rax + 0x18)() ();
                                                                 |     }
    0x00407fcd mov dword [rsp + 8], 0                            |     *((rsp + 8)) = 0;
    0x00407fd5 mov rax, qword [rip + 0x512b64]                   |     rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00407fdc test rax, rax                                     |     
                                                                 |     if (rax == 0) {
    0x00407fdf jne 0x407fe6                                      |         
    0x00407fe1 call 0x64e700                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |     }
    0x00407fe6 mov qword [rsp + 0x2c0], 0                        |     *((rsp + 0x2c0)) = 0;
    0x00407ff2 mov qword [rsp + 0x2e8], rax                      |     *((rsp + 0x2e8)) = rax;
    0x00407ffa movapd xmm0, xmmword [rip + 0x2723be]             |     __asm ("movapd xmm0, xmmword [0x0067a3c0]");
    0x00408002 movupd xmmword [rsp + 0x2d8], xmm0                |     __asm ("movupd xmmword [rsp + 0x2d8], xmm0");
    0x0040800b lea rdi, [rsp + 0x2c0]                            |     
    0x00408013 mov esi, 0x67b3ff                                 |     
    0x00408018 mov edx, 1                                        |     
    0x0040801d mov ecx, 0x67cde6                                 |     
    0x00408022 call 0x653850                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rsp + 0x2c0, 0x67b3ff, 1, "string<...>::assign(char*...): string too long");
    0x00408027 lea rdi, [rsp + 0x440]                            |     
    0x0040802f call 0x649c50                                     |     eax = BloombergLP::bdlcc::SkipList_RandomLevelGenerator::randomLevel() (rsp + 0x440);
    0x00408034 lea rdi, [rsp + 0x440]                            |     
    0x0040803c lea rdx, [rsp + 8]                                |     
    0x00408041 lea rcx, [rsp + 0x2c0]                            |     
    0x00408049 mov esi, eax                                      |     
    0x0040804b call 0x5e9830                                     |     rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::allocateNode(int,intconst&,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>const&) (rsp + 0x440, eax, rsp + 8, rsp + 0x2c0);
    0x00408050 lea rdi, [rsp + 0x440]                            |     
    0x00408058 xor esi, esi                                      |     
    0x0040805a mov rdx, rax                                      |     
    0x0040805d call 0x5e9c40                                     |     BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::addNode(bool*,BloombergLP::bdlcc::SkipList_Node<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*) (rsp + 0x440, 0, rax);
    0x00408062 cmp qword [rsp + 0x2e0], 0x17                     |     
                                                                 |     if (*((rsp + 0x2e0)) != 0x17) {
    0x0040806b je 0x408083                                       |         
    0x0040806d mov rsi, qword [rsp + 0x2c0]                      |         rsi = *((rsp + 0x2c0));
    0x00408075 mov rdi, qword [rsp + 0x2e8]                      |         rdi = *((rsp + 0x2e8));
    0x0040807d mov rax, qword [rdi]                              |         rax = *(rdi);
    0x00408080 call qword [rax + 0x18]                           |         uint64_t (*rax + 0x18)() ();
                                                                 |     }
    0x00408083 mov dword [rsp + 8], 1                            |     *((rsp + 8)) = 1;
    0x0040808b mov rax, qword [rip + 0x512aae]                   |     rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00408092 test rax, rax                                     |     
                                                                 |     if (rax == 0) {
    0x00408095 jne 0x40809c                                      |         
    0x00408097 call 0x64e700                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |     }
    0x0040809c mov qword [rsp + 0x2c0], 0                        |     *((rsp + 0x2c0)) = 0;
    0x004080a8 mov qword [rsp + 0x2e8], rax                      |     *((rsp + 0x2e8)) = rax;
    0x004080b0 movapd xmm0, xmmword [rip + 0x272308]             |     __asm ("movapd xmm0, xmmword [0x0067a3c0]");
    0x004080b8 movupd xmmword [rsp + 0x2d8], xmm0                |     __asm ("movupd xmmword [rsp + 0x2d8], xmm0");
    0x004080c1 lea rdi, [rsp + 0x2c0]                            |     
    0x004080c9 mov esi, 0x67d1be                                 |     
    0x004080ce mov edx, 1                                        |     
    0x004080d3 mov ecx, 0x67cde6                                 |     
    0x004080d8 call 0x653850                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rsp + 0x2c0, 0x67d1be, 1, "string<...>::assign(char*...): string too long");
    0x004080dd lea rdi, [rsp + 0x440]                            |     
    0x004080e5 call 0x649c50                                     |     eax = BloombergLP::bdlcc::SkipList_RandomLevelGenerator::randomLevel() (rsp + 0x440);
    0x004080ea lea rdi, [rsp + 0x440]                            |     
    0x004080f2 lea rdx, [rsp + 8]                                |     
    0x004080f7 lea rcx, [rsp + 0x2c0]                            |     
    0x004080ff mov esi, eax                                      |     
    0x00408101 call 0x5e9830                                     |     rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::allocateNode(int,intconst&,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>const&) (rsp + 0x440, eax, rsp + 8, rsp + 0x2c0);
    0x00408106 lea rdi, [rsp + 0x440]                            |     
    0x0040810e xor esi, esi                                      |     
    0x00408110 mov rdx, rax                                      |     
    0x00408113 call 0x5e9c40                                     |     BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::addNode(bool*,BloombergLP::bdlcc::SkipList_Node<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*) (rsp + 0x440, 0, rax);
    0x00408118 cmp qword [rsp + 0x2e0], 0x17                     |     
                                                                 |     if (*((rsp + 0x2e0)) != 0x17) {
    0x00408121 je 0x408139                                       |         
    0x00408123 mov rsi, qword [rsp + 0x2c0]                      |         rsi = *((rsp + 0x2c0));
    0x0040812b mov rdi, qword [rsp + 0x2e8]                      |         rdi = *((rsp + 0x2e8));
    0x00408133 mov rax, qword [rdi]                              |         rax = *(rdi);
    0x00408136 call qword [rax + 0x18]                           |         uint64_t (*rax + 0x18)() ();
                                                                 |     }
    0x00408139 mov rdi, r14                                      |     rdi = r14;
    0x0040813c call 0x4052c0                                     |     pthread_mutex_lock ();
    0x00408141 mov ebx, dword [rsp + 0x488]                      |     ebx = *((rsp + 0x488));
    0x00408148 mov rdi, r14                                      |     rdi = r14;
    0x0040814b call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x00408150 cmp ebx, 4                                        |     
                                                                 |     if (ebx != 4) {
    0x00408153 je 0x40817c                                       |         
    0x00408155 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040815a mov rbx, rax                                      |         rbx = rax;
    0x0040815d mov rdi, rax                                      |         
    0x00408160 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00408165 mov edi, 0x67be5c                                 |         edi = "4 == X2.length()";
    0x0040816a mov esi, 0x16af                                   |         esi = 0x16af;
    0x0040816f call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00408174 mov rdi, rbx                                      |         
    0x00408177 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040817c mov rdi, r14                                      |     rdi = r14;
    0x0040817f call 0x4052c0                                     |     pthread_mutex_lock ();
    0x00408184 mov rax, qword [rsp + 0x450]                      |     rax = *((rsp + 0x450));
    0x0040818c mov rbx, qword [rsp + 0x458]                      |     rbx = *((rsp + 0x458));
    0x00408194 mov rbp, qword [rax + 0x40]                       |     rbp = *((rax + 0x40));
    0x00408198 mov rdi, r14                                      |     rdi = r14;
    0x0040819b call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x004081a0 cmp rbx, rbp                                      |     
                                                                 |     if (rbx == rbp) {
    0x004081a3 jne 0x4081cc                                      |         
    0x004081a5 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x004081aa mov rbx, rax                                      |         rbx = rax;
    0x004081ad mov rdi, rax                                      |         
    0x004081b0 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x004081b5 mov edi, 0x67be6d                                 |         edi = "!X2.isEmpty()";
    0x004081ba mov esi, 0x16b0                                   |         esi = 0x16b0;
    0x004081bf call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x004081c4 mov rdi, rbx                                      |         
    0x004081c7 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x004081cc lea rdi, [rsp + 0x440]                            |     
    0x004081d4 call 0x5e9b60                                     |     rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::popFrontImp() (rsp + 0x440);
    0x004081d9 mov r15, rax                                      |     r15 = rax;
    0x004081dc mov rdi, r14                                      |     rdi = r14;
    0x004081df call 0x4052c0                                     |     pthread_mutex_lock ();
    0x004081e4 mov ebx, dword [rsp + 0x488]                      |     ebx = *((rsp + 0x488));
    0x004081eb mov rdi, r14                                      |     rdi = r14;
    0x004081ee call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x004081f3 cmp ebx, 3                                        |     
                                                                 |     if (ebx != 3) {
    0x004081f6 je 0x40827f                                       |         
    0x004081fc call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00408201 mov r12, rax                                      |         r12 = rax;
    0x00408204 mov rdi, rax                                      |         
    0x00408207 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040820c mov edi, 0x91a328                                 |         
    0x00408211 mov esi, 0x67bf20                                 |         
    0x00408216 mov edx, 0xb                                      |         
    0x0040821b call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, 0x67bf20, 0xb);
    0x00408220 mov esi, 0x67aff6                                 |         
    0x00408225 mov edx, 2                                        |         
    0x0040822a mov rdi, rax                                      |         
    0x0040822d call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67aff6, 2);
    0x00408232 mov rbx, rax                                      |         rbx = rax;
    0x00408235 mov rdi, r14                                      |         rdi = r14;
    0x00408238 call 0x4052c0                                     |         pthread_mutex_lock ();
    0x0040823d mov ebp, dword [rsp + 0x488]                      |         ebp = *((rsp + 0x488));
    0x00408244 mov rdi, r14                                      |         rdi = r14;
    0x00408247 call 0x4053c0                                     |         pthread_mutex_unlock ();
    0x0040824c mov rdi, rbx                                      |         rdi = rbx;
    0x0040824f mov esi, ebp                                      |         esi = ebp;
    0x00408251 call 0x405010                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x00408256 mov esi, 0x696200                                 |         
    0x0040825b mov edx, 1                                        |         
    0x00408260 mov rdi, rax                                      |         
    0x00408263 call 0x5bce00                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x696200, 1);
    0x00408268 mov edi, 0x67be7b                                 |         edi = "3 == X2.length()";
    0x0040826d mov esi, 0x16b4                                   |         esi = 0x16b4;
    0x00408272 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00408277 mov rdi, r12                                      |         
    0x0040827a call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r12);
                                                                 |     }
    0x0040827f test r15, r15                                     |     
                                                                 |     if (r15 == 0) {
    0x00408282 jne 0x4082ab                                      |         
    0x00408284 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00408289 mov rbx, rax                                      |         rbx = rax;
    0x0040828c mov rdi, rax                                      |         
    0x0040828f call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00408294 mov edi, 0x67be4d                                 |         edi = "ret==0";
    0x00408299 mov esi, 0x16b5                                   |         esi = 0x16b5;
    0x0040829e call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x004082a3 mov rdi, rbx                                      |         
    0x004082a6 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x004082ab cmp dword [rip + 0x512126], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x004082b2 je 0x4083f1                                       |         
    0x004082b8 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x004082bd mov r12, rax                                      |         r12 = rax;
    0x004082c0 mov rdi, rax                                      |         
    0x004082c3 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x004082c8 mov edi, 0x91a328                                 |         
    0x004082cd mov esi, 0x67be8c                                 |         
    0x004082d2 mov edx, 0xd                                      |         
    0x004082d7 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "h2->data() = ", 0xd);
    0x004082dc lea rsi, [r15 + 8]                                |         
    0x004082e0 mov rdi, rax                                      |         
    0x004082e3 call 0x5b9ea0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&bsl::operator << <char,std::_1::char_traits<char>,bsl::allocator<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>const&) (rax, r15 + 8);
    0x004082e8 mov rbx, rax                                      |         rbx = rax;
    0x004082eb mov rax, qword [rax]                              |         rax = *(rax);
    0x004082ee mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x004082f2 add rsi, rbx                                      |         rsi += rbx;
    0x004082f5 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x004082fd call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00408302 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040830a mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040830f call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00408314 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00408317 mov rdi, rax                                      |         rdi = rax;
    0x0040831a mov esi, 0xa                                      |         esi = 0xa;
    0x0040831f call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00408322 mov r13d, eax                                     |         r13d = eax;
    0x00408325 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040832d call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00408332 movsx esi, r13b                                   |         esi = (int32_t) r13b;
    0x00408336 mov rdi, rbx                                      |         rdi = rbx;
    0x00408339 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040833e mov rdi, rbx                                      |         rdi = rbx;
    0x00408341 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x00408346 mov rdi, r12                                      |         
    0x00408349 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r12);
    0x0040834e cmp dword [rip + 0x512083], 0                     |         
                                                                 |         if (*(obj.verbose) == 0) {
    0x00408355 je 0x4083f1                                       |             goto label_19;
                                                                 |         }
    0x0040835b call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00408360 mov r12, rax                                      |         r12 = rax;
    0x00408363 mov rdi, rax                                      |         
    0x00408366 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040836b mov edi, 0x91a328                                 |         
    0x00408370 mov esi, 0x67be9a                                 |         
    0x00408375 mov edx, 0xc                                      |         
    0x0040837a call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "h2->key() = ", 0xc);
    0x0040837f mov esi, dword [r15 + 0x38]                       |         esi = *((r15 + 0x38));
    0x00408383 mov rdi, rax                                      |         rdi = rax;
    0x00408386 call 0x405010                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040838b mov rbx, rax                                      |         rbx = rax;
    0x0040838e mov rax, qword [rax]                              |         rax = *(rax);
    0x00408391 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x00408395 add rsi, rbx                                      |         rsi += rbx;
    0x00408398 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x004083a0 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x004083a5 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x004083ad mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x004083b2 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x004083b7 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x004083ba mov rdi, rax                                      |         rdi = rax;
    0x004083bd mov esi, 0xa                                      |         esi = 0xa;
    0x004083c2 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x004083c5 mov r13d, eax                                     |         r13d = eax;
    0x004083c8 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x004083d0 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x004083d5 movsx esi, r13b                                   |         esi = (int32_t) r13b;
    0x004083d9 mov rdi, rbx                                      |         rdi = rbx;
    0x004083dc call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x004083e1 mov rdi, rbx                                      |         rdi = rbx;
    0x004083e4 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x004083e9 mov rdi, r12                                      |         
    0x004083ec call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r12);
                                                                 |     }
                                                                 | label_19:
    0x004083f1 cmp qword [r15 + 0x20], 1                         |     
                                                                 |     if (*((r15 + 0x20)) != 1) {
    0x004083f6 jne 0x40dc00                                      |         goto label_20;
                                                                 |     }
    0x004083fc cmp qword [r15 + 0x28], 0x17                      |     
                                                                 |     if (*((r15 + 0x28)) == 0x17) {
    0x00408401 je 0x40dbf4                                       |         goto label_21;
                                                                 |     }
    0x00408407 mov rax, qword [r15 + 8]                          |     rax = *((r15 + 8));
    0x0040840b jmp 0x40dbfb                                      |     goto label_22;
    0x00408410 cmp dword [rip + 0x511fc1], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x00408417 je 0x408560                                       |         
    0x0040841d mov rax, qword [rip + 0x511f04]                   |         rax = std::__1::cout;
    0x00408424 mov esi, 0x91a328                                 |         esi = std::__1::cout;
    0x00408429 add rsi, qword [rax - 0x18]                       |         rsi += *((rax - 0x18));
    0x0040842d lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00408435 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040843a lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00408442 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00408447 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040844c mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040844f mov rdi, rax                                      |         rdi = rax;
    0x00408452 mov esi, 0xa                                      |         esi = 0xa;
    0x00408457 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040845a mov ebx, eax                                      |         ebx = eax;
    0x0040845c lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00408464 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00408469 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x0040846c mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x00408471 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00408476 mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x0040847b call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x00408480 mov edi, 0x91a328                                 |         
    0x00408485 mov esi, 0x67bd57                                 |         
    0x0040848a mov edx, 0xd                                      |         
    0x0040848f call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "Usage Example", 0xd);
    0x00408494 mov rbx, rax                                      |         rbx = rax;
    0x00408497 mov rax, qword [rax]                              |         rax = *(rax);
    0x0040849a mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040849e add rsi, rbx                                      |         rsi += rbx;
    0x004084a1 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x004084a9 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x004084ae lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x004084b6 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x004084bb call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x004084c0 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x004084c3 mov rdi, rax                                      |         rdi = rax;
    0x004084c6 mov esi, 0xa                                      |         esi = 0xa;
    0x004084cb call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x004084ce mov ebp, eax                                      |         
    0x004084d0 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x004084d8 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x004084dd movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x004084e1 mov rdi, rbx                                      |         rdi = rbx;
    0x004084e4 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x004084e9 mov rdi, rbx                                      |         rdi = rbx;
    0x004084ec call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x004084f1 mov esi, 0x67b971                                 |         
    0x004084f6 mov edx, 0xd                                      |         
    0x004084fb mov rdi, rbx                                      |         
    0x004084fe call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rbx, 0x67b971, 0xd);
    0x00408503 mov rbx, rax                                      |         rbx = rax;
    0x00408506 mov rax, qword [rax]                              |         rax = *(rax);
    0x00408509 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040850d add rsi, rbx                                      |         rsi += rbx;
    0x00408510 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00408518 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040851d lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00408525 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040852a call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040852f mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00408532 mov rdi, rax                                      |         rdi = rax;
    0x00408535 mov esi, 0xa                                      |         esi = 0xa;
    0x0040853a call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040853d mov ebp, eax                                      |         
    0x0040853f lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00408547 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040854c movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x00408550 mov rdi, rbx                                      |         rdi = rbx;
    0x00408553 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00408558 mov rdi, rbx                                      |         rdi = rbx;
    0x0040855b call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x00408560 lea rdi, [rsp + 0x2c0]                            |     
    0x00408568 xor esi, esi                                      |     
    0x0040856a call 0x5b9ad0                                     |     USAGE::SimpleScheduler::SimpleScheduler(BloombergLP::bslma::Allocator*) (rsp + 0x2c0, 0);
    0x0040856f xorpd xmm0, xmm0                                  |     __asm ("xorpd xmm0, xmm0");
    0x00408573 movapd xmmword [rsp + 0x440], xmm0                |     __asm ("movapd xmmword [rsp + 0x440], xmm0");
    0x0040857c mov qword [rsp + 0x450], 0                        |     *((rsp + 0x450)) = 0;
    0x00408588 mov rax, qword [rip + 0x5125b1]                   |     rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040858f test rax, rax                                     |     
                                                                 |     if (rax == 0) {
    0x00408592 jne 0x408599                                      |         
    0x00408594 call 0x64e700                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |     }
    0x00408599 mov qword [rsp + 0x458], rax                      |     *((rsp + 0x458)) = rax;
    0x004085a1 call 0x64a9f0                                     |     rax = BloombergLP::bdlt::DatetimeImpUtil::epoch_1970_01_01() ();
    0x004085a6 mov rbx, rax                                      |     rbx = rax;
    0x004085a9 mov rax, qword [rip + 0x5114b0]                   |     rax = BloombergLP::bdlt::CurrentTime::s_currenttimeCallback_p;
    0x004085b0 call rax                                          |     rax = void (*rax)() ();
    0x004085b2 mov r14, rax                                      |     r14 = rax;
    0x004085b5 mov ebp, edx                                      |     
    0x004085b7 mov rbx, qword [rbx]                              |     rbx = *(rbx);
    0x004085ba test rbx, rbx                                     |     
                                                                 |     if (rbx >= 0) {
    0x004085bd jns 0x411e13                                      |         goto label_23;
                                                                 |     }
                                                                 | label_12:
    0x004085c3 movabs rcx, 0xffffffebe228a000                    |     rcx = 0xffffffebe228a000;
    0x004085cd movabs r13, 0x1ffffffc00                          |     r13 = 0x1ffffffc00;
    0x004085d7 movabs rdi, 0x141dd76000                          |     rdi = 0x141dd76000;
    0x004085e1 mov rax, rbx                                      |     rax = rbx;
    0x004085e4 and rax, r13                                      |     rax &= r13;
    0x004085e7 add rax, rcx                                      |     rax += rcx;
    0x004085ea shr rax, 0xa                                      |     rax >>= 0xa;
    0x004085ee mov rcx, rbx                                      |     rcx = rbx;
    0x004085f1 shr rcx, 0x25                                     |     rcx >>= 0x25;
    0x004085f5 and ecx, 0x3ffffff                                |     ecx &= 0x3ffffff;
    0x004085fb imul rcx, rdi                                     |     rcx *= rdi;
    0x004085ff lea rdx, [r13 + 0x3ff]                            |     rdx = r13 + 0x3ff;
    0x00408606 and rdx, rbx                                      |     rdx &= rbx;
    0x00408609 xor esi, esi                                      |     esi = 0;
    0x0040860b cmp rax, 0x35a4e9                                 |     
                                                                 |     if (rax >= 0x35a4e9) {
    0x00408611 cmovae rsi, rdx                                   |         rsi = rdx;
                                                                 |     }
    0x00408615 add rsi, rcx                                      |     rsi += rcx;
    0x00408618 imul rax, r14, 0xf4240                            |     rax = r14 * 0xf4240;
    0x0040861f movsxd rcx, ebp                                   |     rcx = (int64_t) ebp;
    0x00408622 imul rcx, rcx, 0x10624dd3                         |     rcx *= 0x10624dd3;
    0x00408629 mov rdx, rcx                                      |     rdx = rcx;
    0x0040862c shr rdx, 0x3f                                     |     rdx >>= 0x3f;
    0x00408630 sar rcx, 0x26                                     |     rcx >>= 0x26;
    0x00408634 add ecx, edx                                      |     ecx += edx;
    0x00408636 movsxd rcx, ecx                                   |     rcx = (int64_t) ecx;
    0x00408639 add rcx, rax                                      |     rcx += rax;
    0x0040863c add rcx, rsi                                      |     rcx += rsi;
    0x0040863f movabs rdx, 0x32e73fb956a1b897                    |     rdx = 0x32e73fb956a1b897;
    0x00408649 mov rax, rcx                                      |     rax = rcx;
    0x0040864c mul rdx                                           |     rdx:rax = rax * rdx;
    0x0040864f shr rdx, 0x22                                     |     rdx >>= 0x22;
    0x00408653 mov rax, rdx                                      |     rax = rdx;
    0x00408656 shl rax, 0x25                                     |     rax <<= 0x25;
    0x0040865a imul rdx, rdi                                     |     rdx *= rdi;
    0x0040865e sub rcx, rdx                                      |     rcx -= rdx;
    0x00408661 or rcx, rax                                       |     rcx |= rax;
    0x00408664 movabs rax, 0x8000000000000000                    |     rax = 0x8000000000000000;
    0x0040866e or rcx, rax                                       |     rcx |= rax;
    0x00408671 mov qword [rsp + 0x1f0], rcx                      |     *((rsp + 0x1f0)) = rcx;
    0x00408679 movabs rax, 0x800000141dd76000                    |     rax = 0x800000141dd76000;
    0x00408683 mov qword [rsp + 8], rax                          |     *((rsp + 8)) = rax;
    0x00408688 cmp dword [rip + 0x511d4d], 0                     |     
                                                                 |     if (*(obj.veryVerbose) != 0) {
    0x0040868f je 0x40872c                                       |         
    0x00408695 mov edi, 0x91a328                                 |         
    0x0040869a mov esi, 0x67bd65                                 |         
    0x0040869f mov edx, 0xc                                      |         
    0x004086a4 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "Start:      ", 0xc);
    0x004086a9 lea rsi, [rsp + 0x1f0]                            |         
    0x004086b1 mov rdi, rax                                      |         
    0x004086b4 call 0x64a9c0                                     |         rax = BloombergLP::bdlt::operator << (std::_1::basic_ostream<char,std::_1::char_traits<char>>&,BloombergLP::bdlt::Datetimeconst&) (rax, rsp + 0x1f0);
    0x004086b9 mov rbx, rax                                      |         rbx = rax;
    0x004086bc mov rax, qword [rax]                              |         rax = *(rax);
    0x004086bf mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x004086c3 add rsi, rbx                                      |         rsi += rbx;
    0x004086c6 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x004086ce call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x004086d3 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x004086db mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x004086e0 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x004086e5 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x004086e8 mov rdi, rax                                      |         rdi = rax;
    0x004086eb mov esi, 0xa                                      |         esi = 0xa;
    0x004086f0 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x004086f3 mov ebp, eax                                      |         
    0x004086f5 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x004086fd call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00408702 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x00408706 mov rdi, rbx                                      |         rdi = rbx;
    0x00408709 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040870e mov rdi, rbx                                      |         rdi = rbx;
    0x00408711 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x00408716 mov rcx, qword [rsp + 0x1f0]                      |         rcx = *((rsp + 0x1f0));
    0x0040871e mov qword [rsp + 8], rcx                          |         *((rsp + 8)) = rcx;
    0x00408723 test rcx, rcx                                     |         
                                                                 |         if (rcx >= 0) {
    0x00408726 jns 0x412021                                      |             goto label_24;
                                                                 |         }
                                                                 |     }
                                                                 | label_16:
    0x0040872c mov ebp, 0xd693a400                               |     
    0x00408731 mov rax, rcx                                      |     rax = rcx;
    0x00408734 and rax, r13                                      |     rax &= r13;
    0x00408737 movabs rdx, 0xffffffebe228a000                    |     rdx = 0xffffffebe228a000;
    0x00408741 add rax, rdx                                      |     rax += rdx;
    0x00408744 mov rdx, rcx                                      |     rdx = rcx;
    0x00408747 shr rdx, 0x25                                     |     rdx >>= 0x25;
    0x0040874b and edx, 0x3ffffff                                |     edx &= 0x3ffffff;
    0x00408751 movabs rdi, 0x141dd76000                          |     rdi = 0x141dd76000;
    0x0040875b imul rdx, rdi                                     |     rdx *= rdi;
    0x0040875f lea r15, [r13 + 0x3ff]                            |     r15 = r13 + 0x3ff;
    0x00408766 and rcx, r15                                      |     rcx &= r15;
    0x00408769 xor esi, esi                                      |     esi = 0;
    0x0040876b cmp rax, rbp                                      |     
                                                                 |     if (rax >= rbp) {
    0x0040876e cmovae rsi, rcx                                   |         rsi = rcx;
                                                                 |     }
    0x00408772 lea rcx, [rdx + rsi + 0x225510]                   |     rcx = rdx + rsi + 0x225510;
    0x0040877a mov rax, rcx                                      |     rax = rcx;
    0x0040877d movabs rdx, 0x32e73fb956a1b897                    |     rdx = 0x32e73fb956a1b897;
    0x00408787 mul rdx                                           |     rdx:rax = rax * rdx;
    0x0040878a shr rdx, 0x22                                     |     rdx >>= 0x22;
    0x0040878e mov rax, rdx                                      |     rax = rdx;
    0x00408791 shl rax, 0x25                                     |     rax <<= 0x25;
    0x00408795 imul rdx, rdi                                     |     rdx *= rdi;
    0x00408799 sub rcx, rdx                                      |     rcx -= rdx;
    0x0040879c or rcx, rax                                       |     rcx |= rax;
    0x0040879f movabs rax, 0x8000000000000000                    |     rax = 0x8000000000000000;
    0x004087a9 or rcx, rax                                       |     rcx |= rax;
    0x004087ac mov qword [rsp + 8], rcx                          |     *((rsp + 8)) = rcx;
    0x004087b1 cmp dword [rip + 0x511c24], 0                     |     
                                                                 |     if (*(obj.veryVerbose) != 0) {
    0x004087b8 je 0x408838                                       |         
    0x004087ba mov edi, 0x91a328                                 |         
    0x004087bf mov esi, 0x67bd72                                 |         
    0x004087c4 mov edx, 0xc                                      |         
    0x004087c9 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "scheduling: ", 0xc);
    0x004087ce lea rsi, [rsp + 8]                                |         
    0x004087d3 mov rdi, rax                                      |         
    0x004087d6 call 0x64a9c0                                     |         rax = BloombergLP::bdlt::operator << (std::_1::basic_ostream<char,std::_1::char_traits<char>>&,BloombergLP::bdlt::Datetimeconst&) (rax, rsp + 8);
    0x004087db mov rbx, rax                                      |         rbx = rax;
    0x004087de mov rax, qword [rax]                              |         rax = *(rax);
    0x004087e1 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x004087e5 add rsi, rbx                                      |         rsi += rbx;
    0x004087e8 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x004087f0 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x004087f5 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x004087fd mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00408802 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00408807 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040880a mov rdi, rax                                      |         rdi = rax;
    0x0040880d mov esi, 0xa                                      |         esi = 0xa;
    0x00408812 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00408815 mov ebp, eax                                      |         
    0x00408817 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040881f call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00408824 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x00408828 mov rdi, rbx                                      |         rdi = rbx;
    0x0040882b call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00408830 mov rdi, rbx                                      |         rdi = rbx;
    0x00408833 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x00408838 mov rax, qword [rip + 0x512301]                   |     rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040883f test rax, rax                                     |     
                                                                 |     if (rax == 0) {
    0x00408842 jne 0x408849                                      |         
    0x00408844 call 0x64e700                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |     }
    0x00408849 mov qword [rsp + 0xf0], rax                       |     *((rsp + 0xf0)) = rax;
    0x00408851 xorpd xmm0, xmm0                                  |     __asm ("xorpd xmm0, xmm0");
    0x00408855 movupd xmmword [rsp + 0xf8], xmm0                 |     __asm ("movupd xmmword [rsp + 0xf8], xmm0");
    0x0040885e lea rdi, [rsp + 0xc0]                             |     
    0x00408866 mov esi, 0x18                                     |     
    0x0040886b call 0x651670                                     |     BloombergLP::bslstl::Function_Rep::allocateBuf(unsigned long) (rsp + 0xc0, 0x18);
    0x00408870 mov qword [rsp + 0xf8], 0x649790                  |     *((rsp + 0xf8)) = method.BloombergLP::bslstl::Function_Rep::ManagerRet_BloombergLP::bslstl::Function_Rep::functionManager_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____bsl::vector_int__bsl::allocator_int_____int___BloombergLP::bdlf::Bind_BoundTuple2_bsl::vecto;
    0x0040887c mov qword [rsp + 0xc0], 0x4059c0                  |     *((rsp + 0xc0)) = method.USAGE.pushBackWrapper_bsl::vector_int__bsl::allocator_int_____int_;
    0x00408888 lea r14, [rsp + 0x440]                            |     r14 = rsp + 0x440;
    0x00408890 mov qword [rsp + 0xc8], r14                       |     *((rsp + 0xc8)) = r14;
    0x00408898 mov dword [rsp + 0xd0], 2                         |     *((rsp + 0xd0)) = 2;
    0x004088a3 mov qword [rsp + 0x100], 0x649780                 |     *((rsp + 0x100)) = method.BloombergLP::bslstl.Function_InvokerUtil_Dispatch_4__void_____BloombergLP::bdlf::Bind_BloombergLP::bslmf::Nil__void____bsl::vector_int__bsl::allocator_int_____int___BloombergLP::bdlf::Bind_BoundTuple2_bsl::vector_int__bsl::allocator_int_____int;
    0x004088af lea rdi, [rsp + 0x2c0]                            |     
    0x004088b7 call 0x649c50                                     |     eax = BloombergLP::bdlcc::SkipList_RandomLevelGenerator::randomLevel() (rsp + 0x2c0);
    0x004088bc lea rdi, [rsp + 0x2c0]                            |     
    0x004088c4 lea rdx, [rsp + 8]                                |     
    0x004088c9 lea rcx, [rsp + 0xc0]                             |     
    0x004088d1 mov esi, eax                                      |     
    0x004088d3 call 0x5bc3b0                                     |     rax = BloombergLP::bdlcc::SkipList<BloombergLP::bdlt::Datetime,bsl::function<void()>>::allocateNode(int,BloombergLP::bdlt::Datetimeconst&,bsl::function<void()>const&) (rsp + 0x2c0, eax, rsp + 8, rsp + 0xc0);
    0x004088d8 lea rdi, [rsp + 0x2c0]                            |     
    0x004088e0 lea rsi, [rsp + 0x78]                             |     
    0x004088e5 mov rdx, rax                                      |     
    0x004088e8 mov ecx, 1                                        |     ecx = 1;
    0x004088ed call 0x5bc490                                     |     BloombergLP::bdlcc::SkipList<BloombergLP::bdlt::Datetime,bsl::function<void()>>::addNodeImpR(bool*,BloombergLP::bdlcc::SkipList_Node<BloombergLP::bdlt::Datetime,bsl::function<void()>>*,bool) (rsp + 0x2c0, rsp + 0x78, rax);
    0x004088f2 cmp byte [rsp + 0x78], 0                          |     
                                                                 |     if (*((rsp + 0x78)) != 0) {
    0x004088f7 je 0x408906                                       |         
    0x004088f9 lea rdi, [rsp + 0x328]                            |         rdi = rsp + 0x328;
    0x00408901 call 0x404bb0                                     |         pthread_cond_signal ();
                                                                 |     }
    0x00408906 lea rdi, [rsp + 0xc0]                             |     
    0x0040890e call 0x651610                                     |     BloombergLP::bslstl::Function_Rep::~Function_Rep() (rsp + 0xc0);
    0x00408913 mov rax, qword [rsp + 0x1f0]                      |     rax = *((rsp + 0x1f0));
    0x0040891b mov qword [rsp + 8], rax                          |     *((rsp + 8)) = rax;
    0x00408920 test rax, rax                                     |     
                                                                 |     if (rax >= 0) {
    0x00408923 jns 0x411e94                                      |         goto label_25;
                                                                 |     }
                                                                 | label_13:
    0x00408929 mov rcx, rax                                      |     rcx = rax;
    0x0040892c and rcx, r13                                      |     rcx &= r13;
    0x0040892f movabs rdx, 0xffffffebe228a000                    |     rdx = 0xffffffebe228a000;
    0x00408939 add rcx, rdx                                      |     rcx += rdx;
    0x0040893c mov rdx, rax                                      |     rdx = rax;
    0x0040893f shr rdx, 0x25                                     |     rdx >>= 0x25;
    0x00408943 and edx, 0x3ffffff                                |     edx &= 0x3ffffff;
    0x00408949 movabs rdi, 0x141dd76000                          |     rdi = 0x141dd76000;
    0x00408953 imul rdx, rdi                                     |     rdx *= rdi;
    0x00408957 and rax, r15                                      |     rax &= r15;
    0x0040895a xor esi, esi                                      |     esi = 0;
    0x0040895c mov ebp, 0xd693a400                               |     
    0x00408961 cmp rcx, rbp                                      |     
                                                                 |     if (rcx >= rbp) {
    0x00408964 cmovae rsi, rax                                   |         rsi = rax;
                                                                 |     }
    0x00408968 lea rcx, [rdx + rsi + 0xb71b0]                    |     rcx = rdx + rsi + 0xb71b0;
    0x00408970 mov rax, rcx                                      |     rax = rcx;
    0x00408973 movabs rdx, 0x32e73fb956a1b897                    |     rdx = 0x32e73fb956a1b897;
    0x0040897d mul rdx                                           |     rdx:rax = rax * rdx;
    0x00408980 shr rdx, 0x22                                     |     rdx >>= 0x22;
    0x00408984 mov rax, rdx                                      |     rax = rdx;
    0x00408987 shl rax, 0x25                                     |     rax <<= 0x25;
    0x0040898b imul rdx, rdi                                     |     rdx *= rdi;
    0x0040898f sub rcx, rdx                                      |     rcx -= rdx;
    0x00408992 or rcx, rax                                       |     rcx |= rax;
    0x00408995 movabs rax, 0x8000000000000000                    |     rax = 0x8000000000000000;
    0x0040899f or rcx, rax                                       |     rcx |= rax;
    0x004089a2 mov qword [rsp + 8], rcx                          |     *((rsp + 8)) = rcx;
    0x004089a7 cmp dword [rip + 0x511a2e], 0                     |     
                                                                 |     if (*(obj.veryVerbose) != 0) {
    0x004089ae je 0x408a2e                                       |         
    0x004089b0 mov edi, 0x91a328                                 |         
    0x004089b5 mov esi, 0x67bd72                                 |         
    0x004089ba mov edx, 0xc                                      |         
    0x004089bf call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "scheduling: ", 0xc);
    0x004089c4 lea rsi, [rsp + 8]                                |         
    0x004089c9 mov rdi, rax                                      |         
    0x004089cc call 0x64a9c0                                     |         rax = BloombergLP::bdlt::operator << (std::_1::basic_ostream<char,std::_1::char_traits<char>>&,BloombergLP::bdlt::Datetimeconst&) (rax, rsp + 8);
    0x004089d1 mov rbx, rax                                      |         rbx = rax;
    0x004089d4 mov rax, qword [rax]                              |         rax = *(rax);
    0x004089d7 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x004089db add rsi, rbx                                      |         rsi += rbx;
    0x004089de lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x004089e6 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x004089eb lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x004089f3 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x004089f8 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x004089fd mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00408a00 mov rdi, rax                                      |         rdi = rax;
    0x00408a03 mov esi, 0xa                                      |         esi = 0xa;
    0x00408a08 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00408a0b mov ebp, eax                                      |         
    0x00408a0d lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x00408a15 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00408a1a movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x00408a1e mov rdi, rbx                                      |         rdi = rbx;
    0x00408a21 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00408a26 mov rdi, rbx                                      |         rdi = rbx;
    0x00408a29 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x00408a2e mov rax, qword [rip + 0x51210b]                   |     rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00408a35 test rax, rax                                     |     
                                                                 |     if (rax == 0) {
    0x00408a38 jne 0x408a3f                                      |         
    0x00408a3a call 0x64e700                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |     }
    0x00408a3f mov qword [rsp + 0xf0], rax                       |     *((rsp + 0xf0)) = rax;
    0x00408a47 xorpd xmm0, xmm0                                  |     __asm ("xorpd xmm0, xmm0");
    0x00408a4b movupd xmmword [rsp + 0xf8], xmm0                 |     __asm ("movupd xmmword [rsp + 0xf8], xmm0");
    0x00408a54 lea rdi, [rsp + 0xc0]                             |     
    0x00408a5c mov esi, 0x18                                     |     
    0x00408a61 call 0x651670                                     |     BloombergLP::bslstl::Function_Rep::allocateBuf(unsigned long) (rsp + 0xc0, 0x18);
    0x00408a66 mov qword [rsp + 0xf8], 0x649790                  |     *((rsp + 0xf8)) = method.BloombergLP::bslstl::Function_Rep::ManagerRet_BloombergLP::bslstl::Function_Rep::functionManager_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____bsl::vector_int__bsl::allocator_int_____int___BloombergLP::bdlf::Bind_BoundTuple2_bsl::vecto;
    0x00408a72 mov qword [rsp + 0xc0], 0x4059c0                  |     *((rsp + 0xc0)) = method.USAGE.pushBackWrapper_bsl::vector_int__bsl::allocator_int_____int_;
    0x00408a7e mov qword [rsp + 0xc8], r14                       |     *((rsp + 0xc8)) = r14;
    0x00408a86 mov dword [rsp + 0xd0], 0                         |     *((rsp + 0xd0)) = 0;
    0x00408a91 mov qword [rsp + 0x100], 0x649780                 |     *((rsp + 0x100)) = method.BloombergLP::bslstl.Function_InvokerUtil_Dispatch_4__void_____BloombergLP::bdlf::Bind_BloombergLP::bslmf::Nil__void____bsl::vector_int__bsl::allocator_int_____int___BloombergLP::bdlf::Bind_BoundTuple2_bsl::vector_int__bsl::allocator_int_____int;
    0x00408a9d lea rdi, [rsp + 0x2c0]                            |     
    0x00408aa5 call 0x649c50                                     |     eax = BloombergLP::bdlcc::SkipList_RandomLevelGenerator::randomLevel() (rsp + 0x2c0);
    0x00408aaa lea rdi, [rsp + 0x2c0]                            |     
    0x00408ab2 lea rdx, [rsp + 8]                                |     
    0x00408ab7 lea rcx, [rsp + 0xc0]                             |     
    0x00408abf mov esi, eax                                      |     
    0x00408ac1 call 0x5bc3b0                                     |     rax = BloombergLP::bdlcc::SkipList<BloombergLP::bdlt::Datetime,bsl::function<void()>>::allocateNode(int,BloombergLP::bdlt::Datetimeconst&,bsl::function<void()>const&) (rsp + 0x2c0, eax, rsp + 8, rsp + 0xc0);
    0x00408ac6 lea rdi, [rsp + 0x2c0]                            |     
    0x00408ace lea rsi, [rsp + 0x78]                             |     
    0x00408ad3 mov rdx, rax                                      |     
    0x00408ad6 mov ecx, 1                                        |     ecx = 1;
    0x00408adb call 0x5bc490                                     |     BloombergLP::bdlcc::SkipList<BloombergLP::bdlt::Datetime,bsl::function<void()>>::addNodeImpR(bool*,BloombergLP::bdlcc::SkipList_Node<BloombergLP::bdlt::Datetime,bsl::function<void()>>*,bool) (rsp + 0x2c0, rsp + 0x78, rax);
    0x00408ae0 cmp byte [rsp + 0x78], 0                          |     
                                                                 |     if (*((rsp + 0x78)) != 0) {
    0x00408ae5 je 0x408af4                                       |         
    0x00408ae7 lea rdi, [rsp + 0x328]                            |         rdi = rsp + 0x328;
    0x00408aef call 0x404bb0                                     |         pthread_cond_signal ();
                                                                 |     }
    0x00408af4 lea rdi, [rsp + 0xc0]                             |     
    0x00408afc call 0x651610                                     |     BloombergLP::bslstl::Function_Rep::~Function_Rep() (rsp + 0xc0);
    0x00408b01 mov rax, qword [rsp + 0x1f0]                      |     rax = *((rsp + 0x1f0));
    0x00408b09 mov qword [rsp + 8], rax                          |     *((rsp + 8)) = rax;
    0x00408b0e test rax, rax                                     |     
                                                                 |     if (rax >= 0) {
    0x00408b11 jns 0x411f1a                                      |         goto label_26;
                                                                 |     }
                                                                 | label_14:
    0x00408b17 mov rcx, rax                                      |     rcx = rax;
    0x00408b1a and rcx, r13                                      |     rcx &= r13;
    0x00408b1d movabs rdx, 0xffffffebe228a000                    |     rdx = 0xffffffebe228a000;
    0x00408b27 add rcx, rdx                                      |     rcx += rdx;
    0x00408b2a mov rdx, rax                                      |     rdx = rax;
    0x00408b2d shr rdx, 0x25                                     |     rdx >>= 0x25;
    0x00408b31 and edx, 0x3ffffff                                |     edx &= 0x3ffffff;
    0x00408b37 movabs rdi, 0x141dd76000                          |     rdi = 0x141dd76000;
    0x00408b41 imul rdx, rdi                                     |     rdx *= rdi;
    0x00408b45 and rax, r15                                      |     rax &= r15;
    0x00408b48 xor esi, esi                                      |     esi = 0;
    0x00408b4a mov ebp, 0xd693a400                               |     
    0x00408b4f cmp rcx, rbp                                      |     
                                                                 |     if (rcx >= rbp) {
    0x00408b52 cmovae rsi, rax                                   |         rsi = rax;
                                                                 |     }
    0x00408b56 lea rcx, [rdx + rsi + 0x16e360]                   |     rcx = rdx + rsi + 0x16e360;
    0x00408b5e mov rax, rcx                                      |     rax = rcx;
    0x00408b61 movabs rdx, 0x32e73fb956a1b897                    |     rdx = 0x32e73fb956a1b897;
    0x00408b6b mul rdx                                           |     rdx:rax = rax * rdx;
    0x00408b6e shr rdx, 0x22                                     |     rdx >>= 0x22;
    0x00408b72 mov rax, rdx                                      |     rax = rdx;
    0x00408b75 shl rax, 0x25                                     |     rax <<= 0x25;
    0x00408b79 imul rdx, rdi                                     |     rdx *= rdi;
    0x00408b7d sub rcx, rdx                                      |     rcx -= rdx;
    0x00408b80 or rcx, rax                                       |     rcx |= rax;
    0x00408b83 movabs rax, 0x8000000000000000                    |     rax = 0x8000000000000000;
    0x00408b8d or rcx, rax                                       |     rcx |= rax;
    0x00408b90 mov qword [rsp + 8], rcx                          |     *((rsp + 8)) = rcx;
    0x00408b95 cmp dword [rip + 0x511840], 0                     |     
                                                                 |     if (*(obj.veryVerbose) != 0) {
    0x00408b9c je 0x408c1c                                       |         
    0x00408b9e mov edi, 0x91a328                                 |         
    0x00408ba3 mov esi, 0x67bd72                                 |         
    0x00408ba8 mov edx, 0xc                                      |         
    0x00408bad call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "scheduling: ", 0xc);
    0x00408bb2 lea rsi, [rsp + 8]                                |         
    0x00408bb7 mov rdi, rax                                      |         
    0x00408bba call 0x64a9c0                                     |         rax = BloombergLP::bdlt::operator << (std::_1::basic_ostream<char,std::_1::char_traits<char>>&,BloombergLP::bdlt::Datetimeconst&) (rax, rsp + 8);
    0x00408bbf mov rbx, rax                                      |         rbx = rax;
    0x00408bc2 mov rax, qword [rax]                              |         rax = *(rax);
    0x00408bc5 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x00408bc9 add rsi, rbx                                      |         rsi += rbx;
    0x00408bcc lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x00408bd4 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00408bd9 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x00408be1 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00408be6 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00408beb mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00408bee mov rdi, rax                                      |         rdi = rax;
    0x00408bf1 mov esi, 0xa                                      |         esi = 0xa;
    0x00408bf6 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00408bf9 mov ebp, eax                                      |         
    0x00408bfb lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x00408c03 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00408c08 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x00408c0c mov rdi, rbx                                      |         rdi = rbx;
    0x00408c0f call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00408c14 mov rdi, rbx                                      |         rdi = rbx;
    0x00408c17 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x00408c1c mov rax, qword [rip + 0x511f1d]                   |     rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00408c23 test rax, rax                                     |     
                                                                 |     if (rax == 0) {
    0x00408c26 jne 0x408c2d                                      |         
    0x00408c28 call 0x64e700                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |     }
    0x00408c2d mov qword [rsp + 0xf0], rax                       |     *((rsp + 0xf0)) = rax;
    0x00408c35 xorpd xmm0, xmm0                                  |     __asm ("xorpd xmm0, xmm0");
    0x00408c39 movupd xmmword [rsp + 0xf8], xmm0                 |     __asm ("movupd xmmword [rsp + 0xf8], xmm0");
    0x00408c42 lea rdi, [rsp + 0xc0]                             |     
    0x00408c4a mov esi, 0x18                                     |     
    0x00408c4f call 0x651670                                     |     BloombergLP::bslstl::Function_Rep::allocateBuf(unsigned long) (rsp + 0xc0, 0x18);
    0x00408c54 mov qword [rsp + 0xf8], 0x649790                  |     *((rsp + 0xf8)) = method.BloombergLP::bslstl::Function_Rep::ManagerRet_BloombergLP::bslstl::Function_Rep::functionManager_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____bsl::vector_int__bsl::allocator_int_____int___BloombergLP::bdlf::Bind_BoundTuple2_bsl::vecto;
    0x00408c60 mov qword [rsp + 0xc0], 0x4059c0                  |     *((rsp + 0xc0)) = method.USAGE.pushBackWrapper_bsl::vector_int__bsl::allocator_int_____int_;
    0x00408c6c mov qword [rsp + 0xc8], r14                       |     *((rsp + 0xc8)) = r14;
    0x00408c74 mov dword [rsp + 0xd0], 1                         |     *((rsp + 0xd0)) = 1;
    0x00408c7f mov qword [rsp + 0x100], 0x649780                 |     *((rsp + 0x100)) = method.BloombergLP::bslstl.Function_InvokerUtil_Dispatch_4__void_____BloombergLP::bdlf::Bind_BloombergLP::bslmf::Nil__void____bsl::vector_int__bsl::allocator_int_____int___BloombergLP::bdlf::Bind_BoundTuple2_bsl::vector_int__bsl::allocator_int_____int;
    0x00408c8b lea rdi, [rsp + 0x2c0]                            |     
    0x00408c93 call 0x649c50                                     |     eax = BloombergLP::bdlcc::SkipList_RandomLevelGenerator::randomLevel() (rsp + 0x2c0);
    0x00408c98 lea rdi, [rsp + 0x2c0]                            |     
    0x00408ca0 lea rdx, [rsp + 8]                                |     
    0x00408ca5 lea rcx, [rsp + 0xc0]                             |     
    0x00408cad mov esi, eax                                      |     
    0x00408caf call 0x5bc3b0                                     |     rax = BloombergLP::bdlcc::SkipList<BloombergLP::bdlt::Datetime,bsl::function<void()>>::allocateNode(int,BloombergLP::bdlt::Datetimeconst&,bsl::function<void()>const&) (rsp + 0x2c0, eax, rsp + 8, rsp + 0xc0);
    0x00408cb4 lea rdi, [rsp + 0x2c0]                            |     
    0x00408cbc lea rsi, [rsp + 0x78]                             |     
    0x00408cc1 mov rdx, rax                                      |     
    0x00408cc4 mov ecx, 1                                        |     ecx = 1;
    0x00408cc9 call 0x5bc490                                     |     BloombergLP::bdlcc::SkipList<BloombergLP::bdlt::Datetime,bsl::function<void()>>::addNodeImpR(bool*,BloombergLP::bdlcc::SkipList_Node<BloombergLP::bdlt::Datetime,bsl::function<void()>>*,bool) (rsp + 0x2c0, rsp + 0x78, rax);
    0x00408cce cmp byte [rsp + 0x78], 0                          |     
                                                                 |     if (*((rsp + 0x78)) != 0) {
    0x00408cd3 je 0x408ce2                                       |         
    0x00408cd5 lea rdi, [rsp + 0x328]                            |         rdi = rsp + 0x328;
    0x00408cdd call 0x404bb0                                     |         pthread_cond_signal ();
                                                                 |     }
    0x00408ce2 lea rdi, [rsp + 0xc0]                             |     
    0x00408cea call 0x651610                                     |     BloombergLP::bslstl::Function_Rep::~Function_Rep() (rsp + 0xc0);
    0x00408cef mov rax, qword [rsp + 0x448]                      |     rax = *((rsp + 0x448));
    0x00408cf7 cmp rax, qword [rsp + 0x440]                      |     
                                                                 |     if (rax != *((rsp + 0x440))) {
    0x00408cff je 0x408d28                                       |         
    0x00408d01 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00408d06 mov rbx, rax                                      |         rbx = rax;
    0x00408d09 mov rdi, rax                                      |         
    0x00408d0c call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00408d11 mov edi, 0x67bd7f                                 |         edi = "values.empty()";
    0x00408d16 mov esi, 0x1673                                   |         esi = 0x1673;
    0x00408d1b call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00408d20 mov rdi, rbx                                      |         
    0x00408d23 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x00408d28 lea r14, [rsp + 0x410]                            |     r14 = rsp + 0x410;
    0x00408d30 mov rdi, r14                                      |     rdi = r14;
    0x00408d33 call 0x4052c0                                     |     pthread_mutex_lock ();
    0x00408d38 lea rbp, [rsp + 0x2e0]                            |     rbp = rsp + 0x2e0;
    0x00408d40 lea rbx, [rsp + 0x360]                            |     rbx = rsp + 0x360;
    0x00408d48 nop dword [rax + rax]                             |     
                                                                 |     do {
    0x00408d50 cmp dword [rsp + 0x438], 0                        |         
                                                                 |         if (*((rsp + 0x438)) != 0) {
    0x00408d58 jne 0x40bd10                                      |             goto label_27;
                                                                 |         }
    0x00408d5e mov rdi, rbp                                      |         rdi = rbp;
    0x00408d61 call 0x4052c0                                     |         pthread_mutex_lock ();
    0x00408d66 mov r12d, dword [rsp + 0x308]                     |         r12d = *((rsp + 0x308));
    0x00408d6e mov rdi, rbp                                      |         rdi = rbp;
    0x00408d71 call 0x4053c0                                     |         pthread_mutex_unlock ();
    0x00408d76 test r12d, r12d                                   |         
                                                                 |         if (r12d == 0) {
    0x00408d79 je 0x40bd10                                       |             goto label_27;
                                                                 |         }
    0x00408d7f mov rdi, rbx                                      |         rdi = rbx;
    0x00408d82 mov rsi, r14                                      |         rsi = r14;
    0x00408d85 call 0x405170                                     |         pthread_cond_wait ();
    0x00408d8a jmp 0x408d50                                      |         
                                                                 |     } while (1);
    0x00408d8c call 0x5a1b40                                     |     TestDriver<signedchar,signedchar>::allocationTest() ();
    0x00408d91 call 0x5a3040                                     |     TestDriver<unsigned long,unsigned long>::allocationTest() ();
    0x00408d96 call 0x5a44f0                                     |     TestDriver<BloombergLP::bsltf::TemplateTestFacility_StubClass*,BloombergLP::bsltf::TemplateTestFacility_StubClass*>::allocationTest() ();
    0x00408d9b call 0x5a59b0                                     |     TestDriver<void(*)(),void(*)()>::allocationTest() ();
    0x00408da0 call 0x5a6eb0                                     |     TestDriver<BloombergLP::bsltf::EnumeratedTestType::Enum,BloombergLP::bsltf::EnumeratedTestType::Enum>::allocationTest() ();
    0x00408da5 call 0x5a8380                                     |     TestDriver<BloombergLP::bsltf::UnionTestType,BloombergLP::bsltf::UnionTestType>::allocationTest() ();
    0x00408daa call 0x5a98e0                                     |     TestDriver<BloombergLP::bsltf::SimpleTestType,BloombergLP::bsltf::SimpleTestType>::allocationTest() ();
    0x00408daf call 0x5aae00                                     |     TestDriver<BloombergLP::bsltf::AllocTestType,BloombergLP::bsltf::AllocTestType>::allocationTest() ();
    0x00408db4 call 0x5ac380                                     |     TestDriver<BloombergLP::bsltf::BitwiseCopyableTestType,BloombergLP::bsltf::BitwiseCopyableTestType>::allocationTest() ();
    0x00408db9 call 0x5ad8a0                                     |     TestDriver<BloombergLP::bsltf::BitwiseMoveableTestType,BloombergLP::bsltf::BitwiseMoveableTestType>::allocationTest() ();
    0x00408dbe call 0x5aedc0                                     |     TestDriver<BloombergLP::bsltf::AllocBitwiseMoveableTestType,BloombergLP::bsltf::AllocBitwiseMoveableTestType>::allocationTest() ();
    0x00408dc3 call 0x5b04c0                                     |     TestDriver<BloombergLP::bsltf::MovableTestType,BloombergLP::bsltf::MovableTestType>::allocationTest() ();
    0x00408dc8 call 0x5b19e0                                     |     TestDriver<BloombergLP::bsltf::MovableAllocTestType,BloombergLP::bsltf::MovableAllocTestType>::allocationTest() ();
    0x00408dcd call 0x5b3000                                     |     TestDriver<BloombergLP::bsltf::NonTypicalOverloadsTestType,BloombergLP::bsltf::NonTypicalOverloadsTestType>::allocationTest() ();
    0x00408dd2 call 0x5b4520                                     |     TestDriver<int,int(BloombergLP::bsltf::TemplateTestFacility_StubClass::*)()>::allocationTest() ();
    0x00408dd7 call 0x5b5bb0                                     |     TestDriver<int,BloombergLP::bsltf::AllocTestType>::allocationTest() ();
    0x00408ddc call 0x5b70b0                                     |     TestDriver<int,BloombergLP::bsltf::MovableAllocTestType>::allocationTest() ();
    0x00408de1 call 0x5b8620                                     |     TestDriver<int,BloombergLP::bsltf::SimpleTestType>::allocationTest() ();
    0x00408de6 jmp 0x411d4d                                      |     void (*0x411d4d)() ();
    0x00408deb call 0x591830                                     |     TestDriver<signedchar,signedchar>::newFrontTest() ();
    0x00408df0 call 0x592590                                     |     TestDriver<unsigned long,unsigned long>::newFrontTest() ();
    0x00408df5 call 0x593360                                     |     TestDriver<BloombergLP::bsltf::TemplateTestFacility_StubClass*,BloombergLP::bsltf::TemplateTestFacility_StubClass*>::newFrontTest() ();
    0x00408dfa call 0x5941a0                                     |     TestDriver<void(*)(),void(*)()>::newFrontTest() ();
    0x00408dff call 0x594fe0                                     |     TestDriver<BloombergLP::bsltf::EnumeratedTestType::Enum,BloombergLP::bsltf::EnumeratedTestType::Enum>::newFrontTest() ();
    0x00408e04 call 0x595d60                                     |     TestDriver<BloombergLP::bsltf::UnionTestType,BloombergLP::bsltf::UnionTestType>::newFrontTest() ();
    0x00408e09 call 0x596ca0                                     |     TestDriver<BloombergLP::bsltf::SimpleTestType,BloombergLP::bsltf::SimpleTestType>::newFrontTest() ();
    0x00408e0e call 0x597ad0                                     |     TestDriver<BloombergLP::bsltf::AllocTestType,BloombergLP::bsltf::AllocTestType>::newFrontTest() ();
    0x00408e13 call 0x598a70                                     |     TestDriver<BloombergLP::bsltf::BitwiseCopyableTestType,BloombergLP::bsltf::BitwiseCopyableTestType>::newFrontTest() ();
    0x00408e18 call 0x5998a0                                     |     TestDriver<BloombergLP::bsltf::BitwiseMoveableTestType,BloombergLP::bsltf::BitwiseMoveableTestType>::newFrontTest() ();
    0x00408e1d call 0x59a6d0                                     |     TestDriver<BloombergLP::bsltf::AllocBitwiseMoveableTestType,BloombergLP::bsltf::AllocBitwiseMoveableTestType>::newFrontTest() ();
    0x00408e22 call 0x59b4b0                                     |     TestDriver<BloombergLP::bsltf::MovableTestType,BloombergLP::bsltf::MovableTestType>::newFrontTest() ();
    0x00408e27 call 0x59c380                                     |     TestDriver<BloombergLP::bsltf::MovableAllocTestType,BloombergLP::bsltf::MovableAllocTestType>::newFrontTest() ();
    0x00408e2c call 0x59d3a0                                     |     TestDriver<BloombergLP::bsltf::NonTypicalOverloadsTestType,BloombergLP::bsltf::NonTypicalOverloadsTestType>::newFrontTest() ();
    0x00408e31 call 0x59e1d0                                     |     TestDriver<int,int(BloombergLP::bsltf::TemplateTestFacility_StubClass::*)()>::newFrontTest() ();
    0x00408e36 call 0x59f100                                     |     TestDriver<int,BloombergLP::bsltf::AllocTestType>::newFrontTest() ();
    0x00408e3b call 0x59ff30                                     |     TestDriver<int,BloombergLP::bsltf::MovableAllocTestType>::newFrontTest() ();
    0x00408e40 call 0x5a0da0                                     |     TestDriver<int,BloombergLP::bsltf::SimpleTestType>::newFrontTest() ();
    0x00408e45 jmp 0x411d4d                                      |     void (*0x411d4d)() ();
    0x00408e4a cmp dword [rip + 0x511587], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x00408e51 je 0x408f9a                                       |         
    0x00408e57 mov rax, qword [rip + 0x5114ca]                   |         rax = std::__1::cout;
    0x00408e5e mov esi, 0x91a328                                 |         esi = std::__1::cout;
    0x00408e63 add rsi, qword [rax - 0x18]                       |         rsi += *((rax - 0x18));
    0x00408e67 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00408e6f call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00408e74 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00408e7c mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00408e81 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00408e86 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00408e89 mov rdi, rax                                      |         rdi = rax;
    0x00408e8c mov esi, 0xa                                      |         esi = 0xa;
    0x00408e91 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00408e94 mov ebx, eax                                      |         ebx = eax;
    0x00408e96 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00408e9e call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00408ea3 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x00408ea6 mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x00408eab call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00408eb0 mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x00408eb5 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x00408eba mov edi, 0x91a328                                 |         
    0x00408ebf mov esi, 0x67bd4b                                 |         
    0x00408ec4 mov edx, 0xb                                      |         
    0x00408ec9 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "update test", 0xb);
    0x00408ece mov rbx, rax                                      |         rbx = rax;
    0x00408ed1 mov rax, qword [rax]                              |         rax = *(rax);
    0x00408ed4 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x00408ed8 add rsi, rbx                                      |         rsi += rbx;
    0x00408edb lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00408ee3 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00408ee8 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00408ef0 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00408ef5 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00408efa mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00408efd mov rdi, rax                                      |         rdi = rax;
    0x00408f00 mov esi, 0xa                                      |         esi = 0xa;
    0x00408f05 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00408f08 mov ebp, eax                                      |         
    0x00408f0a lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00408f12 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00408f17 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x00408f1b mov rdi, rbx                                      |         rdi = rbx;
    0x00408f1e call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00408f23 mov rdi, rbx                                      |         rdi = rbx;
    0x00408f26 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x00408f2b mov esi, 0x67b971                                 |         
    0x00408f30 mov edx, 0xd                                      |         
    0x00408f35 mov rdi, rbx                                      |         
    0x00408f38 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rbx, 0x67b971, 0xd);
    0x00408f3d mov rbx, rax                                      |         rbx = rax;
    0x00408f40 mov rax, qword [rax]                              |         rax = *(rax);
    0x00408f43 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x00408f47 add rsi, rbx                                      |         rsi += rbx;
    0x00408f4a lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00408f52 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00408f57 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00408f5f mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00408f64 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00408f69 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00408f6c mov rdi, rax                                      |         rdi = rax;
    0x00408f6f mov esi, 0xa                                      |         esi = 0xa;
    0x00408f74 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00408f77 mov ebp, eax                                      |         
    0x00408f79 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00408f81 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00408f86 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x00408f8a mov rdi, rbx                                      |         rdi = rbx;
    0x00408f8d call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00408f92 mov rdi, rbx                                      |         rdi = rbx;
    0x00408f95 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x00408f9a call 0x54aef0                                     |     TestDriver<signedchar,signedchar>::updateTest() ();
    0x00408f9f call 0x54eb10                                     |     TestDriver<unsigned long,unsigned long>::updateTest() ();
    0x00408fa4 call 0x552820                                     |     TestDriver<BloombergLP::bsltf::TemplateTestFacility_StubClass*,BloombergLP::bsltf::TemplateTestFacility_StubClass*>::updateTest() ();
    0x00408fa9 call 0x556690                                     |     TestDriver<void(*)(),void(*)()>::updateTest() ();
    0x00408fae call 0x55a500                                     |     TestDriver<BloombergLP::bsltf::EnumeratedTestType::Enum,BloombergLP::bsltf::EnumeratedTestType::Enum>::updateTest() ();
    0x00408fb3 call 0x55e130                                     |     TestDriver<BloombergLP::bsltf::UnionTestType,BloombergLP::bsltf::UnionTestType>::updateTest() ();
    0x00408fb8 call 0x5621f0                                     |     TestDriver<BloombergLP::bsltf::SimpleTestType,BloombergLP::bsltf::SimpleTestType>::updateTest() ();
    0x00408fbd call 0x5662b0                                     |     TestDriver<BloombergLP::bsltf::AllocTestType,BloombergLP::bsltf::AllocTestType>::updateTest() ();
    0x00408fc2 call 0x56a150                                     |     TestDriver<BloombergLP::bsltf::BitwiseCopyableTestType,BloombergLP::bsltf::BitwiseCopyableTestType>::updateTest() ();
    0x00408fc7 call 0x56e210                                     |     TestDriver<BloombergLP::bsltf::BitwiseMoveableTestType,BloombergLP::bsltf::BitwiseMoveableTestType>::updateTest() ();
    0x00408fcc call 0x5722d0                                     |     TestDriver<BloombergLP::bsltf::AllocBitwiseMoveableTestType,BloombergLP::bsltf::AllocBitwiseMoveableTestType>::updateTest() ();
    0x00408fd1 call 0x5761f0                                     |     TestDriver<BloombergLP::bsltf::MovableTestType,BloombergLP::bsltf::MovableTestType>::updateTest() ();
    0x00408fd6 call 0x57a000                                     |     TestDriver<BloombergLP::bsltf::MovableAllocTestType,BloombergLP::bsltf::MovableAllocTestType>::updateTest() ();
    0x00408fdb call 0x57e000                                     |     TestDriver<BloombergLP::bsltf::NonTypicalOverloadsTestType,BloombergLP::bsltf::NonTypicalOverloadsTestType>::updateTest() ();
    0x00408fe0 call 0x5820c0                                     |     TestDriver<int,int(BloombergLP::bsltf::TemplateTestFacility_StubClass::*)()>::updateTest() ();
    0x00408fe5 call 0x585dc0                                     |     TestDriver<int,BloombergLP::bsltf::AllocTestType>::updateTest() ();
    0x00408fea call 0x589bd0                                     |     TestDriver<int,BloombergLP::bsltf::MovableAllocTestType>::updateTest() ();
    0x00408fef call 0x58da60                                     |     TestDriver<int,BloombergLP::bsltf::SimpleTestType>::updateTest() ();
    0x00408ff4 jmp 0x411d4d                                      |     void (*0x411d4d)() ();
    0x00408ff9 call 0x544560                                     |     TestDriver<signedchar,signedchar>::iterationTest() ();
    0x00408ffe call 0x544b90                                     |     TestDriver<unsigned long,unsigned long>::iterationTest() ();
    0x00409003 call 0x5451c0                                     |     TestDriver<BloombergLP::bsltf::TemplateTestFacility_StubClass*,BloombergLP::bsltf::TemplateTestFacility_StubClass*>::iterationTest() ();
    0x00409008 call 0x5457f0                                     |     TestDriver<void(*)(),void(*)()>::iterationTest() ();
    0x0040900d call 0x545e20                                     |     TestDriver<BloombergLP::bsltf::EnumeratedTestType::Enum,BloombergLP::bsltf::EnumeratedTestType::Enum>::iterationTest() ();
    0x00409012 call 0x546450                                     |     TestDriver<BloombergLP::bsltf::UnionTestType,BloombergLP::bsltf::UnionTestType>::iterationTest() ();
    0x00409017 call 0x546aa0                                     |     TestDriver<BloombergLP::bsltf::SimpleTestType,BloombergLP::bsltf::SimpleTestType>::iterationTest() ();
    0x0040901c call 0x547040                                     |     TestDriver<BloombergLP::bsltf::AllocTestType,BloombergLP::bsltf::AllocTestType>::iterationTest() ();
    0x00409021 call 0x5475e0                                     |     TestDriver<BloombergLP::bsltf::BitwiseCopyableTestType,BloombergLP::bsltf::BitwiseCopyableTestType>::iterationTest() ();
    0x00409026 call 0x547b80                                     |     TestDriver<BloombergLP::bsltf::BitwiseMoveableTestType,BloombergLP::bsltf::BitwiseMoveableTestType>::iterationTest() ();
    0x0040902b call 0x548120                                     |     TestDriver<BloombergLP::bsltf::AllocBitwiseMoveableTestType,BloombergLP::bsltf::AllocBitwiseMoveableTestType>::iterationTest() ();
    0x00409030 call 0x5486c0                                     |     TestDriver<BloombergLP::bsltf::MovableTestType,BloombergLP::bsltf::MovableTestType>::iterationTest() ();
    0x00409035 call 0x548c60                                     |     TestDriver<BloombergLP::bsltf::MovableAllocTestType,BloombergLP::bsltf::MovableAllocTestType>::iterationTest() ();
    0x0040903a call 0x549200                                     |     TestDriver<BloombergLP::bsltf::NonTypicalOverloadsTestType,BloombergLP::bsltf::NonTypicalOverloadsTestType>::iterationTest() ();
    0x0040903f call 0x5497a0                                     |     TestDriver<int,int(BloombergLP::bsltf::TemplateTestFacility_StubClass::*)()>::iterationTest() ();
    0x00409044 call 0x549de0                                     |     TestDriver<int,BloombergLP::bsltf::AllocTestType>::iterationTest() ();
    0x00409049 call 0x54a390                                     |     TestDriver<int,BloombergLP::bsltf::MovableAllocTestType>::iterationTest() ();
    0x0040904e call 0x54a940                                     |     TestDriver<int,BloombergLP::bsltf::SimpleTestType>::iterationTest() ();
    0x00409053 jmp 0x411d4d                                      |     void (*0x411d4d)() ();
    0x00409058 cmp dword [rip + 0x511379], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040905f je 0x4091a8                                       |         
    0x00409065 mov rax, qword [rip + 0x5112bc]                   |         rax = std::__1::cout;
    0x0040906c mov esi, 0x91a328                                 |         esi = std::__1::cout;
    0x00409071 add rsi, qword [rax - 0x18]                       |         rsi += *((rax - 0x18));
    0x00409075 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040907d call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00409082 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040908a mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040908f call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00409094 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00409097 mov rdi, rax                                      |         rdi = rax;
    0x0040909a mov esi, 0xa                                      |         esi = 0xa;
    0x0040909f call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x004090a2 mov ebx, eax                                      |         ebx = eax;
    0x004090a4 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x004090ac call 0x405240                                     |         std::_1::locale::~locale() ();
    0x004090b1 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x004090b4 mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x004090b9 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x004090be mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x004090c3 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x004090c8 mov edi, 0x91a328                                 |         
    0x004090cd mov esi, 0x67bd40                                 |         
    0x004090d2 mov edx, 0xa                                      |         
    0x004090d7 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "timer test", 0xa);
    0x004090dc mov rbx, rax                                      |         rbx = rax;
    0x004090df mov rax, qword [rax]                              |         rax = *(rax);
    0x004090e2 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x004090e6 add rsi, rbx                                      |         rsi += rbx;
    0x004090e9 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x004090f1 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x004090f6 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x004090fe mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00409103 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00409108 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040910b mov rdi, rax                                      |         rdi = rax;
    0x0040910e mov esi, 0xa                                      |         esi = 0xa;
    0x00409113 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00409116 mov ebp, eax                                      |         
    0x00409118 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00409120 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00409125 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x00409129 mov rdi, rbx                                      |         rdi = rbx;
    0x0040912c call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00409131 mov rdi, rbx                                      |         rdi = rbx;
    0x00409134 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x00409139 mov esi, 0x67b974                                 |         
    0x0040913e mov edx, 0xa                                      |         
    0x00409143 mov rdi, rbx                                      |         
    0x00409146 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rbx, 0x67b974, 0xa);
    0x0040914b mov rbx, rax                                      |         rbx = rax;
    0x0040914e mov rax, qword [rax]                              |         rax = *(rax);
    0x00409151 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x00409155 add rsi, rbx                                      |         rsi += rbx;
    0x00409158 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00409160 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00409165 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040916d mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00409172 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00409177 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040917a mov rdi, rax                                      |         rdi = rax;
    0x0040917d mov esi, 0xa                                      |         esi = 0xa;
    0x00409182 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00409185 mov ebp, eax                                      |         
    0x00409187 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040918f call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00409194 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x00409198 mov rdi, rbx                                      |         rdi = rbx;
    0x0040919b call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x004091a0 mov rdi, rbx                                      |         rdi = rbx;
    0x004091a3 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x004091a8 mov qword [rsp + 0x1f0], 0                        |     *((rsp + 0x1f0)) = 0;
    0x004091b4 mov dword [rsp + 0x1f8], 0                        |     *((rsp + 0x1f8)) = 0;
    0x004091bf mov rax, qword [rip + 0x51197a]                   |     rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x004091c6 test rax, rax                                     |     
                                                                 |     if (rax == 0) {
    0x004091c9 jne 0x4091d0                                      |         
    0x004091cb call 0x64e700                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |     }
    0x004091d0 mov qword [rsp + 0x470], rax                      |     *((rsp + 0x470)) = rax;
    0x004091d8 xorpd xmm0, xmm0                                  |     __asm ("xorpd xmm0, xmm0");
    0x004091dc movupd xmmword [rsp + 0x478], xmm0                |     __asm ("movupd xmmword [rsp + 0x478], xmm0");
    0x004091e5 lea rdi, [rsp + 0xc0]                             |     
    0x004091ed call 0x649c40                                     |     BloombergLP::bdlcc::SkipList_RandomLevelGenerator::SkipList_RandomLevelGenerator() (rsp + 0xc0);
    0x004091f2 mov dword [rsp + 0xc8], 0                         |     *((rsp + 0xc8)) = 0;
    0x004091fd lea rbx, [rsp + 0xe0]                             |     rbx = rsp + 0xe0;
    0x00409205 mov rdi, rbx                                      |     rdi = rbx;
    0x00409208 xor esi, esi                                      |     esi = 0;
    0x0040920a call 0x404cc0                                     |     pthread_mutex_init ();
    0x0040920f mov dword [rsp + 0x108], 0                        |     *((rsp + 0x108)) = 0;
    0x0040921a mov qword [rsp + 0x110], 0                        |     *((rsp + 0x110)) = 0;
    0x00409226 mov rdx, qword [rip + 0x511913]                   |     rdx = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040922d test rdx, rdx                                     |     
                                                                 |     if (rdx == 0) {
    0x00409230 jne 0x40923a                                      |         
    0x00409232 call 0x64e700                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x00409237 mov rdx, rax                                      |         
                                                                 |     }
    0x0040923a mov qword [rsp + 0x118], rdx                      |     *((rsp + 0x118)) = rdx;
    0x00409242 movaps xmm0, xmmword [rip + 0x271207]             |     xmm0 = *(0x0067a450);
    0x00409249 movaps xmmword [rsp + 0x2c0], xmm0                |     *((rsp + 0x2c0)) = xmm0;
    0x00409251 movaps xmm0, xmmword [rip + 0x271208]             |     xmm0 = *(0x0067a460);
    0x00409258 movaps xmmword [rsp + 0x2d0], xmm0                |     *((rsp + 0x2d0)) = xmm0;
    0x00409260 movaps xmm0, xmmword [rip + 0x271209]             |     xmm0 = *(0x0067a470);
    0x00409267 movaps xmmword [rsp + 0x2e0], xmm0                |     *((rsp + 0x2e0)) = xmm0;
    0x0040926f movaps xmm0, xmmword [rip + 0x27120a]             |     xmm0 = *(0x0067a480);
    0x00409276 movaps xmmword [rsp + 0x2f0], xmm0                |     *((rsp + 0x2f0)) = xmm0;
    0x0040927e movaps xmm0, xmmword [rip + 0x27120b]             |     xmm0 = *(0x0067a490);
    0x00409285 movaps xmmword [rsp + 0x300], xmm0                |     *((rsp + 0x300)) = xmm0;
    0x0040928d movaps xmm0, xmmword [rip + 0x27120c]             |     xmm0 = *(0x0067a4a0);
    0x00409294 movaps xmmword [rsp + 0x310], xmm0                |     *((rsp + 0x310)) = xmm0;
    0x0040929c movaps xmm0, xmmword [rip + 0x27120d]             |     xmm0 = *(0x0067a4b0);
    0x004092a3 movaps xmmword [rsp + 0x320], xmm0                |     *((rsp + 0x320)) = xmm0;
    0x004092ab movapd xmm0, xmmword [rip + 0x27120d]             |     __asm ("movapd xmm0, xmmword [0x0067a4c0]");
    0x004092b3 movapd xmmword [rsp + 0x330], xmm0                |     __asm ("movapd xmmword [rsp + 0x330], xmm0");
    0x004092bc lea rdi, [rsp + 0x2c0]                            |     
    0x004092c4 mov esi, 0x20                                     |     
    0x004092c9 call 0x64a120                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::createPoolManager(int*,int,BloombergLP::bslma::Allocator*) (rsp + 0x2c0, 0x20, rax);
    0x004092ce mov qword [rsp + 0x110], rax                      |     *((rsp + 0x110)) = rax;
    0x004092d6 mov rdi, rax                                      |     
    0x004092d9 mov esi, 0x1f                                     |     
    0x004092de call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (rax, 0x1f);
    0x004092e3 mov qword [rsp + 0xd0], rax                       |     *((rsp + 0xd0)) = rax;
    0x004092eb mov rdi, qword [rsp + 0x110]                      |     
    0x004092f3 mov esi, 0x1f                                     |     
    0x004092f8 call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x110)), 0x1f);
    0x004092fd mov qword [rsp + 0xd8], rax                       |     *((rsp + 0xd8)) = rax;
    0x00409305 xor ecx, ecx                                      |     ecx = 0;
    0x00409307 nop word [rax + rax]                              |     
                                                                 |     do {
    0x00409310 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x00409318 mov qword [rax + rcx + 0x78], 0                   |         *((rax + rcx + 0x78)) = 0;
    0x00409321 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x00409329 mov rdx, qword [rsp + 0xd8]                       |         rdx = *((rsp + 0xd8));
    0x00409331 mov qword [rax + rcx + 0x70], rdx                 |         *((rax + rcx + 0x70)) = rdx;
    0x00409336 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x0040933e mov rdx, qword [rsp + 0xd8]                       |         rdx = *((rsp + 0xd8));
    0x00409346 mov qword [rdx + rcx + 0x78], rax                 |         *((rdx + rcx + 0x78)) = rax;
    0x0040934b mov rax, qword [rsp + 0xd8]                       |         rax = *((rsp + 0xd8));
    0x00409353 mov qword [rax + rcx + 0x70], 0                   |         *((rax + rcx + 0x70)) = 0;
    0x0040935c add rcx, 0x10                                     |         rcx += 0x10;
    0x00409360 cmp rcx, 0x200                                    |         
    0x00409367 jne 0x409310                                      |         
                                                                 |     } while (rcx != 0x200);
    0x00409369 lea rdi, [rsp + 0xc0]                             |     
    0x00409371 call 0x649c50                                     |     eax = BloombergLP::bdlcc::SkipList_RandomLevelGenerator::randomLevel() (rsp + 0xc0);
    0x00409376 lea rdi, [rsp + 0xc0]                             |     
    0x0040937e lea rdx, [rsp + 0x1f0]                            |     
    0x00409386 lea rcx, [rsp + 0x440]                            |     
    0x0040938e mov esi, eax                                      |     
    0x00409390 call 0x6490e0                                     |     rax = BloombergLP::bdlcc::SkipList<BloombergLP::bsls::TimeInterval,bsl::function<void()>>::allocateNode(int,BloombergLP::bsls::TimeIntervalconst&,bsl::function<void()>const&) (rsp + 0xc0, eax, rsp + 0x1f0, rsp + 0x440);
    0x00409395 mov rbx, rax                                      |     rbx = rax;
    0x00409398 mov rdi, rax                                      |     
    0x0040939b call 0x649be0                                     |     BloombergLP::bdlcc::SkipList_Control::incrementRefCount() (rax);
    0x004093a0 lea rdi, [rsp + 0xc0]                             |     
    0x004093a8 xor esi, esi                                      |     
    0x004093aa mov rdx, rbx                                      |     
    0x004093ad call 0x6491c0                                     |     BloombergLP::bdlcc::SkipList<BloombergLP::bsls::TimeInterval,bsl::function<void()>>::addNode(bool*,BloombergLP::bdlcc::SkipList_Node<BloombergLP::bsls::TimeInterval,bsl::function<void()>>*) (rsp + 0xc0, 0, rbx);
    0x004093b2 test rbx, rbx                                     |     
                                                                 |     if (rbx != 0) {
    0x004093b5 je 0x4093df                                       |         
    0x004093b7 mov rdi, rbx                                      |         
    0x004093ba call 0x649ba0                                     |         eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (rbx);
    0x004093bf test eax, eax                                     |         
                                                                 |         if (eax != 0) {
    0x004093c1 jne 0x4093df                                      |             goto label_28;
                                                                 |         }
    0x004093c3 mov rdi, rbx                                      |         
    0x004093c6 add rdi, 0x10                                     |         rdi += 0x10;
    0x004093ca call 0x651610                                     |         BloombergLP::bslstl::Function_Rep::~Function_Rep() (rbx);
    0x004093cf mov rdi, qword [rsp + 0x110]                      |         
    0x004093d7 mov rsi, rbx                                      |         
    0x004093da call 0x64a300                                     |         BloombergLP::bdlcc::SkipList_PoolUtil::deallocate(BloombergLP::bdlcc::SkipList_PoolManager*,void*) (*((rsp + 0x110)), rbx);
                                                                 |     }
                                                                 | label_28:
    0x004093df lea rdi, [rsp + 0xc0]                             |     
    0x004093e7 call 0x5444e0                                     |     BloombergLP::bdlcc::SkipList<BloombergLP::bsls::TimeInterval,bsl::function<void()>>::~SkipList() (rsp + 0xc0);
    0x004093ec lea rdi, [rsp + 0x440]                            |     
    0x004093f4 call 0x651610                                     |     BloombergLP::bslstl::Function_Rep::~Function_Rep() (rsp + 0x440);
    0x004093f9 jmp 0x411d4d                                      |     void (*0x411d4d)() ();
    0x004093fe call 0x5225f0                                     |     TestDriver<signedchar,signedchar>::findTest() ();
    0x00409403 call 0x5242c0                                     |     TestDriver<unsigned long,unsigned long>::findTest() ();
    0x00409408 call 0x5260a0                                     |     TestDriver<BloombergLP::bsltf::TemplateTestFacility_StubClass*,BloombergLP::bsltf::TemplateTestFacility_StubClass*>::findTest() ();
    0x0040940d call 0x527ed0                                     |     TestDriver<void(*)(),void(*)()>::findTest() ();
    0x00409412 call 0x529d00                                     |     TestDriver<BloombergLP::bsltf::EnumeratedTestType::Enum,BloombergLP::bsltf::EnumeratedTestType::Enum>::findTest() ();
    0x00409417 call 0x52ba50                                     |     TestDriver<BloombergLP::bsltf::UnionTestType,BloombergLP::bsltf::UnionTestType>::findTest() ();
    0x0040941c call 0x52db20                                     |     TestDriver<BloombergLP::bsltf::SimpleTestType,BloombergLP::bsltf::SimpleTestType>::findTest() ();
    0x00409421 call 0x52f8b0                                     |     TestDriver<BloombergLP::bsltf::AllocTestType,BloombergLP::bsltf::AllocTestType>::findTest() ();
    0x00409426 call 0x5316c0                                     |     TestDriver<BloombergLP::bsltf::BitwiseCopyableTestType,BloombergLP::bsltf::BitwiseCopyableTestType>::findTest() ();
    0x0040942b call 0x533450                                     |     TestDriver<BloombergLP::bsltf::BitwiseMoveableTestType,BloombergLP::bsltf::BitwiseMoveableTestType>::findTest() ();
    0x00409430 call 0x5351e0                                     |     TestDriver<BloombergLP::bsltf::AllocBitwiseMoveableTestType,BloombergLP::bsltf::AllocBitwiseMoveableTestType>::findTest() ();
    0x00409435 call 0x537080                                     |     TestDriver<BloombergLP::bsltf::MovableTestType,BloombergLP::bsltf::MovableTestType>::findTest() ();
    0x0040943a call 0x538e50                                     |     TestDriver<BloombergLP::bsltf::MovableAllocTestType,BloombergLP::bsltf::MovableAllocTestType>::findTest() ();
    0x0040943f call 0x53ade0                                     |     TestDriver<BloombergLP::bsltf::NonTypicalOverloadsTestType,BloombergLP::bsltf::NonTypicalOverloadsTestType>::findTest() ();
    0x00409444 call 0x53cb70                                     |     TestDriver<int,int(BloombergLP::bsltf::TemplateTestFacility_StubClass::*)()>::findTest() ();
    0x00409449 call 0x53e990                                     |     TestDriver<int,BloombergLP::bsltf::AllocTestType>::findTest() ();
    0x0040944e call 0x540880                                     |     TestDriver<int,BloombergLP::bsltf::MovableAllocTestType>::findTest() ();
    0x00409453 call 0x542820                                     |     TestDriver<int,BloombergLP::bsltf::SimpleTestType>::findTest() ();
    0x00409458 jmp 0x411d4d                                      |     void (*0x411d4d)() ();
    0x0040945d call 0x4fcbd0                                     |     TestDriver<signedchar,signedchar>::findRTest() ();
    0x00409462 call 0x4fec30                                     |     TestDriver<unsigned long,unsigned long>::findRTest() ();
    0x00409467 call 0x500ce0                                     |     TestDriver<BloombergLP::bsltf::TemplateTestFacility_StubClass*,BloombergLP::bsltf::TemplateTestFacility_StubClass*>::findRTest() ();
    0x0040946c call 0x502e40                                     |     TestDriver<void(*)(),void(*)()>::findRTest() ();
    0x00409471 call 0x504fa0                                     |     TestDriver<BloombergLP::bsltf::EnumeratedTestType::Enum,BloombergLP::bsltf::EnumeratedTestType::Enum>::findRTest() ();
    0x00409476 call 0x507010                                     |     TestDriver<BloombergLP::bsltf::UnionTestType,BloombergLP::bsltf::UnionTestType>::findRTest() ();
    0x0040947b call 0x5092f0                                     |     TestDriver<BloombergLP::bsltf::SimpleTestType,BloombergLP::bsltf::SimpleTestType>::findRTest() ();
    0x00409480 call 0x50b340                                     |     TestDriver<BloombergLP::bsltf::AllocTestType,BloombergLP::bsltf::AllocTestType>::findRTest() ();
    0x00409485 call 0x50d680                                     |     TestDriver<BloombergLP::bsltf::BitwiseCopyableTestType,BloombergLP::bsltf::BitwiseCopyableTestType>::findRTest() ();
    0x0040948a call 0x50f6d0                                     |     TestDriver<BloombergLP::bsltf::BitwiseMoveableTestType,BloombergLP::bsltf::BitwiseMoveableTestType>::findRTest() ();
    0x0040948f call 0x511720                                     |     TestDriver<BloombergLP::bsltf::AllocBitwiseMoveableTestType,BloombergLP::bsltf::AllocBitwiseMoveableTestType>::findRTest() ();
    0x00409494 call 0x5138c0                                     |     TestDriver<BloombergLP::bsltf::MovableTestType,BloombergLP::bsltf::MovableTestType>::findRTest() ();
    0x00409499 call 0x515ae0                                     |     TestDriver<BloombergLP::bsltf::MovableAllocTestType,BloombergLP::bsltf::MovableAllocTestType>::findRTest() ();
    0x0040949e call 0x517fa0                                     |     TestDriver<BloombergLP::bsltf::NonTypicalOverloadsTestType,BloombergLP::bsltf::NonTypicalOverloadsTestType>::findRTest() ();
    0x004094a3 call 0x519ff0                                     |     TestDriver<int,int(BloombergLP::bsltf::TemplateTestFacility_StubClass::*)()>::findRTest() ();
    0x004094a8 call 0x51c370                                     |     TestDriver<int,BloombergLP::bsltf::AllocTestType>::findRTest() ();
    0x004094ad call 0x51e480                                     |     TestDriver<int,BloombergLP::bsltf::MovableAllocTestType>::findRTest() ();
    0x004094b2 call 0x520630                                     |     TestDriver<int,BloombergLP::bsltf::SimpleTestType>::findRTest() ();
    0x004094b7 jmp 0x411d4d                                      |     void (*0x411d4d)() ();
    0x004094bc call 0x4eaea0                                     |     TestDriver<signedchar,signedchar>::removeAllTest() ();
    0x004094c1 call 0x4ebe90                                     |     TestDriver<unsigned long,unsigned long>::removeAllTest() ();
    0x004094c6 call 0x4ece80                                     |     TestDriver<BloombergLP::bsltf::TemplateTestFacility_StubClass*,BloombergLP::bsltf::TemplateTestFacility_StubClass*>::removeAllTest() ();
    0x004094cb call 0x4ede70                                     |     TestDriver<void(*)(),void(*)()>::removeAllTest() ();
    0x004094d0 call 0x4eee60                                     |     TestDriver<BloombergLP::bsltf::EnumeratedTestType::Enum,BloombergLP::bsltf::EnumeratedTestType::Enum>::removeAllTest() ();
    0x004094d5 call 0x4efe50                                     |     TestDriver<BloombergLP::bsltf::UnionTestType,BloombergLP::bsltf::UnionTestType>::removeAllTest() ();
    0x004094da call 0x4f0e80                                     |     TestDriver<BloombergLP::bsltf::SimpleTestType,BloombergLP::bsltf::SimpleTestType>::removeAllTest() ();
    0x004094df call 0x4f1ea0                                     |     TestDriver<BloombergLP::bsltf::AllocTestType,BloombergLP::bsltf::AllocTestType>::removeAllTest() ();
    0x004094e4 call 0x4f2dd0                                     |     TestDriver<BloombergLP::bsltf::BitwiseCopyableTestType,BloombergLP::bsltf::BitwiseCopyableTestType>::removeAllTest() ();
    0x004094e9 call 0x4f3df0                                     |     TestDriver<BloombergLP::bsltf::BitwiseMoveableTestType,BloombergLP::bsltf::BitwiseMoveableTestType>::removeAllTest() ();
    0x004094ee call 0x4f4e10                                     |     TestDriver<BloombergLP::bsltf::AllocBitwiseMoveableTestType,BloombergLP::bsltf::AllocBitwiseMoveableTestType>::removeAllTest() ();
    0x004094f3 call 0x4f5d40                                     |     TestDriver<BloombergLP::bsltf::MovableTestType,BloombergLP::bsltf::MovableTestType>::removeAllTest() ();
    0x004094f8 call 0x4f6c70                                     |     TestDriver<BloombergLP::bsltf::MovableAllocTestType,BloombergLP::bsltf::MovableAllocTestType>::removeAllTest() ();
    0x004094fd call 0x4f7bf0                                     |     TestDriver<BloombergLP::bsltf::NonTypicalOverloadsTestType,BloombergLP::bsltf::NonTypicalOverloadsTestType>::removeAllTest() ();
    0x00409502 call 0x4f8c10                                     |     TestDriver<int,int(BloombergLP::bsltf::TemplateTestFacility_StubClass::*)()>::removeAllTest() ();
    0x00409507 call 0x4f9c90                                     |     TestDriver<int,BloombergLP::bsltf::AllocTestType>::removeAllTest() ();
    0x0040950c call 0x4fac40                                     |     TestDriver<int,BloombergLP::bsltf::MovableAllocTestType>::removeAllTest() ();
    0x00409511 call 0x4fbc10                                     |     TestDriver<int,BloombergLP::bsltf::SimpleTestType>::removeAllTest() ();
    0x00409516 jmp 0x411d4d                                      |     void (*0x411d4d)() ();
    0x0040951b call 0x4bb390                                     |     TestDriver<signedchar,signedchar>::addRTest() ();
    0x00409520 call 0x4bdce0                                     |     TestDriver<unsigned long,unsigned long>::addRTest() ();
    0x00409525 call 0x4c0730                                     |     TestDriver<BloombergLP::bsltf::TemplateTestFacility_StubClass*,BloombergLP::bsltf::TemplateTestFacility_StubClass*>::addRTest() ();
    0x0040952a call 0x4c32f0                                     |     TestDriver<void(*)(),void(*)()>::addRTest() ();
    0x0040952f call 0x4c5eb0                                     |     TestDriver<BloombergLP::bsltf::EnumeratedTestType::Enum,BloombergLP::bsltf::EnumeratedTestType::Enum>::addRTest() ();
    0x00409534 call 0x4c8810                                     |     TestDriver<BloombergLP::bsltf::UnionTestType,BloombergLP::bsltf::UnionTestType>::addRTest() ();
    0x00409539 call 0x4cb340                                     |     TestDriver<BloombergLP::bsltf::SimpleTestType,BloombergLP::bsltf::SimpleTestType>::addRTest() ();
    0x0040953e call 0x4cde00                                     |     TestDriver<BloombergLP::bsltf::AllocTestType,BloombergLP::bsltf::AllocTestType>::addRTest() ();
    0x00409543 call 0x4d07b0                                     |     TestDriver<BloombergLP::bsltf::BitwiseCopyableTestType,BloombergLP::bsltf::BitwiseCopyableTestType>::addRTest() ();
    0x00409548 call 0x4d3270                                     |     TestDriver<BloombergLP::bsltf::BitwiseMoveableTestType,BloombergLP::bsltf::BitwiseMoveableTestType>::addRTest() ();
    0x0040954d call 0x4d5d30                                     |     TestDriver<BloombergLP::bsltf::AllocBitwiseMoveableTestType,BloombergLP::bsltf::AllocBitwiseMoveableTestType>::addRTest() ();
    0x00409552 call 0x4d8690                                     |     TestDriver<BloombergLP::bsltf::MovableTestType,BloombergLP::bsltf::MovableTestType>::addRTest() ();
    0x00409557 call 0x4daf90                                     |     TestDriver<BloombergLP::bsltf::MovableAllocTestType,BloombergLP::bsltf::MovableAllocTestType>::addRTest() ();
    0x0040955c call 0x4ddbc0                                     |     TestDriver<BloombergLP::bsltf::NonTypicalOverloadsTestType,BloombergLP::bsltf::NonTypicalOverloadsTestType>::addRTest() ();
    0x00409561 call 0x4e0680                                     |     TestDriver<int,int(BloombergLP::bsltf::TemplateTestFacility_StubClass::*)()>::addRTest() ();
    0x00409566 call 0x4e30f0                                     |     TestDriver<int,BloombergLP::bsltf::AllocTestType>::addRTest() ();
    0x0040956b call 0x4e5b10                                     |     TestDriver<int,BloombergLP::bsltf::MovableAllocTestType>::addRTest() ();
    0x00409570 call 0x4e8550                                     |     TestDriver<int,BloombergLP::bsltf::SimpleTestType>::addRTest() ();
    0x00409575 jmp 0x411d4d                                      |     void (*0x411d4d)() ();
    0x0040957a call 0x4a8640                                     |     TestDriver<signedchar,signedchar>::updateRTest() ();
    0x0040957f call 0x4a9510                                     |     TestDriver<unsigned long,unsigned long>::updateRTest() ();
    0x00409584 call 0x4aa440                                     |     TestDriver<BloombergLP::bsltf::TemplateTestFacility_StubClass*,BloombergLP::bsltf::TemplateTestFacility_StubClass*>::updateRTest() ();
    0x00409589 call 0x4ab470                                     |     TestDriver<void(*)(),void(*)()>::updateRTest() ();
    0x0040958e call 0x4ac4a0                                     |     TestDriver<BloombergLP::bsltf::EnumeratedTestType::Enum,BloombergLP::bsltf::EnumeratedTestType::Enum>::updateRTest() ();
    0x00409593 call 0x4ad360                                     |     TestDriver<BloombergLP::bsltf::UnionTestType,BloombergLP::bsltf::UnionTestType>::updateRTest() ();
    0x00409598 call 0x4ae530                                     |     TestDriver<BloombergLP::bsltf::SimpleTestType,BloombergLP::bsltf::SimpleTestType>::updateRTest() ();
    0x0040959d call 0x4af500                                     |     TestDriver<BloombergLP::bsltf::AllocTestType,BloombergLP::bsltf::AllocTestType>::updateRTest() ();
    0x004095a2 call 0x4b0810                                     |     TestDriver<BloombergLP::bsltf::BitwiseCopyableTestType,BloombergLP::bsltf::BitwiseCopyableTestType>::updateRTest() ();
    0x004095a7 call 0x4b17e0                                     |     TestDriver<BloombergLP::bsltf::BitwiseMoveableTestType,BloombergLP::bsltf::BitwiseMoveableTestType>::updateRTest() ();
    0x004095ac call 0x4b27b0                                     |     TestDriver<BloombergLP::bsltf::AllocBitwiseMoveableTestType,BloombergLP::bsltf::AllocBitwiseMoveableTestType>::updateRTest() ();
    0x004095b1 call 0x4b3730                                     |     TestDriver<BloombergLP::bsltf::MovableTestType,BloombergLP::bsltf::MovableTestType>::updateRTest() ();
    0x004095b6 call 0x4b4a40                                     |     TestDriver<BloombergLP::bsltf::MovableAllocTestType,BloombergLP::bsltf::MovableAllocTestType>::updateRTest() ();
    0x004095bb call 0x4b5d50                                     |     TestDriver<BloombergLP::bsltf::NonTypicalOverloadsTestType,BloombergLP::bsltf::NonTypicalOverloadsTestType>::updateRTest() ();
    0x004095c0 call 0x4b6d20                                     |     TestDriver<int,int(BloombergLP::bsltf::TemplateTestFacility_StubClass::*)()>::updateRTest() ();
    0x004095c5 call 0x4b7be0                                     |     TestDriver<int,BloombergLP::bsltf::AllocTestType>::updateRTest() ();
    0x004095ca call 0x4b9030                                     |     TestDriver<int,BloombergLP::bsltf::MovableAllocTestType>::updateRTest() ();
    0x004095cf call 0x4ba480                                     |     TestDriver<int,BloombergLP::bsltf::SimpleTestType>::updateRTest() ();
    0x004095d4 jmp 0x411d4d                                      |     void (*0x411d4d)() ();
    0x004095d9 cmp dword [rip + 0x510df8], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x004095e0 je 0x409729                                       |         
    0x004095e6 mov rax, qword [rip + 0x510d3b]                   |         rax = std::__1::cout;
    0x004095ed mov esi, 0x91a328                                 |         esi = std::__1::cout;
    0x004095f2 add rsi, qword [rax - 0x18]                       |         rsi += *((rax - 0x18));
    0x004095f6 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x004095fe call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00409603 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040960b mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00409610 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00409615 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00409618 mov rdi, rax                                      |         rdi = rax;
    0x0040961b mov esi, 0xa                                      |         esi = 0xa;
    0x00409620 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00409623 mov ebx, eax                                      |         ebx = eax;
    0x00409625 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040962d call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00409632 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x00409635 mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x0040963a call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040963f mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x00409644 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x00409649 mov edi, 0x91a328                                 |         
    0x0040964e mov esi, 0x67bd1b                                 |         
    0x00409653 mov edx, 0x24                                     |         
    0x00409658 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "Node deallocation thread safety test", 0x24);
    0x0040965d mov rbx, rax                                      |         rbx = rax;
    0x00409660 mov rax, qword [rax]                              |         rax = *(rax);
    0x00409663 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x00409667 add rsi, rbx                                      |         rsi += rbx;
    0x0040966a lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00409672 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00409677 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040967f mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00409684 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00409689 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040968c mov rdi, rax                                      |         rdi = rax;
    0x0040968f mov esi, 0xa                                      |         esi = 0xa;
    0x00409694 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00409697 mov ebp, eax                                      |         
    0x00409699 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x004096a1 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x004096a6 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x004096aa mov rdi, rbx                                      |         rdi = rbx;
    0x004096ad call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x004096b2 mov rdi, rbx                                      |         rdi = rbx;
    0x004096b5 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x004096ba mov esi, 0x67b4b0                                 |         
    0x004096bf mov edx, 0x24                                     |         
    0x004096c4 mov rdi, rbx                                      |         
    0x004096c7 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rbx, 0x67b4b0, 0x24);
    0x004096cc mov rbx, rax                                      |         rbx = rax;
    0x004096cf mov rax, qword [rax]                              |         rax = *(rax);
    0x004096d2 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x004096d6 add rsi, rbx                                      |         rsi += rbx;
    0x004096d9 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x004096e1 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x004096e6 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x004096ee mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x004096f3 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x004096f8 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x004096fb mov rdi, rax                                      |         rdi = rax;
    0x004096fe mov esi, 0xa                                      |         esi = 0xa;
    0x00409703 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00409706 mov ebp, eax                                      |         
    0x00409708 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00409710 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00409715 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x00409719 mov rdi, rbx                                      |         rdi = rbx;
    0x0040971c call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00409721 mov rdi, rbx                                      |         rdi = rbx;
    0x00409724 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x00409729 xor esi, esi                                      |     
    0x0040972b cmp dword [rip + 0x510cae], 0                     |     
    0x00409732 setne sil                                         |     sil = (*(obj.veryVeryVerbose) != 0) ? 1 : 0;
    0x00409736 lea rbp, [rsp + 0x2c0]                            |     rbp = rsp + 0x2c0;
    0x0040973e mov rdi, rbp                                      |     
    0x00409741 xor edx, edx                                      |     
    0x00409743 call 0x64e930                                     |     BloombergLP::bslma::TestAllocator::TestAllocator(bool,BloombergLP::bslma::Allocator*) (rbp, 0, 0);
    0x00409748 lea rdi, [rsp + 0x440]                            |     
    0x00409750 call 0x649c40                                     |     BloombergLP::bdlcc::SkipList_RandomLevelGenerator::SkipList_RandomLevelGenerator() (rsp + 0x440);
    0x00409755 mov dword [rsp + 0x448], 0                        |     *((rsp + 0x448)) = 0;
    0x00409760 lea rbx, [rsp + 0x460]                            |     rbx = rsp + 0x460;
    0x00409768 mov rdi, rbx                                      |     rdi = rbx;
    0x0040976b xor esi, esi                                      |     esi = 0;
    0x0040976d call 0x404cc0                                     |     pthread_mutex_init ();
    0x00409772 mov dword [rsp + 0x488], 0                        |     *((rsp + 0x488)) = 0;
    0x0040977d mov qword [rsp + 0x490], 0                        |     *((rsp + 0x490)) = 0;
    0x00409789 mov qword [rsp + 0x498], rbp                      |     *((rsp + 0x498)) = rbp;
    0x00409791 movaps xmm0, xmmword [rip + 0x270a98]             |     xmm0 = " 0@P`p";
    0x00409798 movaps xmmword [rsp + 0xc0], xmm0                 |     *((rsp + 0xc0)) = xmm0;
    0x004097a0 movaps xmm0, xmmword [rip + 0x270a99]             |     xmm0 = *(0x0067a240);
    0x004097a7 movaps xmmword [rsp + 0xd0], xmm0                 |     *((rsp + 0xd0)) = xmm0;
    0x004097af movaps xmm0, xmmword [rip + 0x270a9a]             |     xmm0 = *(0x0067a250);
    0x004097b6 movaps xmmword [rsp + 0xe0], xmm0                 |     *((rsp + 0xe0)) = xmm0;
    0x004097be movaps xmm0, xmmword [rip + 0x270a9b]             |     xmm0 = *(0x0067a260);
    0x004097c5 movaps xmmword [rsp + 0xf0], xmm0                 |     *((rsp + 0xf0)) = xmm0;
    0x004097cd movaps xmm0, xmmword [rip + 0x270a9c]             |     xmm0 = *(0x0067a270);
    0x004097d4 movaps xmmword [rsp + 0x100], xmm0                |     *((rsp + 0x100)) = xmm0;
    0x004097dc movaps xmm0, xmmword [rip + 0x270a9d]             |     xmm0 = *(0x0067a280);
    0x004097e3 movaps xmmword [rsp + 0x110], xmm0                |     *((rsp + 0x110)) = xmm0;
    0x004097eb movaps xmm0, xmmword [rip + 0x270a9e]             |     xmm0 = *(0x0067a290);
    0x004097f2 movaps xmmword [rsp + 0x120], xmm0                |     *((rsp + 0x120)) = xmm0;
    0x004097fa movapd xmm0, xmmword [rip + 0x270a9e]             |     __asm ("movapd xmm0, xmmword [0x0067a2a0]");
    0x00409802 movapd xmmword [rsp + 0x130], xmm0                |     __asm ("movapd xmmword [rsp + 0x130], xmm0");
    0x0040980b lea rdi, [rsp + 0xc0]                             |     
    0x00409813 mov esi, 0x20                                     |     
    0x00409818 mov rdx, rbp                                      |     
    0x0040981b call 0x64a120                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::createPoolManager(int*,int,BloombergLP::bslma::Allocator*) (rsp + 0xc0, 0x20, rbp);
    0x00409820 mov qword [rsp + 0x490], rax                      |     *((rsp + 0x490)) = rax;
    0x00409828 mov rdi, rax                                      |     
    0x0040982b mov esi, 0x1f                                     |     
    0x00409830 call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (rax, 0x1f);
    0x00409835 mov qword [rsp + 0x450], rax                      |     *((rsp + 0x450)) = rax;
    0x0040983d mov rdi, qword [rsp + 0x490]                      |     
    0x00409845 mov esi, 0x1f                                     |     
    0x0040984a call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x490)), 0x1f);
    0x0040984f mov qword [rsp + 0x458], rax                      |     *((rsp + 0x458)) = rax;
    0x00409857 xor ecx, ecx                                      |     ecx = 0;
    0x00409859 nop dword [rax]                                   |     
                                                                 |     do {
    0x00409860 mov rax, qword [rsp + 0x450]                      |         rax = *((rsp + 0x450));
    0x00409868 mov qword [rax + rcx + 0x18], 0                   |         *((rax + rcx + 0x18)) = 0;
    0x00409871 mov rax, qword [rsp + 0x450]                      |         rax = *((rsp + 0x450));
    0x00409879 mov rdx, qword [rsp + 0x458]                      |         rdx = *((rsp + 0x458));
    0x00409881 mov qword [rax + rcx + 0x10], rdx                 |         *((rax + rcx + 0x10)) = rdx;
    0x00409886 mov rax, qword [rsp + 0x450]                      |         rax = *((rsp + 0x450));
    0x0040988e mov rdx, qword [rsp + 0x458]                      |         rdx = *((rsp + 0x458));
    0x00409896 mov qword [rdx + rcx + 0x18], rax                 |         *((rdx + rcx + 0x18)) = rax;
    0x0040989b mov rax, qword [rsp + 0x458]                      |         rax = *((rsp + 0x458));
    0x004098a3 mov qword [rax + rcx + 0x10], 0                   |         *((rax + rcx + 0x10)) = 0;
    0x004098ac add rcx, 0x10                                     |         rcx += 0x10;
    0x004098b0 cmp rcx, 0x200                                    |         
    0x004098b7 jne 0x409860                                      |         
                                                                 |     } while (rcx != 0x200);
    0x004098b9 mov rax, qword [rsp + 0x450]                      |     rax = *((rsp + 0x450));
    0x004098c1 mov rbp, qword [rax + 0x10]                       |     rbp = *((rax + 0x10));
    0x004098c5 cmp rbp, qword [rsp + 0x458]                      |     
                                                                 |     if (rbp == *((rsp + 0x458))) {
    0x004098cd je 0x4098e6                                       |         goto label_29;
                                                                 |     }
    0x004098cf nop                                               |     
                                                                 |     do {
    0x004098d0 mov rdi, rbp                                      |         
    0x004098d3 call 0x649ba0                                     |         BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (rbp);
    0x004098d8 mov rbp, qword [rbp + 0x10]                       |         rbp = *((rbp + 0x10));
    0x004098dc cmp rbp, qword [rsp + 0x458]                      |         
    0x004098e4 jne 0x4098d0                                      |         
                                                                 |     } while (rbp != *((rsp + 0x458)));
                                                                 | label_29:
    0x004098e6 mov rsi, qword [rsp + 0x490]                      |     
    0x004098ee mov rdi, qword [rsp + 0x498]                      |     
    0x004098f6 call 0x64a360                                     |     BloombergLP::bdlcc::SkipList_PoolUtil::deletePoolManager(BloombergLP::bslma::Allocator*,BloombergLP::bdlcc::SkipList_PoolManager*) (*((rsp + 0x498)), *((rsp + 0x490)));
    0x004098fb lea rdi, [rsp + 0x460]                            |     rdi = rsp + 0x460;
    0x00409903 call 0x64f850                                     |     BloombergLP::bslmt::MutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::~MutexImpl() ();
    0x00409908 mov rax, qword [rsp + 0x2e8]                      |     rax = *((rsp + 0x2e8));
    0x00409910 test rax, rax                                     |     
                                                                 |     if (rax <= 0) {
    0x00409913 jg 0x40993c                                       |         
    0x00409915 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040991a mov rbx, rax                                      |         rbx = rax;
    0x0040991d mov rdi, rax                                      |         
    0x00409920 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00409925 mov edi, 0x67baba                                 |         edi = "0 < ta.numAllocations()";
    0x0040992a mov esi, 0x1599                                   |         esi = 0x1599;
    0x0040992f call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00409934 mov rdi, rbx                                      |         
    0x00409937 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040993c mov rax, qword [rsp + 0x310]                      |     rax = *((rsp + 0x310));
    0x00409944 test rax, rax                                     |     
                                                                 |     if (rax == 0) {
    0x00409947 je 0x40dae7                                       |         goto label_30;
                                                                 |     }
    0x0040994d call 0x64fbf0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00409952 mov rbx, rax                                      |     rbx = rax;
    0x00409955 mov rdi, rax                                      |     
    0x00409958 call 0x64f8a0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040995d mov edi, 0x67b519                                 |     edi = "0 == ta.numBytesInUse()";
    0x00409962 mov esi, 0x159a                                   |     esi = 0x159a;
    0x00409967 call 0x405800                                     |     (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040996c mov rdi, rbx                                      |     
    0x0040996f call 0x64f9f0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x00409974 jmp 0x40dae7                                      |     goto label_30;
    0x00409979 cmp dword [rip + 0x510a58], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x00409980 je 0x409ac9                                       |         
    0x00409986 mov rax, qword [rip + 0x51099b]                   |         rax = std::__1::cout;
    0x0040998d mov esi, 0x91a328                                 |         esi = std::__1::cout;
    0x00409992 add rsi, qword [rax - 0x18]                       |         rsi += *((rax - 0x18));
    0x00409996 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040999e call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x004099a3 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x004099ab mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x004099b0 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x004099b5 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x004099b8 mov rdi, rax                                      |         rdi = rax;
    0x004099bb mov esi, 0xa                                      |         esi = 0xa;
    0x004099c0 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x004099c3 mov ebx, eax                                      |         ebx = eax;
    0x004099c5 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x004099cd call 0x405240                                     |         std::_1::locale::~locale() ();
    0x004099d2 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x004099d5 mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x004099da call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x004099df mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x004099e4 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x004099e9 mov edi, 0x91a328                                 |         
    0x004099ee mov esi, 0x67bc80                                 |         
    0x004099f3 mov edx, 0xb                                      |         
    0x004099f8 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "Remove test", 0xb);
    0x004099fd mov rbx, rax                                      |         rbx = rax;
    0x00409a00 mov rax, qword [rax]                              |         rax = *(rax);
    0x00409a03 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x00409a07 add rsi, rbx                                      |         rsi += rbx;
    0x00409a0a lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00409a12 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00409a17 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00409a1f mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00409a24 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00409a29 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00409a2c mov rdi, rax                                      |         rdi = rax;
    0x00409a2f mov esi, 0xa                                      |         esi = 0xa;
    0x00409a34 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00409a37 mov ebp, eax                                      |         
    0x00409a39 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00409a41 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00409a46 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x00409a4a mov rdi, rbx                                      |         rdi = rbx;
    0x00409a4d call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00409a52 mov rdi, rbx                                      |         rdi = rbx;
    0x00409a55 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x00409a5a mov esi, 0x67b973                                 |         
    0x00409a5f mov edx, 0xb                                      |         
    0x00409a64 mov rdi, rbx                                      |         
    0x00409a67 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rbx, 0x67b973, 0xb);
    0x00409a6c mov rbx, rax                                      |         rbx = rax;
    0x00409a6f mov rax, qword [rax]                              |         rax = *(rax);
    0x00409a72 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x00409a76 add rsi, rbx                                      |         rsi += rbx;
    0x00409a79 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00409a81 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00409a86 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00409a8e mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00409a93 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00409a98 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00409a9b mov rdi, rax                                      |         rdi = rax;
    0x00409a9e mov esi, 0xa                                      |         esi = 0xa;
    0x00409aa3 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00409aa6 mov ebp, eax                                      |         
    0x00409aa8 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00409ab0 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00409ab5 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x00409ab9 mov rdi, rbx                                      |         rdi = rbx;
    0x00409abc call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00409ac1 mov rdi, rbx                                      |         rdi = rbx;
    0x00409ac4 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x00409ac9 lea rdi, [rsp + 0x2c0]                            |     
    0x00409ad1 xor esi, esi                                      |     
    0x00409ad3 call 0x4154e0                                     |     BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>::SkipList(BloombergLP::bslma::Allocator*) (rsp + 0x2c0, 0);
    0x00409ad8 mov dword [rsp + 0xc0], 0x3e8                     |     *((rsp + 0xc0)) = 0x3e8;
    0x00409ae3 lea r15, [rsp + 0x2c0]                            |     r15 = rsp + 0x2c0;
    0x00409aeb lea rsi, [rsp + 0xc0]                             |     
    0x00409af3 mov rdi, r15                                      |     
    0x00409af6 call 0x415630                                     |     BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>::add(intconst&,(anonymousnamespace)::u::CountedDeleteconst&,bool*) (r15, rsp + 0xc0);
    0x00409afb lea r14, [rsp + 0x2e0]                            |     r14 = rsp + 0x2e0;
    0x00409b03 mov rdi, r14                                      |     rdi = r14;
    0x00409b06 call 0x4052c0                                     |     pthread_mutex_lock ();
    0x00409b0b mov rax, qword [rsp + 0x2d0]                      |     rax = *((rsp + 0x2d0));
    0x00409b13 mov r13, qword [rax + 0x10]                       |     r13 = *((rax + 0x10));
    0x00409b17 cmp r13, qword [rsp + 0x2d8]                      |     
                                                                 |     if (r13 == *((rsp + 0x2d8))) {
    0x00409b1f je 0x40d437                                       |         goto label_31;
                                                                 |     }
    0x00409b25 mov rdi, r13                                      |     
    0x00409b28 call 0x649be0                                     |     BloombergLP::bdlcc::SkipList_Control::incrementRefCount() (r13);
    0x00409b2d mov rdi, r14                                      |     rdi = r14;
    0x00409b30 call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x00409b35 test r13, r13                                     |     
                                                                 |     if (r13 != 0) {
    0x00409b38 jne 0x40d46c                                      |         goto label_32;
                                                                 |     }
    0x00409b3e jmp 0x40d43f                                      |     goto label_33;
    0x00409b43 cmp dword [rip + 0x51088e], 0                     |     
                                                                 |     if (*(obj.verbose) == 0) {
    0x00409b4a je 0x40c9f0                                       |         goto label_34;
                                                                 |     }
    0x00409b50 mov rdi, qword [r15 + 0x10]                       |     
    0x00409b54 xor esi, esi                                      |     
    0x00409b56 mov edx, 0xa                                      |     
    0x00409b5b call 0x404f50                                     |     eax = strtol (*((r15 + 0x10)), 0, 0xa);
    0x00409b60 test eax, eax                                     |     
    0x00409b62 mov ecx, 0x14                                     |     ecx = 0x14;
                                                                 |     if (eax != 0) {
    0x00409b67 cmovne ecx, eax                                   |         ecx = eax;
                                                                 |     }
    0x00409b6a mov dword [rsp], ecx                              |     *(rsp) = ecx;
    0x00409b6d mov eax, dword [rip + 0x510869]                   |     eax = veryVerbose;
    0x00409b73 mov dword [rip + 0x51085f], eax                   |     *(obj.verbose) = eax;
    0x00409b79 mov ecx, dword [rip + 0x510861]                   |     ecx = veryVeryVerbose;
    0x00409b7f mov dword [rip + 0x510857], ecx                   |     *(obj.veryVerbose) = ecx;
    0x00409b85 mov ecx, dword [rip + 0x510859]                   |     ecx = veryVeryVeryVerbose;
    0x00409b8b mov dword [rip + 0x51084f], ecx                   |     *(obj.veryVeryVerbose) = ecx;
    0x00409b91 mov dword [rip + 0x510849], 0                     |     *(obj.veryVeryVeryVerbose) = 0;
    0x00409b9b test eax, eax                                     |     
                                                                 |     if (eax == 0) {
    0x00409b9d je 0x40c9f7                                       |         goto label_35;
                                                                 |     }
    0x00409ba3 mov rax, qword [r15 + 0x18]                       |     rax = *((r15 + 0x18));
    0x00409ba7 mov qword [r15 + 0x10], rax                       |     *((r15 + 0x10)) = rax;
    0x00409bab jmp 0x40c9f7                                      |     goto label_35;
    0x00409bb0 cmp dword [rip + 0x510821], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x00409bb7 je 0x409cfe                                       |         
    0x00409bbd mov rax, qword [rip + 0x510764]                   |         rax = std::__1::cout;
    0x00409bc4 mov esi, 0x91a328                                 |         esi = std::__1::cout;
    0x00409bc9 add rsi, qword [rax - 0x18]                       |         rsi += *((rax - 0x18));
    0x00409bcd lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00409bd5 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00409bda lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00409be2 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00409be7 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00409bec mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00409bef mov rdi, rax                                      |         rdi = rax;
    0x00409bf2 mov esi, 0xa                                      |         esi = 0xa;
    0x00409bf7 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00409bfa mov ebx, eax                                      |         ebx = eax;
    0x00409bfc lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00409c04 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00409c09 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x00409c0c mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x00409c11 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00409c16 mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x00409c1b call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x00409c20 mov edi, 0x91a328                                 |         
    0x00409c25 mov esi, 0x67ba14                                 |         
    0x00409c2a mov edx, 0x1f                                     |         
    0x00409c2f call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "addPairReferenceRaw Safety test", 0x1f);
    0x00409c34 mov rbp, rax                                      |         
    0x00409c37 mov rax, qword [rax]                              |         rax = *(rax);
    0x00409c3a mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x00409c3e add rsi, rbp                                      |         rsi += rbp;
    0x00409c41 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00409c49 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00409c4e lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00409c56 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00409c5b call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00409c60 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00409c63 mov rdi, rax                                      |         rdi = rax;
    0x00409c66 mov esi, 0xa                                      |         esi = 0xa;
    0x00409c6b call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00409c6e mov ebx, eax                                      |         ebx = eax;
    0x00409c70 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00409c78 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00409c7d movsx esi, bl                                     |         esi = (int32_t) bl;
    0x00409c80 mov rdi, rbp                                      |         rdi = rbp;
    0x00409c83 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00409c88 mov rdi, rbp                                      |         rdi = rbp;
    0x00409c8b call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x00409c90 mov esi, 0x67b4b5                                 |         
    0x00409c95 mov edx, 0x1f                                     |         
    0x00409c9a mov rdi, rbp                                      |         
    0x00409c9d call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rbp, 0x67b4b5, 0x1f);
    0x00409ca2 mov rbp, rax                                      |         
    0x00409ca5 mov rax, qword [rax]                              |         rax = *(rax);
    0x00409ca8 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x00409cac add rsi, rbp                                      |         rsi += rbp;
    0x00409caf lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00409cb7 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00409cbc lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00409cc4 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00409cc9 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00409cce mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00409cd1 mov rdi, rax                                      |         rdi = rax;
    0x00409cd4 mov esi, 0xa                                      |         esi = 0xa;
    0x00409cd9 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00409cdc mov ebx, eax                                      |         ebx = eax;
    0x00409cde lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x00409ce6 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00409ceb movsx esi, bl                                     |         esi = (int32_t) bl;
    0x00409cee mov rdi, rbp                                      |         rdi = rbp;
    0x00409cf1 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00409cf6 mov rdi, rbp                                      |         rdi = rbp;
    0x00409cf9 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x00409cfe xor esi, esi                                      |     
    0x00409d00 cmp dword [rip + 0x5106d9], 0                     |     
    0x00409d07 setne sil                                         |     sil = (*(obj.veryVeryVerbose) != 0) ? 1 : 0;
    0x00409d0b lea rdi, [rsp + 0x2c0]                            |     
    0x00409d13 xor edx, edx                                      |     
    0x00409d15 call 0x64e930                                     |     BloombergLP::bslma::TestAllocator::TestAllocator(bool,BloombergLP::bslma::Allocator*) (rsp + 0x2c0, 0, 0);
    0x00409d1a lea rdi, [rsp + 0x1c0]                            |     
    0x00409d22 lea rsi, [rsp + 0x2c0]                            |     
    0x00409d2a call 0x64e780                                     |     BloombergLP::bslma::DefaultAllocatorGuard::DefaultAllocatorGuard(BloombergLP::bslma::Allocator*) (rsp + 0x1c0, rsp + 0x2c0);
    0x00409d2f lea rdi, [rsp + 0xc0]                             |     
    0x00409d37 xor esi, esi                                      |     
    0x00409d39 call 0x64e860                                     |     BloombergLP::bslma::TestAllocator::TestAllocator(BloombergLP::bslma::Allocator*) (rsp + 0xc0, 0);
    0x00409d3e lea rdi, [rsp + 0x440]                            |     
    0x00409d46 lea rsi, [rsp + 0xc0]                             |     
    0x00409d4e call 0x4154e0                                     |     BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>::SkipList(BloombergLP::bslma::Allocator*) (rsp + 0x440, rsp + 0xc0);
    0x00409d53 lea rdi, [rsp + 0x1f0]                            |     
    0x00409d5b lea rsi, [rsp + 0xc0]                             |     
    0x00409d63 call 0x650030                                     |     BloombergLP::bslmt::ThreadGroup::ThreadGroup(BloombergLP::bslma::Allocator*) (rsp + 0x1f0, rsp + 0xc0);
    0x00409d68 mov dword [rsp + 8], 1                            |     *((rsp + 8)) = 1;
    0x00409d70 lea r12, [rsp + 0x440]                            |     r12 = rsp + 0x440;
    0x00409d78 lea rsi, [rsp + 8]                                |     
    0x00409d7d mov rdi, r12                                      |     
    0x00409d80 call 0x415630                                     |     BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>::add(intconst&,(anonymousnamespace)::u::CountedDeleteconst&,bool*) (r12, rsp + 8);
    0x00409d85 mov r14d, 5                                       |     r14d = 5;
    0x00409d8b cmp dword [rip + 0x510646], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x00409d92 je 0x409e3b                                       |         
    0x00409d98 mov rdi, qword [r15 + 0x10]                       |         
    0x00409d9c xor esi, esi                                      |         
    0x00409d9e mov edx, 0xa                                      |         
    0x00409da3 call 0x404f50                                     |         rax = strtol (*((r15 + 0x10)), 0, 0xa);
    0x00409da8 mov r15, rax                                      |         r15 = rax;
    0x00409dab test r15d, r15d                                   |         
                                                                 |         if (r15d == 0) {
    0x00409dae je 0x409e3b                                       |             goto label_36;
                                                                 |         }
    0x00409db4 mov edi, 0x91a328                                 |         
    0x00409db9 mov esi, 0x67ba34                                 |         
    0x00409dbe mov edx, 0xd                                      |         
    0x00409dc3 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "Running with ", 0xd);
    0x00409dc8 mov rdi, rax                                      |         rdi = rax;
    0x00409dcb mov esi, r15d                                     |         esi = r15d;
    0x00409dce call 0x405010                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x00409dd3 mov esi, 0x67ba42                                 |         
    0x00409dd8 mov edx, 9                                        |         
    0x00409ddd mov rdi, rax                                      |         
    0x00409de0 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, " threads.", 9);
    0x00409de5 mov rbp, rax                                      |         
    0x00409de8 mov rax, qword [rax]                              |         rax = *(rax);
    0x00409deb mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x00409def add rsi, rbp                                      |         rsi += rbp;
    0x00409df2 lea rdi, [rsp + 8]                                |         rdi = rsp + 8;
    0x00409df7 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00409dfc lea rdi, [rsp + 8]                                |         rdi = rsp + 8;
    0x00409e01 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00409e06 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00409e0b mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00409e0e mov rdi, rax                                      |         rdi = rax;
    0x00409e11 mov esi, 0xa                                      |         esi = 0xa;
    0x00409e16 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00409e19 mov ebx, eax                                      |         ebx = eax;
    0x00409e1b lea rdi, [rsp + 8]                                |         rdi = rsp + 8;
    0x00409e20 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00409e25 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x00409e28 mov rdi, rbp                                      |         rdi = rbp;
    0x00409e2b call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00409e30 mov rdi, rbp                                      |         rdi = rbp;
    0x00409e33 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x00409e38 mov r14d, r15d                                    |         r14d = r15d;
                                                                 |     }
                                                                 | label_36:
    0x00409e3b mov eax, 0xfa0                                    |     eax = 0xfa0;
    0x00409e40 xor edx, edx                                      |     edx = 0;
    0x00409e42 idiv r14d                                         |     eax = edx:eax / r14d;
                                                                 |     edx = edx:eax % r14d;
    0x00409e45 mov qword [rsp + 0x560], 0x415890                 |     *((rsp + 0x560)) = method.ReferenceTest.referenceTestFunc_BloombergLP::bdlcc::SkipList_int___anonymous_namespace_::u::CountedDelete___int_;
    0x00409e51 mov qword [rsp + 0x568], r12                      |     *((rsp + 0x568)) = r12;
    0x00409e59 mov dword [rsp + 0x570], eax                      |     *((rsp + 0x570)) = eax;
    0x00409e60 lea rdi, [rsp + 0x78]                             |     
    0x00409e65 call 0x64fce0                                     |     BloombergLP::bslmt::ThreadAttributes::ThreadAttributes() (rsp + 0x78);
    0x00409e6a lea rbx, [rsp + 0x510]                            |     rbx = rsp + 0x510;
    0x00409e72 lea r15, [rsp + 0x78]                             |     r15 = rsp + 0x78;
    0x00409e77 lea r12, [rsp + 0x560]                            |     r12 = rsp + 0x560;
    0x00409e7f lea r13, [rsp + 8]                                |     r13 = rsp + 8;
    0x00409e84 nop word cs:[rax + rax]                           |     
    0x00409e8e nop                                               |     
                                                                 |     do {
    0x00409e90 cmp dword [rsp + 0x78], 0                         |         
                                                                 |         if (*((rsp + 0x78)) != 0) {
    0x00409e95 je 0x409ede                                       |             
    0x00409e97 mov rdi, r13                                      |             
    0x00409e9a mov rsi, r15                                      |             
    0x00409e9d xor edx, edx                                      |             
    0x00409e9f call 0x64fda0                                     |             BloombergLP::bslmt::ThreadAttributes::ThreadAttributes(BloombergLP::bslmt::ThreadAttributesconst&,BloombergLP::bslma::Allocator*) (r13, r15, 0);
    0x00409ea4 mov dword [rsp + 8], 0                            |             *((rsp + 8)) = 0;
    0x00409eac mov rcx, qword [rsp + 0x210]                      |             
    0x00409eb4 mov rdi, rbx                                      |             
    0x00409eb7 mov rsi, r13                                      |             
    0x00409eba mov rdx, r12                                      |             
    0x00409ebd call 0x437ad0                                     |             eax = intBloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil,void(*)(BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>*,int),BloombergLP::bdlf::Bind_BoundTuple2<BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>*,int>>>(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil,void(*)(BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>*,int),BloombergLP::bdlf::Bind_BoundTuple2<BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>*,int>>const&,BloombergLP::bslma::Allocator*) (rbx, r13, r12, *((rsp + 0x210)));
    0x00409ec2 mov ebp, eax                                      |             
    0x00409ec4 cmp qword [rsp + 0x40], 0x17                      |             
                                                                 |             if (*((rsp + 0x40)) == 0x17) {
    0x00409eca je 0x409ef6                                       |                 goto label_37;
                                                                 |             }
    0x00409ecc mov rsi, qword [rsp + 0x20]                       |             rsi = *((rsp + 0x20));
    0x00409ed1 mov rdi, qword [rsp + 0x48]                       |             rdi = *((rsp + 0x48));
    0x00409ed6 mov rax, qword [rdi]                              |             rax = *(rdi);
    0x00409ed9 call qword [rax + 0x18]                           |             uint64_t (*rax + 0x18)() ();
    0x00409edc jmp 0x409ef6                                      |             
                                                                 |         } else {
    0x00409ede mov rcx, qword [rsp + 0x210]                      |             
    0x00409ee6 mov rdi, rbx                                      |             
    0x00409ee9 mov rsi, r15                                      |             
    0x00409eec mov rdx, r12                                      |             
    0x00409eef call 0x437ad0                                     |             eax = intBloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil,void(*)(BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>*,int),BloombergLP::bdlf::Bind_BoundTuple2<BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>*,int>>>(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil,void(*)(BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>*,int),BloombergLP::bdlf::Bind_BoundTuple2<BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>*,int>>const&,BloombergLP::bslma::Allocator*) (rbx, r15, r12, *((rsp + 0x210)));
    0x00409ef4 mov ebp, eax                                      |             
                                                                 |         }
                                                                 | label_37:
    0x00409ef6 test ebp, ebp                                     |         
                                                                 |         if (ebp != 0) {
    0x00409ef8 jne 0x409f0f                                      |             goto label_38;
                                                                 |         }
    0x00409efa lea rdi, [rsp + 0x1f0]                            |         
    0x00409f02 mov rsi, rbx                                      |         
    0x00409f05 call 0x6500e0                                     |         BloombergLP::bslmt::ThreadGroup::addThread(unsigned longconst&) (rsp + 0x1f0, rbx);
    0x00409f0a dec r14d                                          |         r14d--;
    0x00409f0d jne 0x409e90                                      |         
                                                                 |     } while (r14d != 0);
                                                                 | label_38:
    0x00409f0f cmp qword [rsp + 0xb0], 0x17                      |     
                                                                 |     if (*((rsp + 0xb0)) != 0x17) {
    0x00409f18 je 0x409f30                                       |         
    0x00409f1a mov rsi, qword [rsp + 0x90]                       |         rsi = *((rsp + 0x90));
    0x00409f22 mov rdi, qword [rsp + 0xb8]                       |         rdi = *((rsp + 0xb8));
    0x00409f2a mov rax, qword [rdi]                              |         rax = *(rdi);
    0x00409f2d call qword [rax + 0x18]                           |         uint64_t (*rax + 0x18)() ();
                                                                 |     }
    0x00409f30 lea rdi, [rsp + 0x1f0]                            |     
    0x00409f38 call 0x650150                                     |     BloombergLP::bslmt::ThreadGroup::joinAll() (rsp + 0x1f0);
    0x00409f3d mov eax, dword [rip + 0x5104cd]                   |     eax = ReferenceTest::masterId;
    0x00409f43 cmp eax, 5                                        |     
                                                                 |     if (eax != 5) {
    0x00409f46 je 0x409f6f                                       |         
    0x00409f48 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00409f4d mov rbx, rax                                      |         rbx = rax;
    0x00409f50 mov rdi, rax                                      |         
    0x00409f53 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00409f58 mov edi, 0x67ba4c                                 |         edi = "k_NUM_THREADS == TC::masterId";
    0x00409f5d mov esi, 0x14ca                                   |         esi = 0x14ca;
    0x00409f62 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00409f67 mov rdi, rbx                                      |         
    0x00409f6a call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x00409f6f mov eax, dword [rip + 0x510477]                   |     eax = (anonymous namespace)::u::CountedDelete::s_deleteCount;
    0x00409f75 test eax, eax                                     |     
                                                                 |     if (eax != 0) {
    0x00409f77 je 0x409fe6                                       |         
    0x00409f79 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00409f7e mov rbx, rax                                      |         rbx = rax;
    0x00409f81 mov rdi, rax                                      |         
    0x00409f84 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00409f89 mov edi, 0x91a328                                 |         
    0x00409f8e mov esi, 0x67ba6f                                 |         
    0x00409f93 mov edx, 0x22                                     |         
    0x00409f98 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, 0x67ba6f, 0x22);
    0x00409f9d mov esi, 0x67aff6                                 |         
    0x00409fa2 mov edx, 2                                        |         
    0x00409fa7 mov rdi, rax                                      |         
    0x00409faa call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67aff6, 2);
    0x00409faf mov esi, dword [rip + 0x510437]                   |         esi = (anonymous namespace)::u::CountedDelete::s_deleteCount;
    0x00409fb5 mov rdi, rax                                      |         rdi = rax;
    0x00409fb8 call 0x405010                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x00409fbd mov esi, 0x696200                                 |         
    0x00409fc2 mov edx, 1                                        |         
    0x00409fc7 mov rdi, rax                                      |         
    0x00409fca call 0x5bce00                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x696200, 1);
    0x00409fcf mov edi, 0x67ba6a                                 |         edi = "0 == u::CountedDelete::getDeleteCount()";
    0x00409fd4 mov esi, 0x14cd                                   |         esi = 0x14cd;
    0x00409fd9 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00409fde mov rdi, rbx                                      |         
    0x00409fe1 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x00409fe6 lea rbp, [rsp + 0x460]                            |     rbp = rsp + 0x460;
    0x00409fee mov rdi, rbp                                      |     rdi = rbp;
    0x00409ff1 call 0x4052c0                                     |     pthread_mutex_lock ();
    0x00409ff6 mov rax, qword [rsp + 0x450]                      |     rax = *((rsp + 0x450));
    0x00409ffe mov rbx, qword [rax + 0x10]                       |     rbx = *((rax + 0x10));
    0x0040a002 cmp rbx, qword [rsp + 0x458]                      |     
                                                                 |     if (rbx == *((rsp + 0x458))) {
    0x0040a00a je 0x40d9cb                                       |         goto label_39;
                                                                 |     }
    0x0040a010 mov rdi, rbx                                      |     
    0x0040a013 call 0x649c30                                     |     eax = BloombergLP::bdlcc::SkipList_Control::level()const (rbx);
    0x0040a018 test eax, eax                                     |     
                                                                 |     if (eax < 0) {
    0x0040a01a js 0x40a0aa                                       |         goto label_40;
                                                                 |     }
    0x0040a020 mov ecx, eax                                      |     ecx = eax;
    0x0040a022 test al, 1                                        |     
                                                                 |     if ((al & 1) == 0) {
    0x0040a024 jne 0x40a04f                                      |         
    0x0040a026 mov rdx, rcx                                      |         rdx = rcx;
    0x0040a029 shl rdx, 4                                        |         rdx <<= 4;
    0x0040a02d mov rsi, qword [rbx + rdx + 0x10]                 |         rsi = *((rbx + rdx + 0x10));
    0x0040a032 mov rdi, qword [rsp + 0x450]                      |         rdi = *((rsp + 0x450));
    0x0040a03a mov qword [rsi + rdx + 0x18], rdi                 |         *((rsi + rdx + 0x18)) = rdi;
    0x0040a03f mov rdi, qword [rsp + 0x450]                      |         rdi = *((rsp + 0x450));
    0x0040a047 mov qword [rdi + rdx + 0x10], rsi                 |         *((rdi + rdx + 0x10)) = rsi;
    0x0040a04c dec rcx                                           |         rcx--;
                                                                 |     }
    0x0040a04f test eax, eax                                     |     
                                                                 |     if (eax == 0) {
    0x0040a051 je 0x40a0aa                                       |         goto label_40;
                                                                 |     }
    0x0040a053 lea rax, [rcx + 2]                                |     rax = rcx + 2;
    0x0040a057 shl rcx, 4                                        |     rcx <<= 4;
    0x0040a05b nop dword [rax + rax]                             |     
                                                                 |     do {
    0x0040a060 mov rdx, qword [rbx + rcx + 0x10]                 |         rdx = *((rbx + rcx + 0x10));
    0x0040a065 mov rsi, qword [rsp + 0x450]                      |         rsi = *((rsp + 0x450));
    0x0040a06d mov qword [rdx + rcx + 0x18], rsi                 |         *((rdx + rcx + 0x18)) = rsi;
    0x0040a072 mov rsi, qword [rsp + 0x450]                      |         rsi = *((rsp + 0x450));
    0x0040a07a mov qword [rsi + rcx + 0x10], rdx                 |         *((rsi + rcx + 0x10)) = rdx;
    0x0040a07f mov rdx, qword [rbx + rcx]                        |         rdx = *((rbx + rcx));
    0x0040a083 mov rsi, qword [rsp + 0x450]                      |         rsi = *((rsp + 0x450));
    0x0040a08b mov qword [rdx + rcx + 8], rsi                    |         *((rdx + rcx + 8)) = rsi;
    0x0040a090 mov rsi, qword [rsp + 0x450]                      |         rsi = *((rsp + 0x450));
    0x0040a098 mov qword [rsi + rcx], rdx                        |         *((rsi + rcx)) = rdx;
    0x0040a09c add rax, 0xfffffffffffffffe                       |         rax += 0xfffffffffffffffe;
    0x0040a0a0 add rcx, 0xffffffffffffffe0                       |         rcx += 0xffffffffffffffe0;
    0x0040a0a4 cmp rax, 1                                        |         
    0x0040a0a8 jg 0x40a060                                       |         
                                                                 |     } while (rax > 1);
                                                                 | label_40:
    0x0040a0aa mov qword [rbx + 0x10], 0                         |     *((rbx + 0x10)) = 0;
    0x0040a0b2 dec dword [rsp + 0x488]                           |     *((rsp + 0x488))--;
    0x0040a0b9 mov rdi, rbp                                      |     rdi = rbp;
    0x0040a0bc call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x0040a0c1 mov rdi, rbx                                      |     
    0x0040a0c4 call 0x649ba0                                     |     eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (rbx);
    0x0040a0c9 test eax, eax                                     |     
                                                                 |     if (eax != 0) {
    0x0040a0cb jne 0x40d9d3                                      |         goto label_41;
                                                                 |     }
    0x0040a0d1 cmp byte [rbx + 8], 0                             |     
                                                                 |     if (*((rbx + 8)) == 0) {
    0x0040a0d5 jne 0x40a0de                                      |         
    0x0040a0d7 lock inc dword [rip + 0x51030e]                   |         *(obj._anonymous_namespace_::u::CountedDelete::s_deleteCount)++;
                                                                 |     }
    0x0040a0de mov rdi, qword [rsp + 0x490]                      |     
    0x0040a0e6 mov rsi, rbx                                      |     
    0x0040a0e9 call 0x64a300                                     |     BloombergLP::bdlcc::SkipList_PoolUtil::deallocate(BloombergLP::bdlcc::SkipList_PoolManager*,void*) (*((rsp + 0x490)), rbx);
    0x0040a0ee jmp 0x40d9d3                                      |     goto label_41;
    0x0040a0f3 call 0x4868e0                                     |     TestDriver<signedchar,signedchar>::skipTest() ();
    0x0040a0f8 call 0x488600                                     |     TestDriver<unsigned long,unsigned long>::skipTest() ();
    0x0040a0fd call 0x48a3b0                                     |     TestDriver<BloombergLP::bsltf::TemplateTestFacility_StubClass*,BloombergLP::bsltf::TemplateTestFacility_StubClass*>::skipTest() ();
    0x0040a102 call 0x48c1b0                                     |     TestDriver<void(*)(),void(*)()>::skipTest() ();
    0x0040a107 call 0x48dfb0                                     |     TestDriver<BloombergLP::bsltf::EnumeratedTestType::Enum,BloombergLP::bsltf::EnumeratedTestType::Enum>::skipTest() ();
    0x0040a10c call 0x48fd10                                     |     TestDriver<BloombergLP::bsltf::UnionTestType,BloombergLP::bsltf::UnionTestType>::skipTest() ();
    0x0040a111 call 0x491c60                                     |     TestDriver<BloombergLP::bsltf::SimpleTestType,BloombergLP::bsltf::SimpleTestType>::skipTest() ();
    0x0040a116 call 0x493890                                     |     TestDriver<BloombergLP::bsltf::AllocTestType,BloombergLP::bsltf::AllocTestType>::skipTest() ();
    0x0040a11b call 0x495910                                     |     TestDriver<BloombergLP::bsltf::BitwiseCopyableTestType,BloombergLP::bsltf::BitwiseCopyableTestType>::skipTest() ();
    0x0040a120 call 0x497540                                     |     TestDriver<BloombergLP::bsltf::BitwiseMoveableTestType,BloombergLP::bsltf::BitwiseMoveableTestType>::skipTest() ();
    0x0040a125 call 0x499170                                     |     TestDriver<BloombergLP::bsltf::AllocBitwiseMoveableTestType,BloombergLP::bsltf::AllocBitwiseMoveableTestType>::skipTest() ();
    0x0040a12a call 0x49adb0                                     |     TestDriver<BloombergLP::bsltf::MovableTestType,BloombergLP::bsltf::MovableTestType>::skipTest() ();
    0x0040a12f call 0x49cd40                                     |     TestDriver<BloombergLP::bsltf::MovableAllocTestType,BloombergLP::bsltf::MovableAllocTestType>::skipTest() ();
    0x0040a134 call 0x49eea0                                     |     TestDriver<BloombergLP::bsltf::NonTypicalOverloadsTestType,BloombergLP::bsltf::NonTypicalOverloadsTestType>::skipTest() ();
    0x0040a139 call 0x4a0ad0                                     |     TestDriver<int,int(BloombergLP::bsltf::TemplateTestFacility_StubClass::*)()>::skipTest() ();
    0x0040a13e call 0x4a2a00                                     |     TestDriver<int,BloombergLP::bsltf::AllocTestType>::skipTest() ();
    0x0040a143 call 0x4a48c0                                     |     TestDriver<int,BloombergLP::bsltf::MovableAllocTestType>::skipTest() ();
    0x0040a148 call 0x4a67f0                                     |     TestDriver<int,BloombergLP::bsltf::SimpleTestType>::skipTest() ();
    0x0040a14d jmp 0x411d4d                                      |     void (*0x411d4d)() ();
    0x0040a152 call 0x4556c0                                     |     TestDriver<signedchar,signedchar>::valueSemanticTest() ();
    0x0040a157 call 0x458260                                     |     TestDriver<unsigned long,unsigned long>::valueSemanticTest() ();
    0x0040a15c call 0x45ae10                                     |     TestDriver<BloombergLP::bsltf::TemplateTestFacility_StubClass*,BloombergLP::bsltf::TemplateTestFacility_StubClass*>::valueSemanticTest() ();
    0x0040a161 call 0x45da40                                     |     TestDriver<void(*)(),void(*)()>::valueSemanticTest() ();
    0x0040a166 call 0x460670                                     |     TestDriver<BloombergLP::bsltf::EnumeratedTestType::Enum,BloombergLP::bsltf::EnumeratedTestType::Enum>::valueSemanticTest() ();
    0x0040a16b call 0x4631f0                                     |     TestDriver<BloombergLP::bsltf::UnionTestType,BloombergLP::bsltf::UnionTestType>::valueSemanticTest() ();
    0x0040a170 call 0x465f40                                     |     TestDriver<BloombergLP::bsltf::SimpleTestType,BloombergLP::bsltf::SimpleTestType>::valueSemanticTest() ();
    0x0040a175 call 0x468a30                                     |     TestDriver<BloombergLP::bsltf::AllocTestType,BloombergLP::bsltf::AllocTestType>::valueSemanticTest() ();
    0x0040a17a call 0x46b6d0                                     |     TestDriver<BloombergLP::bsltf::BitwiseCopyableTestType,BloombergLP::bsltf::BitwiseCopyableTestType>::valueSemanticTest() ();
    0x0040a17f call 0x46e1c0                                     |     TestDriver<BloombergLP::bsltf::BitwiseMoveableTestType,BloombergLP::bsltf::BitwiseMoveableTestType>::valueSemanticTest() ();
    0x0040a184 call 0x470cb0                                     |     TestDriver<BloombergLP::bsltf::AllocBitwiseMoveableTestType,BloombergLP::bsltf::AllocBitwiseMoveableTestType>::valueSemanticTest() ();
    0x0040a189 call 0x473760                                     |     TestDriver<BloombergLP::bsltf::MovableTestType,BloombergLP::bsltf::MovableTestType>::valueSemanticTest() ();
    0x0040a18e call 0x476360                                     |     TestDriver<BloombergLP::bsltf::MovableAllocTestType,BloombergLP::bsltf::MovableAllocTestType>::valueSemanticTest() ();
    0x0040a193 call 0x479000                                     |     TestDriver<BloombergLP::bsltf::NonTypicalOverloadsTestType,BloombergLP::bsltf::NonTypicalOverloadsTestType>::valueSemanticTest() ();
    0x0040a198 call 0x47baf0                                     |     TestDriver<int,int(BloombergLP::bsltf::TemplateTestFacility_StubClass::*)()>::valueSemanticTest() ();
    0x0040a19d call 0x47e7c0                                     |     TestDriver<int,BloombergLP::bsltf::AllocTestType>::valueSemanticTest() ();
    0x0040a1a2 call 0x481320                                     |     TestDriver<int,BloombergLP::bsltf::MovableAllocTestType>::valueSemanticTest() ();
    0x0040a1a7 call 0x483e80                                     |     TestDriver<int,BloombergLP::bsltf::SimpleTestType>::valueSemanticTest() ();
    0x0040a1ac jmp 0x411d4d                                      |     void (*0x411d4d)() ();
    0x0040a1b1 cmp dword [rip + 0x510220], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040a1b8 je 0x40a241                                       |         
    0x0040a1be mov edi, 0x91a328                                 |         
    0x0040a1c3 mov esi, 0x67b959                                 |         
    0x0040a1c8 mov edx, 0x12                                     |         
    0x0040a1cd call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "\nDISTRIBUTION TEST", 0x12);
    0x0040a1d2 mov esi, 0x67b96c                                 |         
    0x0040a1d7 mov edx, 0x12                                     |         
    0x0040a1dc mov rdi, rax                                      |         
    0x0040a1df call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, "\n=================", 0x12);
    0x0040a1e4 mov rbx, rax                                      |         rbx = rax;
    0x0040a1e7 mov rax, qword [rax]                              |         rax = *(rax);
    0x0040a1ea mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040a1ee add rsi, rbx                                      |         rsi += rbx;
    0x0040a1f1 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040a1f9 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040a1fe lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040a206 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040a20b call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040a210 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040a213 mov rdi, rax                                      |         rdi = rax;
    0x0040a216 mov esi, 0xa                                      |         esi = 0xa;
    0x0040a21b call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040a21e mov ebp, eax                                      |         
    0x0040a220 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040a228 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040a22d movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x0040a231 mov rdi, rbx                                      |         rdi = rbx;
    0x0040a234 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040a239 mov rdi, rbx                                      |         rdi = rbx;
    0x0040a23c call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x0040a241 lea rdi, [rsp + 0xc0]                             |     
    0x0040a249 call 0x649c40                                     |     BloombergLP::bdlcc::SkipList_RandomLevelGenerator::SkipList_RandomLevelGenerator() (rsp + 0xc0);
    0x0040a24e mov dword [rsp + 0xc8], 0                         |     *((rsp + 0xc8)) = 0;
    0x0040a259 lea rbx, [rsp + 0xe0]                             |     rbx = rsp + 0xe0;
    0x0040a261 mov rdi, rbx                                      |     rdi = rbx;
    0x0040a264 xor esi, esi                                      |     esi = 0;
    0x0040a266 call 0x404cc0                                     |     pthread_mutex_init ();
    0x0040a26b mov dword [rsp + 0x108], 0                        |     *((rsp + 0x108)) = 0;
    0x0040a276 mov qword [rsp + 0x110], 0                        |     *((rsp + 0x110)) = 0;
    0x0040a282 mov rdx, qword [rip + 0x5108b7]                   |     rdx = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040a289 test rdx, rdx                                     |     
                                                                 |     if (rdx == 0) {
    0x0040a28c jne 0x40a296                                      |         
    0x0040a28e call 0x64e700                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x0040a293 mov rdx, rax                                      |         
                                                                 |     }
    0x0040a296 mov qword [rsp + 0x118], rdx                      |     *((rsp + 0x118)) = rdx;
    0x0040a29e movaps xmm0, xmmword [rip + 0x26ff8b]             |     xmm0 = " 0@P`p";
    0x0040a2a5 movaps xmmword [rsp + 0x2c0], xmm0                |     *((rsp + 0x2c0)) = xmm0;
    0x0040a2ad movaps xmm0, xmmword [rip + 0x26ff8c]             |     xmm0 = *(0x0067a240);
    0x0040a2b4 movaps xmmword [rsp + 0x2d0], xmm0                |     *((rsp + 0x2d0)) = xmm0;
    0x0040a2bc movaps xmm0, xmmword [rip + 0x26ff8d]             |     xmm0 = *(0x0067a250);
    0x0040a2c3 movaps xmmword [rsp + 0x2e0], xmm0                |     *((rsp + 0x2e0)) = xmm0;
    0x0040a2cb movaps xmm0, xmmword [rip + 0x26ff8e]             |     xmm0 = *(0x0067a260);
    0x0040a2d2 movaps xmmword [rsp + 0x2f0], xmm0                |     *((rsp + 0x2f0)) = xmm0;
    0x0040a2da movaps xmm0, xmmword [rip + 0x26ff8f]             |     xmm0 = *(0x0067a270);
    0x0040a2e1 movaps xmmword [rsp + 0x300], xmm0                |     *((rsp + 0x300)) = xmm0;
    0x0040a2e9 movaps xmm0, xmmword [rip + 0x26ff90]             |     xmm0 = *(0x0067a280);
    0x0040a2f0 movaps xmmword [rsp + 0x310], xmm0                |     *((rsp + 0x310)) = xmm0;
    0x0040a2f8 movaps xmm0, xmmword [rip + 0x26ff91]             |     xmm0 = *(0x0067a290);
    0x0040a2ff movaps xmmword [rsp + 0x320], xmm0                |     *((rsp + 0x320)) = xmm0;
    0x0040a307 movapd xmm0, xmmword [rip + 0x26ff91]             |     __asm ("movapd xmm0, xmmword [0x0067a2a0]");
    0x0040a30f movapd xmmword [rsp + 0x330], xmm0                |     __asm ("movapd xmmword [rsp + 0x330], xmm0");
    0x0040a318 lea rdi, [rsp + 0x2c0]                            |     
    0x0040a320 mov esi, 0x20                                     |     
    0x0040a325 call 0x64a120                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::createPoolManager(int*,int,BloombergLP::bslma::Allocator*) (rsp + 0x2c0, 0x20, rax);
    0x0040a32a mov qword [rsp + 0x110], rax                      |     *((rsp + 0x110)) = rax;
    0x0040a332 mov rdi, rax                                      |     
    0x0040a335 mov esi, 0x1f                                     |     
    0x0040a33a call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (rax, 0x1f);
    0x0040a33f mov qword [rsp + 0xd0], rax                       |     *((rsp + 0xd0)) = rax;
    0x0040a347 mov rdi, qword [rsp + 0x110]                      |     
    0x0040a34f mov esi, 0x1f                                     |     
    0x0040a354 call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x110)), 0x1f);
    0x0040a359 mov qword [rsp + 0xd8], rax                       |     *((rsp + 0xd8)) = rax;
    0x0040a361 xor ecx, ecx                                      |     ecx = 0;
    0x0040a363 nop word cs:[rax + rax]                           |     
    0x0040a36d nop dword [rax]                                   |     
                                                                 |     do {
    0x0040a370 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x0040a378 mov qword [rax + rcx + 0x18], 0                   |         *((rax + rcx + 0x18)) = 0;
    0x0040a381 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x0040a389 mov rdx, qword [rsp + 0xd8]                       |         rdx = *((rsp + 0xd8));
    0x0040a391 mov qword [rax + rcx + 0x10], rdx                 |         *((rax + rcx + 0x10)) = rdx;
    0x0040a396 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x0040a39e mov rdx, qword [rsp + 0xd8]                       |         rdx = *((rsp + 0xd8));
    0x0040a3a6 mov qword [rdx + rcx + 0x18], rax                 |         *((rdx + rcx + 0x18)) = rax;
    0x0040a3ab mov rax, qword [rsp + 0xd8]                       |         rax = *((rsp + 0xd8));
    0x0040a3b3 mov qword [rax + rcx + 0x10], 0                   |         *((rax + rcx + 0x10)) = 0;
    0x0040a3bc add rcx, 0x10                                     |         rcx += 0x10;
    0x0040a3c0 cmp rcx, 0x200                                    |         
    0x0040a3c7 jne 0x40a370                                      |         
                                                                 |     } while (rcx != 0x200);
    0x0040a3c9 xorpd xmm0, xmm0                                  |     __asm ("xorpd xmm0, xmm0");
    0x0040a3cd movapd xmmword [rsp + 0x330], xmm0                |     __asm ("movapd xmmword [rsp + 0x330], xmm0");
    0x0040a3d6 movapd xmmword [rsp + 0x320], xmm0                |     __asm ("movapd xmmword [rsp + 0x320], xmm0");
    0x0040a3df movapd xmmword [rsp + 0x310], xmm0                |     __asm ("movapd xmmword [rsp + 0x310], xmm0");
    0x0040a3e8 movapd xmmword [rsp + 0x300], xmm0                |     __asm ("movapd xmmword [rsp + 0x300], xmm0");
    0x0040a3f1 movapd xmmword [rsp + 0x2f0], xmm0                |     __asm ("movapd xmmword [rsp + 0x2f0], xmm0");
    0x0040a3fa movapd xmmword [rsp + 0x2e0], xmm0                |     __asm ("movapd xmmword [rsp + 0x2e0], xmm0");
    0x0040a403 movapd xmmword [rsp + 0x2d0], xmm0                |     __asm ("movapd xmmword [rsp + 0x2d0], xmm0");
    0x0040a40c movapd xmmword [rsp + 0x2c0], xmm0                |     __asm ("movapd xmmword [rsp + 0x2c0], xmm0");
    0x0040a415 mov r12d, 0x927c0                                 |     r12d = 0x927c0;
    0x0040a41b lea r14, [rsp + 0xc0]                             |     r14 = rsp + 0xc0;
    0x0040a423 lea r13, [rsp + 8]                                |     r13 = rsp + 8;
    0x0040a428 jmp 0x40a439                                      |     
                                                                 |     while (rbx == 0) {
                                                                 | label_0:
    0x0040a430 dec r12d                                          |         r12d--;
                                                                 |         if (r12d == 0) {
    0x0040a433 je 0x40c2e4                                       |             goto label_42;
                                                                 |         }
    0x0040a439 xorpd xmm0, xmm0                                  |         __asm ("xorpd xmm0, xmm0");
    0x0040a43d movapd xmmword [rsp + 0x440], xmm0                |         __asm ("movapd xmmword [rsp + 0x440], xmm0");
    0x0040a446 mov dword [rsp + 0x1f0], 0                        |         *((rsp + 0x1f0)) = 0;
    0x0040a451 mov dword [rsp + 8], 0                            |         *((rsp + 8)) = 0;
    0x0040a459 mov rdi, r14                                      |         
    0x0040a45c lea rsi, [rsp + 0x440]                            |         
    0x0040a464 lea rdx, [rsp + 0x1f0]                            |         
    0x0040a46c mov rcx, r13                                      |         
    0x0040a46f xor r8d, r8d                                      |         
    0x0040a472 call 0x455600                                     |         BloombergLP::bdlcc::SkipList<int,int>::add(BloombergLP::bdlcc::SkipListPairHandle<int,int>*,intconst&,intconst&,bool*) (r14, rsp + 0x440, rsp + 0x1f0, r13, 0);
    0x0040a477 mov rdi, qword [rsp + 0x448]                      |         
    0x0040a47f call 0x649c30                                     |         eax = BloombergLP::bdlcc::SkipList_Control::level()const (*((rsp + 0x448)));
    0x0040a484 mov ebp, eax                                      |         
    0x0040a486 test eax, eax                                     |         
                                                                 |         if (eax >= 0) {
    0x0040a488 js 0x40a4c0                                       |             
    0x0040a48a cmp ebp, 0x20                                     |             
                                                                 |             if (ebp < 0x20) {
    0x0040a48d jl 0x40a4e7                                       |                 goto label_43;
                                                                 |             }
    0x0040a48f call 0x64fbf0                                     |             rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040a494 mov rbx, rax                                      |             rbx = rax;
    0x0040a497 mov rdi, rax                                      |             
    0x0040a49a call 0x64f8a0                                     |             BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040a49f mov edi, 0x67b984                                 |             edi = "l<32";
    0x0040a4a4 mov esi, 0x145a                                   |             esi = 0x145a;
    0x0040a4a9 call 0x405800                                     |             (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040a4ae mov rdi, rbx                                      |             
    0x0040a4b1 call 0x64f9f0                                     |             BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040a4b6 jmp 0x40a4e7                                      |             
                                                                 |         } else {
    0x0040a4c0 call 0x64fbf0                                     |             rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040a4c5 mov r15, rax                                      |             r15 = rax;
    0x0040a4c8 mov rdi, rax                                      |             
    0x0040a4cb call 0x64f8a0                                     |             BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040a4d0 mov edi, 0x67b97f                                 |             edi = "l>=0";
    0x0040a4d5 mov esi, 0x1459                                   |             esi = 0x1459;
    0x0040a4da call 0x405800                                     |             (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040a4df mov rdi, r15                                      |             
    0x0040a4e2 call 0x64f9f0                                     |             BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r15);
                                                                 |         }
                                                                 | label_43:
    0x0040a4e7 movsxd rax, ebp                                   |         rax = (int64_t) ebp;
    0x0040a4ea inc dword [rsp + rax*4 + 0x2c0]                   |         *((rsp + rax*4 + 0x2c0))++;
    0x0040a4f1 mov rsi, qword [rsp + 0x448]                      |         
    0x0040a4f9 mov rdi, r14                                      |         
    0x0040a4fc call 0x438170                                     |         BloombergLP::bdlcc::SkipList<int,int>::remove(BloombergLP::bdlcc::SkipListPair<int,int>const*) (r14, *((rsp + 0x448)));
    0x0040a501 mov rbx, qword [rsp + 0x448]                      |         rbx = *((rsp + 0x448));
    0x0040a509 test rbx, rbx                                     |         
    0x0040a50c je 0x40a430                                       |         
                                                                 |     }
    0x0040a512 mov rbp, qword [rsp + 0x440]                      |     rbp = *((rsp + 0x440));
    0x0040a51a mov rdi, rbx                                      |     
    0x0040a51d call 0x649ba0                                     |     eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (rbx);
    0x0040a522 test eax, eax                                     |     
                                                                 |     if (eax != 0) {
    0x0040a524 jne 0x40a430                                      |         goto label_0;
                                                                 |     }
    0x0040a52a mov rdi, qword [rbp + 0x50]                       |     
    0x0040a52e mov rsi, rbx                                      |     
    0x0040a531 call 0x64a300                                     |     BloombergLP::bdlcc::SkipList_PoolUtil::deallocate(BloombergLP::bdlcc::SkipList_PoolManager*,void*) (*((rbp + 0x50)), rbx);
    0x0040a536 jmp 0x40a430                                      |     goto label_0;
    0x0040a53b cmp dword [rip + 0x50fe96], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040a542 je 0x40a68b                                       |         
    0x0040a548 mov rax, qword [rip + 0x50fdd9]                   |         rax = std::__1::cout;
    0x0040a54f mov esi, 0x91a328                                 |         esi = std::__1::cout;
    0x0040a554 add rsi, qword [rax - 0x18]                       |         rsi += *((rax - 0x18));
    0x0040a558 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040a560 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040a565 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040a56d mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040a572 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040a577 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040a57a mov rdi, rax                                      |         rdi = rax;
    0x0040a57d mov esi, 0xa                                      |         esi = 0xa;
    0x0040a582 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040a585 mov ebx, eax                                      |         ebx = eax;
    0x0040a587 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040a58f call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040a594 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x0040a597 mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x0040a59c call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040a5a1 mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x0040a5a6 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040a5ab mov edi, 0x91a328                                 |         
    0x0040a5b0 mov esi, 0x67b801                                 |         
    0x0040a5b5 mov edx, 0x22                                     |         
    0x0040a5ba call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "findLowerBound/findUpperBound test", 0x22);
    0x0040a5bf mov rbx, rax                                      |         rbx = rax;
    0x0040a5c2 mov rax, qword [rax]                              |         rax = *(rax);
    0x0040a5c5 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040a5c9 add rsi, rbx                                      |         rsi += rbx;
    0x0040a5cc lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040a5d4 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040a5d9 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040a5e1 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040a5e6 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040a5eb mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040a5ee mov rdi, rax                                      |         rdi = rax;
    0x0040a5f1 mov esi, 0xa                                      |         esi = 0xa;
    0x0040a5f6 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040a5f9 mov ebp, eax                                      |         
    0x0040a5fb lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040a603 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040a608 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x0040a60c mov rdi, rbx                                      |         rdi = rbx;
    0x0040a60f call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040a614 mov rdi, rbx                                      |         rdi = rbx;
    0x0040a617 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040a61c mov esi, 0x67b4b2                                 |         
    0x0040a621 mov edx, 0x22                                     |         
    0x0040a626 mov rdi, rbx                                      |         
    0x0040a629 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rbx, 0x67b4b2, 0x22);
    0x0040a62e mov rbx, rax                                      |         rbx = rax;
    0x0040a631 mov rax, qword [rax]                              |         rax = *(rax);
    0x0040a634 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040a638 add rsi, rbx                                      |         rsi += rbx;
    0x0040a63b lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040a643 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040a648 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040a650 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040a655 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040a65a mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040a65d mov rdi, rax                                      |         rdi = rax;
    0x0040a660 mov esi, 0xa                                      |         esi = 0xa;
    0x0040a665 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040a668 mov ebp, eax                                      |         
    0x0040a66a lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040a672 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040a677 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x0040a67b mov rdi, rbx                                      |         rdi = rbx;
    0x0040a67e call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040a683 mov rdi, rbx                                      |         rdi = rbx;
    0x0040a686 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x0040a68b lea rdi, [rsp + 0x2c0]                            |     
    0x0040a693 mov esi, 0x6786b0                                 |     
    0x0040a698 mov edx, 0x120                                    |     
    0x0040a69d call 0x4053d0                                     |     memcpy (rsp + 0x2c0, 0x6786b0, 0x120);
    0x0040a6a2 xor esi, esi                                      |     
    0x0040a6a4 cmp dword [rip + 0x50fd35], 0                     |     
    0x0040a6ab setne sil                                         |     sil = (*(obj.veryVeryVerbose) != 0) ? 1 : 0;
    0x0040a6af lea rbx, [rsp + 0xc0]                             |     rbx = rsp + 0xc0;
    0x0040a6b7 mov rdi, rbx                                      |     
    0x0040a6ba xor edx, edx                                      |     
    0x0040a6bc call 0x64e930                                     |     BloombergLP::bslma::TestAllocator::TestAllocator(bool,BloombergLP::bslma::Allocator*) (rbx, 0, 0);
    0x0040a6c1 xor esi, esi                                      |     
    0x0040a6c3 cmp dword [rip + 0x50fd16], 0                     |     
    0x0040a6ca setne sil                                         |     sil = (*(obj.veryVeryVerbose) != 0) ? 1 : 0;
    0x0040a6ce lea rdi, [rsp + 0x440]                            |     
    0x0040a6d6 xor edx, edx                                      |     
    0x0040a6d8 call 0x64e930                                     |     BloombergLP::bslma::TestAllocator::TestAllocator(bool,BloombergLP::bslma::Allocator*) (rsp + 0x440, 0, 0);
    0x0040a6dd lea rdi, [rsp + 0x560]                            |     
    0x0040a6e5 lea rsi, [rsp + 0x440]                            |     
    0x0040a6ed call 0x64e780                                     |     BloombergLP::bslma::DefaultAllocatorGuard::DefaultAllocatorGuard(BloombergLP::bslma::Allocator*) (rsp + 0x560, rsp + 0x440);
    0x0040a6f2 lea rdi, [rsp + 8]                                |     
    0x0040a6f7 call 0x649c40                                     |     BloombergLP::bdlcc::SkipList_RandomLevelGenerator::SkipList_RandomLevelGenerator() (rsp + 8);
    0x0040a6fc mov dword [rsp + 0x10], 0                         |     *((rsp + 0x10)) = 0;
    0x0040a704 lea rbp, [rsp + 0x28]                             |     rbp = rsp + 0x28;
    0x0040a709 mov rdi, rbp                                      |     rdi = rbp;
    0x0040a70c xor esi, esi                                      |     esi = 0;
    0x0040a70e call 0x404cc0                                     |     pthread_mutex_init ();
    0x0040a713 mov dword [rsp + 0x50], 0                         |     *((rsp + 0x50)) = 0;
    0x0040a71b mov qword [rsp + 0x58], 0                         |     *((rsp + 0x58)) = 0;
    0x0040a724 mov qword [rsp + 0x60], rbx                       |     *((rsp + 0x60)) = rbx;
    0x0040a729 movaps xmm0, xmmword [rip + 0x26fca0]             |     xmm0 = *(0x0067a3d0);
    0x0040a730 movaps xmmword [rsp + 0x1f0], xmm0                |     *((rsp + 0x1f0)) = xmm0;
    0x0040a738 movaps xmm0, xmmword [rip + 0x26fca1]             |     xmm0 = *(0x0067a3e0);
    0x0040a73f movaps xmmword [rsp + 0x200], xmm0                |     *((rsp + 0x200)) = xmm0;
    0x0040a747 movaps xmm0, xmmword [rip + 0x26fca2]             |     xmm0 = *(0x0067a3f0);
    0x0040a74e movaps xmmword [rsp + 0x210], xmm0                |     *((rsp + 0x210)) = xmm0;
    0x0040a756 movaps xmm0, xmmword [rip + 0x26fca3]             |     xmm0 = *(0x0067a400);
    0x0040a75d movaps xmmword [rsp + 0x220], xmm0                |     *((rsp + 0x220)) = xmm0;
    0x0040a765 movaps xmm0, xmmword [rip + 0x26fca4]             |     xmm0 = *(0x0067a410);
    0x0040a76c movaps xmmword [rsp + 0x230], xmm0                |     *((rsp + 0x230)) = xmm0;
    0x0040a774 movaps xmm0, xmmword [rip + 0x26fca5]             |     xmm0 = *(0x0067a420);
    0x0040a77b movaps xmmword [rsp + 0x240], xmm0                |     *((rsp + 0x240)) = xmm0;
    0x0040a783 movaps xmm0, xmmword [rip + 0x26fca6]             |     xmm0 = *(0x0067a430);
    0x0040a78a movaps xmmword [rsp + 0x250], xmm0                |     *((rsp + 0x250)) = xmm0;
    0x0040a792 movapd xmm0, xmmword [rip + 0x26fca6]             |     __asm ("movapd xmm0, xmmword [0x0067a440]");
    0x0040a79a movapd xmmword [rsp + 0x260], xmm0                |     __asm ("movapd xmmword [rsp + 0x260], xmm0");
    0x0040a7a3 lea rdi, [rsp + 0x1f0]                            |     
    0x0040a7ab mov esi, 0x20                                     |     
    0x0040a7b0 mov rdx, rbx                                      |     
    0x0040a7b3 call 0x64a120                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::createPoolManager(int*,int,BloombergLP::bslma::Allocator*) (rsp + 0x1f0, 0x20, rbx);
    0x0040a7b8 mov qword [rsp + 0x58], rax                       |     *((rsp + 0x58)) = rax;
    0x0040a7bd mov rdi, rax                                      |     
    0x0040a7c0 mov esi, 0x1f                                     |     
    0x0040a7c5 call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (rax, 0x1f);
    0x0040a7ca mov qword [rsp + 0x18], rax                       |     *((rsp + 0x18)) = rax;
    0x0040a7cf mov rdi, qword [rsp + 0x58]                       |     
    0x0040a7d4 mov esi, 0x1f                                     |     
    0x0040a7d9 call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x58)), 0x1f);
    0x0040a7de mov qword [rsp + 0x20], rax                       |     *((rsp + 0x20)) = rax;
    0x0040a7e3 xor ecx, ecx                                      |     ecx = 0;
    0x0040a7e5 nop word cs:[rax + rax]                           |     
    0x0040a7ef nop                                               |     
                                                                 |     do {
    0x0040a7f0 mov rax, qword [rsp + 0x18]                       |         rax = *((rsp + 0x18));
    0x0040a7f5 mov qword [rax + rcx + 0x48], 0                   |         *((rax + rcx + 0x48)) = 0;
    0x0040a7fe mov rax, qword [rsp + 0x18]                       |         rax = *((rsp + 0x18));
    0x0040a803 mov rdx, qword [rsp + 0x20]                       |         rdx = *((rsp + 0x20));
    0x0040a808 mov qword [rax + rcx + 0x40], rdx                 |         *((rax + rcx + 0x40)) = rdx;
    0x0040a80d mov rax, qword [rsp + 0x18]                       |         rax = *((rsp + 0x18));
    0x0040a812 mov rdx, qword [rsp + 0x20]                       |         rdx = *((rsp + 0x20));
    0x0040a817 mov qword [rdx + rcx + 0x48], rax                 |         *((rdx + rcx + 0x48)) = rax;
    0x0040a81c mov rax, qword [rsp + 0x20]                       |         rax = *((rsp + 0x20));
    0x0040a821 mov qword [rax + rcx + 0x40], 0                   |         *((rax + rcx + 0x40)) = 0;
    0x0040a82a add rcx, 0x10                                     |         rcx += 0x10;
    0x0040a82e cmp rcx, 0x200                                    |         
    0x0040a835 jne 0x40a7f0                                      |         
                                                                 |     } while (rcx != 0x200);
    0x0040a837 lea rbx, [rsp + 0x2c4]                            |     rbx = rsp + 0x2c4;
    0x0040a83f mov r12d, 0xc                                     |     r12d = 0xc;
    0x0040a845 lea r14, [rsp + 0x1f0]                            |     r14 = rsp + 0x1f0;
    0x0040a84d lea r15, [rsp + 8]                                |     r15 = rsp + 8;
    0x0040a852 jmp 0x40a86d                                      |     
                                                                 |     while (*((rsp + 0x210)) == 0x17) {
                                                                 | label_1:
    0x0040a860 add rbx, 0x18                                     |         rbx += 0x18;
    0x0040a864 dec r12                                           |         r12--;
                                                                 |         if (r12 == 0) {
    0x0040a867 je 0x40bffd                                       |             goto label_44;
                                                                 |         }
    0x0040a86d mov rbp, qword [rbx + 4]                          |         rbp = *((rbx + 4));
    0x0040a871 mov rax, qword [rip + 0x5102c8]                   |         rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040a878 test rax, rax                                     |         
                                                                 |         if (rax == 0) {
    0x0040a87b jne 0x40a882                                      |             
    0x0040a87d call 0x64e700                                     |             rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |         }
    0x0040a882 mov qword [rsp + 0x1f0], 0                        |         *((rsp + 0x1f0)) = 0;
    0x0040a88e movapd xmm0, xmmword [rip + 0x26fb2a]             |         __asm ("movapd xmm0, xmmword [0x0067a3c0]");
    0x0040a896 movupd xmmword [rsp + 0x208], xmm0                |         __asm ("movupd xmmword [rsp + 0x208], xmm0");
    0x0040a89f mov qword [rsp + 0x218], rax                      |         *((rsp + 0x218)) = rax;
    0x0040a8a7 mov rdi, rbp                                      |         
    0x0040a8aa call 0x404d40                                     |         rax = strlen (rbp);
    0x0040a8af mov qword [rsp + 0x208], 0                        |         *((rsp + 0x208)) = 0;
    0x0040a8bb mov ecx, 0x67cde6                                 |         
    0x0040a8c0 mov rdi, r14                                      |         
    0x0040a8c3 mov rsi, rbp                                      |         
    0x0040a8c6 mov rdx, rax                                      |         
    0x0040a8c9 call 0x653850                                     |         bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (r14, rbp, rax, "string<...>::assign(char*...): string too long");
    0x0040a8ce mov rdi, r15                                      |         
    0x0040a8d1 call 0x649c50                                     |         eax = BloombergLP::bdlcc::SkipList_RandomLevelGenerator::randomLevel() (r15);
    0x0040a8d6 mov rdi, r15                                      |         
    0x0040a8d9 mov esi, eax                                      |         
    0x0040a8db mov rdx, rbx                                      |         
    0x0040a8de mov rcx, r14                                      |         
    0x0040a8e1 call 0x5e9830                                     |         rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::allocateNode(int,intconst&,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>const&) (r15, eax, rbx, r14);
    0x0040a8e6 mov rdi, r15                                      |         
    0x0040a8e9 xor esi, esi                                      |         
    0x0040a8eb mov rdx, rax                                      |         
    0x0040a8ee mov ecx, 1                                        |         ecx = 1;
    0x0040a8f3 call 0x5e9960                                     |         BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::addNodeImpR(bool*,BloombergLP::bdlcc::SkipList_Node<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,bool) (r15, 0, rax);
    0x0040a8f8 cmp qword [rsp + 0x210], 0x17                     |         
    0x0040a901 je 0x40a860                                       |         
                                                                 |     }
    0x0040a907 mov rsi, qword [rsp + 0x1f0]                      |     rsi = *((rsp + 0x1f0));
    0x0040a90f mov rdi, qword [rsp + 0x218]                      |     rdi = *((rsp + 0x218));
    0x0040a917 mov rax, qword [rdi]                              |     rax = *(rdi);
    0x0040a91a call qword [rax + 0x18]                           |     uint64_t (*rax + 0x18)() ();
    0x0040a91d jmp 0x40a860                                      |     goto label_1;
    0x0040a922 lea rdi, [rsp + 0x2c0]                            |     
    0x0040a92a mov esi, 0x678590                                 |     
    0x0040a92f mov edx, 0x120                                    |     
    0x0040a934 call 0x4053d0                                     |     memcpy (rsp + 0x2c0, 0x678590, 0x120);
    0x0040a939 cmp dword [rip + 0x50fa98], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040a940 je 0x40aa89                                       |         
    0x0040a946 mov rax, qword [rip + 0x50f9db]                   |         rax = std::__1::cout;
    0x0040a94d mov esi, 0x91a328                                 |         esi = std::__1::cout;
    0x0040a952 add rsi, qword [rax - 0x18]                       |         rsi += *((rax - 0x18));
    0x0040a956 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040a95e call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040a963 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040a96b mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040a970 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040a975 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040a978 mov rdi, rax                                      |         rdi = rax;
    0x0040a97b mov esi, 0xa                                      |         esi = 0xa;
    0x0040a980 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040a983 mov ebx, eax                                      |         ebx = eax;
    0x0040a985 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040a98d call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040a992 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x0040a995 mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x0040a99a call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040a99f mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x0040a9a4 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040a9a9 mov edi, 0x91a328                                 |         
    0x0040a9ae mov esi, 0x67b531                                 |         
    0x0040a9b3 mov edx, 0x24                                     |         
    0x0040a9b8 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "findLowerBoundR/findUpperBoundR test", 0x24);
    0x0040a9bd mov rbx, rax                                      |         rbx = rax;
    0x0040a9c0 mov rax, qword [rax]                              |         rax = *(rax);
    0x0040a9c3 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040a9c7 add rsi, rbx                                      |         rsi += rbx;
    0x0040a9ca lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040a9d2 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040a9d7 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040a9df mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040a9e4 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040a9e9 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040a9ec mov rdi, rax                                      |         rdi = rax;
    0x0040a9ef mov esi, 0xa                                      |         esi = 0xa;
    0x0040a9f4 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040a9f7 mov ebp, eax                                      |         
    0x0040a9f9 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040aa01 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040aa06 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x0040aa0a mov rdi, rbx                                      |         rdi = rbx;
    0x0040aa0d call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040aa12 mov rdi, rbx                                      |         rdi = rbx;
    0x0040aa15 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040aa1a mov esi, 0x67b4b0                                 |         
    0x0040aa1f mov edx, 0x24                                     |         
    0x0040aa24 mov rdi, rbx                                      |         
    0x0040aa27 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rbx, 0x67b4b0, 0x24);
    0x0040aa2c mov rbx, rax                                      |         rbx = rax;
    0x0040aa2f mov rax, qword [rax]                              |         rax = *(rax);
    0x0040aa32 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040aa36 add rsi, rbx                                      |         rsi += rbx;
    0x0040aa39 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040aa41 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040aa46 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040aa4e mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040aa53 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040aa58 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040aa5b mov rdi, rax                                      |         rdi = rax;
    0x0040aa5e mov esi, 0xa                                      |         esi = 0xa;
    0x0040aa63 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040aa66 mov ebp, eax                                      |         
    0x0040aa68 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040aa70 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040aa75 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x0040aa79 mov rdi, rbx                                      |         rdi = rbx;
    0x0040aa7c call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040aa81 mov rdi, rbx                                      |         rdi = rbx;
    0x0040aa84 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x0040aa89 xor esi, esi                                      |     
    0x0040aa8b cmp dword [rip + 0x50f94e], 0                     |     
    0x0040aa92 setne sil                                         |     sil = (*(obj.veryVeryVerbose) != 0) ? 1 : 0;
    0x0040aa96 lea rdi, [rsp + 0x440]                            |     
    0x0040aa9e xor edx, edx                                      |     
    0x0040aaa0 call 0x64e930                                     |     BloombergLP::bslma::TestAllocator::TestAllocator(bool,BloombergLP::bslma::Allocator*) (rsp + 0x440, 0, 0);
    0x0040aaa5 xor esi, esi                                      |     
    0x0040aaa7 cmp dword [rip + 0x50f932], 0                     |     
    0x0040aaae setne sil                                         |     sil = (*(obj.veryVeryVerbose) != 0) ? 1 : 0;
    0x0040aab2 lea rdi, [rsp + 0x1f0]                            |     
    0x0040aaba xor edx, edx                                      |     
    0x0040aabc call 0x64e930                                     |     BloombergLP::bslma::TestAllocator::TestAllocator(bool,BloombergLP::bslma::Allocator*) (rsp + 0x1f0, 0, 0);
    0x0040aac1 lea rdi, [rsp + 0x558]                            |     
    0x0040aac9 lea rsi, [rsp + 0x1f0]                            |     
    0x0040aad1 call 0x64e780                                     |     BloombergLP::bslma::DefaultAllocatorGuard::DefaultAllocatorGuard(BloombergLP::bslma::Allocator*) (rsp + 0x558, rsp + 0x1f0);
    0x0040aad6 lea rdi, [rsp + 8]                                |     
    0x0040aadb call 0x649c40                                     |     BloombergLP::bdlcc::SkipList_RandomLevelGenerator::SkipList_RandomLevelGenerator() (rsp + 8);
    0x0040aae0 mov dword [rsp + 0x10], 0                         |     *((rsp + 0x10)) = 0;
    0x0040aae8 lea rbx, [rsp + 0x28]                             |     rbx = rsp + 0x28;
    0x0040aaed mov rdi, rbx                                      |     rdi = rbx;
    0x0040aaf0 xor esi, esi                                      |     esi = 0;
    0x0040aaf2 call 0x404cc0                                     |     pthread_mutex_init ();
    0x0040aaf7 mov dword [rsp + 0x50], 0                         |     *((rsp + 0x50)) = 0;
    0x0040aaff mov qword [rsp + 0x58], 0                         |     *((rsp + 0x58)) = 0;
    0x0040ab08 lea rdx, [rsp + 0x440]                            |     
    0x0040ab10 mov qword [rsp + 0x60], rdx                       |     *((rsp + 0x60)) = rdx;
    0x0040ab15 movaps xmm0, xmmword [rip + 0x26f8b4]             |     xmm0 = *(0x0067a3d0);
    0x0040ab1c movaps xmmword [rsp + 0xc0], xmm0                 |     *((rsp + 0xc0)) = xmm0;
    0x0040ab24 movaps xmm0, xmmword [rip + 0x26f8b5]             |     xmm0 = *(0x0067a3e0);
    0x0040ab2b movaps xmmword [rsp + 0xd0], xmm0                 |     *((rsp + 0xd0)) = xmm0;
    0x0040ab33 movaps xmm0, xmmword [rip + 0x26f8b6]             |     xmm0 = *(0x0067a3f0);
    0x0040ab3a movaps xmmword [rsp + 0xe0], xmm0                 |     *((rsp + 0xe0)) = xmm0;
    0x0040ab42 movaps xmm0, xmmword [rip + 0x26f8b7]             |     xmm0 = *(0x0067a400);
    0x0040ab49 movaps xmmword [rsp + 0xf0], xmm0                 |     *((rsp + 0xf0)) = xmm0;
    0x0040ab51 movaps xmm0, xmmword [rip + 0x26f8b8]             |     xmm0 = *(0x0067a410);
    0x0040ab58 movaps xmmword [rsp + 0x100], xmm0                |     *((rsp + 0x100)) = xmm0;
    0x0040ab60 movaps xmm0, xmmword [rip + 0x26f8b9]             |     xmm0 = *(0x0067a420);
    0x0040ab67 movaps xmmword [rsp + 0x110], xmm0                |     *((rsp + 0x110)) = xmm0;
    0x0040ab6f movaps xmm0, xmmword [rip + 0x26f8ba]             |     xmm0 = *(0x0067a430);
    0x0040ab76 movaps xmmword [rsp + 0x120], xmm0                |     *((rsp + 0x120)) = xmm0;
    0x0040ab7e movapd xmm0, xmmword [rip + 0x26f8ba]             |     __asm ("movapd xmm0, xmmword [0x0067a440]");
    0x0040ab86 movapd xmmword [rsp + 0x130], xmm0                |     __asm ("movapd xmmword [rsp + 0x130], xmm0");
    0x0040ab8f lea rdi, [rsp + 0xc0]                             |     
    0x0040ab97 mov esi, 0x20                                     |     
    0x0040ab9c call 0x64a120                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::createPoolManager(int*,int,BloombergLP::bslma::Allocator*) (rsp + 0xc0, 0x20, rsp + 0x440);
    0x0040aba1 mov qword [rsp + 0x58], rax                       |     *((rsp + 0x58)) = rax;
    0x0040aba6 mov rdi, rax                                      |     
    0x0040aba9 mov esi, 0x1f                                     |     
    0x0040abae call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (rax, 0x1f);
    0x0040abb3 mov qword [rsp + 0x18], rax                       |     *((rsp + 0x18)) = rax;
    0x0040abb8 mov rdi, qword [rsp + 0x58]                       |     
    0x0040abbd mov esi, 0x1f                                     |     
    0x0040abc2 call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x58)), 0x1f);
    0x0040abc7 mov qword [rsp + 0x20], rax                       |     *((rsp + 0x20)) = rax;
    0x0040abcc xor ecx, ecx                                      |     ecx = 0;
    0x0040abce nop                                               |     
                                                                 |     do {
    0x0040abd0 mov rax, qword [rsp + 0x18]                       |         rax = *((rsp + 0x18));
    0x0040abd5 mov qword [rax + rcx + 0x48], 0                   |         *((rax + rcx + 0x48)) = 0;
    0x0040abde mov rax, qword [rsp + 0x18]                       |         rax = *((rsp + 0x18));
    0x0040abe3 mov rdx, qword [rsp + 0x20]                       |         rdx = *((rsp + 0x20));
    0x0040abe8 mov qword [rax + rcx + 0x40], rdx                 |         *((rax + rcx + 0x40)) = rdx;
    0x0040abed mov rax, qword [rsp + 0x18]                       |         rax = *((rsp + 0x18));
    0x0040abf2 mov rdx, qword [rsp + 0x20]                       |         rdx = *((rsp + 0x20));
    0x0040abf7 mov qword [rdx + rcx + 0x48], rax                 |         *((rdx + rcx + 0x48)) = rax;
    0x0040abfc mov rax, qword [rsp + 0x20]                       |         rax = *((rsp + 0x20));
    0x0040ac01 mov qword [rax + rcx + 0x40], 0                   |         *((rax + rcx + 0x40)) = 0;
    0x0040ac0a add rcx, 0x10                                     |         rcx += 0x10;
    0x0040ac0e cmp rcx, 0x200                                    |         
    0x0040ac15 jne 0x40abd0                                      |         
                                                                 |     } while (rcx != 0x200);
    0x0040ac17 lea rbx, [rsp + 0x2c4]                            |     rbx = rsp + 0x2c4;
    0x0040ac1f mov r12d, 0xc                                     |     r12d = 0xc;
    0x0040ac25 lea r14, [rsp + 0xc0]                             |     r14 = rsp + 0xc0;
    0x0040ac2d lea r15, [rsp + 8]                                |     r15 = rsp + 8;
    0x0040ac32 jmp 0x40ac4d                                      |     
                                                                 |     while (*((rsp + 0xe0)) == 0x17) {
                                                                 | label_2:
    0x0040ac40 add rbx, 0x18                                     |         rbx += 0x18;
    0x0040ac44 dec r12                                           |         r12--;
                                                                 |         if (r12 == 0) {
    0x0040ac47 je 0x40c19d                                       |             goto label_45;
                                                                 |         }
    0x0040ac4d mov rbp, qword [rbx + 4]                          |         rbp = *((rbx + 4));
    0x0040ac51 mov rax, qword [rip + 0x50fee8]                   |         rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040ac58 test rax, rax                                     |         
                                                                 |         if (rax == 0) {
    0x0040ac5b jne 0x40ac62                                      |             
    0x0040ac5d call 0x64e700                                     |             rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |         }
    0x0040ac62 mov qword [rsp + 0xc0], 0                         |         *((rsp + 0xc0)) = 0;
    0x0040ac6e movapd xmm0, xmmword [rip + 0x26f74a]             |         __asm ("movapd xmm0, xmmword [0x0067a3c0]");
    0x0040ac76 movupd xmmword [rsp + 0xd8], xmm0                 |         __asm ("movupd xmmword [rsp + 0xd8], xmm0");
    0x0040ac7f mov qword [rsp + 0xe8], rax                       |         *((rsp + 0xe8)) = rax;
    0x0040ac87 mov rdi, rbp                                      |         
    0x0040ac8a call 0x404d40                                     |         rax = strlen (rbp);
    0x0040ac8f mov qword [rsp + 0xd8], 0                         |         *((rsp + 0xd8)) = 0;
    0x0040ac9b mov ecx, 0x67cde6                                 |         
    0x0040aca0 mov rdi, r14                                      |         
    0x0040aca3 mov rsi, rbp                                      |         
    0x0040aca6 mov rdx, rax                                      |         
    0x0040aca9 call 0x653850                                     |         bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (r14, rbp, rax, "string<...>::assign(char*...): string too long");
    0x0040acae mov rdi, r15                                      |         
    0x0040acb1 call 0x649c50                                     |         eax = BloombergLP::bdlcc::SkipList_RandomLevelGenerator::randomLevel() (r15);
    0x0040acb6 mov rdi, r15                                      |         
    0x0040acb9 mov esi, eax                                      |         
    0x0040acbb mov rdx, rbx                                      |         
    0x0040acbe mov rcx, r14                                      |         
    0x0040acc1 call 0x5e9830                                     |         rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::allocateNode(int,intconst&,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>const&) (r15, eax, rbx, r14);
    0x0040acc6 mov rdi, r15                                      |         
    0x0040acc9 xor esi, esi                                      |         
    0x0040accb mov rdx, rax                                      |         
    0x0040acce mov ecx, 1                                        |         ecx = 1;
    0x0040acd3 call 0x5e9960                                     |         BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::addNodeImpR(bool*,BloombergLP::bdlcc::SkipList_Node<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,bool) (r15, 0, rax);
    0x0040acd8 cmp qword [rsp + 0xe0], 0x17                      |         
    0x0040ace1 je 0x40ac40                                       |         
                                                                 |     }
    0x0040ace7 mov rsi, qword [rsp + 0xc0]                       |     rsi = *((rsp + 0xc0));
    0x0040acef mov rdi, qword [rsp + 0xe8]                       |     rdi = *((rsp + 0xe8));
    0x0040acf7 mov rax, qword [rdi]                              |     rax = *(rdi);
    0x0040acfa call qword [rax + 0x18]                           |     uint64_t (*rax + 0x18)() ();
    0x0040acfd jmp 0x40ac40                                      |     goto label_2;
    0x0040ad02 lea rdi, [rsp + 0x2c0]                            |     
    0x0040ad0a mov esi, 0x678470                                 |     
    0x0040ad0f mov edx, 0x120                                    |     
    0x0040ad14 call 0x4053d0                                     |     memcpy (rsp + 0x2c0, 0x678470, 0x120);
    0x0040ad19 cmp dword [rip + 0x50f6b8], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040ad20 je 0x40ae69                                       |         
    0x0040ad26 mov rax, qword [rip + 0x50f5fb]                   |         rax = std::__1::cout;
    0x0040ad2d mov esi, 0x91a328                                 |         esi = std::__1::cout;
    0x0040ad32 add rsi, qword [rax - 0x18]                       |         rsi += *((rax - 0x18));
    0x0040ad36 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040ad3e call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040ad43 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040ad4b mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040ad50 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040ad55 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040ad58 mov rdi, rax                                      |         rdi = rax;
    0x0040ad5b mov esi, 0xa                                      |         esi = 0xa;
    0x0040ad60 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040ad63 mov ebx, eax                                      |         ebx = eax;
    0x0040ad65 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040ad6d call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040ad72 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x0040ad75 mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x0040ad7a call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040ad7f mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x0040ad84 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040ad89 mov edi, 0x91a328                                 |         
    0x0040ad8e mov esi, 0x67b3cc                                 |         
    0x0040ad93 mov edx, 0x27                                     |         
    0x0040ad98 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "addR - verify insertion order is stable", 0x27);
    0x0040ad9d mov rbx, rax                                      |         rbx = rax;
    0x0040ada0 mov rax, qword [rax]                              |         rax = *(rax);
    0x0040ada3 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040ada7 add rsi, rbx                                      |         rsi += rbx;
    0x0040adaa lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040adb2 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040adb7 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040adbf mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040adc4 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040adc9 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040adcc mov rdi, rax                                      |         rdi = rax;
    0x0040adcf mov esi, 0xa                                      |         esi = 0xa;
    0x0040add4 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040add7 mov ebp, eax                                      |         
    0x0040add9 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040ade1 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040ade6 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x0040adea mov rdi, rbx                                      |         rdi = rbx;
    0x0040aded call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040adf2 mov rdi, rbx                                      |         rdi = rbx;
    0x0040adf5 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040adfa mov esi, 0x67b4ad                                 |         
    0x0040adff mov edx, 0x27                                     |         
    0x0040ae04 mov rdi, rbx                                      |         
    0x0040ae07 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rbx, 0x67b4ad, 0x27);
    0x0040ae0c mov rbx, rax                                      |         rbx = rax;
    0x0040ae0f mov rax, qword [rax]                              |         rax = *(rax);
    0x0040ae12 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040ae16 add rsi, rbx                                      |         rsi += rbx;
    0x0040ae19 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040ae21 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040ae26 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040ae2e mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040ae33 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040ae38 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040ae3b mov rdi, rax                                      |         rdi = rax;
    0x0040ae3e mov esi, 0xa                                      |         esi = 0xa;
    0x0040ae43 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040ae46 mov ebp, eax                                      |         
    0x0040ae48 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040ae50 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040ae55 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x0040ae59 mov rdi, rbx                                      |         rdi = rbx;
    0x0040ae5c call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040ae61 mov rdi, rbx                                      |         rdi = rbx;
    0x0040ae64 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x0040ae69 xor esi, esi                                      |     
    0x0040ae6b cmp dword [rip + 0x50f56e], 0                     |     
    0x0040ae72 setne sil                                         |     sil = (*(obj.veryVeryVerbose) != 0) ? 1 : 0;
    0x0040ae76 lea r14, [rsp + 0xc0]                             |     r14 = rsp + 0xc0;
    0x0040ae7e mov rdi, r14                                      |     
    0x0040ae81 xor edx, edx                                      |     
    0x0040ae83 call 0x64e930                                     |     BloombergLP::bslma::TestAllocator::TestAllocator(bool,BloombergLP::bslma::Allocator*) (r14, 0, 0);
    0x0040ae88 xor esi, esi                                      |     
    0x0040ae8a cmp dword [rip + 0x50f54f], 0                     |     
    0x0040ae91 setne sil                                         |     sil = (*(obj.veryVeryVerbose) != 0) ? 1 : 0;
    0x0040ae95 lea rdi, [rsp + 0x440]                            |     
    0x0040ae9d xor edx, edx                                      |     
    0x0040ae9f call 0x64e930                                     |     BloombergLP::bslma::TestAllocator::TestAllocator(bool,BloombergLP::bslma::Allocator*) (rsp + 0x440, 0, 0);
    0x0040aea4 lea rdi, [rsp + 0x78]                             |     
    0x0040aea9 lea rsi, [rsp + 0x440]                            |     
    0x0040aeb1 call 0x64e780                                     |     BloombergLP::bslma::DefaultAllocatorGuard::DefaultAllocatorGuard(BloombergLP::bslma::Allocator*) (rsp + 0x78, rsp + 0x440);
    0x0040aeb6 lea rdi, [rsp + 8]                                |     
    0x0040aebb call 0x649c40                                     |     BloombergLP::bdlcc::SkipList_RandomLevelGenerator::SkipList_RandomLevelGenerator() (rsp + 8);
    0x0040aec0 mov dword [rsp + 0x10], 0                         |     *((rsp + 0x10)) = 0;
    0x0040aec8 lea rbx, [rsp + 0x28]                             |     rbx = rsp + 0x28;
    0x0040aecd mov rdi, rbx                                      |     rdi = rbx;
    0x0040aed0 xor esi, esi                                      |     esi = 0;
    0x0040aed2 call 0x404cc0                                     |     pthread_mutex_init ();
    0x0040aed7 mov dword [rsp + 0x50], 0                         |     *((rsp + 0x50)) = 0;
    0x0040aedf mov qword [rsp + 0x58], 0                         |     *((rsp + 0x58)) = 0;
    0x0040aee8 mov qword [rsp + 0x60], r14                       |     *((rsp + 0x60)) = r14;
    0x0040aeed movaps xmm0, xmmword [rip + 0x26f4dc]             |     xmm0 = *(0x0067a3d0);
    0x0040aef4 movaps xmmword [rsp + 0x1f0], xmm0                |     *((rsp + 0x1f0)) = xmm0;
    0x0040aefc movaps xmm0, xmmword [rip + 0x26f4dd]             |     xmm0 = *(0x0067a3e0);
    0x0040af03 movaps xmmword [rsp + 0x200], xmm0                |     *((rsp + 0x200)) = xmm0;
    0x0040af0b movaps xmm0, xmmword [rip + 0x26f4de]             |     xmm0 = *(0x0067a3f0);
    0x0040af12 movaps xmmword [rsp + 0x210], xmm0                |     *((rsp + 0x210)) = xmm0;
    0x0040af1a movaps xmm0, xmmword [rip + 0x26f4df]             |     xmm0 = *(0x0067a400);
    0x0040af21 movaps xmmword [rsp + 0x220], xmm0                |     *((rsp + 0x220)) = xmm0;
    0x0040af29 movaps xmm0, xmmword [rip + 0x26f4e0]             |     xmm0 = *(0x0067a410);
    0x0040af30 movaps xmmword [rsp + 0x230], xmm0                |     *((rsp + 0x230)) = xmm0;
    0x0040af38 movaps xmm0, xmmword [rip + 0x26f4e1]             |     xmm0 = *(0x0067a420);
    0x0040af3f movaps xmmword [rsp + 0x240], xmm0                |     *((rsp + 0x240)) = xmm0;
    0x0040af47 movaps xmm0, xmmword [rip + 0x26f4e2]             |     xmm0 = *(0x0067a430);
    0x0040af4e movaps xmmword [rsp + 0x250], xmm0                |     *((rsp + 0x250)) = xmm0;
    0x0040af56 movapd xmm0, xmmword [rip + 0x26f4e2]             |     __asm ("movapd xmm0, xmmword [0x0067a440]");
    0x0040af5e movapd xmmword [rsp + 0x260], xmm0                |     __asm ("movapd xmmword [rsp + 0x260], xmm0");
    0x0040af67 lea rdi, [rsp + 0x1f0]                            |     
    0x0040af6f mov esi, 0x20                                     |     
    0x0040af74 mov rdx, r14                                      |     
    0x0040af77 call 0x64a120                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::createPoolManager(int*,int,BloombergLP::bslma::Allocator*) (rsp + 0x1f0, 0x20, r14);
    0x0040af7c mov qword [rsp + 0x58], rax                       |     *((rsp + 0x58)) = rax;
    0x0040af81 mov rdi, rax                                      |     
    0x0040af84 mov esi, 0x1f                                     |     
    0x0040af89 call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (rax, 0x1f);
    0x0040af8e mov qword [rsp + 0x18], rax                       |     *((rsp + 0x18)) = rax;
    0x0040af93 mov rdi, qword [rsp + 0x58]                       |     
    0x0040af98 mov esi, 0x1f                                     |     
    0x0040af9d call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x58)), 0x1f);
    0x0040afa2 mov qword [rsp + 0x20], rax                       |     *((rsp + 0x20)) = rax;
    0x0040afa7 xor ecx, ecx                                      |     ecx = 0;
    0x0040afa9 nop dword [rax]                                   |     
                                                                 |     do {
    0x0040afb0 mov rax, qword [rsp + 0x18]                       |         rax = *((rsp + 0x18));
    0x0040afb5 mov qword [rax + rcx + 0x48], 0                   |         *((rax + rcx + 0x48)) = 0;
    0x0040afbe mov rax, qword [rsp + 0x18]                       |         rax = *((rsp + 0x18));
    0x0040afc3 mov rdx, qword [rsp + 0x20]                       |         rdx = *((rsp + 0x20));
    0x0040afc8 mov qword [rax + rcx + 0x40], rdx                 |         *((rax + rcx + 0x40)) = rdx;
    0x0040afcd mov rax, qword [rsp + 0x18]                       |         rax = *((rsp + 0x18));
    0x0040afd2 mov rdx, qword [rsp + 0x20]                       |         rdx = *((rsp + 0x20));
    0x0040afd7 mov qword [rdx + rcx + 0x48], rax                 |         *((rdx + rcx + 0x48)) = rax;
    0x0040afdc mov rax, qword [rsp + 0x20]                       |         rax = *((rsp + 0x20));
    0x0040afe1 mov qword [rax + rcx + 0x40], 0                   |         *((rax + rcx + 0x40)) = 0;
    0x0040afea add rcx, 0x10                                     |         rcx += 0x10;
    0x0040afee cmp rcx, 0x200                                    |         
    0x0040aff5 jne 0x40afb0                                      |         
                                                                 |     } while (rcx != 0x200);
    0x0040aff7 lea rbp, [rsp + 0x2c4]                            |     rbp = rsp + 0x2c4;
    0x0040afff mov r13d, 0xc                                     |     r13d = 0xc;
    0x0040b005 lea r15, [rsp + 0x1f0]                            |     r15 = rsp + 0x1f0;
    0x0040b00d lea r12, [rsp + 8]                                |     r12 = rsp + 8;
    0x0040b012 jmp 0x40b02d                                      |     
                                                                 |     while (*((rsp + 0x210)) == 0x17) {
                                                                 | label_3:
    0x0040b020 add rbp, 0x18                                     |         rbp += 0x18;
    0x0040b024 dec r13                                           |         r13--;
                                                                 |         if (r13 == 0) {
    0x0040b027 je 0x40c144                                       |             goto label_46;
                                                                 |         }
    0x0040b02d mov rbx, qword [rbp + 4]                          |         rbx = *((rbp + 4));
    0x0040b031 mov rax, qword [rip + 0x50fb08]                   |         rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040b038 test rax, rax                                     |         
                                                                 |         if (rax == 0) {
    0x0040b03b jne 0x40b042                                      |             
    0x0040b03d call 0x64e700                                     |             rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |         }
    0x0040b042 mov qword [rsp + 0x1f0], 0                        |         *((rsp + 0x1f0)) = 0;
    0x0040b04e movapd xmm0, xmmword [rip + 0x26f36a]             |         __asm ("movapd xmm0, xmmword [0x0067a3c0]");
    0x0040b056 movupd xmmword [rsp + 0x208], xmm0                |         __asm ("movupd xmmword [rsp + 0x208], xmm0");
    0x0040b05f mov qword [rsp + 0x218], rax                      |         *((rsp + 0x218)) = rax;
    0x0040b067 mov rdi, rbx                                      |         
    0x0040b06a call 0x404d40                                     |         rax = strlen (rbx);
    0x0040b06f mov qword [rsp + 0x208], 0                        |         *((rsp + 0x208)) = 0;
    0x0040b07b mov ecx, 0x67cde6                                 |         
    0x0040b080 mov rdi, r15                                      |         
    0x0040b083 mov rsi, rbx                                      |         
    0x0040b086 mov rdx, rax                                      |         
    0x0040b089 call 0x653850                                     |         bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (r15, rbx, rax, "string<...>::assign(char*...): string too long");
    0x0040b08e mov rdi, r12                                      |         
    0x0040b091 call 0x649c50                                     |         eax = BloombergLP::bdlcc::SkipList_RandomLevelGenerator::randomLevel() (r12);
    0x0040b096 mov rdi, r12                                      |         
    0x0040b099 mov esi, eax                                      |         
    0x0040b09b mov rdx, rbp                                      |         
    0x0040b09e mov rcx, r15                                      |         
    0x0040b0a1 call 0x5e9830                                     |         rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::allocateNode(int,intconst&,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>const&) (r12, eax, rbp, r15);
    0x0040b0a6 mov rdi, r12                                      |         
    0x0040b0a9 xor esi, esi                                      |         
    0x0040b0ab mov rdx, rax                                      |         
    0x0040b0ae mov ecx, 1                                        |         ecx = 1;
    0x0040b0b3 call 0x5e9960                                     |         BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::addNodeImpR(bool*,BloombergLP::bdlcc::SkipList_Node<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,bool) (r12, 0, rax);
    0x0040b0b8 cmp qword [rsp + 0x210], 0x17                     |         
    0x0040b0c1 je 0x40b020                                       |         
                                                                 |     }
    0x0040b0c7 mov rsi, qword [rsp + 0x1f0]                      |     rsi = *((rsp + 0x1f0));
    0x0040b0cf mov rdi, qword [rsp + 0x218]                      |     rdi = *((rsp + 0x218));
    0x0040b0d7 mov rax, qword [rdi]                              |     rax = *(rdi);
    0x0040b0da call qword [rax + 0x18]                           |     uint64_t (*rax + 0x18)() ();
    0x0040b0dd jmp 0x40b020                                      |     goto label_3;
    0x0040b0e2 cmp dword [rip + 0x50f2ef], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040b0e9 je 0x40b0ff                                       |         
    0x0040b0eb mov edi, 0x91a328                                 |         
    0x0040b0f0 mov esi, 0x67b2f4                                 |         
    0x0040b0f5 mov edx, 0x3a                                     |         
    0x0040b0fa call 0x5bce00                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "TESTING 'allocator' ACCESSOR\n============================\n", 0x3a);
                                                                 |     }
    0x0040b0ff lea rdi, [rsp + 0xc0]                             |     
    0x0040b107 call 0x649c40                                     |     BloombergLP::bdlcc::SkipList_RandomLevelGenerator::SkipList_RandomLevelGenerator() (rsp + 0xc0);
    0x0040b10c mov dword [rsp + 0xc8], 0                         |     *((rsp + 0xc8)) = 0;
    0x0040b117 lea rbx, [rsp + 0xe0]                             |     rbx = rsp + 0xe0;
    0x0040b11f mov rdi, rbx                                      |     rdi = rbx;
    0x0040b122 xor esi, esi                                      |     esi = 0;
    0x0040b124 call 0x404cc0                                     |     pthread_mutex_init ();
    0x0040b129 mov dword [rsp + 0x108], 0                        |     *((rsp + 0x108)) = 0;
    0x0040b134 mov qword [rsp + 0x110], 0                        |     *((rsp + 0x110)) = 0;
    0x0040b140 mov rdx, qword [rip + 0x50f9f9]                   |     rdx = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040b147 test rdx, rdx                                     |     
                                                                 |     if (rdx == 0) {
    0x0040b14a jne 0x40b154                                      |         
    0x0040b14c call 0x64e700                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x0040b151 mov rdx, rax                                      |         
                                                                 |     }
    0x0040b154 mov qword [rsp + 0x118], rdx                      |     *((rsp + 0x118)) = rdx;
    0x0040b15c movaps xmm0, xmmword [rip + 0x26f26d]             |     xmm0 = *(0x0067a3d0);
    0x0040b163 movaps xmmword [rsp + 0x2c0], xmm0                |     *((rsp + 0x2c0)) = xmm0;
    0x0040b16b movaps xmm0, xmmword [rip + 0x26f26e]             |     xmm0 = *(0x0067a3e0);
    0x0040b172 movaps xmmword [rsp + 0x2d0], xmm0                |     *((rsp + 0x2d0)) = xmm0;
    0x0040b17a movaps xmm0, xmmword [rip + 0x26f26f]             |     xmm0 = *(0x0067a3f0);
    0x0040b181 movaps xmmword [rsp + 0x2e0], xmm0                |     *((rsp + 0x2e0)) = xmm0;
    0x0040b189 movaps xmm0, xmmword [rip + 0x26f270]             |     xmm0 = *(0x0067a400);
    0x0040b190 movaps xmmword [rsp + 0x2f0], xmm0                |     *((rsp + 0x2f0)) = xmm0;
    0x0040b198 movaps xmm0, xmmword [rip + 0x26f271]             |     xmm0 = *(0x0067a410);
    0x0040b19f movaps xmmword [rsp + 0x300], xmm0                |     *((rsp + 0x300)) = xmm0;
    0x0040b1a7 movaps xmm0, xmmword [rip + 0x26f272]             |     xmm0 = *(0x0067a420);
    0x0040b1ae movaps xmmword [rsp + 0x310], xmm0                |     *((rsp + 0x310)) = xmm0;
    0x0040b1b6 movaps xmm0, xmmword [rip + 0x26f273]             |     xmm0 = *(0x0067a430);
    0x0040b1bd movaps xmmword [rsp + 0x320], xmm0                |     *((rsp + 0x320)) = xmm0;
    0x0040b1c5 movapd xmm0, xmmword [rip + 0x26f273]             |     __asm ("movapd xmm0, xmmword [0x0067a440]");
    0x0040b1cd movapd xmmword [rsp + 0x330], xmm0                |     __asm ("movapd xmmword [rsp + 0x330], xmm0");
    0x0040b1d6 lea rdi, [rsp + 0x2c0]                            |     
    0x0040b1de mov esi, 0x20                                     |     
    0x0040b1e3 call 0x64a120                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::createPoolManager(int*,int,BloombergLP::bslma::Allocator*) (rsp + 0x2c0, 0x20, rax);
    0x0040b1e8 mov qword [rsp + 0x110], rax                      |     *((rsp + 0x110)) = rax;
    0x0040b1f0 mov rdi, rax                                      |     
    0x0040b1f3 mov esi, 0x1f                                     |     
    0x0040b1f8 call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (rax, 0x1f);
    0x0040b1fd mov qword [rsp + 0xd0], rax                       |     *((rsp + 0xd0)) = rax;
    0x0040b205 mov rdi, qword [rsp + 0x110]                      |     
    0x0040b20d mov esi, 0x1f                                     |     
    0x0040b212 call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x110)), 0x1f);
    0x0040b217 mov qword [rsp + 0xd8], rax                       |     *((rsp + 0xd8)) = rax;
    0x0040b21f xor ecx, ecx                                      |     ecx = 0;
    0x0040b221 nop word cs:[rax + rax]                           |     
    0x0040b22b nop dword [rax + rax]                             |     
                                                                 |     do {
    0x0040b230 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x0040b238 mov qword [rax + rcx + 0x48], 0                   |         *((rax + rcx + 0x48)) = 0;
    0x0040b241 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x0040b249 mov rdx, qword [rsp + 0xd8]                       |         rdx = *((rsp + 0xd8));
    0x0040b251 mov qword [rax + rcx + 0x40], rdx                 |         *((rax + rcx + 0x40)) = rdx;
    0x0040b256 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x0040b25e mov rdx, qword [rsp + 0xd8]                       |         rdx = *((rsp + 0xd8));
    0x0040b266 mov qword [rdx + rcx + 0x48], rax                 |         *((rdx + rcx + 0x48)) = rax;
    0x0040b26b mov rax, qword [rsp + 0xd8]                       |         rax = *((rsp + 0xd8));
    0x0040b273 mov qword [rax + rcx + 0x40], 0                   |         *((rax + rcx + 0x40)) = 0;
    0x0040b27c add rcx, 0x10                                     |         rcx += 0x10;
    0x0040b280 cmp rcx, 0x200                                    |         
    0x0040b287 jne 0x40b230                                      |         
                                                                 |     } while (rcx != 0x200);
    0x0040b289 mov rax, qword [rip + 0x50f8b0]                   |     rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040b290 test rax, rax                                     |     
                                                                 |     if (rax == 0) {
    0x0040b293 jne 0x40b29a                                      |         
    0x0040b295 call 0x64e700                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |     }
    0x0040b29a cmp rax, qword [rsp + 0x118]                      |     
                                                                 |     if (rax != *((rsp + 0x118))) {
    0x0040b2a2 je 0x40b2cb                                       |         
    0x0040b2a4 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040b2a9 mov rbx, rax                                      |         rbx = rax;
    0x0040b2ac mov rdi, rax                                      |         
    0x0040b2af call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040b2b4 mov edi, 0x67b32f                                 |         edi = "bslma::Default::defaultAllocator() == X.allocator()";
    0x0040b2b9 mov esi, 0x129b                                   |         esi = 0x129b;
    0x0040b2be call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040b2c3 mov rdi, rbx                                      |         
    0x0040b2c6 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040b2cb lea rdi, [rsp + 0xc0]                             |     
    0x0040b2d3 call 0x454c10                                     |     BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::~SkipList() (rsp + 0xc0);
    0x0040b2d8 lea rbx, [rsp + 0x2c0]                            |     rbx = rsp + 0x2c0;
    0x0040b2e0 mov esi, 0x67b363                                 |     
    0x0040b2e5 mov rdi, rbx                                      |     
    0x0040b2e8 xor edx, edx                                      |     
    0x0040b2ea call 0x64e9f0                                     |     BloombergLP::bslma::TestAllocator::TestAllocator(char const*,BloombergLP::bslma::Allocator*) (rbx, "supplied", 0);
    0x0040b2ef lea rdi, [rsp + 0x440]                            |     
    0x0040b2f7 call 0x649c40                                     |     BloombergLP::bdlcc::SkipList_RandomLevelGenerator::SkipList_RandomLevelGenerator() (rsp + 0x440);
    0x0040b2fc mov dword [rsp + 0x448], 0                        |     *((rsp + 0x448)) = 0;
    0x0040b307 lea rbp, [rsp + 0x460]                            |     rbp = rsp + 0x460;
    0x0040b30f mov rdi, rbp                                      |     rdi = rbp;
    0x0040b312 xor esi, esi                                      |     esi = 0;
    0x0040b314 call 0x404cc0                                     |     pthread_mutex_init ();
    0x0040b319 mov dword [rsp + 0x488], 0                        |     *((rsp + 0x488)) = 0;
    0x0040b324 mov qword [rsp + 0x490], 0                        |     *((rsp + 0x490)) = 0;
    0x0040b330 mov qword [rsp + 0x498], rbx                      |     *((rsp + 0x498)) = rbx;
    0x0040b338 movaps xmm0, xmmword [rip + 0x26f091]             |     xmm0 = *(0x0067a3d0);
    0x0040b33f movaps xmmword [rsp + 0xc0], xmm0                 |     *((rsp + 0xc0)) = xmm0;
    0x0040b347 movaps xmm0, xmmword [rip + 0x26f092]             |     xmm0 = *(0x0067a3e0);
    0x0040b34e movaps xmmword [rsp + 0xd0], xmm0                 |     *((rsp + 0xd0)) = xmm0;
    0x0040b356 movaps xmm0, xmmword [rip + 0x26f093]             |     xmm0 = *(0x0067a3f0);
    0x0040b35d movaps xmmword [rsp + 0xe0], xmm0                 |     *((rsp + 0xe0)) = xmm0;
    0x0040b365 movaps xmm0, xmmword [rip + 0x26f094]             |     xmm0 = *(0x0067a400);
    0x0040b36c movaps xmmword [rsp + 0xf0], xmm0                 |     *((rsp + 0xf0)) = xmm0;
    0x0040b374 movaps xmm0, xmmword [rip + 0x26f095]             |     xmm0 = *(0x0067a410);
    0x0040b37b movaps xmmword [rsp + 0x100], xmm0                |     *((rsp + 0x100)) = xmm0;
    0x0040b383 movaps xmm0, xmmword [rip + 0x26f096]             |     xmm0 = *(0x0067a420);
    0x0040b38a movaps xmmword [rsp + 0x110], xmm0                |     *((rsp + 0x110)) = xmm0;
    0x0040b392 movaps xmm0, xmmword [rip + 0x26f097]             |     xmm0 = *(0x0067a430);
    0x0040b399 movaps xmmword [rsp + 0x120], xmm0                |     *((rsp + 0x120)) = xmm0;
    0x0040b3a1 movapd xmm0, xmmword [rip + 0x26f097]             |     __asm ("movapd xmm0, xmmword [0x0067a440]");
    0x0040b3a9 movapd xmmword [rsp + 0x130], xmm0                |     __asm ("movapd xmmword [rsp + 0x130], xmm0");
    0x0040b3b2 lea rdi, [rsp + 0xc0]                             |     
    0x0040b3ba mov esi, 0x20                                     |     
    0x0040b3bf mov rdx, rbx                                      |     
    0x0040b3c2 call 0x64a120                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::createPoolManager(int*,int,BloombergLP::bslma::Allocator*) (rsp + 0xc0, 0x20, rbx);
    0x0040b3c7 mov qword [rsp + 0x490], rax                      |     *((rsp + 0x490)) = rax;
    0x0040b3cf mov rdi, rax                                      |     
    0x0040b3d2 mov esi, 0x1f                                     |     
    0x0040b3d7 call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (rax, 0x1f);
    0x0040b3dc mov qword [rsp + 0x450], rax                      |     *((rsp + 0x450)) = rax;
    0x0040b3e4 mov rdi, qword [rsp + 0x490]                      |     
    0x0040b3ec mov esi, 0x1f                                     |     
    0x0040b3f1 call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x490)), 0x1f);
    0x0040b3f6 mov qword [rsp + 0x458], rax                      |     *((rsp + 0x458)) = rax;
    0x0040b3fe xor ecx, ecx                                      |     ecx = 0;
                                                                 |     do {
    0x0040b400 mov rax, qword [rsp + 0x450]                      |         rax = *((rsp + 0x450));
    0x0040b408 mov qword [rax + rcx + 0x48], 0                   |         *((rax + rcx + 0x48)) = 0;
    0x0040b411 mov rax, qword [rsp + 0x450]                      |         rax = *((rsp + 0x450));
    0x0040b419 mov rdx, qword [rsp + 0x458]                      |         rdx = *((rsp + 0x458));
    0x0040b421 mov qword [rax + rcx + 0x40], rdx                 |         *((rax + rcx + 0x40)) = rdx;
    0x0040b426 mov rax, qword [rsp + 0x450]                      |         rax = *((rsp + 0x450));
    0x0040b42e mov rdx, qword [rsp + 0x458]                      |         rdx = *((rsp + 0x458));
    0x0040b436 mov qword [rdx + rcx + 0x48], rax                 |         *((rdx + rcx + 0x48)) = rax;
    0x0040b43b mov rax, qword [rsp + 0x458]                      |         rax = *((rsp + 0x458));
    0x0040b443 mov qword [rax + rcx + 0x40], 0                   |         *((rax + rcx + 0x40)) = 0;
    0x0040b44c add rcx, 0x10                                     |         rcx += 0x10;
    0x0040b450 cmp rcx, 0x200                                    |         
    0x0040b457 jne 0x40b400                                      |         
                                                                 |     } while (rcx != 0x200);
    0x0040b459 cmp rbx, qword [rsp + 0x498]                      |     
                                                                 |     if (rbx != *((rsp + 0x498))) {
    0x0040b461 je 0x40b48a                                       |         
    0x0040b463 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040b468 mov rbx, rax                                      |         rbx = rax;
    0x0040b46b mov rdi, rax                                      |         
    0x0040b46e call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040b473 mov edi, 0x67b36c                                 |         edi = "&oa == X.allocator()";
    0x0040b478 mov esi, 0x12a2                                   |         esi = 0x12a2;
    0x0040b47d call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040b482 mov rdi, rbx                                      |         
    0x0040b485 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040b48a lea rdi, [rsp + 0x440]                            |     
    0x0040b492 call 0x454c10                                     |     BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::~SkipList() (rsp + 0x440);
    0x0040b497 jmp 0x40dae7                                      |     goto label_30;
    0x0040b49c cmp dword [rip + 0x50ef35], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040b4a3 je 0x40b4b9                                       |         
    0x0040b4a5 mov edi, 0x91a328                                 |         
    0x0040b4aa mov esi, 0x67b269                                 |         
    0x0040b4af mov edx, 0x22                                     |         
    0x0040b4b4 call 0x5bce00                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "REPRODUCE BUG FROM DRQS 144652915\n", 0x22);
                                                                 |     }
    0x0040b4b9 xor esi, esi                                      |     
    0x0040b4bb cmp dword [rip + 0x50ef22], 0                     |     
    0x0040b4c2 setne sil                                         |     sil = (*(obj.veryVeryVeryVerbose) != 0) ? 1 : 0;
    0x0040b4c6 lea r14, [rsp + 0xc0]                             |     r14 = rsp + 0xc0;
    0x0040b4ce mov rdi, r14                                      |     
    0x0040b4d1 xor edx, edx                                      |     
    0x0040b4d3 call 0x64e930                                     |     BloombergLP::bslma::TestAllocator::TestAllocator(bool,BloombergLP::bslma::Allocator*) (r14, 0, 0);
    0x0040b4d8 lea rbx, [rsp + 0x1f0]                            |     rbx = rsp + 0x1f0;
    0x0040b4e0 mov rdi, rbx                                      |     
    0x0040b4e3 call 0x649c40                                     |     BloombergLP::bdlcc::SkipList_RandomLevelGenerator::SkipList_RandomLevelGenerator() (rbx);
    0x0040b4e8 mov dword [rsp + 0x1f8], 0                        |     *((rsp + 0x1f8)) = 0;
    0x0040b4f3 lea rdi, [rsp + 0x210]                            |     rdi = rsp + 0x210;
    0x0040b4fb xor esi, esi                                      |     esi = 0;
    0x0040b4fd call 0x404cc0                                     |     pthread_mutex_init ();
    0x0040b502 mov dword [rsp + 0x238], 0                        |     *((rsp + 0x238)) = 0;
    0x0040b50d mov qword [rsp + 0x240], 0                        |     *((rsp + 0x240)) = 0;
    0x0040b519 mov qword [rsp + 0x248], r14                      |     *((rsp + 0x248)) = r14;
    0x0040b521 movaps xmm0, xmmword [rip + 0x26ee38]             |     xmm0 = *(0x0067a360);
    0x0040b528 movaps xmmword [rsp + 0x2c0], xmm0                |     *((rsp + 0x2c0)) = xmm0;
    0x0040b530 movaps xmm0, xmmword [rip + 0x26ee39]             |     xmm0 = *(0x0067a370);
    0x0040b537 movaps xmmword [rsp + 0x2d0], xmm0                |     *((rsp + 0x2d0)) = xmm0;
    0x0040b53f movaps xmm0, xmmword [rip + 0x26ee3a]             |     xmm0 = *(0x0067a380);
    0x0040b546 movaps xmmword [rsp + 0x2e0], xmm0                |     *((rsp + 0x2e0)) = xmm0;
    0x0040b54e movaps xmm0, xmmword [rip + 0x26ee3b]             |     xmm0 = *(0x0067a390);
    0x0040b555 movaps xmmword [rsp + 0x2f0], xmm0                |     *((rsp + 0x2f0)) = xmm0;
    0x0040b55d movaps xmm0, xmmword [rip + 0x26ee3c]             |     xmm0 = *(0x0067a3a0);
    0x0040b564 movaps xmmword [rsp + 0x300], xmm0                |     *((rsp + 0x300)) = xmm0;
    0x0040b56c movaps xmm0, xmmword [rip + 0x26ee3d]             |     xmm0 = *(0x0067a3b0);
    0x0040b573 movaps xmmword [rsp + 0x310], xmm0                |     *((rsp + 0x310)) = xmm0;
    0x0040b57b movaps xmm0, xmmword [rip + 0x26efde]             |     xmm0 = *(0x0067a560);
    0x0040b582 movaps xmmword [rsp + 0x320], xmm0                |     *((rsp + 0x320)) = xmm0;
    0x0040b58a movapd xmm0, xmmword [rip + 0x26efde]             |     __asm ("movapd xmm0, xmmword [0x0067a570]");
    0x0040b592 movapd xmmword [rsp + 0x330], xmm0                |     __asm ("movapd xmmword [rsp + 0x330], xmm0");
    0x0040b59b lea rdi, [rsp + 0x2c0]                            |     
    0x0040b5a3 mov esi, 0x20                                     |     
    0x0040b5a8 mov rdx, r14                                      |     
    0x0040b5ab call 0x64a120                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::createPoolManager(int*,int,BloombergLP::bslma::Allocator*) (rsp + 0x2c0, 0x20, r14);
    0x0040b5b0 mov qword [rsp + 0x240], rax                      |     *((rsp + 0x240)) = rax;
    0x0040b5b8 mov rdi, rax                                      |     
    0x0040b5bb mov esi, 0x1f                                     |     
    0x0040b5c0 call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (rax, 0x1f);
    0x0040b5c5 mov qword [rsp + 0x200], rax                      |     *((rsp + 0x200)) = rax;
    0x0040b5cd mov rdi, qword [rsp + 0x240]                      |     
    0x0040b5d5 mov esi, 0x1f                                     |     
    0x0040b5da call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x240)), 0x1f);
    0x0040b5df mov qword [rsp + 0x208], rax                      |     *((rsp + 0x208)) = rax;
    0x0040b5e7 xor ecx, ecx                                      |     ecx = 0;
    0x0040b5e9 nop dword [rax]                                   |     
                                                                 |     do {
    0x0040b5f0 mov rax, qword [rsp + 0x200]                      |         rax = *((rsp + 0x200));
    0x0040b5f8 mov qword [rax + rcx + 0xa0], 0                   |         *((rax + rcx + 0xa0)) = 0;
    0x0040b604 mov rax, qword [rsp + 0x200]                      |         rax = *((rsp + 0x200));
    0x0040b60c mov rdx, qword [rsp + 0x208]                      |         rdx = *((rsp + 0x208));
    0x0040b614 mov qword [rax + rcx + 0x98], rdx                 |         *((rax + rcx + 0x98)) = rdx;
    0x0040b61c mov rax, qword [rsp + 0x200]                      |         rax = *((rsp + 0x200));
    0x0040b624 mov rdx, qword [rsp + 0x208]                      |         rdx = *((rsp + 0x208));
    0x0040b62c mov qword [rdx + rcx + 0xa0], rax                 |         *((rdx + rcx + 0xa0)) = rax;
    0x0040b634 mov rax, qword [rsp + 0x208]                      |         rax = *((rsp + 0x208));
    0x0040b63c mov qword [rax + rcx + 0x98], 0                   |         *((rax + rcx + 0x98)) = 0;
    0x0040b648 add rcx, 0x10                                     |         rcx += 0x10;
    0x0040b64c cmp rcx, 0x200                                    |         
    0x0040b653 jne 0x40b5f0                                      |         
                                                                 |     } while (rcx != 0x200);
    0x0040b655 mov qword [rip + 0x50edbc], rbx                   |     *(obj.SKIPLIST_TEST_CASE_DRQS_144652915::g_skipList_p) = rbx;
    0x0040b65c call 0x64fbf0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040b661 mov rbx, rax                                      |     rbx = rax;
    0x0040b664 mov rdi, rax                                      |     
    0x0040b667 call 0x64f8a0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040b66c mov edi, 0x91a328                                 |     
    0x0040b671 mov esi, 0x67b28c                                 |     
    0x0040b676 mov edx, 0xd                                      |     
    0x0040b67b call 0x5bce00                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "numThreads = ", 0xd);
    0x0040b680 mov esi, dword [rip + 0x50bf22]                   |     esi = SKIPLIST_TEST_CASE_DRQS_144652915::numThreads;
    0x0040b686 mov rdi, rax                                      |     rdi = rax;
    0x0040b689 call 0x405010                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040b68e mov esi, 0x67b9a7                                 |     
    0x0040b693 mov edx, 2                                        |     
    0x0040b698 mov rdi, rax                                      |     
    0x0040b69b call 0x5bce00                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67b9a7, 2);
    0x0040b6a0 mov rdi, rax                                      |     rdi = rax;
    0x0040b6a3 call 0x405040                                     |     std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040b6a8 mov rdi, rbx                                      |     
    0x0040b6ab call 0x64f9f0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040b6b0 call 0x64fbf0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040b6b5 mov r15, rax                                      |     r15 = rax;
    0x0040b6b8 mov rdi, rax                                      |     
    0x0040b6bb call 0x64f8a0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040b6c0 mov edi, 0x91a328                                 |     
    0x0040b6c5 mov esi, 0x67b29a                                 |     
    0x0040b6ca mov edx, 0x14                                     |     
    0x0040b6cf call 0x5bce00                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "numNodesPerThread = ", 0x14);
    0x0040b6d4 mov esi, dword [rip + 0x50bed2]                   |     esi = SKIPLIST_TEST_CASE_DRQS_144652915::numNodesPerThread;
    0x0040b6da mov rdi, rax                                      |     rdi = rax;
    0x0040b6dd call 0x405010                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040b6e2 mov rbp, rax                                      |     
    0x0040b6e5 mov rax, qword [rax]                              |     rax = *(rax);
    0x0040b6e8 mov rsi, qword [rax - 0x18]                       |     rsi = *((rax - 0x18));
    0x0040b6ec add rsi, rbp                                      |     rsi += rbp;
    0x0040b6ef lea rdi, [rsp + 0x2c0]                            |     rdi = rsp + 0x2c0;
    0x0040b6f7 call 0x405070                                     |     std::_1::ios_base::getloc()const ();
    0x0040b6fc lea rdi, [rsp + 0x2c0]                            |     rdi = rsp + 0x2c0;
    0x0040b704 mov esi, 0x91a270                                 |     esi = obj.std::__1::ctype_char_::id;
    0x0040b709 call 0x4051a0                                     |     rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040b70e mov rcx, qword [rax]                              |     rcx = *(rax);
    0x0040b711 mov rdi, rax                                      |     rdi = rax;
    0x0040b714 mov esi, 0xa                                      |     esi = 0xa;
    0x0040b719 call qword [rcx + 0x38]                           |     eax = uint64_t (*rcx + 0x38)() ();
    0x0040b71c mov ebx, eax                                      |     ebx = eax;
    0x0040b71e lea rdi, [rsp + 0x2c0]                            |     rdi = rsp + 0x2c0;
    0x0040b726 call 0x405240                                     |     std::_1::locale::~locale() ();
    0x0040b72b movsx esi, bl                                     |     esi = (int32_t) bl;
    0x0040b72e mov rdi, rbp                                      |     rdi = rbp;
    0x0040b731 call 0x404e30                                     |     std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040b736 mov rdi, rbp                                      |     rdi = rbp;
    0x0040b739 call 0x405040                                     |     std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040b73e mov rdi, r15                                      |     
    0x0040b741 call 0x64f9f0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r15);
    0x0040b746 mov qword [rsp + 0x2c0], 0x67b2af                 |     *((rsp + 0x2c0)) = "Main Thread";
    0x0040b752 mov qword [rsp + 0x2c8], 0xb                      |     *((rsp + 0x2c8)) = 0xb;
    0x0040b75e lea rdi, [rsp + 0x2c0]                            |     
    0x0040b766 call 0x650590                                     |     BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::setThreadName(BloombergLP::bslstl::StringRefImp<char>const&) (rsp + 0x2c0);
    0x0040b76b xorpd xmm0, xmm0                                  |     __asm ("xorpd xmm0, xmm0");
    0x0040b76f movapd xmmword [rsp + 0x560], xmm0                |     __asm ("movapd xmmword [rsp + 0x560], xmm0");
    0x0040b778 mov qword [rsp + 0x570], 0                        |     *((rsp + 0x570)) = 0;
    0x0040b784 mov qword [rsp + 0x578], r14                      |     *((rsp + 0x578)) = r14;
    0x0040b78c mov ebx, dword [rip + 0x50be16]                   |     ebx = SKIPLIST_TEST_CASE_DRQS_144652915::numThreads;
    0x0040b792 lea rdi, [rsp + 0x440]                            |     rdi = rsp + 0x440;
    0x0040b79a xor esi, esi                                      |     esi = 0;
    0x0040b79c call 0x404cc0                                     |     pthread_mutex_init ();
    0x0040b7a1 lea rdi, [rsp + 0x468]                            |     
    0x0040b7a9 xor esi, esi                                      |     
    0x0040b7ab call 0x64f7a0                                     |     BloombergLP::bslmt::ConditionImpl<BloombergLP::bslmt::Platform::PosixThreads>::ConditionImpl(BloombergLP::bsls::SystemClockType::Enum) (rsp + 0x468, 0);
    0x0040b7b0 mov dword [rsp + 0x4a0], ebx                      |     *((rsp + 0x4a0)) = ebx;
    0x0040b7b7 xorpd xmm0, xmm0                                  |     __asm ("xorpd xmm0, xmm0");
    0x0040b7bb movupd xmmword [rsp + 0x4a4], xmm0                |     __asm ("movupd xmmword [rsp + 0x4a4], xmm0");
    0x0040b7c4 cmp dword [rip + 0x50bddd], 0                     |     
                                                                 |     if (*(obj.SKIPLIST_TEST_CASE_DRQS_144652915::numThreads) <= 0) {
    0x0040b7cb jle 0x40c822                                      |         goto label_47;
                                                                 |     }
    0x0040b7d1 lea r15, [rsp + 0x2c8]                            |     r15 = rsp + 0x2c8;
    0x0040b7d9 xor r13d, r13d                                    |     r13d = 0;
    0x0040b7dc lea rbp, [rsp + 8]                                |     rbp = rsp + 8;
    0x0040b7e1 lea r14, [rsp + 0x78]                             |     r14 = rsp + 0x78;
    0x0040b7e6 jmp 0x40b802                                      |     
                                                                 |     while (*((rsp + 0x40)) == 0x17) {
                                                                 | label_4:
    0x0040b7f0 inc r13d                                          |         r13d++;
    0x0040b7f3 mov eax, dword [rip + 0x50bdaf]                   |         eax = SKIPLIST_TEST_CASE_DRQS_144652915::numThreads;
    0x0040b7f9 cmp r13d, eax                                     |         
                                                                 |         if (r13d >= eax) {
    0x0040b7fc jge 0x40c7f0                                      |             goto label_48;
                                                                 |         }
    0x0040b802 mov rbx, rbp                                      |         rbx = rbp;
    0x0040b805 mov rdi, rbp                                      |         rdi = rbp;
    0x0040b808 lea rbp, [rsp + 0xc0]                             |         rbp = rsp + 0xc0;
    0x0040b810 mov rsi, rbp                                      |         
    0x0040b813 call 0x64fd40                                     |         BloombergLP::bslmt::ThreadAttributes::ThreadAttributes(BloombergLP::bslma::Allocator*) (rdi, rbp);
    0x0040b818 mov qword [rsp + 0x78], rbp                       |         *((rsp + 0x78)) = rbp;
    0x0040b81d mov qword [rsp + 0x348], 0x916cb8                 |         *((rsp + 0x348)) = 0x916cb8;
    0x0040b829 mov rdi, r15                                      |         
    0x0040b82c mov esi, 0x10                                     |         
    0x0040b831 mov rdx, r14                                      |         
    0x0040b834 call 0x5e9410                                     |         bsl::basic_stringbuf<char,std::_1::char_traits<char>,bsl::allocator<char>>::basic_stringbuf(unsignedint,bsl::allocator<char>const&) (r15, 0x10, r14);
    0x0040b839 mov qword [rsp + 0x2c0], 0x67e990                 |         *((rsp + sym.imp.std::__1::basic_ostream_char__std::__1::char_traits_char___::basic_ostream__)) = 0x67e990;
    0x0040b845 mov qword [rsp + 0x348], 0x67e9b8                 |         *((rsp + sym.imp.virtual_thunk_to_std::__1::basic_ostream_char__std::__1::char_traits_char___::basic_ostream__)) = 0x67e9b8;
    0x0040b851 lea rdi, [rsp + 0x348]                            |         rdi = rsp + 0x348;
    0x0040b859 mov rsi, r15                                      |         rsi = r15;
    0x0040b85c call 0x404cd0                                     |         std::_1::ios_base::init(void*) ();
    0x0040b861 mov qword [rsp + 0x3d0], 0                        |         *((rsp + 0x3d0)) = 0;
    0x0040b86d mov dword [rsp + 0x3d8], 0xffffffff               |         *((rsp + 0x3d8)) = 0xffffffff;
    0x0040b878 mov qword [rsp + 0x2c0], 0x67e920                 |         *((rsp + sym.bsl::basic_ostringstream_char__std::__1::char_traits_char___bsl::allocator_char___::basic_ostringstream__)) = 0x67e920;
    0x0040b884 mov qword [rsp + 0x348], 0x67e948                 |         *((rsp + method.virtual_thunk_to_bsl::basic_ostringstream_char__std::__1::char_traits_char___bsl::allocator_char___.basic_ostringstream__)) = 0x67e948;
    0x0040b890 mov esi, 0x67b2bb                                 |         
    0x0040b895 mov edx, 7                                        |         
    0x0040b89a lea rdi, [rsp + 0x2c0]                            |         
    0x0040b8a2 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rsp + 0x2c0, "Thread ", 7);
    0x0040b8a7 mov rdi, rax                                      |         rdi = rax;
    0x0040b8aa mov esi, r13d                                     |         esi = r13d;
    0x0040b8ad call 0x405010                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040b8b2 mov rdi, r14                                      |         
    0x0040b8b5 mov rsi, r15                                      |         
    0x0040b8b8 call 0x5e9500                                     |         bsl::basic_stringbuf<char,std::_1::char_traits<char>,bsl::allocator<char>>::str()const (r14, r15);
    0x0040b8bd cmp qword [rsp + 0x98], 0x17                      |         
    0x0040b8c6 mov rsi, r14                                      |         rsi = r14;
                                                                 |         if (*((rsp + 0x98)) != 0x17) {
    0x0040b8c9 je 0x40b8d0                                       |             
    0x0040b8cb mov rsi, qword [rsp + 0x78]                       |             
                                                                 |         }
    0x0040b8d0 mov rdx, qword [rsp + 0x90]                       |         
    0x0040b8d8 mov rbp, qword [rsp + 0x38]                       |         rbp = *((rsp + 0x38));
    0x0040b8dd mov qword [rsp + 0x38], 0                         |         *((rsp + 0x38)) = 0;
    0x0040b8e6 mov ecx, 0x67bf9a                                 |         
    0x0040b8eb lea rdi, [rsp + 0x20]                             |         
    0x0040b8f0 call 0x653850                                     |         bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rsp + 0x20, *((rsp + 0x78)), *((rsp + 0x90)), "string<>::operator=(basic_string_view&): string too long");
    0x0040b8f5 cmp qword [rsp + 0x98], 0x17                      |         
                                                                 |         if (*((rsp + 0x98)) != 0x17) {
    0x0040b8fe je 0x40b913                                       |             
    0x0040b900 mov rsi, qword [rsp + 0x78]                       |             rsi = *((rsp + 0x78));
    0x0040b905 mov rdi, qword [rsp + 0xa0]                       |             rdi = *((rsp + 0xa0));
    0x0040b90d mov rax, qword [rdi]                              |             rax = *(rdi);
    0x0040b910 call qword [rax + 0x18]                           |             uint64_t (*rax + 0x18)() ();
                                                                 |         }
    0x0040b913 mov qword [rsp + 0x78], 0x4059e0                  |         *((rsp + 0x78)) = method.SKIPLIST_TEST_CASE_DRQS_144652915.addNodes_BloombergLP::bslmt::Barrier_;
    0x0040b91c lea rax, [rsp + 0x440]                            |         rax = rsp + 0x440;
    0x0040b924 mov qword [rsp + 0x80], rax                       |         *((rsp + 0x80)) = rax;
    0x0040b92c mov rax, qword [rip + 0x50f215]                   |         rax = BloombergLP::bslma::Default::s_globalAllocator;
    0x0040b933 test rax, rax                                     |         
    0x0040b936 mov rbp, rbx                                      |         
                                                                 |         if (rax == 0) {
    0x0040b939 jne 0x40b940                                      |             
    0x0040b93b call 0x64e7d0                                     |             rax = BloombergLP::bslma::NewDeleteAllocator::singleton() ();
                                                                 |         }
    0x0040b940 lea rdi, [rsp + 0x510]                            |         
    0x0040b948 mov rsi, rbp                                      |         
    0x0040b94b mov rdx, r14                                      |         
    0x0040b94e mov rcx, rax                                      |         
    0x0040b951 call 0x5e9610                                     |         eax = intBloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil,void(*)(BloombergLP::bslmt::Barrier*),BloombergLP::bdlf::Bind_BoundTuple1<BloombergLP::bslmt::Barrier*>>>(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil,void(*)(BloombergLP::bslmt::Barrier*),BloombergLP::bdlf::Bind_BoundTuple1<BloombergLP::bslmt::Barrier*>>const&,BloombergLP::bslma::Allocator*) (rsp + 0x510, rbp, r14, rax);
    0x0040b956 test eax, eax                                     |         
                                                                 |         if (eax != 0) {
    0x0040b958 je 0x40b981                                       |             
    0x0040b95a call 0x64fbf0                                     |             rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040b95f mov r12, rax                                      |             r12 = rax;
    0x0040b962 mov rdi, rax                                      |             
    0x0040b965 call 0x64f8a0                                     |             BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040b96a mov edi, 0x67b2c3                                 |             edi = "0 == rc";
    0x0040b96f mov esi, 0x1277                                   |             esi = 0x1277;
    0x0040b974 call 0x405800                                     |             (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040b979 mov rdi, r12                                      |             
    0x0040b97c call 0x64f9f0                                     |             BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r12);
                                                                 |         }
    0x0040b981 lea rdi, [rsp + 0x560]                            |         
    0x0040b989 lea rsi, [rsp + 0x510]                            |         
    0x0040b991 call 0x669310                                     |         bsl::vector<unsigned long,bsl::allocator<unsigned long>>::push_back(unsigned longconst&) (rsp + 0x560, rsp + 0x510);
    0x0040b996 mov esi, 0x67e960                                 |         esi = 0x67e960;
    0x0040b99b lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040b9a3 call 0x4052b0                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::~basic_ostream() ();
    0x0040b9a8 mov qword [rsp + 0x2c8], 0x67eab0                 |         *((rsp + method.bsl::basic_stringbuf_char__std::__1::char_traits_char___bsl::allocator_char___.virtual_0)) = 0x67eab0;
    0x0040b9b4 cmp qword [rsp + 0x328], 0x17                     |         
                                                                 |         if (*((rsp + 0x328)) != 0x17) {
    0x0040b9bd je 0x40b9d5                                       |             
    0x0040b9bf mov rsi, qword [rsp + 0x308]                      |             rsi = *((rsp + 0x308));
    0x0040b9c7 mov rdi, qword [rsp + 0x330]                      |             rdi = *((rsp + 0x330));
    0x0040b9cf mov rax, qword [rdi]                              |             rax = *(rdi);
    0x0040b9d2 call qword [rax + 0x18]                           |             uint64_t (*rax + 0x18)() ();
                                                                 |         }
    0x0040b9d5 mov qword [rsp + 0x320], 0xffffffffffffffff       |         *((rsp + 0x320)) = 0xffffffffffffffff;
    0x0040b9e1 mov rdi, r15                                      |         rdi = r15;
    0x0040b9e4 call 0x404ba0                                     |         std::_1::basic_streambuf<char,std::_1::char_traits<char>>::~basic_streambuf() ();
    0x0040b9e9 lea rdi, [rsp + 0x348]                            |         rdi = rsp + 0x348;
    0x0040b9f1 call 0x404aa0                                     |         std::_1::basic_ios<char,std::_1::char_traits<char>>::~basic_ios() ();
    0x0040b9f6 cmp qword [rsp + 0x40], 0x17                      |         
    0x0040b9fc je 0x40b7f0                                       |         
                                                                 |     }
    0x0040ba02 mov rsi, qword [rsp + 0x20]                       |     rsi = *((rsp + 0x20));
    0x0040ba07 mov rdi, qword [rsp + 0x48]                       |     rdi = *((rsp + 0x48));
    0x0040ba0c mov rax, qword [rdi]                              |     rax = *(rdi);
    0x0040ba0f call qword [rax + 0x18]                           |     uint64_t (*rax + 0x18)() ();
    0x0040ba12 jmp 0x40b7f0                                      |     goto label_4;
    0x0040ba17 cmp dword [rip + 0x50e9ba], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040ba1e je 0x40ba34                                       |         
    0x0040ba20 mov edi, 0x91a328                                 |         
    0x0040ba25 mov esi, 0x67b20e                                 |         
    0x0040ba2a mov edx, 0x5a                                     |         
    0x0040ba2f call 0x5bce00                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "REPRODUCE BUG / VERIFY FIX OF DRQS 145745492\n============================================\n", 0x5a);
                                                                 |     }
    0x0040ba34 lea rdi, [rsp + 0xc0]                             |     
    0x0040ba3c call 0x649c40                                     |     BloombergLP::bdlcc::SkipList_RandomLevelGenerator::SkipList_RandomLevelGenerator() (rsp + 0xc0);
    0x0040ba41 mov dword [rsp + 0xc8], 0                         |     *((rsp + 0xc8)) = 0;
    0x0040ba4c lea rbx, [rsp + 0xe0]                             |     rbx = rsp + 0xe0;
    0x0040ba54 mov rdi, rbx                                      |     rdi = rbx;
    0x0040ba57 xor esi, esi                                      |     esi = 0;
    0x0040ba59 call 0x404cc0                                     |     pthread_mutex_init ();
    0x0040ba5e mov dword [rsp + 0x108], 0                        |     *((rsp + 0x108)) = 0;
    0x0040ba69 mov qword [rsp + 0x110], 0                        |     *((rsp + 0x110)) = 0;
    0x0040ba75 mov rdx, qword [rip + 0x50f0c4]                   |     rdx = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040ba7c test rdx, rdx                                     |     
                                                                 |     if (rdx == 0) {
    0x0040ba7f jne 0x40ba89                                      |         
    0x0040ba81 call 0x64e700                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x0040ba86 mov rdx, rax                                      |         
                                                                 |     }
    0x0040ba89 mov qword [rsp + 0x118], rdx                      |     *((rsp + 0x118)) = rdx;
    0x0040ba91 movaps xmm0, xmmword [rip + 0x26e798]             |     xmm0 = " 0@P`p";
    0x0040ba98 movaps xmmword [rsp + 0x2c0], xmm0                |     *((rsp + 0x2c0)) = xmm0;
    0x0040baa0 movaps xmm0, xmmword [rip + 0x26e799]             |     xmm0 = *(0x0067a240);
    0x0040baa7 movaps xmmword [rsp + 0x2d0], xmm0                |     *((rsp + 0x2d0)) = xmm0;
    0x0040baaf movaps xmm0, xmmword [rip + 0x26e79a]             |     xmm0 = *(0x0067a250);
    0x0040bab6 movaps xmmword [rsp + 0x2e0], xmm0                |     *((rsp + 0x2e0)) = xmm0;
    0x0040babe movaps xmm0, xmmword [rip + 0x26e79b]             |     xmm0 = *(0x0067a260);
    0x0040bac5 movaps xmmword [rsp + 0x2f0], xmm0                |     *((rsp + 0x2f0)) = xmm0;
    0x0040bacd movaps xmm0, xmmword [rip + 0x26e79c]             |     xmm0 = *(0x0067a270);
    0x0040bad4 movaps xmmword [rsp + 0x300], xmm0                |     *((rsp + 0x300)) = xmm0;
    0x0040badc movaps xmm0, xmmword [rip + 0x26e79d]             |     xmm0 = *(0x0067a280);
    0x0040bae3 movaps xmmword [rsp + 0x310], xmm0                |     *((rsp + 0x310)) = xmm0;
    0x0040baeb movaps xmm0, xmmword [rip + 0x26e79e]             |     xmm0 = *(0x0067a290);
    0x0040baf2 movaps xmmword [rsp + 0x320], xmm0                |     *((rsp + 0x320)) = xmm0;
    0x0040bafa movapd xmm0, xmmword [rip + 0x26e79e]             |     __asm ("movapd xmm0, xmmword [0x0067a2a0]");
    0x0040bb02 movapd xmmword [rsp + 0x330], xmm0                |     __asm ("movapd xmmword [rsp + 0x330], xmm0");
    0x0040bb0b lea rdi, [rsp + 0x2c0]                            |     
    0x0040bb13 mov esi, 0x20                                     |     
    0x0040bb18 call 0x64a120                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::createPoolManager(int*,int,BloombergLP::bslma::Allocator*) (rsp + 0x2c0, 0x20, rax);
    0x0040bb1d mov qword [rsp + 0x110], rax                      |     *((rsp + 0x110)) = rax;
    0x0040bb25 mov rdi, rax                                      |     
    0x0040bb28 mov esi, 0x1f                                     |     
    0x0040bb2d call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (rax, 0x1f);
    0x0040bb32 mov qword [rsp + 0xd0], rax                       |     *((rsp + 0xd0)) = rax;
    0x0040bb3a mov rdi, qword [rsp + 0x110]                      |     
    0x0040bb42 mov esi, 0x1f                                     |     
    0x0040bb47 call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x110)), 0x1f);
    0x0040bb4c mov qword [rsp + 0xd8], rax                       |     *((rsp + 0xd8)) = rax;
    0x0040bb54 xor ecx, ecx                                      |     ecx = 0;
    0x0040bb56 nop word cs:[rax + rax]                           |     
                                                                 |     do {
    0x0040bb60 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x0040bb68 mov qword [rax + rcx + 0x18], 0                   |         *((rax + rcx + 0x18)) = 0;
    0x0040bb71 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x0040bb79 mov rdx, qword [rsp + 0xd8]                       |         rdx = *((rsp + 0xd8));
    0x0040bb81 mov qword [rax + rcx + 0x10], rdx                 |         *((rax + rcx + 0x10)) = rdx;
    0x0040bb86 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x0040bb8e mov rdx, qword [rsp + 0xd8]                       |         rdx = *((rsp + 0xd8));
    0x0040bb96 mov qword [rdx + rcx + 0x18], rax                 |         *((rdx + rcx + 0x18)) = rax;
    0x0040bb9b mov rax, qword [rsp + 0xd8]                       |         rax = *((rsp + 0xd8));
    0x0040bba3 mov qword [rax + rcx + 0x10], 0                   |         *((rax + rcx + 0x10)) = 0;
    0x0040bbac add rcx, 0x10                                     |         rcx += 0x10;
    0x0040bbb0 cmp rcx, 0x200                                    |         
    0x0040bbb7 jne 0x40bb60                                      |         
                                                                 |     } while (rcx != 0x200);
    0x0040bbb9 mov rax, qword [rsp + 0xd0]                       |     rax = *((rsp + 0xd0));
    0x0040bbc1 mov rbp, qword [rax + 0x10]                       |     rbp = *((rax + 0x10));
    0x0040bbc5 cmp rbp, qword [rsp + 0xd8]                       |     
                                                                 |     if (rbp == *((rsp + 0xd8))) {
    0x0040bbcd je 0x40bbe6                                       |         goto label_49;
                                                                 |     }
    0x0040bbcf nop                                               |     
                                                                 |     do {
    0x0040bbd0 mov rdi, rbp                                      |         
    0x0040bbd3 call 0x649ba0                                     |         BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (rbp);
    0x0040bbd8 mov rbp, qword [rbp + 0x10]                       |         rbp = *((rbp + 0x10));
    0x0040bbdc cmp rbp, qword [rsp + 0xd8]                       |         
    0x0040bbe4 jne 0x40bbd0                                      |         
                                                                 |     } while (rbp != *((rsp + 0xd8)));
                                                                 | label_49:
    0x0040bbe6 mov rsi, qword [rsp + 0x110]                      |     
    0x0040bbee mov rdi, qword [rsp + 0x118]                      |     
    0x0040bbf6 call 0x64a360                                     |     BloombergLP::bdlcc::SkipList_PoolUtil::deletePoolManager(BloombergLP::bslma::Allocator*,BloombergLP::bdlcc::SkipList_PoolManager*) (*((rsp + 0x118)), *((rsp + 0x110)));
    0x0040bbfb jmp 0x40e43b                                      |     goto label_50;
    0x0040bc00 cmp dword [rip + 0x50e7d1], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040bc07 je 0x40bc3a                                       |         
    0x0040bc09 mov edi, 0x91a328                                 |         
    0x0040bc0e mov esi, 0x67b161                                 |         
    0x0040bc13 mov edx, 0x44                                     |         
    0x0040bc18 call 0x5bce00                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "THOROUGH SINGLE-THREADED ADD TEST\n=================================\n", 0x44);
    0x0040bc1d cmp dword [rip + 0x50e7b4], 0                     |         
                                                                 |         if (*(obj.verbose) == 0) {
    0x0040bc24 je 0x40bc3a                                       |             goto label_51;
                                                                 |         }
    0x0040bc26 mov edi, 0x91a328                                 |         
    0x0040bc2b mov esi, 0x67b1a6                                 |         
    0x0040bc30 mov edx, 0x39                                     |         
    0x0040bc35 call 0x5bce00                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "\ntestIndependentAddFunctions\n---------------------------\n", 0x39);
                                                                 |     }
                                                                 | label_51:
    0x0040bc3a call 0x43fa70                                     |     TestDriver<signedchar,signedchar>::testIndependentAddFunctions() ();
    0x0040bc3f call 0x440400                                     |     TestDriver<unsigned long,unsigned long>::testIndependentAddFunctions() ();
    0x0040bc44 call 0x440d90                                     |     TestDriver<BloombergLP::bsltf::TemplateTestFacility_StubClass*,BloombergLP::bsltf::TemplateTestFacility_StubClass*>::testIndependentAddFunctions() ();
    0x0040bc49 call 0x441720                                     |     TestDriver<void(*)(),void(*)()>::testIndependentAddFunctions() ();
    0x0040bc4e call 0x4420b0                                     |     TestDriver<BloombergLP::bsltf::EnumeratedTestType::Enum,BloombergLP::bsltf::EnumeratedTestType::Enum>::testIndependentAddFunctions() ();
    0x0040bc53 call 0x442a40                                     |     TestDriver<BloombergLP::bsltf::UnionTestType,BloombergLP::bsltf::UnionTestType>::testIndependentAddFunctions() ();
    0x0040bc58 call 0x4433e0                                     |     TestDriver<BloombergLP::bsltf::SimpleTestType,BloombergLP::bsltf::SimpleTestType>::testIndependentAddFunctions() ();
    0x0040bc5d call 0x443cf0                                     |     TestDriver<BloombergLP::bsltf::AllocTestType,BloombergLP::bsltf::AllocTestType>::testIndependentAddFunctions() ();
    0x0040bc62 call 0x444600                                     |     TestDriver<BloombergLP::bsltf::BitwiseCopyableTestType,BloombergLP::bsltf::BitwiseCopyableTestType>::testIndependentAddFunctions() ();
    0x0040bc67 call 0x444f10                                     |     TestDriver<BloombergLP::bsltf::BitwiseMoveableTestType,BloombergLP::bsltf::BitwiseMoveableTestType>::testIndependentAddFunctions() ();
    0x0040bc6c call 0x445820                                     |     TestDriver<BloombergLP::bsltf::AllocBitwiseMoveableTestType,BloombergLP::bsltf::AllocBitwiseMoveableTestType>::testIndependentAddFunctions() ();
    0x0040bc71 call 0x446130                                     |     TestDriver<BloombergLP::bsltf::MovableTestType,BloombergLP::bsltf::MovableTestType>::testIndependentAddFunctions() ();
    0x0040bc76 call 0x446a40                                     |     TestDriver<BloombergLP::bsltf::MovableAllocTestType,BloombergLP::bsltf::MovableAllocTestType>::testIndependentAddFunctions() ();
    0x0040bc7b call 0x447350                                     |     TestDriver<BloombergLP::bsltf::NonTypicalOverloadsTestType,BloombergLP::bsltf::NonTypicalOverloadsTestType>::testIndependentAddFunctions() ();
    0x0040bc80 call 0x447c60                                     |     TestDriver<int,int(BloombergLP::bsltf::TemplateTestFacility_StubClass::*)()>::testIndependentAddFunctions() ();
    0x0040bc85 call 0x448600                                     |     TestDriver<int,BloombergLP::bsltf::AllocTestType>::testIndependentAddFunctions() ();
    0x0040bc8a call 0x448f20                                     |     TestDriver<int,BloombergLP::bsltf::MovableAllocTestType>::testIndependentAddFunctions() ();
    0x0040bc8f call 0x449840                                     |     TestDriver<int,BloombergLP::bsltf::SimpleTestType>::testIndependentAddFunctions() ();
    0x0040bc94 cmp dword [rip + 0x50e73d], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040bc9b je 0x40bcb1                                       |         
    0x0040bc9d mov edi, 0x91a328                                 |         
    0x0040bca2 mov esi, 0x67b1e0                                 |         
    0x0040bca7 mov edx, 0x2d                                     |         
    0x0040bcac call 0x5bce00                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "\ntestMultiAddFunctions\n---------------------\n", 0x2d);
                                                                 |     }
    0x0040bcb1 call 0x44a160                                     |     TestDriver<signedchar,signedchar>::testMultiAddFunctions() ();
    0x0040bcb6 call 0x44ab20                                     |     TestDriver<unsigned long,unsigned long>::testMultiAddFunctions() ();
    0x0040bcbb call 0x44b4e0                                     |     TestDriver<BloombergLP::bsltf::TemplateTestFacility_StubClass*,BloombergLP::bsltf::TemplateTestFacility_StubClass*>::testMultiAddFunctions() ();
    0x0040bcc0 call 0x44bea0                                     |     TestDriver<void(*)(),void(*)()>::testMultiAddFunctions() ();
    0x0040bcc5 call 0x44c860                                     |     TestDriver<BloombergLP::bsltf::EnumeratedTestType::Enum,BloombergLP::bsltf::EnumeratedTestType::Enum>::testMultiAddFunctions() ();
    0x0040bcca call 0x44d220                                     |     TestDriver<BloombergLP::bsltf::UnionTestType,BloombergLP::bsltf::UnionTestType>::testMultiAddFunctions() ();
    0x0040bccf call 0x44dbf0                                     |     TestDriver<BloombergLP::bsltf::SimpleTestType,BloombergLP::bsltf::SimpleTestType>::testMultiAddFunctions() ();
    0x0040bcd4 call 0x44e530                                     |     TestDriver<BloombergLP::bsltf::AllocTestType,BloombergLP::bsltf::AllocTestType>::testMultiAddFunctions() ();
    0x0040bcd9 call 0x44ee70                                     |     TestDriver<BloombergLP::bsltf::BitwiseCopyableTestType,BloombergLP::bsltf::BitwiseCopyableTestType>::testMultiAddFunctions() ();
    0x0040bcde call 0x44f7b0                                     |     TestDriver<BloombergLP::bsltf::BitwiseMoveableTestType,BloombergLP::bsltf::BitwiseMoveableTestType>::testMultiAddFunctions() ();
    0x0040bce3 call 0x4500f0                                     |     TestDriver<BloombergLP::bsltf::AllocBitwiseMoveableTestType,BloombergLP::bsltf::AllocBitwiseMoveableTestType>::testMultiAddFunctions() ();
    0x0040bce8 call 0x450a30                                     |     TestDriver<BloombergLP::bsltf::MovableTestType,BloombergLP::bsltf::MovableTestType>::testMultiAddFunctions() ();
    0x0040bced call 0x451370                                     |     TestDriver<BloombergLP::bsltf::MovableAllocTestType,BloombergLP::bsltf::MovableAllocTestType>::testMultiAddFunctions() ();
    0x0040bcf2 call 0x451cb0                                     |     TestDriver<BloombergLP::bsltf::NonTypicalOverloadsTestType,BloombergLP::bsltf::NonTypicalOverloadsTestType>::testMultiAddFunctions() ();
    0x0040bcf7 call 0x4525f0                                     |     TestDriver<int,int(BloombergLP::bsltf::TemplateTestFacility_StubClass::*)()>::testMultiAddFunctions() ();
    0x0040bcfc call 0x452fc0                                     |     TestDriver<int,BloombergLP::bsltf::AllocTestType>::testMultiAddFunctions() ();
    0x0040bd01 call 0x453910                                     |     TestDriver<int,BloombergLP::bsltf::MovableAllocTestType>::testMultiAddFunctions() ();
    0x0040bd06 call 0x454260                                     |     TestDriver<int,BloombergLP::bsltf::SimpleTestType>::testMultiAddFunctions() ();
    0x0040bd0b jmp 0x411d4d                                      |     void (*0x411d4d)() ();
                                                                 | label_27:
    0x0040bd10 mov rdi, r14                                      |     rdi = r14;
    0x0040bd13 call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x0040bd18 call 0x64a9f0                                     |     rax = BloombergLP::bdlt::DatetimeImpUtil::epoch_1970_01_01() ();
    0x0040bd1d mov rbx, rax                                      |     rbx = rax;
    0x0040bd20 mov rax, qword [rip + 0x50dd39]                   |     rax = BloombergLP::bdlt::CurrentTime::s_currenttimeCallback_p;
    0x0040bd27 call rax                                          |     rax = void (*rax)() ();
    0x0040bd29 mov r14, rax                                      |     r14 = rax;
    0x0040bd2c mov ebp, edx                                      |     
    0x0040bd2e mov rbx, qword [rbx]                              |     rbx = *(rbx);
    0x0040bd31 test rbx, rbx                                     |     
                                                                 |     if (rbx >= 0) {
    0x0040bd34 jns 0x411fa0                                      |         goto label_52;
                                                                 |     }
                                                                 | label_15:
    0x0040bd3a and r13, rbx                                      |     r13 &= rbx;
    0x0040bd3d movabs rax, 0xffffffebe228a000                    |     rax = 0xffffffebe228a000;
    0x0040bd47 add r13, rax                                      |     r13 += rax;
    0x0040bd4a mov rax, rbx                                      |     rax = rbx;
    0x0040bd4d shr rax, 0x25                                     |     rax >>= 0x25;
    0x0040bd51 and eax, 0x3ffffff                                |     eax &= 0x3ffffff;
    0x0040bd56 movabs rdi, 0x141dd76000                          |     rdi = 0x141dd76000;
    0x0040bd60 imul rax, rdi                                     |     rax *= rdi;
    0x0040bd64 and r15, rbx                                      |     r15 &= rbx;
    0x0040bd67 xor edx, edx                                      |     edx = 0;
    0x0040bd69 mov ecx, 0xd693a400                               |     ecx = 0xd693a400;
    0x0040bd6e cmp r13, rcx                                      |     
                                                                 |     if (r13 >= rcx) {
    0x0040bd71 cmovae rdx, r15                                   |         rdx = r15;
                                                                 |     }
    0x0040bd75 add rdx, rax                                      |     rdx += rax;
    0x0040bd78 imul rax, r14, 0xf4240                            |     rax = r14 * 0xf4240;
    0x0040bd7f movsxd rcx, ebp                                   |     rcx = (int64_t) ebp;
    0x0040bd82 imul rcx, rcx, 0x10624dd3                         |     rcx *= 0x10624dd3;
    0x0040bd89 mov rsi, rcx                                      |     rsi = rcx;
    0x0040bd8c shr rsi, 0x3f                                     |     rsi >>= 0x3f;
    0x0040bd90 sar rcx, 0x26                                     |     rcx >>= 0x26;
    0x0040bd94 add ecx, esi                                      |     ecx += esi;
    0x0040bd96 movsxd rcx, ecx                                   |     rcx = (int64_t) ecx;
    0x0040bd99 add rcx, rax                                      |     rcx += rax;
    0x0040bd9c add rcx, rdx                                      |     rcx += rdx;
    0x0040bd9f mov rax, rcx                                      |     rax = rcx;
    0x0040bda2 movabs rdx, 0x32e73fb956a1b897                    |     rdx = 0x32e73fb956a1b897;
    0x0040bdac mul rdx                                           |     rdx:rax = rax * rdx;
    0x0040bdaf shr rdx, 0x22                                     |     rdx >>= 0x22;
    0x0040bdb3 mov rax, rdx                                      |     rax = rdx;
    0x0040bdb6 shl rax, 0x25                                     |     rax <<= 0x25;
    0x0040bdba imul rdx, rdi                                     |     rdx *= rdi;
    0x0040bdbe sub rcx, rdx                                      |     rcx -= rdx;
    0x0040bdc1 or rcx, rax                                       |     rcx |= rax;
    0x0040bdc4 movabs rax, 0x8000000000000000                    |     rax = 0x8000000000000000;
    0x0040bdce or rcx, rax                                       |     rcx |= rax;
    0x0040bdd1 mov qword [rsp + 0x78], rcx                       |     *((rsp + 0x78)) = rcx;
    0x0040bdd6 cmp dword [rip + 0x50e5ff], 0                     |     
                                                                 |     if (*(obj.veryVerbose) != 0) {
    0x0040bddd je 0x40be5d                                       |         
    0x0040bddf mov edi, 0x91a328                                 |         
    0x0040bde4 mov esi, 0x67bd8e                                 |         
    0x0040bde9 mov edx, 0xc                                      |         
    0x0040bdee call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "Finish:     ", 0xc);
    0x0040bdf3 lea rsi, [rsp + 0x78]                             |         
    0x0040bdf8 mov rdi, rax                                      |         
    0x0040bdfb call 0x64a9c0                                     |         rax = BloombergLP::bdlt::operator << (std::_1::basic_ostream<char,std::_1::char_traits<char>>&,BloombergLP::bdlt::Datetimeconst&) (rax, rsp + 0x78);
    0x0040be00 mov rbx, rax                                      |         rbx = rax;
    0x0040be03 mov rax, qword [rax]                              |         rax = *(rax);
    0x0040be06 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040be0a add rsi, rbx                                      |         rsi += rbx;
    0x0040be0d lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040be15 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040be1a lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040be22 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040be27 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040be2c mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040be2f mov rdi, rax                                      |         rdi = rax;
    0x0040be32 mov esi, 0xa                                      |         esi = 0xa;
    0x0040be37 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040be3a mov ebp, eax                                      |         
    0x0040be3c lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040be44 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040be49 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x0040be4d mov rdi, rbx                                      |         rdi = rbx;
    0x0040be50 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040be55 mov rdi, rbx                                      |         rdi = rbx;
    0x0040be58 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x0040be5d mov rax, qword [rsp + 0x440]                      |     rax = *((rsp + 0x440));
    0x0040be65 mov rcx, qword [rsp + 0x448]                      |     rcx = *((rsp + 0x448));
    0x0040be6d sub rcx, rax                                      |     rcx -= rax;
    0x0040be70 cmp rcx, 0xc                                      |     
                                                                 |     if (rcx != 0xc) {
    0x0040be74 je 0x40bea5                                       |         
    0x0040be76 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040be7b mov rbx, rax                                      |         rbx = rax;
    0x0040be7e mov rdi, rax                                      |         
    0x0040be81 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040be86 mov edi, 0x67bd9b                                 |         edi = "3 == values.size()";
    0x0040be8b mov esi, 0x167a                                   |         esi = 0x167a;
    0x0040be90 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040be95 mov rdi, rbx                                      |         
    0x0040be98 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040be9d mov rax, qword [rsp + 0x440]                      |         rax = *((rsp + 0x440));
                                                                 |     }
    0x0040bea5 cmp dword [rax], 0                                |     
                                                                 |     if (*(rax) != 0) {
    0x0040bea8 je 0x40bed9                                       |         
    0x0040beaa call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040beaf mov rbx, rax                                      |         rbx = rax;
    0x0040beb2 mov rdi, rax                                      |         
    0x0040beb5 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040beba mov edi, 0x67bdae                                 |         edi = "0 == values[0]";
    0x0040bebf mov esi, 0x167b                                   |         esi = 0x167b;
    0x0040bec4 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040bec9 mov rdi, rbx                                      |         
    0x0040becc call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040bed1 mov rax, qword [rsp + 0x440]                      |         rax = *((rsp + 0x440));
                                                                 |     }
    0x0040bed9 cmp dword [rax + 4], 1                            |     
                                                                 |     if (*((rax + 4)) != 1) {
    0x0040bedd je 0x40bf0e                                       |         
    0x0040bedf call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040bee4 mov rbx, rax                                      |         rbx = rax;
    0x0040bee7 mov rdi, rax                                      |         
    0x0040beea call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040beef mov edi, 0x67bdbd                                 |         edi = "1 == values[1]";
    0x0040bef4 mov esi, 0x167c                                   |         esi = 0x167c;
    0x0040bef9 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040befe mov rdi, rbx                                      |         
    0x0040bf01 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040bf06 mov rax, qword [rsp + 0x440]                      |         rax = *((rsp + 0x440));
                                                                 |     }
    0x0040bf0e cmp dword [rax + 8], 2                            |     
                                                                 |     if (*((rax + 8)) != 2) {
    0x0040bf12 je 0x40bf3b                                       |         
    0x0040bf14 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040bf19 mov rbx, rax                                      |         rbx = rax;
    0x0040bf1c mov rdi, rax                                      |         
    0x0040bf1f call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040bf24 mov edi, 0x67bdcc                                 |         edi = "2 == values[2]";
    0x0040bf29 mov esi, 0x167d                                   |         esi = 0x167d;
    0x0040bf2e call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040bf33 mov rdi, rbx                                      |         
    0x0040bf36 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040bf3b lea rdi, [rsp + 0xc0]                             |     
    0x0040bf43 lea rsi, [rsp + 0x78]                             |     
    0x0040bf48 lea rdx, [rsp + 0x1f0]                            |     
    0x0040bf50 call 0x5b9c50                                     |     BloombergLP::bdlt::operator-(BloombergLP::bdlt::Datetimeconst&,BloombergLP::bdlt::Datetimeconst&) (rsp + 0xc0, rsp + 0x78, rsp + 0x1f0);
    0x0040bf55 mov rsi, qword [rsp + 0xc8]                       |     rsi = *((rsp + 0xc8));
    0x0040bf5d movabs rcx, 0x431bde82d7b634db                    |     rcx = 0x431bde82d7b634db;
    0x0040bf67 mov rax, rsi                                      |     rax = rsi;
    0x0040bf6a imul rcx                                          |     rdx:rax = rax * rcx;
    0x0040bf6d mov rcx, rdx                                      |     rcx = rdx;
    0x0040bf70 movsxd rbp, dword [rsp + 0xc0]                    |     rbp = *((rsp + 0xc0));
    0x0040bf78 movabs rbx, 0x20c49ba5e353f7cf                    |     rbx = 0x20c49ba5e353f7cf;
    0x0040bf82 mov rax, rsi                                      |     rax = rsi;
    0x0040bf85 imul rbx                                          |     rdx:rax = rax * rbx;
    0x0040bf88 mov rdi, rdx                                      |     rdi = rdx;
    0x0040bf8b imul rbp, rbp, 0x15180                            |     rbp *= 0x15180;
    0x0040bf92 mov rax, rdx                                      |     rax = rdx;
    0x0040bf95 shr rax, 0x3f                                     |     rax >>= 0x3f;
    0x0040bf99 sar rdi, 7                                        |     rdi >>= 7;
    0x0040bf9d add rdi, rax                                      |     rdi += rax;
    0x0040bfa0 mov rax, rdi                                      |     rax = rdi;
    0x0040bfa3 imul rbx                                          |     rdx:rax = rax * rbx;
    0x0040bfa6 mov rax, rcx                                      |     rax = rcx;
    0x0040bfa9 shr rax, 0x3f                                     |     rax >>= 0x3f;
    0x0040bfad sar rcx, 0x12                                     |     rcx >>= 0x12;
    0x0040bfb1 add rcx, rax                                      |     rcx += rax;
    0x0040bfb4 mov rax, rdx                                      |     rax = rdx;
    0x0040bfb7 shr rax, 0x3f                                     |     rax >>= 0x3f;
    0x0040bfbb shr rdx, 7                                        |     rdx >>= 7;
    0x0040bfbf add edx, eax                                      |     edx += eax;
    0x0040bfc1 imul eax, edx, 0x3e8                              |     eax = edx * 0x3e8;
    0x0040bfc7 imul edx, edi, 0x3e8                              |     edx = edi * 0x3e8;
    0x0040bfcd sub edi, eax                                      |     edi -= eax;
    0x0040bfcf imul edi, edi, 0xf4240                            |     edi *= 0xf4240;
    0x0040bfd5 sub esi, edx                                      |     esi -= edx;
    0x0040bfd7 imul eax, esi, 0x3e8                              |     eax = esi * 0x3e8;
    0x0040bfdd add eax, edi                                      |     eax += edi;
    0x0040bfdf add rcx, rbp                                      |     rcx += rbp;
                                                                 |     if (rcx <= 0) {
    0x0040bfe2 jle 0x40daf9                                      |         goto label_53;
                                                                 |     }
    0x0040bfe8 test eax, eax                                     |     
                                                                 |     if (eax >= 0) {
    0x0040bfea jns 0x40db0a                                      |         goto label_54;
                                                                 |     }
    0x0040bff0 dec rcx                                           |     rcx--;
    0x0040bff3 add eax, 0x3b9aca00                               |     eax += 0x3b9aca00;
    0x0040bff8 jmp 0x40db0a                                      |     goto label_54;
                                                                 | label_44:
    0x0040bffd xorpd xmm0, xmm0                                  |     __asm ("xorpd xmm0, xmm0");
    0x0040c001 movapd xmmword [rsp + 0x1f0], xmm0                |     __asm ("movapd xmmword [rsp + 0x1f0], xmm0");
    0x0040c00a mov dword [rsp + 0x78], 0xa                       |     *((rsp + 0x78)) = 0xa;
    0x0040c012 lea rdi, [rsp + 8]                                |     
    0x0040c017 lea rsi, [rsp + 0x1f0]                            |     
    0x0040c01f lea rdx, [rsp + 0x78]                             |     
    0x0040c024 call 0x455470                                     |     eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findLowerBound(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 8, rsp + 0x1f0, rsp + 0x78);
    0x0040c029 test eax, eax                                     |     
                                                                 |     if (eax == 0) {
    0x0040c02b jne 0x40c054                                      |         
    0x0040c02d call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040c032 mov rbx, rax                                      |         rbx = rax;
    0x0040c035 mov rdi, rax                                      |         
    0x0040c038 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040c03d mov edi, 0x67b824                                 |         edi = "mX.findLowerBound(&h, 10)";
    0x0040c042 mov esi, 0x140b                                   |         esi = 0x140b;
    0x0040c047 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040c04c mov rdi, rbx                                      |         
    0x0040c04f call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040c054 mov dword [rsp + 0x78], 0xa                       |     *((rsp + 0x78)) = 0xa;
    0x0040c05c lea rdi, [rsp + 8]                                |     
    0x0040c061 lea rsi, [rsp + 0x1f0]                            |     
    0x0040c069 lea rdx, [rsp + 0x78]                             |     
    0x0040c06e call 0x4552e0                                     |     eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findUpperBound(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 8, rsp + 0x1f0, rsp + 0x78);
    0x0040c073 test eax, eax                                     |     
                                                                 |     if (eax == 0) {
    0x0040c075 jne 0x40c09e                                      |         
    0x0040c077 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040c07c mov rbx, rax                                      |         rbx = rax;
    0x0040c07f mov rdi, rax                                      |         
    0x0040c082 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040c087 mov edi, 0x67b83e                                 |         edi = "mX.findUpperBound(&h, 10)";
    0x0040c08c mov esi, 0x140c                                   |         esi = 0x140c;
    0x0040c091 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040c096 mov rdi, rbx                                      |         
    0x0040c099 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040c09e mov dword [rsp + 0x78], 0xffffffff                |     *((rsp + 0x78)) = 0xffffffff;
    0x0040c0a6 lea rdi, [rsp + 8]                                |     
    0x0040c0ab lea rsi, [rsp + 0x1f0]                            |     
    0x0040c0b3 lea rdx, [rsp + 0x78]                             |     
    0x0040c0b8 call 0x455470                                     |     eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findLowerBound(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 8, rsp + 0x1f0, rsp + 0x78);
    0x0040c0bd test eax, eax                                     |     
                                                                 |     if (eax != 0) {
    0x0040c0bf je 0x40c0e8                                       |         
    0x0040c0c1 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040c0c6 mov rbx, rax                                      |         rbx = rax;
    0x0040c0c9 mov rdi, rax                                      |         
    0x0040c0cc call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040c0d1 mov edi, 0x67b858                                 |         edi = "!mX.findLowerBound(&h,-1)";
    0x0040c0d6 mov esi, 0x1410                                   |         esi = 0x1410;
    0x0040c0db call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040c0e0 mov rdi, rbx                                      |         
    0x0040c0e3 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040c0e8 mov rax, qword [rsp + 0x1f8]                      |     rax = *((rsp + 0x1f8));
    0x0040c0f0 cmp dword [rax + 0x38], 0                         |     
                                                                 |     if (*((rax + 0x38)) != 0) {
    0x0040c0f4 je 0x40c125                                       |         
    0x0040c0f6 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040c0fb mov rbx, rax                                      |         rbx = rax;
    0x0040c0fe mov rdi, rax                                      |         
    0x0040c101 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040c106 mov edi, 0x67b3f4                                 |         edi = "h.key() == 0";
    0x0040c10b mov esi, 0x1411                                   |         esi = 0x1411;
    0x0040c110 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040c115 mov rdi, rbx                                      |         
    0x0040c118 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040c11d mov rax, qword [rsp + 0x1f8]                      |         rax = *((rsp + 0x1f8));
                                                                 |     }
    0x0040c125 cmp qword [rax + 0x20], 1                         |     
                                                                 |     if (*((rax + 0x20)) != 1) {
    0x0040c12a jne 0x40e5e9                                      |         goto label_55;
                                                                 |     }
    0x0040c130 cmp qword [rax + 0x28], 0x17                      |     
                                                                 |     if (*((rax + 0x28)) == 0x17) {
    0x0040c135 je 0x40e5e0                                       |         goto label_56;
                                                                 |     }
    0x0040c13b mov rax, qword [rax + 8]                          |     rax = *((rax + 8));
    0x0040c13f jmp 0x40e5e4                                      |     goto label_57;
                                                                 | label_46:
    0x0040c144 lea rdi, [rsp + 8]                                |     
    0x0040c149 call 0x5e9b60                                     |     rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::popFrontImp() (rsp + 8);
    0x0040c14e mov rbp, rax                                      |     
    0x0040c151 cmp dword [rax + 0x38], 0                         |     
                                                                 |     if (*((rax + 0x38)) != 0) {
    0x0040c155 je 0x40c17e                                       |         
    0x0040c157 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040c15c mov rbx, rax                                      |         rbx = rax;
    0x0040c15f mov rdi, rax                                      |         
    0x0040c162 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040c167 mov edi, 0x67b3f4                                 |         edi = "h.key() == 0";
    0x0040c16c mov esi, 0x12cc                                   |         esi = 0x12cc;
    0x0040c171 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040c176 mov rdi, rbx                                      |         
    0x0040c179 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040c17e cmp qword [rbp + 0x20], 1                         |     
                                                                 |     if (*((rbp + 0x20)) != 1) {
    0x0040c183 jne 0x40e459                                      |         goto label_58;
                                                                 |     }
    0x0040c189 cmp qword [rbp + 0x28], 0x17                      |     
                                                                 |     if (*((rbp + 0x28)) == 0x17) {
    0x0040c18e je 0x40e44d                                       |         goto label_59;
                                                                 |     }
    0x0040c194 mov rax, qword [rbp + 8]                          |     rax = *((rbp + 8));
    0x0040c198 jmp 0x40e454                                      |     goto label_60;
                                                                 | label_45:
    0x0040c19d xorpd xmm0, xmm0                                  |     __asm ("xorpd xmm0, xmm0");
    0x0040c1a1 movapd xmmword [rsp + 0xc0], xmm0                 |     __asm ("movapd xmmword [rsp + 0xc0], xmm0");
    0x0040c1aa mov dword [rsp + 0x78], 0xa                       |     *((rsp + 0x78)) = 0xa;
    0x0040c1b2 lea rdi, [rsp + 8]                                |     
    0x0040c1b7 lea rsi, [rsp + 0xc0]                             |     
    0x0040c1bf lea rdx, [rsp + 0x78]                             |     
    0x0040c1c4 call 0x454fe0                                     |     eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findLowerBoundR(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 8, rsp + 0xc0, rsp + 0x78);
    0x0040c1c9 test eax, eax                                     |     
                                                                 |     if (eax == 0) {
    0x0040c1cb jne 0x40c1f4                                      |         
    0x0040c1cd call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040c1d2 mov rbx, rax                                      |         rbx = rax;
    0x0040c1d5 mov rdi, rax                                      |         
    0x0040c1d8 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040c1dd mov edi, 0x67b556                                 |         edi = "mX.findLowerBoundR(&h, 10)";
    0x0040c1e2 mov esi, 0x1336                                   |         esi = 0x1336;
    0x0040c1e7 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040c1ec mov rdi, rbx                                      |         
    0x0040c1ef call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040c1f4 mov dword [rsp + 0x78], 0xa                       |     *((rsp + 0x78)) = 0xa;
    0x0040c1fc lea rdi, [rsp + 8]                                |     
    0x0040c201 lea rsi, [rsp + 0xc0]                             |     
    0x0040c209 lea rdx, [rsp + 0x78]                             |     
    0x0040c20e call 0x455160                                     |     eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findUpperBoundR(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 8, rsp + 0xc0, rsp + 0x78);
    0x0040c213 test eax, eax                                     |     
                                                                 |     if (eax == 0) {
    0x0040c215 jne 0x40c23e                                      |         
    0x0040c217 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040c21c mov rbx, rax                                      |         rbx = rax;
    0x0040c21f mov rdi, rax                                      |         
    0x0040c222 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040c227 mov edi, 0x67b571                                 |         edi = "mX.findUpperBoundR(&h, 10)";
    0x0040c22c mov esi, 0x1337                                   |         esi = 0x1337;
    0x0040c231 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040c236 mov rdi, rbx                                      |         
    0x0040c239 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040c23e mov dword [rsp + 0x78], 0xffffffff                |     *((rsp + 0x78)) = 0xffffffff;
    0x0040c246 lea rdi, [rsp + 8]                                |     
    0x0040c24b lea rsi, [rsp + 0xc0]                             |     
    0x0040c253 lea rdx, [rsp + 0x78]                             |     
    0x0040c258 call 0x454fe0                                     |     eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findLowerBoundR(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 8, rsp + 0xc0, rsp + 0x78);
    0x0040c25d test eax, eax                                     |     
                                                                 |     if (eax != 0) {
    0x0040c25f je 0x40c288                                       |         
    0x0040c261 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040c266 mov rbx, rax                                      |         rbx = rax;
    0x0040c269 mov rdi, rax                                      |         
    0x0040c26c call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040c271 mov edi, 0x67b58c                                 |         edi = "!mX.findLowerBoundR(&h,-1)";
    0x0040c276 mov esi, 0x133b                                   |         esi = 0x133b;
    0x0040c27b call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040c280 mov rdi, rbx                                      |         
    0x0040c283 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040c288 mov rax, qword [rsp + 0xc8]                       |     rax = *((rsp + 0xc8));
    0x0040c290 cmp dword [rax + 0x38], 0                         |     
                                                                 |     if (*((rax + 0x38)) != 0) {
    0x0040c294 je 0x40c2c5                                       |         
    0x0040c296 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040c29b mov rbx, rax                                      |         rbx = rax;
    0x0040c29e mov rdi, rax                                      |         
    0x0040c2a1 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040c2a6 mov edi, 0x67b3f4                                 |         edi = "h.key() == 0";
    0x0040c2ab mov esi, 0x133c                                   |         esi = 0x133c;
    0x0040c2b0 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040c2b5 mov rdi, rbx                                      |         
    0x0040c2b8 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040c2bd mov rax, qword [rsp + 0xc8]                       |         rax = *((rsp + 0xc8));
                                                                 |     }
    0x0040c2c5 cmp qword [rax + 0x20], 1                         |     
                                                                 |     if (*((rax + 0x20)) != 1) {
    0x0040c2ca jne 0x40e6bf                                      |         goto label_61;
                                                                 |     }
    0x0040c2d0 cmp qword [rax + 0x28], 0x17                      |     
                                                                 |     if (*((rax + 0x28)) == 0x17) {
    0x0040c2d5 je 0x40e6b6                                       |         goto label_62;
                                                                 |     }
    0x0040c2db mov rax, qword [rax + 8]                          |     rax = *((rax + 8));
    0x0040c2df jmp 0x40e6ba                                      |     goto label_63;
                                                                 | label_42:
    0x0040c2e4 movsd xmm0, qword [rip + 0x26e5ac]                |     xmm0 = *(0x0067a898);
    0x0040c2ec movsd xmm1, qword [rip + 0x26e5ac]                |     xmm1 = *(0x0067a8a0);
    0x0040c2f4 movsd qword [rsp + 0x70], xmm1                    |     *((rsp + 0x70)) = xmm1;
    0x0040c2fa xor r12d, r12d                                    |     r12d = 0;
    0x0040c2fd mov r15d, 0xfffffefb                              |     r15d = 0xfffffefb;
    0x0040c303 jmp 0x40c341                                      |     
                                                                 |     while (ecx >= 0) {
                                                                 | label_5:
    0x0040c310 movsd xmm1, qword [rsp + 0x1e0]                   |         xmm1 = *((rsp + 0x1e0));
    0x0040c319 mulsd xmm1, qword [rip + 0x26e59f]                |         __asm ("mulsd xmm1, qword [0x0067a8c0]");
    0x0040c321 inc r12                                           |         r12++;
    0x0040c324 movsd xmm0, qword [rsp]                           |         xmm0 = *(rsp);
    0x0040c329 mulsd xmm0, qword [rip + 0x26e597]                |         __asm ("mulsd xmm0, qword [0x0067a8c8]");
    0x0040c331 movsd qword [rsp + 0x70], xmm1                    |         *((rsp + 0x70)) = xmm1;
    0x0040c337 cmp r12, 0x20                                     |         
                                                                 |         if (r12 == 0x20) {
    0x0040c33b je 0x40c7a2                                       |             goto label_64;
                                                                 |         }
    0x0040c341 mov r14d, dword [rsp + r12*4 + 0x2c0]             |         r14d = *((rsp + r12*4 + 0x2c0));
    0x0040c349 xorps xmm4, xmm4                                  |         __asm ("xorps xmm4, xmm4");
    0x0040c34c cvtsi2sd xmm4, r14d                               |         __asm ("cvtsi2sd xmm4, r14d");
    0x0040c351 movapd xmm3, xmm0                                 |         __asm ("movapd xmm3, xmm0");
    0x0040c355 movapd xmm0, xmm4                                 |         __asm ("movapd xmm0, xmm4");
    0x0040c359 subsd xmm0, xmm3                                  |         __asm ("subsd xmm0, xmm3");
    0x0040c35d movapd xmm1, xmm0                                 |         __asm ("movapd xmm1, xmm0");
    0x0040c361 xorpd xmm1, xmmword [rip + 0x26e1e7]              |         __asm ("xorpd xmm1, xmmword [0x0067a550]");
    0x0040c369 movapd xmm2, xmm0                                 |         __asm ("movapd xmm2, xmm0");
    0x0040c36d cmpltsd xmm2, qword [0x67a8d0]                    |         __asm ("cmpltsd xmm2, qword [0x67a8d0]");
    0x0040c377 andpd xmm1, xmm2                                  |         __asm ("andpd xmm1, xmm2");
    0x0040c37b andnpd xmm2, xmm0                                 |         __asm ("andnpd xmm2, xmm0");
    0x0040c37f orpd xmm2, xmm1                                   |         __asm ("orpd xmm2, xmm1");
    0x0040c383 mulsd xmm2, qword [rip + 0x26e51d]                |         __asm ("mulsd xmm2, qword [0x0067a8a8]");
    0x0040c38b divsd xmm2, xmm3                                  |         __asm ("divsd xmm2, xmm3");
    0x0040c38f addsd xmm2, qword [rip + 0x26e519]                |         __asm ("addsd xmm2, qword [0x0067a8b0]");
    0x0040c397 cvttsd2si eax, xmm2                               |         __asm ("cvttsd2si eax, xmm2");
    0x0040c39b mov ebx, eax                                      |         ebx = eax;
    0x0040c39d neg ebx                                           |         ebx = -ebx;
    0x0040c39f movsd qword [rsp], xmm3                           |         *(rsp) = xmm3;
    0x0040c3a4 movsd qword [rsp + 0x1e8], xmm4                   |         *((rsp + 0x1e8)) = xmm4;
    0x0040c3ad ucomisd xmm4, xmm3                                |         __asm ("ucomisd xmm4, xmm3");
                                                                 |         if (r12 > 0x20) {
    0x0040c3b1 cmova ebx, eax                                    |             ebx = eax;
                                                                 |         }
    0x0040c3b4 cmp dword [rip + 0x50e01d], 0                     |         
                                                                 |         if (*(obj.verbose) != 0) {
    0x0040c3bb je 0x40c553                                       |             
    0x0040c3c1 mov edi, 0x91a328                                 |             
    0x0040c3c6 mov esi, 0x67b989                                 |             
    0x0040c3cb mov edx, 3                                        |             
    0x0040c3d0 call 0x5bce00                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, 0x67b989, 3);
    0x0040c3d5 mov rcx, qword [rax]                              |             rcx = *(rax);
    0x0040c3d8 mov rcx, qword [rcx - 0x18]                       |             rcx = *((rcx - 0x18));
    0x0040c3dc mov qword [rax + rcx + 0x18], 2                   |             *((rax + rcx + 0x18)) = 2;
    0x0040c3e5 mov rdi, rax                                      |             rdi = rax;
    0x0040c3e8 mov esi, r12d                                     |             esi = r12d;
    0x0040c3eb call 0x405010                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040c3f0 mov esi, 0x67b9a7                                 |             
    0x0040c3f5 mov edx, 2                                        |             
    0x0040c3fa mov rdi, rax                                      |             
    0x0040c3fd call 0x5bce00                                     |             std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67b9a7, 2);
    0x0040c402 mov rax, qword [rip + 0x50df1f]                   |             rax = std::__1::cout;
    0x0040c409 mov rax, qword [rax - 0x18]                       |             rax = *((rax - 0x18));
    0x0040c40d mov ebp, dword [rax + 0x91a330]                   |             ebp = *((rax + 0x91a330));
    0x0040c413 mov qword [rax + 0x91a338], 4                     |             *((rax + 0x91a338)) = 4;
    0x0040c41e mov rax, qword [rip + 0x50df03]                   |             rax = std::__1::cout;
    0x0040c425 mov rax, qword [rax - 0x18]                       |             rax = *((rax - 0x18));
    0x0040c429 mov ecx, dword [rax + 0x91a330]                   |             ecx = *((rax + 0x91a330));
    0x0040c42f and ecx, r15d                                     |             ecx &= r15d;
    0x0040c432 or ecx, 0x100                                     |             ecx |= 0x100;
    0x0040c438 mov dword [rax + 0x91a330], ecx                   |             *((rax + 0x91a330)) = ecx;
    0x0040c43e mov edi, 0x91a328                                 |             
    0x0040c443 mov esi, 0x67b98d                                 |             
    0x0040c448 mov edx, 5                                        |             
    0x0040c44d call 0x5bce00                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "exp: ", 5);
    0x0040c452 mov rcx, qword [rax]                              |             rcx = *(rax);
    0x0040c455 mov rcx, qword [rcx - 0x18]                       |             rcx = *((rcx - 0x18));
    0x0040c459 mov qword [rax + rcx + 0x18], 6                   |             *((rax + rcx + 0x18)) = 6;
    0x0040c462 mov rdi, rax                                      |             rdi = rax;
    0x0040c465 movsd xmm0, qword [rsp]                           |             xmm0 = *(rsp);
    0x0040c46a call 0x405270                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (double) ();
    0x0040c46f mov esi, 0x67b9a7                                 |             
    0x0040c474 mov edx, 2                                        |             
    0x0040c479 mov rdi, rax                                      |             
    0x0040c47c call 0x5bce00                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67b9a7, 2);
    0x0040c481 mov esi, 0x67b993                                 |             
    0x0040c486 mov edx, 6                                        |             
    0x0040c48b mov rdi, rax                                      |             
    0x0040c48e call 0x5bce00                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, "n[i]: ", 6);
    0x0040c493 mov rcx, qword [rax]                              |             rcx = *(rax);
    0x0040c496 mov rcx, qword [rcx - 0x18]                       |             rcx = *((rcx - 0x18));
    0x0040c49a mov qword [rax + rcx + 0x18], 6                   |             *((rax + rcx + 0x18)) = 6;
    0x0040c4a3 mov rdi, rax                                      |             rdi = rax;
    0x0040c4a6 mov esi, r14d                                     |             esi = r14d;
    0x0040c4a9 call 0x405010                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040c4ae mov esi, 0x67b9a7                                 |             
    0x0040c4b3 mov edx, 2                                        |             
    0x0040c4b8 mov rdi, rax                                      |             
    0x0040c4bb call 0x5bce00                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67b9a7, 2);
    0x0040c4c0 mov esi, 0x67b99a                                 |             
    0x0040c4c5 mov edx, 0xb                                      |             
    0x0040c4ca mov rdi, rax                                      |             
    0x0040c4cd call 0x5bce00                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, "tolerance: ", 0xb);
    0x0040c4d2 mov rcx, qword [rax]                              |             rcx = *(rax);
    0x0040c4d5 mov rcx, qword [rcx - 0x18]                       |             rcx = *((rcx - 0x18));
    0x0040c4d9 mov qword [rax + rcx + 0x18], 6                   |             *((rax + rcx + 0x18)) = 6;
    0x0040c4e2 mov rdi, rax                                      |             rdi = rax;
    0x0040c4e5 movsd xmm0, qword [rsp + 0x70]                    |             xmm0 = *((rsp + 0x70));
    0x0040c4eb call 0x405270                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (double) ();
    0x0040c4f0 mov esi, 0x67b9a6                                 |             
    0x0040c4f5 mov edx, 3                                        |             
    0x0040c4fa mov rdi, rax                                      |             
    0x0040c4fd call 0x5bce00                                     |             std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67b9a6, 3);
    0x0040c502 mov rax, qword [rip + 0x50de1f]                   |             rax = std::__1::cout;
    0x0040c509 mov rax, qword [rax - 0x18]                       |             rax = *((rax - 0x18));
    0x0040c50d mov dword [rax + 0x91a330], ebp                   |             *((rax + 0x91a330)) = ebp;
    0x0040c513 mov edi, 0x91a328                                 |             
    0x0040c518 mov esi, 0x67b9aa                                 |             
    0x0040c51d mov edx, 6                                        |             
    0x0040c522 call 0x5bce00                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "miss: ", 6);
    0x0040c527 mov rcx, qword [rax]                              |             rcx = *(rax);
    0x0040c52a mov rcx, qword [rcx - 0x18]                       |             rcx = *((rcx - 0x18));
    0x0040c52e mov qword [rax + rcx + 0x18], 4                   |             *((rax + rcx + 0x18)) = 4;
    0x0040c537 mov rdi, rax                                      |             rdi = rax;
    0x0040c53a mov esi, ebx                                      |             esi = ebx;
    0x0040c53c call 0x405010                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040c541 mov esi, 0x67b9b1                                 |             
    0x0040c546 mov edx, 2                                        |             
    0x0040c54b mov rdi, rax                                      |             
    0x0040c54e call 0x5bce00                                     |             std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67b9b1, 2);
                                                                 |         }
    0x0040c553 movsd xmm0, qword [rsp + 0x70]                    |         xmm0 = *((rsp + 0x70));
    0x0040c559 divsd xmm0, qword [rip + 0x26e347]                |         __asm ("divsd xmm0, qword [0x0067a8a8]");
    0x0040c561 movsd qword [rsp + 0x1e0], xmm0                   |         *((rsp + 0x1e0)) = xmm0;
    0x0040c56a addsd xmm0, qword [rip + 0x26e346]                |         __asm ("addsd xmm0, qword [0x0067a8b8]");
    0x0040c572 mulsd xmm0, qword [rsp]                           |         __asm ("mulsd xmm0, qword [rsp]");
    0x0040c577 roundsd xmm0, xmm0, 0xa                           |         __asm ("roundsd xmm0, xmm0, 0xa");
    0x0040c57d ucomisd xmm0, qword [rsp + 0x1e8]                 |         __asm ("ucomisd xmm0, qword [rsp + 0x1e8]");
                                                                 |         if (ecx < 0) {
    0x0040c586 jae 0x40c67d                                      |             
    0x0040c58c call 0x64fbf0                                     |             rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040c591 mov rbx, rax                                      |             rbx = rax;
    0x0040c594 mov rdi, rax                                      |             
    0x0040c597 call 0x64f8a0                                     |             BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040c59c mov edi, 0x91a328                                 |             
    0x0040c5a1 mov esi, 0x67b9b4                                 |             
    0x0040c5a6 mov edx, 3                                        |             
    0x0040c5ab call 0x5bce00                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, 0x67b9b4, 3);
    0x0040c5b0 mov esi, 0x67aff6                                 |             
    0x0040c5b5 mov edx, 2                                        |             
    0x0040c5ba mov rdi, rax                                      |             
    0x0040c5bd call 0x5bce00                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67aff6, 2);
    0x0040c5c2 mov rdi, rax                                      |             rdi = rax;
    0x0040c5c5 movsd xmm0, qword [rsp]                           |             xmm0 = *(rsp);
    0x0040c5ca call 0x405270                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (double) ();
    0x0040c5cf mov esi, 0x6962c3                                 |             
    0x0040c5d4 mov edx, 1                                        |             
    0x0040c5d9 mov rdi, rax                                      |             
    0x0040c5dc call 0x5bce00                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x6962c3, 1);
    0x0040c5e1 mov esi, 0x67b9b8                                 |             
    0x0040c5e6 mov edx, 4                                        |             
    0x0040c5eb mov rdi, rax                                      |             
    0x0040c5ee call 0x5bce00                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, "n[i]", 4);
    0x0040c5f3 mov esi, 0x67aff6                                 |             
    0x0040c5f8 mov edx, 2                                        |             
    0x0040c5fd mov rdi, rax                                      |             
    0x0040c600 call 0x5bce00                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67aff6, 2);
    0x0040c605 mov rdi, rax                                      |             rdi = rax;
    0x0040c608 mov esi, r14d                                     |             esi = r14d;
    0x0040c60b call 0x405010                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040c610 mov esi, 0x6962c3                                 |             
    0x0040c615 mov edx, 1                                        |             
    0x0040c61a mov rdi, rax                                      |             
    0x0040c61d call 0x5bce00                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x6962c3, 1);
    0x0040c622 mov esi, 0x67b9bd                                 |             
    0x0040c627 mov edx, 0xa                                      |             
    0x0040c62c mov rdi, rax                                      |             
    0x0040c62f call 0x5bce00                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, "tolPercent", 0xa);
    0x0040c634 mov esi, 0x67aff6                                 |             
    0x0040c639 mov edx, 2                                        |             
    0x0040c63e mov rdi, rax                                      |             
    0x0040c641 call 0x5bce00                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67aff6, 2);
    0x0040c646 mov rdi, rax                                      |             rdi = rax;
    0x0040c649 movsd xmm0, qword [rsp + 0x70]                    |             xmm0 = *((rsp + 0x70));
    0x0040c64f call 0x405270                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (double) ();
    0x0040c654 mov esi, 0x696200                                 |             
    0x0040c659 mov edx, 1                                        |             
    0x0040c65e mov rdi, rax                                      |             
    0x0040c661 call 0x5bce00                                     |             std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x696200, 1);
    0x0040c666 mov edi, 0x67b9c8                                 |             edi = "n[i] <= bsl::ceil( exp * (1.0 + tol))";
    0x0040c66b mov esi, 0x1478                                   |             esi = 0x1478;
    0x0040c670 call 0x405800                                     |             (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040c675 mov rdi, rbx                                      |             
    0x0040c678 call 0x64f9f0                                     |             BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |         }
    0x0040c67d movsd xmm0, qword [rip + 0x26e233]                |         xmm0 = *(0x0067a8b8);
    0x0040c685 subsd xmm0, qword [rsp + 0x1e0]                   |         __asm ("subsd xmm0, qword [rsp + 0x1e0]");
    0x0040c68e mulsd xmm0, qword [rsp]                           |         __asm ("mulsd xmm0, qword [rsp]");
    0x0040c693 roundsd xmm0, xmm0, 9                             |         __asm ("roundsd xmm0, xmm0, 9");
    0x0040c699 movsd xmm1, qword [rsp + 0x1e8]                   |         xmm1 = *((rsp + 0x1e8));
    0x0040c6a2 ucomisd xmm1, xmm0                                |         __asm ("ucomisd xmm1, xmm0");
    0x0040c6a6 jae 0x40c310                                      |         
                                                                 |     }
    0x0040c6ac call 0x64fbf0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040c6b1 mov rbx, rax                                      |     rbx = rax;
    0x0040c6b4 mov rdi, rax                                      |     
    0x0040c6b7 call 0x64f8a0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040c6bc mov edi, 0x91a328                                 |     
    0x0040c6c1 mov esi, 0x67b9b4                                 |     
    0x0040c6c6 mov edx, 3                                        |     
    0x0040c6cb call 0x5bce00                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, 0x67b9b4, 3);
    0x0040c6d0 mov esi, 0x67aff6                                 |     
    0x0040c6d5 mov edx, 2                                        |     
    0x0040c6da mov rdi, rax                                      |     
    0x0040c6dd call 0x5bce00                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67aff6, 2);
    0x0040c6e2 mov rdi, rax                                      |     rdi = rax;
    0x0040c6e5 movsd xmm0, qword [rsp]                           |     xmm0 = *(rsp);
    0x0040c6ea call 0x405270                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (double) ();
    0x0040c6ef mov esi, 0x6962c3                                 |     
    0x0040c6f4 mov edx, 1                                        |     
    0x0040c6f9 mov rdi, rax                                      |     
    0x0040c6fc call 0x5bce00                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x6962c3, 1);
    0x0040c701 mov esi, 0x67b9b8                                 |     
    0x0040c706 mov edx, 4                                        |     
    0x0040c70b mov rdi, rax                                      |     
    0x0040c70e call 0x5bce00                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, "n[i]", 4);
    0x0040c713 mov esi, 0x67aff6                                 |     
    0x0040c718 mov edx, 2                                        |     
    0x0040c71d mov rdi, rax                                      |     
    0x0040c720 call 0x5bce00                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67aff6, 2);
    0x0040c725 mov rdi, rax                                      |     rdi = rax;
    0x0040c728 mov esi, r14d                                     |     esi = r14d;
    0x0040c72b call 0x405010                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040c730 mov esi, 0x6962c3                                 |     
    0x0040c735 mov edx, 1                                        |     
    0x0040c73a mov rdi, rax                                      |     
    0x0040c73d call 0x5bce00                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x6962c3, 1);
    0x0040c742 mov esi, 0x67b9bd                                 |     
    0x0040c747 mov edx, 0xa                                      |     
    0x0040c74c mov rdi, rax                                      |     
    0x0040c74f call 0x5bce00                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, "tolPercent", 0xa);
    0x0040c754 mov esi, 0x67aff6                                 |     
    0x0040c759 mov edx, 2                                        |     
    0x0040c75e mov rdi, rax                                      |     
    0x0040c761 call 0x5bce00                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67aff6, 2);
    0x0040c766 mov rdi, rax                                      |     rdi = rax;
    0x0040c769 movsd xmm0, qword [rsp + 0x70]                    |     xmm0 = *((rsp + 0x70));
    0x0040c76f call 0x405270                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (double) ();
    0x0040c774 mov esi, 0x696200                                 |     
    0x0040c779 mov edx, 1                                        |     
    0x0040c77e mov rdi, rax                                      |     
    0x0040c781 call 0x5bce00                                     |     std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x696200, 1);
    0x0040c786 mov edi, 0x67b9ee                                 |     edi = "n[i] >= bsl::floor(exp * (1.0 - tol))";
    0x0040c78b mov esi, 0x147a                                   |     esi = 0x147a;
    0x0040c790 call 0x405800                                     |     (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040c795 mov rdi, rbx                                      |     
    0x0040c798 call 0x64f9f0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040c79d jmp 0x40c310                                      |     goto label_5;
                                                                 | label_64:
    0x0040c7a2 mov rax, qword [rsp + 0xd0]                       |     rax = *((rsp + 0xd0));
    0x0040c7aa mov rbx, qword [rax + 0x10]                       |     rbx = *((rax + 0x10));
    0x0040c7ae cmp rbx, qword [rsp + 0xd8]                       |     
                                                                 |     if (rbx == *((rsp + 0xd8))) {
    0x0040c7b6 je 0x40c7d6                                       |         goto label_65;
                                                                 |     }
    0x0040c7b8 nop dword [rax + rax]                             |     
                                                                 |     do {
    0x0040c7c0 mov rdi, rbx                                      |         
    0x0040c7c3 call 0x649ba0                                     |         BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (rbx);
    0x0040c7c8 mov rbx, qword [rbx + 0x10]                       |         rbx = *((rbx + 0x10));
    0x0040c7cc cmp rbx, qword [rsp + 0xd8]                       |         
    0x0040c7d4 jne 0x40c7c0                                      |         
                                                                 |     } while (rbx != *((rsp + 0xd8)));
                                                                 | label_65:
    0x0040c7d6 mov rsi, qword [rsp + 0x110]                      |     
    0x0040c7de mov rdi, qword [rsp + 0x118]                      |     
    0x0040c7e6 call 0x64a360                                     |     eax = BloombergLP::bdlcc::SkipList_PoolUtil::deletePoolManager(BloombergLP::bslma::Allocator*,BloombergLP::bdlcc::SkipList_PoolManager*) (*((rsp + 0x118)), *((rsp + 0x110)));
    0x0040c7eb jmp 0x40e43b                                      |     goto label_50;
                                                                 | label_48:
    0x0040c7f0 test eax, eax                                     |     
                                                                 |     if (eax <= 0) {
    0x0040c7f2 jle 0x40c822                                      |         goto label_47;
                                                                 |     }
    0x0040c7f4 xor ebx, ebx                                      |     ebx = 0;
    0x0040c7f6 nop word cs:[rax + rax]                           |     
                                                                 |     do {
    0x0040c800 mov rax, qword [rsp + 0x560]                      |         rax = *((rsp + 0x560));
    0x0040c808 mov rdi, qword [rax + rbx*8]                      |         
    0x0040c80c xor esi, esi                                      |         
    0x0040c80e call 0x404e80                                     |         pthread_join (*((rax + rbx*8)), 0);
    0x0040c813 inc rbx                                           |         rbx++;
    0x0040c816 movsxd rax, dword [rip + 0x50ad8b]                |         rax = *(obj.SKIPLIST_TEST_CASE_DRQS_144652915::numThreads);
    0x0040c81d cmp rbx, rax                                      |         
    0x0040c820 jl 0x40c800                                       |         
                                                                 |     } while (rbx < rax);
                                                                 | label_47:
    0x0040c822 call 0x64fbf0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040c827 mov r15, rax                                      |     r15 = rax;
    0x0040c82a mov rdi, rax                                      |     
    0x0040c82d call 0x64f8a0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040c832 mov edi, 0x91a328                                 |     
    0x0040c837 mov esi, 0x67b2cb                                 |     
    0x0040c83c mov edx, 0x14                                     |     
    0x0040c841 call 0x5bce00                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "skipList.length() = ", 0x14);
    0x0040c846 mov rbp, rax                                      |     
    0x0040c849 lea r14, [rsp + 0x210]                            |     r14 = rsp + 0x210;
    0x0040c851 mov rdi, r14                                      |     rdi = r14;
    0x0040c854 call 0x4052c0                                     |     pthread_mutex_lock ();
    0x0040c859 mov ebx, dword [rsp + 0x238]                      |     ebx = *((rsp + 0x238));
    0x0040c860 mov rdi, r14                                      |     rdi = r14;
    0x0040c863 call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x0040c868 mov rdi, rbp                                      |     rdi = rbp;
    0x0040c86b mov esi, ebx                                      |     esi = ebx;
    0x0040c86d call 0x405010                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040c872 mov rbp, rax                                      |     
    0x0040c875 mov rax, qword [rax]                              |     rax = *(rax);
    0x0040c878 mov rsi, qword [rax - 0x18]                       |     rsi = *((rax - 0x18));
    0x0040c87c add rsi, rbp                                      |     rsi += rbp;
    0x0040c87f lea rdi, [rsp + 0x2c0]                            |     rdi = rsp + 0x2c0;
    0x0040c887 call 0x405070                                     |     std::_1::ios_base::getloc()const ();
    0x0040c88c lea rdi, [rsp + 0x2c0]                            |     rdi = rsp + 0x2c0;
    0x0040c894 mov esi, 0x91a270                                 |     esi = obj.std::__1::ctype_char_::id;
    0x0040c899 call 0x4051a0                                     |     rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040c89e mov rcx, qword [rax]                              |     rcx = *(rax);
    0x0040c8a1 mov rdi, rax                                      |     rdi = rax;
    0x0040c8a4 mov esi, 0xa                                      |     esi = 0xa;
    0x0040c8a9 call qword [rcx + 0x38]                           |     eax = uint64_t (*rcx + 0x38)() ();
    0x0040c8ac mov ebx, eax                                      |     ebx = eax;
    0x0040c8ae lea rdi, [rsp + 0x2c0]                            |     rdi = rsp + 0x2c0;
    0x0040c8b6 call 0x405240                                     |     std::_1::locale::~locale() ();
    0x0040c8bb movsx esi, bl                                     |     esi = (int32_t) bl;
    0x0040c8be mov rdi, rbp                                      |     rdi = rbp;
    0x0040c8c1 call 0x404e30                                     |     std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040c8c6 mov rdi, rbp                                      |     rdi = rbp;
    0x0040c8c9 call 0x405040                                     |     std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040c8ce mov rdi, r15                                      |     
    0x0040c8d1 call 0x64f9f0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r15);
    0x0040c8d6 call 0x64fbf0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040c8db mov r15, rax                                      |     r15 = rax;
    0x0040c8de mov rdi, rax                                      |     
    0x0040c8e1 call 0x64f8a0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040c8e6 mov edi, 0x91a328                                 |     
    0x0040c8eb mov esi, 0x67b2e0                                 |     
    0x0040c8f0 mov edx, 0x13                                     |     
    0x0040c8f5 call 0x5bce00                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "ta.numBytesMax() = ", 0x13);
    0x0040c8fa mov rsi, qword [rsp + 0x120]                      |     rsi = *((rsp + 0x120));
    0x0040c902 mov rdi, rax                                      |     rdi = rax;
    0x0040c905 call 0x405130                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (long long) ();
    0x0040c90a mov rbp, rax                                      |     
    0x0040c90d mov rax, qword [rax]                              |     rax = *(rax);
    0x0040c910 mov rsi, qword [rax - 0x18]                       |     rsi = *((rax - 0x18));
    0x0040c914 add rsi, rbp                                      |     rsi += rbp;
    0x0040c917 lea rdi, [rsp + 0x2c0]                            |     rdi = rsp + 0x2c0;
    0x0040c91f call 0x405070                                     |     std::_1::ios_base::getloc()const ();
    0x0040c924 lea rdi, [rsp + 0x2c0]                            |     rdi = rsp + 0x2c0;
    0x0040c92c mov esi, 0x91a270                                 |     esi = obj.std::__1::ctype_char_::id;
    0x0040c931 call 0x4051a0                                     |     rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040c936 mov rcx, qword [rax]                              |     rcx = *(rax);
    0x0040c939 mov rdi, rax                                      |     rdi = rax;
    0x0040c93c mov esi, 0xa                                      |     esi = 0xa;
    0x0040c941 call qword [rcx + 0x38]                           |     eax = uint64_t (*rcx + 0x38)() ();
    0x0040c944 mov ebx, eax                                      |     ebx = eax;
    0x0040c946 lea rdi, [rsp + 0x2c0]                            |     rdi = rsp + 0x2c0;
    0x0040c94e call 0x405240                                     |     std::_1::locale::~locale() ();
    0x0040c953 movsx esi, bl                                     |     esi = (int32_t) bl;
    0x0040c956 mov rdi, rbp                                      |     rdi = rbp;
    0x0040c959 call 0x404e30                                     |     std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040c95e mov rdi, rbp                                      |     rdi = rbp;
    0x0040c961 call 0x405040                                     |     std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040c966 mov rdi, r15                                      |     
    0x0040c969 call 0x64f9f0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r15);
    0x0040c96e lea rdi, [rsp + 0x440]                            |     
    0x0040c976 call 0x64f5d0                                     |     BloombergLP::bslmt::Barrier::~Barrier() (rsp + 0x440);
    0x0040c97b mov rsi, qword [rsp + 0x560]                      |     rsi = *((rsp + 0x560));
    0x0040c983 test rsi, rsi                                     |     
                                                                 |     if (rsi != 0) {
    0x0040c986 je 0x40c996                                       |         
    0x0040c988 mov rdi, qword [rsp + 0x578]                      |         rdi = *((rsp + 0x578));
    0x0040c990 mov rax, qword [rdi]                              |         rax = *(rdi);
    0x0040c993 call qword [rax + 0x18]                           |         uint64_t (*rax + 0x18)() ();
                                                                 |     }
    0x0040c996 mov rax, qword [rsp + 0x200]                      |     rax = *((rsp + 0x200));
    0x0040c99e mov rbx, qword [rax + 0x98]                       |     rbx = *((rax + 0x98));
    0x0040c9a5 cmp rbx, qword [rsp + 0x208]                      |     
                                                                 |     if (rbx == *((rsp + 0x208))) {
    0x0040c9ad je 0x40c9c9                                       |         goto label_66;
                                                                 |     }
    0x0040c9af nop                                               |     
                                                                 |     do {
    0x0040c9b0 mov rdi, rbx                                      |         
    0x0040c9b3 call 0x649ba0                                     |         BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (rbx);
    0x0040c9b8 mov rbx, qword [rbx + 0x98]                       |         rbx = *((rbx + 0x98));
    0x0040c9bf cmp rbx, qword [rsp + 0x208]                      |         
    0x0040c9c7 jne 0x40c9b0                                      |         
                                                                 |     } while (rbx != *((rsp + 0x208)));
                                                                 | label_66:
    0x0040c9c9 mov rsi, qword [rsp + 0x240]                      |     
    0x0040c9d1 mov rdi, qword [rsp + 0x248]                      |     
    0x0040c9d9 call 0x64a360                                     |     BloombergLP::bdlcc::SkipList_PoolUtil::deletePoolManager(BloombergLP::bslma::Allocator*,BloombergLP::bdlcc::SkipList_PoolManager*) (*((rsp + 0x248)), *((rsp + 0x240)));
    0x0040c9de lea rdi, [rsp + 0x210]                            |     rdi = rsp + 0x210;
    0x0040c9e6 call 0x64f850                                     |     BloombergLP::bslmt::MutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::~MutexImpl() ();
    0x0040c9eb jmp 0x411b6c                                      |     goto label_67;
                                                                 | label_34:
    0x0040c9f0 mov dword [rsp], 0x14                             |     *(rsp) = 0x14;
                                                                 | label_35:
    0x0040c9f7 lea rbx, [rsp + 0x1f0]                            |     rbx = rsp + 0x1f0;
    0x0040c9ff mov rdi, rbx                                      |     rdi = rbx;
    0x0040ca02 xor esi, esi                                      |     esi = 0;
    0x0040ca04 call 0x404cc0                                     |     pthread_mutex_init ();
    0x0040ca09 lea rdi, [rsp + 0x218]                            |     
    0x0040ca11 xor esi, esi                                      |     
    0x0040ca13 call 0x64f7a0                                     |     BloombergLP::bslmt::ConditionImpl<BloombergLP::bslmt::Platform::PosixThreads>::ConditionImpl(BloombergLP::bsls::SystemClockType::Enum) (rsp + 0x218, 0);
    0x0040ca18 mov eax, dword [rsp]                              |     eax = *(rsp);
    0x0040ca1b mov dword [rsp + 0x250], eax                      |     *((rsp + 0x250)) = eax;
    0x0040ca22 xorpd xmm0, xmm0                                  |     __asm ("xorpd xmm0, xmm0");
    0x0040ca26 movupd xmmword [rsp + 0x254], xmm0                |     __asm ("movupd xmmword [rsp + 0x254], xmm0");
    0x0040ca2f mov qword [rip + 0x50d9ca], rbx                   |     *(obj.RemoveAllSafetyTest::barrier_p) = rbx;
    0x0040ca36 cmp dword [rip + 0x50d99b], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040ca3d je 0x40cb97                                       |         
    0x0040ca43 mov rdi, qword [r15 + 0x10]                       |         
    0x0040ca47 xor esi, esi                                      |         
    0x0040ca49 mov edx, 0xa                                      |         
    0x0040ca4e call 0x404f50                                     |         eax = strtol (*((r15 + 0x10)), 0, 0xa);
    0x0040ca53 test eax, eax                                     |         
    0x0040ca55 mov r14d, 0x3e8                                   |         r14d = 0x3e8;
                                                                 |         if (eax != 0) {
    0x0040ca5b cmovne r14d, eax                                  |             r14d = eax;
                                                                 |         }
    0x0040ca5f mov eax, dword [rip + 0x50d977]                   |         eax = veryVerbose;
    0x0040ca65 mov dword [rip + 0x50d96d], eax                   |         *(obj.verbose) = eax;
    0x0040ca6b mov ecx, dword [rip + 0x50d96f]                   |         ecx = veryVeryVerbose;
    0x0040ca71 mov dword [rip + 0x50d965], ecx                   |         *(obj.veryVerbose) = ecx;
    0x0040ca77 mov dword [rip + 0x50d95f], 0                     |         *(obj.veryVeryVerbose) = 0;
    0x0040ca81 test eax, eax                                     |         
                                                                 |         if (eax == 0) {
    0x0040ca83 je 0x40cb9d                                       |             goto label_68;
                                                                 |         }
    0x0040ca89 mov edi, 0x91a328                                 |         
    0x0040ca8e mov esi, 0x67bad2                                 |         
    0x0040ca93 mov edx, 0x17                                     |         
    0x0040ca98 call 0x5bce00                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "RemoveAll Safety test: ", 0x17);
    0x0040ca9d call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040caa2 mov rbx, rax                                      |         rbx = rax;
    0x0040caa5 mov rdi, rax                                      |         
    0x0040caa8 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040caad mov edi, 0x91a328                                 |         
    0x0040cab2 mov esi, 0x67b28c                                 |         
    0x0040cab7 mov edx, 0xd                                      |         
    0x0040cabc call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "numThreads = ", 0xd);
    0x0040cac1 mov rdi, rax                                      |         rdi = rax;
    0x0040cac4 mov esi, dword [rsp]                              |         esi = *(rsp);
    0x0040cac7 call 0x405010                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040cacc mov esi, 0x67b9a7                                 |         
    0x0040cad1 mov edx, 2                                        |         
    0x0040cad6 mov rdi, rax                                      |         
    0x0040cad9 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67b9a7, 2);
    0x0040cade mov rdi, rax                                      |         rdi = rax;
    0x0040cae1 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040cae6 mov rdi, rbx                                      |         
    0x0040cae9 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040caee call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040caf3 mov r15, rax                                      |         r15 = rax;
    0x0040caf6 mov rdi, rax                                      |         
    0x0040caf9 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040cafe mov edi, 0x91a328                                 |         
    0x0040cb03 mov esi, 0x67baea                                 |         
    0x0040cb08 mov edx, 0x10                                     |         
    0x0040cb0d call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "numIterations = ", 0x10);
    0x0040cb12 mov rdi, rax                                      |         rdi = rax;
    0x0040cb15 mov esi, r14d                                     |         esi = r14d;
    0x0040cb18 call 0x405010                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040cb1d mov rbp, rax                                      |         
    0x0040cb20 mov rax, qword [rax]                              |         rax = *(rax);
    0x0040cb23 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040cb27 add rsi, rbp                                      |         rsi += rbp;
    0x0040cb2a lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040cb32 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040cb37 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040cb3f mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040cb44 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040cb49 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040cb4c mov rdi, rax                                      |         rdi = rax;
    0x0040cb4f mov esi, 0xa                                      |         esi = 0xa;
    0x0040cb54 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040cb57 mov ebx, eax                                      |         ebx = eax;
    0x0040cb59 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040cb61 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040cb66 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x0040cb69 mov rdi, rbp                                      |         rdi = rbp;
    0x0040cb6c call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040cb71 mov rdi, rbp                                      |         rdi = rbp;
    0x0040cb74 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040cb79 mov rdi, r15                                      |         
    0x0040cb7c call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r15);
    0x0040cb81 mov edi, 0x91a328                                 |         
    0x0040cb86 mov esi, 0x67bafb                                 |         
    0x0040cb8b mov edx, 0x37                                     |         
    0x0040cb90 call 0x5bce00                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "======================================================\n", 0x37);
    0x0040cb95 jmp 0x40cb9d                                      |         
                                                                 |     } else {
    0x0040cb97 mov r14d, 0x3e8                                   |         r14d = 0x3e8;
                                                                 |     }
                                                                 | label_68:
    0x0040cb9d xorpd xmm0, xmm0                                  |     __asm ("xorpd xmm0, xmm0");
    0x0040cba1 movapd xmmword [rsp + 0x510], xmm0                |     __asm ("movapd xmmword [rsp + 0x510], xmm0");
    0x0040cbaa movapd xmmword [rsp + 0x530], xmm0                |     __asm ("movapd xmmword [rsp + 0x530], xmm0");
    0x0040cbb3 movupd xmmword [rsp + 0x53a], xmm0                |     __asm ("movupd xmmword [rsp + 0x53a], xmm0");
    0x0040cbbc call 0x6514f0                                     |     BloombergLP::bsls::TimeUtil::initialize() ();
    0x0040cbc1 xorpd xmm0, xmm0                                  |     __asm ("xorpd xmm0, xmm0");
    0x0040cbc5 movapd xmmword [rsp + 0x520], xmm0                |     __asm ("movapd xmmword [rsp + 0x520], xmm0");
    0x0040cbce cmp dword [rip + 0x50d803], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040cbd5 je 0x40cbfe                                       |         
    0x0040cbd7 cmp byte [rsp + 0x548], 0                         |         
                                                                 |         if (*((rsp + 0x548)) != 0) {
    0x0040cbdf jne 0x40cbfe                                      |             goto label_69;
                                                                 |         }
    0x0040cbe1 lea rdi, [rsp + 0x520]                            |         
    0x0040cbe9 mov byte [rsp + 0x549], 0                         |         *((rsp + 0x549)) = 0;
    0x0040cbf1 call 0x651540                                     |         BloombergLP::bsls::TimeUtil::getTimerRaw(timespec*) (rsp + 0x520);
    0x0040cbf6 mov byte [rsp + 0x548], 1                         |         *((rsp + 0x548)) = 1;
                                                                 |     }
                                                                 | label_69:
    0x0040cbfe xor esi, esi                                      |     
    0x0040cc00 cmp dword [rip + 0x50d7d9], 0                     |     
    0x0040cc07 setne sil                                         |     sil = (*(obj.veryVeryVerbose) != 0) ? 1 : 0;
    0x0040cc0b lea rdi, [rsp + 0x2c0]                            |     
    0x0040cc13 xor edx, edx                                      |     
    0x0040cc15 call 0x64e930                                     |     BloombergLP::bslma::TestAllocator::TestAllocator(bool,BloombergLP::bslma::Allocator*) (rsp + 0x2c0, 0, 0);
    0x0040cc1a lea rdi, [rsp + 0x68]                             |     
    0x0040cc1f lea rsi, [rsp + 0x2c0]                            |     
    0x0040cc27 call 0x64e780                                     |     BloombergLP::bslma::DefaultAllocatorGuard::DefaultAllocatorGuard(BloombergLP::bslma::Allocator*) (rsp + 0x68, rsp + 0x2c0);
    0x0040cc2c lea rbp, [rsp + 0xc0]                             |     rbp = rsp + 0xc0;
    0x0040cc34 mov rdi, rbp                                      |     
    0x0040cc37 xor esi, esi                                      |     
    0x0040cc39 call 0x64e860                                     |     BloombergLP::bslma::TestAllocator::TestAllocator(BloombergLP::bslma::Allocator*) (rbp, 0);
    0x0040cc3e mov qword [rip + 0x50d7c3], rbp                   |     *(obj.RemoveAllSafetyTest::alloc_p) = rbp;
    0x0040cc45 lea rdi, [rsp + 8]                                |     
    0x0040cc4a call 0x649c40                                     |     BloombergLP::bdlcc::SkipList_RandomLevelGenerator::SkipList_RandomLevelGenerator() (rsp + 8);
    0x0040cc4f mov dword [rsp + 0x10], 0                         |     *((rsp + 0x10)) = 0;
    0x0040cc57 lea rbx, [rsp + 0x28]                             |     rbx = rsp + 0x28;
    0x0040cc5c mov rdi, rbx                                      |     rdi = rbx;
    0x0040cc5f xor esi, esi                                      |     esi = 0;
    0x0040cc61 call 0x404cc0                                     |     pthread_mutex_init ();
    0x0040cc66 mov dword [rsp + 0x50], 0                         |     *((rsp + 0x50)) = 0;
    0x0040cc6e mov qword [rsp + 0x58], 0                         |     *((rsp + 0x58)) = 0;
    0x0040cc77 mov qword [rsp + 0x60], rbp                       |     *((rsp + 0x60)) = rbp;
    0x0040cc7c movaps xmm0, xmmword [rip + 0x26d84d]             |     xmm0 = "8HXhx";
    0x0040cc83 movaps xmmword [rsp + 0x440], xmm0                |     *((rsp + 0x440)) = xmm0;
    0x0040cc8b movaps xmm0, xmmword [rip + 0x26d84e]             |     xmm0 = *(0x0067a4e0);
    0x0040cc92 movaps xmmword [rsp + 0x450], xmm0                |     *((rsp + 0x450)) = xmm0;
    0x0040cc9a movaps xmm0, xmmword [rip + 0x26d84f]             |     xmm0 = *(0x0067a4f0);
    0x0040cca1 movaps xmmword [rsp + 0x460], xmm0                |     *((rsp + 0x460)) = xmm0;
    0x0040cca9 movaps xmm0, xmmword [rip + 0x26d850]             |     xmm0 = *(0x0067a500);
    0x0040ccb0 movaps xmmword [rsp + 0x470], xmm0                |     *((rsp + 0x470)) = xmm0;
    0x0040ccb8 movaps xmm0, xmmword [rip + 0x26d851]             |     xmm0 = *(0x0067a510);
    0x0040ccbf movaps xmmword [rsp + 0x480], xmm0                |     *((rsp + 0x480)) = xmm0;
    0x0040ccc7 movaps xmm0, xmmword [rip + 0x26d852]             |     xmm0 = *(0x0067a520);
    0x0040ccce movaps xmmword [rsp + 0x490], xmm0                |     *((rsp + 0x490)) = xmm0;
    0x0040ccd6 movaps xmm0, xmmword [rip + 0x26d853]             |     xmm0 = *(0x0067a530);
    0x0040ccdd movaps xmmword [rsp + 0x4a0], xmm0                |     *((rsp + 0x4a0)) = xmm0;
    0x0040cce5 movapd xmm0, xmmword [rip + 0x26d853]             |     __asm ("movapd xmm0, xmmword [0x0067a540]");
    0x0040cced movapd xmmword [rsp + 0x4b0], xmm0                |     __asm ("movapd xmmword [rsp + 0x4b0], xmm0");
    0x0040ccf6 lea rdi, [rsp + 0x440]                            |     
    0x0040ccfe mov esi, 0x20                                     |     
    0x0040cd03 mov rdx, rbp                                      |     
    0x0040cd06 call 0x64a120                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::createPoolManager(int*,int,BloombergLP::bslma::Allocator*) (rsp + 0x440, 0x20, rbp);
    0x0040cd0b mov qword [rsp + 0x58], rax                       |     *((rsp + 0x58)) = rax;
    0x0040cd10 mov rdi, rax                                      |     
    0x0040cd13 mov esi, 0x1f                                     |     
    0x0040cd18 call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (rax, 0x1f);
    0x0040cd1d mov qword [rsp + 0x18], rax                       |     *((rsp + 0x18)) = rax;
    0x0040cd22 mov rdi, qword [rsp + 0x58]                       |     
    0x0040cd27 mov esi, 0x1f                                     |     
    0x0040cd2c call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x58)), 0x1f);
    0x0040cd31 mov qword [rsp + 0x20], rax                       |     *((rsp + 0x20)) = rax;
    0x0040cd36 xor ecx, ecx                                      |     ecx = 0;
    0x0040cd38 nop dword [rax + rax]                             |     
                                                                 |     do {
    0x0040cd40 mov rax, qword [rsp + 0x18]                       |         rax = *((rsp + 0x18));
    0x0040cd45 mov qword [rax + rcx + 0x30], 0                   |         *((rax + rcx + 0x30)) = 0;
    0x0040cd4e mov rax, qword [rsp + 0x18]                       |         rax = *((rsp + 0x18));
    0x0040cd53 mov rdx, qword [rsp + 0x20]                       |         rdx = *((rsp + 0x20));
    0x0040cd58 mov qword [rax + rcx + 0x28], rdx                 |         *((rax + rcx + 0x28)) = rdx;
    0x0040cd5d mov rax, qword [rsp + 0x18]                       |         rax = *((rsp + 0x18));
    0x0040cd62 mov rdx, qword [rsp + 0x20]                       |         rdx = *((rsp + 0x20));
    0x0040cd67 mov qword [rdx + rcx + 0x30], rax                 |         *((rdx + rcx + 0x30)) = rax;
    0x0040cd6c mov rax, qword [rsp + 0x20]                       |         rax = *((rsp + 0x20));
    0x0040cd71 mov qword [rax + rcx + 0x28], 0                   |         *((rax + rcx + 0x28)) = 0;
    0x0040cd7a add rcx, 0x10                                     |         rcx += 0x10;
    0x0040cd7e cmp rcx, 0x200                                    |         
    0x0040cd85 jne 0x40cd40                                      |         
                                                                 |     } while (rcx != 0x200);
    0x0040cd87 lea rdi, [rsp + 0x440]                            |     
    0x0040cd8f lea rsi, [rsp + 0xc0]                             |     
    0x0040cd97 call 0x650030                                     |     BloombergLP::bslmt::ThreadGroup::ThreadGroup(BloombergLP::bslma::Allocator*) (rsp + 0x440, rsp + 0xc0);
    0x0040cd9c mov qword [rsp + 0x1e8], r14                      |     *((rsp + 0x1e8)) = r14;
    0x0040cda4 mov eax, r14d                                     |     eax = r14d;
    0x0040cda7 imul eax, dword [rsp]                             |     eax *= *(rsp);
    0x0040cdab mov dword [rsp + 0x70], eax                       |     *((rsp + 0x70)) = eax;
    0x0040cdaf xor r15d, r15d                                    |     r15d = 0;
    0x0040cdb2 lea r14, [rsp + 0x560]                            |     r14 = rsp + 0x560;
    0x0040cdba lea r12, [rsp + 0x558]                            |     r12 = rsp + 0x558;
    0x0040cdc2 mov dword [rsp + 0x1e0], 0                        |     *((rsp + 0x1e0)) = 0;
    0x0040cdcd jmp 0x40cde4                                      |     void (*0x40cde4)() ();
                                                                 | label_31:
    0x0040d437 mov rdi, r14                                      |     rdi = r14;
    0x0040d43a call 0x4053c0                                     |     pthread_mutex_unlock ();
                                                                 | label_33:
    0x0040d43f call 0x64fbf0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040d444 mov rbx, rax                                      |     rbx = rax;
    0x0040d447 mov rdi, rax                                      |     
    0x0040d44a call 0x64f8a0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040d44f mov edi, 0x67bc8c                                 |     edi = "0 == list.front(&firstItem)";
    0x0040d454 mov esi, 0x1562                                   |     esi = 0x1562;
    0x0040d459 call 0x405800                                     |     (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040d45e xor r15d, r15d                                    |     r15d = 0;
    0x0040d461 mov rdi, rbx                                      |     
    0x0040d464 call 0x64f9f0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040d469 xor r13d, r13d                                    |     r13d = 0;
                                                                 | label_32:
    0x0040d46c mov rdi, r14                                      |     rdi = r14;
    0x0040d46f call 0x4052c0                                     |     pthread_mutex_lock ();
    0x0040d474 mov rax, qword [rsp + 0x2d0]                      |     rax = *((rsp + 0x2d0));
    0x0040d47c mov rbp, qword [rsp + 0x2d8]                      |     rbp = *((rsp + 0x2d8));
    0x0040d484 mov rbx, qword [rax + 0x10]                       |     rbx = *((rax + 0x10));
    0x0040d488 mov rdi, r14                                      |     rdi = r14;
    0x0040d48b call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x0040d490 cmp rbp, rbx                                      |     
                                                                 |     if (rbp == rbx) {
    0x0040d493 jne 0x40d4bc                                      |         
    0x0040d495 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040d49a mov rbp, rax                                      |         
    0x0040d49d mov rdi, rax                                      |         
    0x0040d4a0 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040d4a5 mov edi, 0x67bca8                                 |         edi = "!list.isEmpty()";
    0x0040d4aa mov esi, 0x1564                                   |         esi = 0x1564;
    0x0040d4af call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040d4b4 mov rdi, rbp                                      |         
    0x0040d4b7 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbp);
                                                                 |     }
    0x0040d4bc lea rdi, [rsp + 0x2c0]                            |     
    0x0040d4c4 mov rsi, r13                                      |     
    0x0040d4c7 call 0x416ed0                                     |     BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>::remove(BloombergLP::bdlcc::SkipListPair<int,(anonymousnamespace)::u::CountedDelete>const*) (rsp + 0x2c0, r13);
    0x0040d4cc mov rdi, r14                                      |     rdi = r14;
    0x0040d4cf call 0x4052c0                                     |     pthread_mutex_lock ();
    0x0040d4d4 mov rax, qword [rsp + 0x2d0]                      |     rax = *((rsp + 0x2d0));
    0x0040d4dc mov rbx, qword [rsp + 0x2d8]                      |     rbx = *((rsp + 0x2d8));
    0x0040d4e4 mov rbp, qword [rax + 0x10]                       |     rbp = *((rax + 0x10));
    0x0040d4e8 mov rdi, r14                                      |     rdi = r14;
    0x0040d4eb call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x0040d4f0 cmp rbx, rbp                                      |     
                                                                 |     if (rbx != rbp) {
    0x0040d4f3 je 0x40d51c                                       |         
    0x0040d4f5 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040d4fa mov rbp, rax                                      |         
    0x0040d4fd mov rdi, rax                                      |         
    0x0040d500 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040d505 mov edi, 0x67bca9                                 |         edi = 0x67bca9;
    0x0040d50a mov esi, 0x1567                                   |         esi = 0x1567;
    0x0040d50f call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040d514 mov rdi, rbp                                      |         
    0x0040d517 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbp);
                                                                 |     }
    0x0040d51c mov eax, dword [rip + 0x50ceca]                   |     eax = (anonymous namespace)::u::CountedDelete::s_deleteCount;
    0x0040d522 test eax, eax                                     |     
                                                                 |     if (eax != 0) {
    0x0040d524 je 0x40d54d                                       |         
    0x0040d526 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040d52b mov rbp, rax                                      |         
    0x0040d52e mov rdi, rax                                      |         
    0x0040d531 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040d536 mov edi, 0x67ba6a                                 |         edi = "0 == u::CountedDelete::getDeleteCount()";
    0x0040d53b mov esi, 0x1568                                   |         esi = 0x1568;
    0x0040d540 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040d545 mov rdi, rbp                                      |         
    0x0040d548 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbp);
                                                                 |     }
    0x0040d54d test r13, r13                                     |     
                                                                 |     if (r13 != 0) {
    0x0040d550 je 0x40d578                                       |         
    0x0040d552 mov rdi, r13                                      |         
    0x0040d555 call 0x649ba0                                     |         eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (r13);
    0x0040d55a test eax, eax                                     |         
                                                                 |         if (eax != 0) {
    0x0040d55c jne 0x40d578                                      |             goto label_70;
                                                                 |         }
    0x0040d55e cmp byte [r13 + 8], 0                             |         
                                                                 |         if (*((r13 + 8)) == 0) {
    0x0040d563 jne 0x40d56c                                      |             
    0x0040d565 lock inc dword [rip + 0x50ce80]                   |             *(obj._anonymous_namespace_::u::CountedDelete::s_deleteCount)++;
                                                                 |         }
    0x0040d56c mov rdi, qword [r15 + 0x50]                       |         
    0x0040d570 mov rsi, r13                                      |         
    0x0040d573 call 0x64a300                                     |         BloombergLP::bdlcc::SkipList_PoolUtil::deallocate(BloombergLP::bdlcc::SkipList_PoolManager*,void*) (*((r15 + 0x50)), r13);
                                                                 |     }
                                                                 | label_70:
    0x0040d578 mov eax, dword [rip + 0x50ce6e]                   |     eax = (anonymous namespace)::u::CountedDelete::s_deleteCount;
    0x0040d57e cmp eax, 1                                        |     
                                                                 |     if (eax != 1) {
    0x0040d581 je 0x40d5aa                                       |         
    0x0040d583 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040d588 mov rbx, rax                                      |         rbx = rax;
    0x0040d58b mov rdi, rax                                      |         
    0x0040d58e call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040d593 mov edi, 0x67ba92                                 |         edi = "1 == u::CountedDelete::getDeleteCount()";
    0x0040d598 mov esi, 0x156a                                   |         esi = 0x156a;
    0x0040d59d call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040d5a2 mov rdi, rbx                                      |         
    0x0040d5a5 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040d5aa mov rdi, r14                                      |     rdi = r14;
    0x0040d5ad call 0x4052c0                                     |     pthread_mutex_lock ();
    0x0040d5b2 mov rax, qword [rsp + 0x2d0]                      |     rax = *((rsp + 0x2d0));
    0x0040d5ba mov rbx, qword [rsp + 0x2d8]                      |     rbx = *((rsp + 0x2d8));
    0x0040d5c2 mov rbp, qword [rax + 0x10]                       |     rbp = *((rax + 0x10));
    0x0040d5c6 mov rdi, r14                                      |     rdi = r14;
    0x0040d5c9 call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x0040d5ce cmp rbx, rbp                                      |     
                                                                 |     if (rbx != rbp) {
    0x0040d5d1 je 0x40d5fa                                       |         
    0x0040d5d3 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040d5d8 mov rbx, rax                                      |         rbx = rax;
    0x0040d5db mov rdi, rax                                      |         
    0x0040d5de call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040d5e3 mov edi, 0x67bca9                                 |         edi = 0x67bca9;
    0x0040d5e8 mov esi, 0x156c                                   |         esi = 0x156c;
    0x0040d5ed call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040d5f2 mov rdi, rbx                                      |         
    0x0040d5f5 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040d5fa mov dword [rsp + 0xc0], 0x384                     |     *((rsp + 0xc0)) = 0x384;
    0x0040d605 lea rbp, [rsp + 0x2c0]                            |     rbp = rsp + 0x2c0;
    0x0040d60d lea rsi, [rsp + 0xc0]                             |     
    0x0040d615 mov rdi, rbp                                      |     
    0x0040d618 call 0x415630                                     |     BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>::add(intconst&,(anonymousnamespace)::u::CountedDeleteconst&,bool*) (rbp, rsp + 0xc0);
    0x0040d61d mov rdi, r14                                      |     rdi = r14;
    0x0040d620 call 0x4052c0                                     |     pthread_mutex_lock ();
    0x0040d625 mov rax, qword [rsp + 0x2d0]                      |     rax = *((rsp + 0x2d0));
    0x0040d62d mov r13, qword [rax + 0x10]                       |     r13 = *((rax + 0x10));
    0x0040d631 cmp r13, qword [rsp + 0x2d8]                      |     
                                                                 |     if (r13 != *((rsp + 0x2d8))) {
    0x0040d639 je 0x40d655                                       |         
    0x0040d63b mov rdi, r13                                      |         
    0x0040d63e call 0x649be0                                     |         BloombergLP::bdlcc::SkipList_Control::incrementRefCount() (r13);
    0x0040d643 mov rdi, r14                                      |         rdi = r14;
    0x0040d646 call 0x4053c0                                     |         pthread_mutex_unlock ();
    0x0040d64b test r13, r13                                     |         
                                                                 |         if (r13 != 0) {
    0x0040d64e je 0x40d65d                                       |             
    0x0040d650 mov r15, rbp                                      |             r15 = rbp;
    0x0040d653 jmp 0x40d687                                      |             
                                                                 |         } else {
    0x0040d655 mov rdi, r14                                      |             rdi = r14;
    0x0040d658 call 0x4053c0                                     |             pthread_mutex_unlock ();
                                                                 |         }
    0x0040d65d call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040d662 mov rbx, rax                                      |         rbx = rax;
    0x0040d665 mov rdi, rax                                      |         
    0x0040d668 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040d66d mov edi, 0x67bc8c                                 |         edi = "0 == list.front(&firstItem)";
    0x0040d670 add byte [esi + 0x1571], bh                       |         *((esi + 0x1571)) += bh;
    0x0040d677 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040d67c mov rdi, rbx                                      |         
    0x0040d67f call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040d684 xor r13d, r13d                                    |         r13d = 0;
                                                                 |     }
    0x0040d687 mov rdi, r14                                      |     rdi = r14;
    0x0040d68a call 0x4052c0                                     |     pthread_mutex_lock ();
    0x0040d68f mov ebx, dword [rsp + 0x308]                      |     ebx = *((rsp + 0x308));
    0x0040d696 mov rdi, r14                                      |     rdi = r14;
    0x0040d699 call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x0040d69e cmp ebx, 1                                        |     
                                                                 |     if (ebx != 1) {
    0x0040d6a1 je 0x40d6ca                                       |         
    0x0040d6a3 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040d6a8 mov rbp, rax                                      |         
    0x0040d6ab mov rdi, rax                                      |         
    0x0040d6ae call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040d6b3 mov edi, 0x67bcb8                                 |         edi = "1 == list.length()";
    0x0040d6b8 mov esi, 0x1572                                   |         esi = 0x1572;
    0x0040d6bd call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040d6c2 mov rdi, rbp                                      |         
    0x0040d6c5 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbp);
                                                                 |     }
    0x0040d6ca test r13, r13                                     |     
                                                                 |     if (r13 != 0) {
    0x0040d6cd je 0x40d6f5                                       |         
    0x0040d6cf mov rdi, r13                                      |         
    0x0040d6d2 call 0x649ba0                                     |         eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (r13);
    0x0040d6d7 test eax, eax                                     |         
                                                                 |         if (eax != 0) {
    0x0040d6d9 jne 0x40d6f5                                      |             goto label_71;
                                                                 |         }
    0x0040d6db cmp byte [r13 + 8], 0                             |         
                                                                 |         if (*((r13 + 8)) == 0) {
    0x0040d6e0 jne 0x40d6e9                                      |             
    0x0040d6e2 lock inc dword [rip + 0x50cd03]                   |             *(obj._anonymous_namespace_::u::CountedDelete::s_deleteCount)++;
                                                                 |         }
    0x0040d6e9 mov rdi, qword [r15 + 0x50]                       |         
    0x0040d6ed mov rsi, r13                                      |         
    0x0040d6f0 call 0x64a300                                     |         BloombergLP::bdlcc::SkipList_PoolUtil::deallocate(BloombergLP::bdlcc::SkipList_PoolManager*,void*) (*((r15 + 0x50)), r13);
                                                                 |     }
                                                                 | label_71:
    0x0040d6f5 mov eax, dword [rip + 0x50ccf1]                   |     eax = (anonymous namespace)::u::CountedDelete::s_deleteCount;
    0x0040d6fb cmp eax, 1                                        |     
                                                                 |     if (eax != 1) {
    0x0040d6fe je 0x40d727                                       |         
    0x0040d700 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040d705 mov rbx, rax                                      |         rbx = rax;
    0x0040d708 mov rdi, rax                                      |         
    0x0040d70b call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040d710 mov edi, 0x67ba92                                 |         edi = "1 == u::CountedDelete::getDeleteCount()";
    0x0040d715 mov esi, 0x1575                                   |         esi = 0x1575;
    0x0040d71a call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040d71f mov rdi, rbx                                      |         
    0x0040d722 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040d727 mov dword [rsp + 0xc0], 0x3e8                     |     *((rsp + 0xc0)) = 0x3e8;
    0x0040d732 lea rbp, [rsp + 0x2c0]                            |     rbp = rsp + 0x2c0;
    0x0040d73a lea rsi, [rsp + 0xc0]                             |     
    0x0040d742 mov rdi, rbp                                      |     
    0x0040d745 call 0x415630                                     |     BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>::add(intconst&,(anonymousnamespace)::u::CountedDeleteconst&,bool*) (rbp, rsp + 0xc0);
    0x0040d74a mov rdi, r14                                      |     rdi = r14;
    0x0040d74d call 0x4052c0                                     |     pthread_mutex_lock ();
    0x0040d752 mov rax, qword [rsp + 0x2d0]                      |     rax = *((rsp + 0x2d0));
    0x0040d75a mov r13, qword [rax + 0x10]                       |     r13 = *((rax + 0x10));
    0x0040d75e cmp r13, qword [rsp + 0x2d8]                      |     
                                                                 |     if (r13 != *((rsp + 0x2d8))) {
    0x0040d766 je 0x40d782                                       |         
    0x0040d768 mov rdi, r13                                      |         
    0x0040d76b call 0x649be0                                     |         BloombergLP::bdlcc::SkipList_Control::incrementRefCount() (r13);
    0x0040d770 mov rdi, r14                                      |         rdi = r14;
    0x0040d773 call 0x4053c0                                     |         pthread_mutex_unlock ();
    0x0040d778 test r13, r13                                     |         
                                                                 |         if (r13 != 0) {
    0x0040d77b je 0x40d78a                                       |             
    0x0040d77d mov r15, rbp                                      |             r15 = rbp;
    0x0040d780 jmp 0x40d7b4                                      |             
                                                                 |         } else {
    0x0040d782 mov rdi, r14                                      |             rdi = r14;
    0x0040d785 call 0x4053c0                                     |             pthread_mutex_unlock ();
                                                                 |         }
    0x0040d78a call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040d78f mov rbx, rax                                      |         rbx = rax;
    0x0040d792 mov rdi, rax                                      |         
    0x0040d795 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040d79a mov edi, 0x67bc8c                                 |         edi = "0 == list.front(&firstItem)";
    0x0040d79f mov esi, 0x1579                                   |         esi = 0x1579;
    0x0040d7a4 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040d7a9 mov rdi, rbx                                      |         
    0x0040d7ac call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040d7b1 xor r13d, r13d                                    |         r13d = 0;
                                                                 |     }
    0x0040d7b4 lea r12, [rsp + 0x2c0]                            |     r12 = rsp + 0x2c0;
    0x0040d7bc mov rdi, r12                                      |     
    0x0040d7bf mov rsi, r13                                      |     
    0x0040d7c2 call 0x416ed0                                     |     BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>::remove(BloombergLP::bdlcc::SkipListPair<int,(anonymousnamespace)::u::CountedDelete>const*) (r12, r13);
    0x0040d7c7 mov eax, dword [rip + 0x50cc1f]                   |     eax = (anonymous namespace)::u::CountedDelete::s_deleteCount;
    0x0040d7cd cmp eax, 1                                        |     
                                                                 |     if (eax != 1) {
    0x0040d7d0 je 0x40d7f9                                       |         
    0x0040d7d2 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040d7d7 mov rbp, rax                                      |         
    0x0040d7da mov rdi, rax                                      |         
    0x0040d7dd call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040d7e2 mov edi, 0x67ba92                                 |         edi = "1 == u::CountedDelete::getDeleteCount()";
    0x0040d7e7 mov esi, 0x157b                                   |         esi = 0x157b;
    0x0040d7ec call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040d7f1 mov rdi, rbp                                      |         
    0x0040d7f4 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbp);
                                                                 |     }
    0x0040d7f9 mov rdi, r14                                      |     rdi = r14;
    0x0040d7fc call 0x4052c0                                     |     pthread_mutex_lock ();
    0x0040d801 mov rax, qword [rsp + 0x2d0]                      |     rax = *((rsp + 0x2d0));
    0x0040d809 mov rbp, qword [rax + 0x10]                       |     rbp = *((rax + 0x10));
    0x0040d80d cmp rbp, qword [rsp + 0x2d8]                      |     
                                                                 |     if (rbp != *((rsp + 0x2d8))) {
    0x0040d815 je 0x40d85c                                       |         
    0x0040d817 mov rdi, rbp                                      |         
    0x0040d81a call 0x649be0                                     |         BloombergLP::bdlcc::SkipList_Control::incrementRefCount() (rbp);
    0x0040d81f mov rdi, r14                                      |         rdi = r14;
    0x0040d822 call 0x4053c0                                     |         pthread_mutex_unlock ();
    0x0040d827 test rbp, rbp                                     |         
                                                                 |         if (rbp != 0) {
    0x0040d82a je 0x40d864                                       |             
    0x0040d82c test r13, r13                                     |             
                                                                 |             if (r13 != 0) {
    0x0040d82f je 0x40d857                                       |                 
    0x0040d831 mov rdi, r13                                      |                 
    0x0040d834 call 0x649ba0                                     |                 eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (r13);
    0x0040d839 test eax, eax                                     |                 
                                                                 |                 if (eax != 0) {
    0x0040d83b jne 0x40d857                                      |                     goto label_72;
                                                                 |                 }
    0x0040d83d cmp byte [r13 + 8], 0                             |                 
                                                                 |                 if (*((r13 + 8)) == 0) {
    0x0040d842 jne 0x40d84b                                      |                     
    0x0040d844 lock inc dword [rip + 0x50cba1]                   |                     *(obj._anonymous_namespace_::u::CountedDelete::s_deleteCount)++;
                                                                 |                 }
    0x0040d84b mov rdi, qword [r15 + 0x50]                       |                 
    0x0040d84f mov rsi, r13                                      |                 
    0x0040d852 call 0x64a300                                     |                 BloombergLP::bdlcc::SkipList_PoolUtil::deallocate(BloombergLP::bdlcc::SkipList_PoolManager*,void*) (*((r15 + 0x50)), r13);
                                                                 |             }
                                                                 | label_72:
    0x0040d857 mov r13, rbp                                      |             r13 = rbp;
    0x0040d85a jmp 0x40d88e                                      |             
                                                                 |         } else {
    0x0040d85c mov rdi, r14                                      |             rdi = r14;
    0x0040d85f call 0x4053c0                                     |             pthread_mutex_unlock ();
                                                                 |         }
    0x0040d864 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040d869 mov rbp, rax                                      |         
    0x0040d86c mov rdi, rax                                      |         
    0x0040d86f call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040d874 mov edi, 0x67bc8c                                 |         edi = "0 == list.front(&firstItem)";
    0x0040d879 mov esi, 0x157d                                   |         esi = 0x157d;
    0x0040d87e call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040d883 mov rdi, rbp                                      |         
    0x0040d886 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbp);
    0x0040d88b mov r12, r15                                      |         r12 = r15;
                                                                 |     }
    0x0040d88e mov eax, dword [rip + 0x50cb58]                   |     eax = (anonymous namespace)::u::CountedDelete::s_deleteCount;
    0x0040d894 cmp eax, 2                                        |     
                                                                 |     if (eax != 2) {
    0x0040d897 je 0x40d8c0                                       |         
    0x0040d899 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040d89e mov rbp, rax                                      |         
    0x0040d8a1 mov rdi, rax                                      |         
    0x0040d8a4 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040d8a9 mov edi, 0x67bccb                                 |         edi = "2 == u::CountedDelete::getDeleteCount()";
    0x0040d8ae mov esi, 0x157e                                   |         esi = 0x157e;
    0x0040d8b3 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040d8b8 mov rdi, rbp                                      |         
    0x0040d8bb call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbp);
                                                                 |     }
    0x0040d8c0 lea rdi, [rsp + 0x2c0]                            |     
    0x0040d8c8 mov r15, r12                                      |     r15 = r12;
    0x0040d8cb mov rsi, r13                                      |     
    0x0040d8ce call 0x416ed0                                     |     BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>::remove(BloombergLP::bdlcc::SkipListPair<int,(anonymousnamespace)::u::CountedDelete>const*) (rsp + 0x2c0, r13);
    0x0040d8d3 mov rdi, r14                                      |     rdi = r14;
    0x0040d8d6 call 0x4052c0                                     |     pthread_mutex_lock ();
    0x0040d8db mov rax, qword [rsp + 0x2d0]                      |     rax = *((rsp + 0x2d0));
    0x0040d8e3 mov rbx, qword [rsp + 0x2d8]                      |     rbx = *((rsp + 0x2d8));
    0x0040d8eb mov rbp, qword [rax + 0x10]                       |     rbp = *((rax + 0x10));
    0x0040d8ef mov rdi, r14                                      |     rdi = r14;
    0x0040d8f2 call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x0040d8f7 cmp rbx, rbp                                      |     
                                                                 |     if (rbx != rbp) {
    0x0040d8fa je 0x40d923                                       |         
    0x0040d8fc call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040d901 mov rbp, rax                                      |         
    0x0040d904 mov rdi, rax                                      |         
    0x0040d907 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040d90c mov edi, 0x67bca9                                 |         edi = 0x67bca9;
    0x0040d911 mov esi, 0x1582                                   |         esi = 0x1582;
    0x0040d916 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040d91b mov rdi, rbp                                      |         
    0x0040d91e call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbp);
                                                                 |     }
    0x0040d923 mov eax, dword [rip + 0x50cac3]                   |     eax = (anonymous namespace)::u::CountedDelete::s_deleteCount;
    0x0040d929 cmp eax, 2                                        |     
                                                                 |     if (eax != 2) {
    0x0040d92c je 0x40d955                                       |         
    0x0040d92e call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040d933 mov rbp, rax                                      |         
    0x0040d936 mov rdi, rax                                      |         
    0x0040d939 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040d93e mov edi, 0x67bccb                                 |         edi = "2 == u::CountedDelete::getDeleteCount()";
    0x0040d943 mov esi, 0x1583                                   |         esi = 0x1583;
    0x0040d948 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040d94d mov rdi, rbp                                      |         
    0x0040d950 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbp);
                                                                 |     }
    0x0040d955 test r13, r13                                     |     
                                                                 |     if (r13 != 0) {
    0x0040d958 je 0x40d987                                       |         
    0x0040d95a mov r15, r12                                      |         r15 = r12;
    0x0040d95d mov rdi, r13                                      |         
    0x0040d960 call 0x649ba0                                     |         eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (r13);
    0x0040d965 test eax, eax                                     |         
                                                                 |         if (eax != 0) {
    0x0040d967 jne 0x40d987                                      |             goto label_73;
                                                                 |         }
    0x0040d969 cmp byte [r13 + 8], 0                             |         
                                                                 |         if (*((r13 + 8)) == 0) {
    0x0040d96e jne 0x40d977                                      |             
    0x0040d970 lock inc dword [rip + 0x50ca75]                   |             *(obj._anonymous_namespace_::u::CountedDelete::s_deleteCount)++;
                                                                 |         }
    0x0040d977 mov rdi, qword [r12 + 0x50]                       |         
    0x0040d97c mov r15, r12                                      |         r15 = r12;
    0x0040d97f mov rsi, r13                                      |         
    0x0040d982 call 0x64a300                                     |         BloombergLP::bdlcc::SkipList_PoolUtil::deallocate(BloombergLP::bdlcc::SkipList_PoolManager*,void*) (*((r12 + 0x50)), r13);
                                                                 |     }
                                                                 | label_73:
    0x0040d987 mov eax, dword [rip + 0x50ca5f]                   |     eax = (anonymous namespace)::u::CountedDelete::s_deleteCount;
    0x0040d98d cmp eax, 3                                        |     
                                                                 |     if (eax != 3) {
    0x0040d990 je 0x40d9b9                                       |         
    0x0040d992 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040d997 mov rbx, rax                                      |         rbx = rax;
    0x0040d99a mov rdi, rax                                      |         
    0x0040d99d call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040d9a2 mov edi, 0x67bcf3                                 |         edi = "3 == u::CountedDelete::getDeleteCount()";
    0x0040d9a7 mov esi, 0x1585                                   |         esi = 0x1585;
    0x0040d9ac call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040d9b1 mov rdi, rbx                                      |         
    0x0040d9b4 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040d9b9 lea rdi, [rsp + 0x2c0]                            |     
    0x0040d9c1 call 0x415a50                                     |     BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>::~SkipList() (rsp + 0x2c0);
    0x0040d9c6 jmp 0x411d4d                                      |     void (*0x411d4d)() ();
                                                                 | label_39:
    0x0040d9cb mov rdi, rbp                                      |     rdi = rbp;
    0x0040d9ce call 0x4053c0                                     |     pthread_mutex_unlock ();
                                                                 | label_41:
    0x0040d9d3 mov eax, dword [rip + 0x50ca13]                   |     eax = (anonymous namespace)::u::CountedDelete::s_deleteCount;
    0x0040d9d9 cmp eax, 1                                        |     
                                                                 |     if (eax != 1) {
    0x0040d9dc je 0x40da4b                                       |         
    0x0040d9de call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040d9e3 mov rbx, rax                                      |         rbx = rax;
    0x0040d9e6 mov rdi, rax                                      |         
    0x0040d9e9 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040d9ee mov edi, 0x91a328                                 |         
    0x0040d9f3 mov esi, 0x67ba6f                                 |         
    0x0040d9f8 mov edx, 0x22                                     |         
    0x0040d9fd call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, 0x67ba6f, 0x22);
    0x0040da02 mov esi, 0x67aff6                                 |         
    0x0040da07 mov edx, 2                                        |         
    0x0040da0c mov rdi, rax                                      |         
    0x0040da0f call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67aff6, 2);
    0x0040da14 mov esi, dword [rip + 0x50c9d2]                   |         esi = (anonymous namespace)::u::CountedDelete::s_deleteCount;
    0x0040da1a mov rdi, rax                                      |         rdi = rax;
    0x0040da1d call 0x405010                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040da22 mov esi, 0x696200                                 |         
    0x0040da27 mov edx, 1                                        |         
    0x0040da2c mov rdi, rax                                      |         
    0x0040da2f call 0x5bce00                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x696200, 1);
    0x0040da34 mov edi, 0x67ba92                                 |         edi = "1 == u::CountedDelete::getDeleteCount()";
    0x0040da39 mov esi, 0x14d2                                   |         esi = 0x14d2;
    0x0040da3e call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040da43 mov rdi, rbx                                      |         
    0x0040da46 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040da4b mov rax, qword [rsp + 0x2e8]                      |     rax = *((rsp + 0x2e8));
    0x0040da53 test rax, rax                                     |     
                                                                 |     if (rax != 0) {
    0x0040da56 je 0x40da7f                                       |         
    0x0040da58 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040da5d mov rbx, rax                                      |         rbx = rax;
    0x0040da60 mov rdi, rax                                      |         
    0x0040da63 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040da68 mov edi, 0x67b7e8                                 |         edi = "0 == da.numAllocations()";
    0x0040da6d mov esi, 0x14d4                                   |         esi = 0x14d4;
    0x0040da72 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040da77 mov rdi, rbx                                      |         
    0x0040da7a call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040da7f mov rax, qword [rsp + 0xe8]                       |     rax = *((rsp + 0xe8));
    0x0040da87 test rax, rax                                     |     
                                                                 |     if (rax <= 0) {
    0x0040da8a jg 0x40dab3                                       |         
    0x0040da8c call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040da91 mov rbx, rax                                      |         rbx = rax;
    0x0040da94 mov rdi, rax                                      |         
    0x0040da97 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040da9c mov edi, 0x67baba                                 |         edi = "0 < ta.numAllocations()";
    0x0040daa1 mov esi, 0x14d5                                   |         esi = 0x14d5;
    0x0040daa6 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040daab mov rdi, rbx                                      |         
    0x0040daae call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040dab3 lea rdi, [rsp + 0x1f0]                            |     
    0x0040dabb call 0x650080                                     |     BloombergLP::bslmt::ThreadGroup::~ThreadGroup() (rsp + 0x1f0);
    0x0040dac0 lea rdi, [rsp + 0x440]                            |     
    0x0040dac8 call 0x415a50                                     |     BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>::~SkipList() (rsp + 0x440);
    0x0040dacd lea rdi, [rsp + 0xc0]                             |     
    0x0040dad5 call 0x64eb90                                     |     BloombergLP::bslma::TestAllocator::~TestAllocator() (rsp + 0xc0);
    0x0040dada lea rdi, [rsp + 0x1c0]                            |     
    0x0040dae2 call 0x64e7b0                                     |     BloombergLP::bslma::DefaultAllocatorGuard::~DefaultAllocatorGuard() (rsp + 0x1c0);
                                                                 | label_30:
    0x0040dae7 lea rdi, [rsp + 0x2c0]                            |     
    0x0040daef call 0x64eb90                                     |     eax = BloombergLP::bslma::TestAllocator::~TestAllocator() (rsp + 0x2c0);
    0x0040daf4 jmp 0x411d4d                                      |     void (*0x411d4d)() ();
                                                                 | label_53:
    0x0040daf9 test rcx, rcx                                     |     
                                                                 |     if (rcx != 0) {
    0x0040dafc je 0x40db0a                                       |         
    0x0040dafe test eax, eax                                     |         
                                                                 |         if (eax <= 0) {
    0x0040db00 jle 0x40db0a                                      |             goto label_54;
                                                                 |         }
    0x0040db02 inc rcx                                           |         rcx++;
    0x0040db05 add eax, 0xc4653600                               |         eax += 0xc4653600;
                                                                 |     }
                                                                 | label_54:
    0x0040db0a cvtsi2sd xmm0, rcx                                |     __asm ("cvtsi2sd xmm0, rcx");
    0x0040db0f cvtsi2sd xmm1, eax                                |     __asm ("cvtsi2sd xmm1, eax");
    0x0040db13 divsd xmm1, qword [rip + 0x26cd65]                |     __asm ("divsd xmm1, qword [0x0067a880]");
    0x0040db1b addsd xmm1, xmm0                                  |     __asm ("addsd xmm1, xmm0");
    0x0040db1f movsd qword [rsp], xmm1                           |     *(rsp) = xmm1;
    0x0040db24 ucomisd xmm1, qword [rip + 0x26cd5c]              |     __asm ("ucomisd xmm1, qword [0x0067a888]");
                                                                 |     if (eax < 0) {
    0x0040db2c jae 0x40db55                                      |         
    0x0040db2e call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040db33 mov rbx, rax                                      |         rbx = rax;
    0x0040db36 mov rdi, rax                                      |         
    0x0040db39 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040db3e mov edi, 0x67bddb                                 |         edi = "2.25 <= elapsed";
    0x0040db43 mov esi, 0x1682                                   |         esi = 0x1682;
    0x0040db48 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040db4d mov rdi, rbx                                      |         
    0x0040db50 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040db55 movsd xmm0, qword [rip + 0x26cd33]                |     xmm0 = *(0x0067a890);
    0x0040db5d ucomisd xmm0, qword [rsp]                         |     __asm ("ucomisd xmm0, qword [rsp]");
                                                                 |     if (eax <= 0) {
    0x0040db62 ja 0x40db8b                                       |         
    0x0040db64 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040db69 mov rbx, rax                                      |         rbx = rax;
    0x0040db6c mov rdi, rax                                      |         
    0x0040db6f call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040db74 mov edi, 0x67bdeb                                 |         edi = "elapsed < 2.75";
    0x0040db79 mov esi, 0x1683                                   |         esi = 0x1683;
    0x0040db7e call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040db83 mov rdi, rbx                                      |         
    0x0040db86 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040db8b cmp dword [rip + 0x50c84a], 0                     |     
                                                                 |     if (*(obj.veryVerbose) != 0) {
    0x0040db92 je 0x40dbc7                                       |         
    0x0040db94 mov edi, 0x91a328                                 |         
    0x0040db99 mov esi, 0x67bdfa                                 |         
    0x0040db9e mov edx, 9                                        |         
    0x0040dba3 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "Elapsed: ", 9);
    0x0040dba8 mov rdi, rax                                      |         rdi = rax;
    0x0040dbab movsd xmm0, qword [rsp]                           |         xmm0 = *(rsp);
    0x0040dbb0 call 0x405270                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (double) ();
    0x0040dbb5 mov esi, 0x67be04                                 |         
    0x0040dbba mov edx, 9                                        |         
    0x0040dbbf mov rdi, rax                                      |         
    0x0040dbc2 call 0x5bce00                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, " seconds\n", 9);
                                                                 |     }
    0x0040dbc7 mov rsi, qword [rsp + 0x440]                      |     rsi = *((rsp + 0x440));
    0x0040dbcf test rsi, rsi                                     |     
                                                                 |     if (rsi != 0) {
    0x0040dbd2 je 0x40dbe2                                       |         
    0x0040dbd4 mov rdi, qword [rsp + 0x458]                      |         rdi = *((rsp + 0x458));
    0x0040dbdc mov rax, qword [rdi]                              |         rax = *(rdi);
    0x0040dbdf call qword [rax + 0x18]                           |         uint64_t (*rax + 0x18)() ();
                                                                 |     }
    0x0040dbe2 lea rdi, [rsp + 0x2c0]                            |     
    0x0040dbea call 0x5b9e10                                     |     USAGE::SimpleScheduler::~SimpleScheduler() (rsp + 0x2c0);
    0x0040dbef jmp 0x411d4d                                      |     void (*0x411d4d)() ();
                                                                 | label_21:
    0x0040dbf4 mov rax, r15                                      |     rax = r15;
    0x0040dbf7 add rax, 8                                        |     rax += 8;
                                                                 | label_22:
    0x0040dbfb cmp byte [rax], 0x30                              |     
                                                                 |     if (*(rax) != 0x30) {
    0x0040dbfe je 0x40dc27                                       |         
                                                                 | label_20:
    0x0040dc00 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040dc05 mov rbx, rax                                      |         rbx = rax;
    0x0040dc08 mov rdi, rax                                      |         
    0x0040dc0b call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040dc10 mov edi, 0x67bea7                                 |         edi = "\"0\" == h2->data()";
    0x0040dc15 mov esi, 0x16ba                                   |         esi = 0x16ba;
    0x0040dc1a call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040dc1f mov rdi, rbx                                      |         
    0x0040dc22 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040dc27 mov rdi, r15                                      |     
    0x0040dc2a call 0x649ba0                                     |     eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (r15);
    0x0040dc2f test eax, eax                                     |     
                                                                 |     if (eax == 0) {
    0x0040dc31 jne 0x40dc60                                      |         
    0x0040dc33 cmp qword [r15 + 0x28], 0x17                      |         
                                                                 |         if (*((r15 + 0x28)) != 0x17) {
    0x0040dc38 je 0x40dc48                                       |             
    0x0040dc3a mov rsi, qword [r15 + 8]                          |             rsi = *((r15 + 8));
    0x0040dc3e mov rdi, qword [r15 + 0x30]                       |             rdi = *((r15 + 0x30));
    0x0040dc42 mov rax, qword [rdi]                              |             rax = *(rdi);
    0x0040dc45 call qword [rax + 0x18]                           |             uint64_t (*rax + 0x18)() ();
                                                                 |         }
    0x0040dc48 mov qword [r15 + 0x20], 0xffffffffffffffff        |         *((r15 + 0x20)) = 0xffffffffffffffff;
    0x0040dc50 mov rdi, qword [rsp + 0x490]                      |         
    0x0040dc58 mov rsi, r15                                      |         
    0x0040dc5b call 0x64a300                                     |         BloombergLP::bdlcc::SkipList_PoolUtil::deallocate(BloombergLP::bdlcc::SkipList_PoolManager*,void*) (*((rsp + 0x490)), r15);
                                                                 |     }
    0x0040dc60 lea rdi, [rsp + 0x440]                            |     
    0x0040dc68 call 0x5e9b60                                     |     rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::popFrontImp() (rsp + 0x440);
    0x0040dc6d mov r13, rax                                      |     r13 = rax;
    0x0040dc70 test rax, rax                                     |     
                                                                 |     if (rax == 0) {
    0x0040dc73 jne 0x40dc9f                                      |         
    0x0040dc75 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040dc7a mov rbx, rax                                      |         rbx = rax;
    0x0040dc7d mov rdi, rax                                      |         
    0x0040dc80 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040dc85 mov edi, 0x67be4d                                 |         edi = "ret==0";
    0x0040dc8a mov esi, 0x16be                                   |         esi = 0x16be;
    0x0040dc8f call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040dc94 mov rdi, rbx                                      |         
    0x0040dc97 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040dc9c mov r13, r15                                      |         r13 = r15;
                                                                 |     }
    0x0040dc9f cmp dword [rip + 0x50c732], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040dca6 je 0x40dde1                                       |         
    0x0040dcac call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040dcb1 mov r12, rax                                      |         r12 = rax;
    0x0040dcb4 mov rdi, rax                                      |         
    0x0040dcb7 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040dcbc mov edi, 0x91a328                                 |         
    0x0040dcc1 mov esi, 0x67be8c                                 |         
    0x0040dcc6 mov edx, 0xd                                      |         
    0x0040dccb call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "h2->data() = ", 0xd);
    0x0040dcd0 lea rsi, [r13 + 8]                                |         
    0x0040dcd4 mov rdi, rax                                      |         
    0x0040dcd7 call 0x5b9ea0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&bsl::operator << <char,std::_1::char_traits<char>,bsl::allocator<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>const&) (rax, r13 + 8);
    0x0040dcdc mov rbp, rax                                      |         
    0x0040dcdf mov rax, qword [rax]                              |         rax = *(rax);
    0x0040dce2 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040dce6 add rsi, rbp                                      |         rsi += rbp;
    0x0040dce9 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040dcf1 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040dcf6 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040dcfe mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040dd03 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040dd08 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040dd0b mov rdi, rax                                      |         rdi = rax;
    0x0040dd0e mov esi, 0xa                                      |         esi = 0xa;
    0x0040dd13 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040dd16 mov ebx, eax                                      |         ebx = eax;
    0x0040dd18 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040dd20 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040dd25 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x0040dd28 mov rdi, rbp                                      |         rdi = rbp;
    0x0040dd2b call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040dd30 mov rdi, rbp                                      |         rdi = rbp;
    0x0040dd33 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040dd38 mov rdi, r12                                      |         
    0x0040dd3b call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r12);
    0x0040dd40 cmp dword [rip + 0x50c691], 0                     |         
                                                                 |         if (*(obj.verbose) == 0) {
    0x0040dd47 je 0x40dde1                                       |             goto label_74;
                                                                 |         }
    0x0040dd4d call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040dd52 mov r12, rax                                      |         r12 = rax;
    0x0040dd55 mov rdi, rax                                      |         
    0x0040dd58 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040dd5d mov edi, 0x91a328                                 |         
    0x0040dd62 mov esi, 0x67be9a                                 |         
    0x0040dd67 mov edx, 0xc                                      |         
    0x0040dd6c call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "h2->key() = ", 0xc);
    0x0040dd71 mov esi, dword [r13 + 0x38]                       |         esi = *((r13 + 0x38));
    0x0040dd75 mov rdi, rax                                      |         rdi = rax;
    0x0040dd78 call 0x405010                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040dd7d mov rbp, rax                                      |         
    0x0040dd80 mov rax, qword [rax]                              |         rax = *(rax);
    0x0040dd83 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040dd87 add rsi, rbp                                      |         rsi += rbp;
    0x0040dd8a lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040dd92 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040dd97 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040dd9f mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040dda4 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040dda9 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040ddac mov rdi, rax                                      |         rdi = rax;
    0x0040ddaf mov esi, 0xa                                      |         esi = 0xa;
    0x0040ddb4 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040ddb7 mov ebx, eax                                      |         ebx = eax;
    0x0040ddb9 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040ddc1 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040ddc6 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x0040ddc9 mov rdi, rbp                                      |         rdi = rbp;
    0x0040ddcc call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040ddd1 mov rdi, rbp                                      |         rdi = rbp;
    0x0040ddd4 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040ddd9 mov rdi, r12                                      |         
    0x0040dddc call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r12);
                                                                 |     }
                                                                 | label_74:
    0x0040dde1 cmp qword [r13 + 0x20], 1                         |     
                                                                 |     if (*((r13 + 0x20)) == 1) {
    0x0040dde6 jne 0x40ddfe                                      |         
    0x0040dde8 cmp qword [r13 + 0x28], 0x17                      |         
                                                                 |         if (*((r13 + 0x28)) != 0x17) {
    0x0040dded je 0x40ddf5                                       |             
    0x0040ddef mov rax, qword [r13 + 8]                          |             rax = *((r13 + 8));
    0x0040ddf3 jmp 0x40ddf9                                      |             
                                                                 |         } else {
    0x0040ddf5 lea rax, [r13 + 8]                                |             rax = r13 + 8;
                                                                 |         }
    0x0040ddf9 cmp byte [rax], 0x31                              |         
                                                                 |         if (*(rax) == 0x31) {
    0x0040ddfc je 0x40de25                                       |             goto label_75;
                                                                 |         }
                                                                 |     }
    0x0040ddfe call 0x64fbf0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040de03 mov rbp, rax                                      |     
    0x0040de06 mov rdi, rax                                      |     
    0x0040de09 call 0x64f8a0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040de0e mov edi, 0x67beb9                                 |     edi = "\"1\" == h2->data()";
    0x0040de13 mov esi, 0x16c1                                   |     esi = 0x16c1;
    0x0040de18 call 0x405800                                     |     (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040de1d mov rdi, rbp                                      |     
    0x0040de20 call 0x64f9f0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbp);
                                                                 | label_75:
    0x0040de25 mov rdi, r13                                      |     
    0x0040de28 call 0x649ba0                                     |     eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (r13);
    0x0040de2d test eax, eax                                     |     
                                                                 |     if (eax == 0) {
    0x0040de2f jne 0x40de5e                                      |         
    0x0040de31 cmp qword [r13 + 0x28], 0x17                      |         
                                                                 |         if (*((r13 + 0x28)) != 0x17) {
    0x0040de36 je 0x40de46                                       |             
    0x0040de38 mov rsi, qword [r13 + 8]                          |             rsi = *((r13 + 8));
    0x0040de3c mov rdi, qword [r13 + 0x30]                       |             rdi = *((r13 + 0x30));
    0x0040de40 mov rax, qword [rdi]                              |             rax = *(rdi);
    0x0040de43 call qword [rax + 0x18]                           |             uint64_t (*rax + 0x18)() ();
                                                                 |         }
    0x0040de46 mov qword [r13 + 0x20], 0xffffffffffffffff        |         *((r13 + 0x20)) = 0xffffffffffffffff;
    0x0040de4e mov rdi, qword [rsp + 0x490]                      |         
    0x0040de56 mov rsi, r13                                      |         
    0x0040de59 call 0x64a300                                     |         BloombergLP::bdlcc::SkipList_PoolUtil::deallocate(BloombergLP::bdlcc::SkipList_PoolManager*,void*) (*((rsp + 0x490)), r13);
                                                                 |     }
    0x0040de5e lea rdi, [rsp + 0x440]                            |     
    0x0040de66 call 0x5e9b60                                     |     rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::popFrontImp() (rsp + 0x440);
    0x0040de6b mov rbp, rax                                      |     
    0x0040de6e test rax, rax                                     |     
                                                                 |     if (rax == 0) {
    0x0040de71 jne 0x40de9d                                      |         
    0x0040de73 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040de78 mov rbp, rax                                      |         
    0x0040de7b mov rdi, rax                                      |         
    0x0040de7e call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040de83 mov edi, 0x67be4d                                 |         edi = "ret==0";
    0x0040de88 mov esi, 0x16c5                                   |         esi = 0x16c5;
    0x0040de8d call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040de92 mov rdi, rbp                                      |         
    0x0040de95 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbp);
    0x0040de9a mov rbp, r13                                      |         
                                                                 |     }
    0x0040de9d mov rdi, r14                                      |     rdi = r14;
    0x0040dea0 call 0x4052c0                                     |     pthread_mutex_lock ();
    0x0040dea5 mov ebx, dword [rsp + 0x488]                      |     ebx = *((rsp + 0x488));
    0x0040deac mov rdi, r14                                      |     rdi = r14;
    0x0040deaf call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x0040deb4 cmp ebx, 1                                        |     
                                                                 |     if (ebx != 1) {
    0x0040deb7 je 0x40dee0                                       |         
    0x0040deb9 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040debe mov rbx, rax                                      |         rbx = rax;
    0x0040dec1 mov rdi, rax                                      |         
    0x0040dec4 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040dec9 mov edi, 0x67becb                                 |         edi = "1 == X2.length()";
    0x0040dece mov esi, 0x16c6                                   |         esi = 0x16c6;
    0x0040ded3 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040ded8 mov rdi, rbx                                      |         
    0x0040dedb call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040dee0 cmp dword [rip + 0x50c4f1], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040dee7 je 0x40e025                                       |         
    0x0040deed call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040def2 mov r12, rax                                      |         r12 = rax;
    0x0040def5 mov rdi, rax                                      |         
    0x0040def8 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040defd mov edi, 0x91a328                                 |         
    0x0040df02 mov esi, 0x67be8c                                 |         
    0x0040df07 mov edx, 0xd                                      |         
    0x0040df0c call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "h2->data() = ", 0xd);
    0x0040df11 lea rsi, [rbp + 8]                                |         
    0x0040df15 mov rdi, rax                                      |         
    0x0040df18 call 0x5b9ea0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&bsl::operator << <char,std::_1::char_traits<char>,bsl::allocator<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>const&) (rax, rbp + 8);
    0x0040df1d mov rbx, rax                                      |         rbx = rax;
    0x0040df20 mov rax, qword [rax]                              |         rax = *(rax);
    0x0040df23 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040df27 add rsi, rbx                                      |         rsi += rbx;
    0x0040df2a lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040df32 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040df37 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040df3f mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040df44 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040df49 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040df4c mov rdi, rax                                      |         rdi = rax;
    0x0040df4f mov esi, 0xa                                      |         esi = 0xa;
    0x0040df54 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040df57 mov r13d, eax                                     |         r13d = eax;
    0x0040df5a lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040df62 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040df67 movsx esi, r13b                                   |         esi = (int32_t) r13b;
    0x0040df6b mov rdi, rbx                                      |         rdi = rbx;
    0x0040df6e call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040df73 mov rdi, rbx                                      |         rdi = rbx;
    0x0040df76 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040df7b mov rdi, r12                                      |         
    0x0040df7e call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r12);
    0x0040df83 cmp dword [rip + 0x50c44e], 0                     |         
                                                                 |         if (*(obj.verbose) == 0) {
    0x0040df8a je 0x40e025                                       |             goto label_76;
                                                                 |         }
    0x0040df90 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040df95 mov r12, rax                                      |         r12 = rax;
    0x0040df98 mov rdi, rax                                      |         
    0x0040df9b call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040dfa0 mov edi, 0x91a328                                 |         
    0x0040dfa5 mov esi, 0x67be9a                                 |         
    0x0040dfaa mov edx, 0xc                                      |         
    0x0040dfaf call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "h2->key() = ", 0xc);
    0x0040dfb4 mov esi, dword [rbp + 0x38]                       |         esi = *((rbp + 0x38));
    0x0040dfb7 mov rdi, rax                                      |         rdi = rax;
    0x0040dfba call 0x405010                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040dfbf mov rbx, rax                                      |         rbx = rax;
    0x0040dfc2 mov rax, qword [rax]                              |         rax = *(rax);
    0x0040dfc5 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040dfc9 add rsi, rbx                                      |         rsi += rbx;
    0x0040dfcc lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040dfd4 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040dfd9 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040dfe1 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040dfe6 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040dfeb mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040dfee mov rdi, rax                                      |         rdi = rax;
    0x0040dff1 mov esi, 0xa                                      |         esi = 0xa;
    0x0040dff6 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040dff9 mov r13d, eax                                     |         r13d = eax;
    0x0040dffc lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040e004 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040e009 movsx esi, r13b                                   |         esi = (int32_t) r13b;
    0x0040e00d mov rdi, rbx                                      |         rdi = rbx;
    0x0040e010 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040e015 mov rdi, rbx                                      |         rdi = rbx;
    0x0040e018 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040e01d mov rdi, r12                                      |         
    0x0040e020 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r12);
                                                                 |     }
                                                                 | label_76:
    0x0040e025 cmp qword [rbp + 0x20], 1                         |     
                                                                 |     if (*((rbp + 0x20)) == 1) {
    0x0040e02a jne 0x40e042                                      |         
    0x0040e02c cmp qword [rbp + 0x28], 0x17                      |         
                                                                 |         if (*((rbp + 0x28)) != 0x17) {
    0x0040e031 je 0x40e039                                       |             
    0x0040e033 mov rax, qword [rbp + 8]                          |             rax = *((rbp + 8));
    0x0040e037 jmp 0x40e03d                                      |             
                                                                 |         } else {
    0x0040e039 lea rax, [rbp + 8]                                |             rax = rbp + 8;
                                                                 |         }
    0x0040e03d cmp byte [rax], 0x32                              |         
                                                                 |         if (*(rax) == 0x32) {
    0x0040e040 je 0x40e069                                       |             goto label_77;
                                                                 |         }
                                                                 |     }
    0x0040e042 call 0x64fbf0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040e047 mov rbx, rax                                      |     rbx = rax;
    0x0040e04a mov rdi, rax                                      |     
    0x0040e04d call 0x64f8a0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040e052 mov edi, 0x67bedc                                 |     edi = "\"2\" == h2->data()";
    0x0040e057 mov esi, 0x16c9                                   |     esi = 0x16c9;
    0x0040e05c call 0x405800                                     |     (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040e061 mov rdi, rbx                                      |     
    0x0040e064 call 0x64f9f0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 | label_77:
    0x0040e069 mov rdi, rbp                                      |     
    0x0040e06c call 0x649ba0                                     |     eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (rbp);
    0x0040e071 test eax, eax                                     |     
                                                                 |     if (eax == 0) {
    0x0040e073 jne 0x40e0a2                                      |         
    0x0040e075 cmp qword [rbp + 0x28], 0x17                      |         
                                                                 |         if (*((rbp + 0x28)) != 0x17) {
    0x0040e07a je 0x40e08a                                       |             
    0x0040e07c mov rsi, qword [rbp + 8]                          |             rsi = *((rbp + 8));
    0x0040e080 mov rdi, qword [rbp + 0x30]                       |             rdi = *((rbp + 0x30));
    0x0040e084 mov rax, qword [rdi]                              |             rax = *(rdi);
    0x0040e087 call qword [rax + 0x18]                           |             uint64_t (*rax + 0x18)() ();
                                                                 |         }
    0x0040e08a mov qword [rbp + 0x20], 0xffffffffffffffff        |         *((rbp + 0x20)) = 0xffffffffffffffff;
    0x0040e092 mov rdi, qword [rsp + 0x490]                      |         
    0x0040e09a mov rsi, rbp                                      |         
    0x0040e09d call 0x64a300                                     |         BloombergLP::bdlcc::SkipList_PoolUtil::deallocate(BloombergLP::bdlcc::SkipList_PoolManager*,void*) (*((rsp + 0x490)), rbp);
                                                                 |     }
    0x0040e0a2 xor ebp, ebp                                      |     ebp = 0;
    0x0040e0a4 lea rbx, [rsp + 0x440]                            |     rbx = rsp + 0x440;
    0x0040e0ac xor r15d, r15d                                    |     r15d = 0;
    0x0040e0af mov rdi, rbx                                      |     
    0x0040e0b2 call 0x5e9b60                                     |     rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::popFrontImp() (rbx);
    0x0040e0b7 test rax, rax                                     |     
                                                                 |     if (rax != 0) {
    0x0040e0ba je 0x40e0c4                                       |         
    0x0040e0bc mov r15, rax                                      |         r15 = rax;
    0x0040e0bf mov rbp, rbx                                      |         
    0x0040e0c2 jmp 0x40e0f0                                      |         
                                                                 |     } else {
    0x0040e0c4 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040e0c9 mov rbx, rax                                      |         rbx = rax;
    0x0040e0cc mov rdi, rax                                      |         
    0x0040e0cf call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040e0d4 mov edi, 0x67be4d                                 |         edi = "ret==0";
    0x0040e0d9 mov esi, 0x16ce                                   |         esi = 0x16ce;
    0x0040e0de call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040e0e3 xor r15d, r15d                                    |         r15d = 0;
    0x0040e0e6 mov rdi, rbx                                      |         
    0x0040e0e9 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040e0ee xor ebp, ebp                                      |         ebp = 0;
                                                                 |     }
    0x0040e0f0 cmp dword [rip + 0x50c2e1], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040e0f7 je 0x40e236                                       |         
    0x0040e0fd call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040e102 mov r12, rax                                      |         r12 = rax;
    0x0040e105 mov rdi, rax                                      |         
    0x0040e108 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040e10d mov edi, 0x91a328                                 |         
    0x0040e112 mov esi, 0x67beee                                 |         
    0x0040e117 mov edx, 0xd                                      |         
    0x0040e11c call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "h2h.data() = ", 0xd);
    0x0040e121 lea rsi, [r15 + 8]                                |         
    0x0040e125 mov rdi, rax                                      |         
    0x0040e128 call 0x5b9ea0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&bsl::operator << <char,std::_1::char_traits<char>,bsl::allocator<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>const&) (rax, r15 + 8);
    0x0040e12d mov rbx, rax                                      |         rbx = rax;
    0x0040e130 mov rax, qword [rax]                              |         rax = *(rax);
    0x0040e133 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040e137 add rsi, rbx                                      |         rsi += rbx;
    0x0040e13a lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040e142 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040e147 lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040e14f mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040e154 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040e159 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040e15c mov rdi, rax                                      |         rdi = rax;
    0x0040e15f mov esi, 0xa                                      |         esi = 0xa;
    0x0040e164 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040e167 mov r13d, eax                                     |         r13d = eax;
    0x0040e16a lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040e172 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040e177 movsx esi, r13b                                   |         esi = (int32_t) r13b;
    0x0040e17b mov rdi, rbx                                      |         rdi = rbx;
    0x0040e17e call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040e183 mov rdi, rbx                                      |         rdi = rbx;
    0x0040e186 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040e18b mov rdi, r12                                      |         
    0x0040e18e call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r12);
    0x0040e193 cmp dword [rip + 0x50c23e], 0                     |         
                                                                 |         if (*(obj.verbose) == 0) {
    0x0040e19a je 0x40e236                                       |             goto label_78;
                                                                 |         }
    0x0040e1a0 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040e1a5 mov r12, rax                                      |         r12 = rax;
    0x0040e1a8 mov rdi, rax                                      |         
    0x0040e1ab call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040e1b0 mov edi, 0x91a328                                 |         
    0x0040e1b5 mov esi, 0x67befc                                 |         
    0x0040e1ba mov edx, 0xc                                      |         
    0x0040e1bf call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "h2h.key() = ", 0xc);
    0x0040e1c4 mov esi, dword [r15 + 0x38]                       |         esi = *((r15 + 0x38));
    0x0040e1c8 mov rdi, rax                                      |         rdi = rax;
    0x0040e1cb call 0x405010                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040e1d0 mov rbx, rax                                      |         rbx = rax;
    0x0040e1d3 mov rax, qword [rax]                              |         rax = *(rax);
    0x0040e1d6 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040e1da add rsi, rbx                                      |         rsi += rbx;
    0x0040e1dd lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040e1e5 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040e1ea lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040e1f2 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040e1f7 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040e1fc mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040e1ff mov rdi, rax                                      |         rdi = rax;
    0x0040e202 mov esi, 0xa                                      |         esi = 0xa;
    0x0040e207 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040e20a mov r13d, eax                                     |         r13d = eax;
    0x0040e20d lea rdi, [rsp + 0x2c0]                            |         rdi = rsp + 0x2c0;
    0x0040e215 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040e21a movsx esi, r13b                                   |         esi = (int32_t) r13b;
    0x0040e21e mov rdi, rbx                                      |         rdi = rbx;
    0x0040e221 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040e226 mov rdi, rbx                                      |         rdi = rbx;
    0x0040e229 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040e22e mov rdi, r12                                      |         
    0x0040e231 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r12);
                                                                 |     }
                                                                 | label_78:
    0x0040e236 cmp qword [r15 + 0x20], 1                         |     
                                                                 |     if (*((r15 + 0x20)) == 1) {
    0x0040e23b jne 0x40e253                                      |         
    0x0040e23d cmp qword [r15 + 0x28], 0x17                      |         
                                                                 |         if (*((r15 + 0x28)) != 0x17) {
    0x0040e242 je 0x40e24a                                       |             
    0x0040e244 mov rax, qword [r15 + 8]                          |             rax = *((r15 + 8));
    0x0040e248 jmp 0x40e24e                                      |             
                                                                 |         } else {
    0x0040e24a lea rax, [r15 + 8]                                |             rax = r15 + 8;
                                                                 |         }
    0x0040e24e cmp byte [rax], 0x33                              |         
                                                                 |         if (*(rax) == 0x33) {
    0x0040e251 je 0x40e27a                                       |             goto label_79;
                                                                 |         }
                                                                 |     }
    0x0040e253 call 0x64fbf0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040e258 mov rbx, rax                                      |     rbx = rax;
    0x0040e25b mov rdi, rax                                      |     
    0x0040e25e call 0x64f8a0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040e263 mov edi, 0x67bf09                                 |     edi = "\"3\" == h2h.data()";
    0x0040e268 mov esi, 0x16d2                                   |     esi = 0x16d2;
    0x0040e26d call 0x405800                                     |     (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040e272 mov rdi, rbx                                      |     
    0x0040e275 call 0x64f9f0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 | label_79:
    0x0040e27a mov r13, rbp                                      |     r13 = rbp;
    0x0040e27d mov rdi, r14                                      |     rdi = r14;
    0x0040e280 call 0x4052c0                                     |     pthread_mutex_lock ();
    0x0040e285 mov ebx, dword [rsp + 0x488]                      |     ebx = *((rsp + 0x488));
    0x0040e28c mov rdi, r14                                      |     rdi = r14;
    0x0040e28f call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x0040e294 test ebx, ebx                                     |     
                                                                 |     if (ebx != 0) {
    0x0040e296 je 0x40e2bf                                       |         
    0x0040e298 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040e29d mov rbx, rax                                      |         rbx = rax;
    0x0040e2a0 mov rdi, rax                                      |         
    0x0040e2a3 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040e2a8 mov edi, 0x67bf1b                                 |         edi = "0 == X2.length()";
    0x0040e2ad mov esi, 0x16d4                                   |         esi = 0x16d4;
    0x0040e2b2 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040e2b7 mov rdi, rbx                                      |         
    0x0040e2ba call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040e2bf mov rdi, r14                                      |     rdi = r14;
    0x0040e2c2 call 0x4052c0                                     |     pthread_mutex_lock ();
    0x0040e2c7 mov rax, qword [rsp + 0x450]                      |     rax = *((rsp + 0x450));
    0x0040e2cf mov rbx, qword [rsp + 0x458]                      |     rbx = *((rsp + 0x458));
    0x0040e2d7 mov rbp, qword [rax + 0x40]                       |     rbp = *((rax + 0x40));
    0x0040e2db mov rdi, r14                                      |     rdi = r14;
    0x0040e2de call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x0040e2e3 cmp rbx, rbp                                      |     
    0x0040e2e6 mov rbp, r13                                      |     
                                                                 |     if (rbx != rbp) {
    0x0040e2e9 je 0x40e312                                       |         
    0x0040e2eb call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040e2f0 mov rbx, rax                                      |         rbx = rax;
    0x0040e2f3 mov rdi, rax                                      |         
    0x0040e2f6 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040e2fb mov edi, 0x67be6e                                 |         edi = 0x67be6e;
    0x0040e300 mov esi, 0x16d5                                   |         esi = 0x16d5;
    0x0040e305 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040e30a mov rdi, rbx                                      |         
    0x0040e30d call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040e312 lea r14, [rsp + 0x440]                            |     r14 = rsp + 0x440;
    0x0040e31a mov rdi, r14                                      |     
    0x0040e31d call 0x5e9b60                                     |     rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::popFrontImp() (r14);
    0x0040e322 mov rbx, rax                                      |     rbx = rax;
    0x0040e325 test rax, rax                                     |     
                                                                 |     if (rax != 0) {
    0x0040e328 je 0x40e391                                       |         
    0x0040e32a mov rdi, r15                                      |         
    0x0040e32d call 0x649ba0                                     |         eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (r15);
    0x0040e332 test eax, eax                                     |         
                                                                 |         if (eax == 0) {
    0x0040e334 jne 0x40e35f                                      |             
    0x0040e336 cmp qword [r15 + 0x28], 0x17                      |             
                                                                 |             if (*((r15 + 0x28)) != 0x17) {
    0x0040e33b je 0x40e34b                                       |                 
    0x0040e33d mov rsi, qword [r15 + 8]                          |                 rsi = *((r15 + 8));
    0x0040e341 mov rdi, qword [r15 + 0x30]                       |                 rdi = *((r15 + 0x30));
    0x0040e345 mov rax, qword [rdi]                              |                 rax = *(rdi);
    0x0040e348 call qword [rax + 0x18]                           |                 uint64_t (*rax + 0x18)() ();
                                                                 |             }
    0x0040e34b mov qword [r15 + 0x20], 0xffffffffffffffff        |             *((r15 + 0x20)) = 0xffffffffffffffff;
    0x0040e353 mov rdi, qword [rbp + 0x50]                       |             
    0x0040e357 mov rsi, r15                                      |             
    0x0040e35a call 0x64a300                                     |             BloombergLP::bdlcc::SkipList_PoolUtil::deallocate(BloombergLP::bdlcc::SkipList_PoolManager*,void*) (*((rbp + 0x50)), r15);
                                                                 |         }
    0x0040e35f call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040e364 mov rbp, rax                                      |         
    0x0040e367 mov rdi, rax                                      |         
    0x0040e36a call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040e36f mov edi, 0x67bf2c                                 |         edi = "ret == Obj::e_NOT_FOUND";
    0x0040e374 mov esi, 0x16d8                                   |         esi = 0x16d8;
    0x0040e379 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040e37e mov rdi, rbp                                      |         
    0x0040e381 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbp);
    0x0040e386 lea rbp, [rsp + 0x440]                            |         rbp = rsp + 0x440;
    0x0040e38e mov r15, rbx                                      |         r15 = rbx;
                                                                 |     }
    0x0040e391 mov rdi, r15                                      |     
    0x0040e394 call 0x649ba0                                     |     eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (rbx);
    0x0040e399 test eax, eax                                     |     
                                                                 |     if (eax == 0) {
    0x0040e39b jne 0x40e3c6                                      |         
    0x0040e39d cmp qword [r15 + 0x28], 0x17                      |         
                                                                 |         if (*((r15 + 0x28)) != 0x17) {
    0x0040e3a2 je 0x40e3b2                                       |             
    0x0040e3a4 mov rsi, qword [r15 + 8]                          |             rsi = *((r15 + 8));
    0x0040e3a8 mov rdi, qword [r15 + 0x30]                       |             rdi = *((r15 + 0x30));
    0x0040e3ac mov rax, qword [rdi]                              |             rax = *(rdi);
    0x0040e3af call qword [rax + 0x18]                           |             uint64_t (*rax + 0x18)() ();
                                                                 |         }
    0x0040e3b2 mov qword [r15 + 0x20], 0xffffffffffffffff        |         *((r15 + 0x20)) = 0xffffffffffffffff;
    0x0040e3ba mov rdi, qword [rbp + 0x50]                       |         
    0x0040e3be mov rsi, r15                                      |         
    0x0040e3c1 call 0x64a300                                     |         BloombergLP::bdlcc::SkipList_PoolUtil::deallocate(BloombergLP::bdlcc::SkipList_PoolManager*,void*) (*((rbp + 0x50)), r15);
                                                                 |     }
    0x0040e3c6 lea rdi, [rsp + 0x440]                            |     
    0x0040e3ce call 0x454c10                                     |     BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::~SkipList() (rsp + 0x440);
    0x0040e3d3 cmp qword [rsp + 0x210], 0x17                     |     
                                                                 |     if (*((rsp + 0x210)) != 0x17) {
    0x0040e3dc je 0x40e3f4                                       |         
    0x0040e3de mov rsi, qword [rsp + 0x1f0]                      |         rsi = *((rsp + 0x1f0));
    0x0040e3e6 mov rdi, qword [rsp + 0x218]                      |         rdi = *((rsp + 0x218));
    0x0040e3ee mov rax, qword [rdi]                              |         rax = *(rdi);
    0x0040e3f1 call qword [rax + 0x18]                           |         uint64_t (*rax + 0x18)() ();
                                                                 |     }
    0x0040e3f4 mov rax, qword [rsp + 0xd0]                       |     rax = *((rsp + 0xd0));
    0x0040e3fc mov rbx, qword [rax + 0x18]                       |     rbx = *((rax + 0x18));
    0x0040e400 cmp rbx, qword [rsp + 0xd8]                       |     
                                                                 |     if (rbx == *((rsp + 0xd8))) {
    0x0040e408 je 0x40e426                                       |         goto label_80;
                                                                 |     }
    0x0040e40a nop word [rax + rax]                              |     
                                                                 |     do {
    0x0040e410 mov rdi, rbx                                      |         
    0x0040e413 call 0x649ba0                                     |         BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (rbx);
    0x0040e418 mov rbx, qword [rbx + 0x18]                       |         rbx = *((rbx + 0x18));
    0x0040e41c cmp rbx, qword [rsp + 0xd8]                       |         
    0x0040e424 jne 0x40e410                                      |         
                                                                 |     } while (rbx != *((rsp + 0xd8)));
                                                                 | label_80:
    0x0040e426 mov rsi, qword [rsp + 0x110]                      |     
    0x0040e42e mov rdi, qword [rsp + 0x118]                      |     
    0x0040e436 call 0x64a360                                     |     BloombergLP::bdlcc::SkipList_PoolUtil::deletePoolManager(BloombergLP::bslma::Allocator*,BloombergLP::bdlcc::SkipList_PoolManager*) (*((rsp + 0x118)), *((rsp + 0x110)));
                                                                 | label_50:
    0x0040e43b lea rdi, [rsp + 0xe0]                             |     rdi = rsp + 0xe0;
    0x0040e443 call 0x64f850                                     |     BloombergLP::bslmt::MutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::~MutexImpl() ();
    0x0040e448 jmp 0x411d4d                                      |     void (*0x411d4d)() ();
                                                                 | label_59:
    0x0040e44d mov rax, rbp                                      |     rax = rbp;
    0x0040e450 add rax, 8                                        |     rax += 8;
                                                                 | label_60:
    0x0040e454 cmp byte [rax], 0x30                              |     
                                                                 |     if (*(rax) != 0x30) {
    0x0040e457 je 0x40e480                                       |         
                                                                 | label_58:
    0x0040e459 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040e45e mov rbx, rax                                      |         rbx = rax;
    0x0040e461 mov rdi, rax                                      |         
    0x0040e464 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040e469 mov edi, 0x67b401                                 |         edi = "h.data() == \"0\";
    0x0040e46e mov esi, 0x12cd                                   |         esi = 0x12cd;
    0x0040e473 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040e478 mov rdi, rbx                                      |         
    0x0040e47b call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040e480 lea rdi, [rsp + 8]                                |     
    0x0040e485 call 0x5e9b60                                     |     rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::popFrontImp() (rsp + 8);
    0x0040e48a mov rbx, rax                                      |     rbx = rax;
    0x0040e48d test rax, rax                                     |     
                                                                 |     if (rax != 0) {
    0x0040e490 je 0x40e4cb                                       |         
    0x0040e492 mov rdi, rbp                                      |         
    0x0040e495 call 0x649ba0                                     |         eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (rbp);
    0x0040e49a test eax, eax                                     |         
                                                                 |         if (eax == 0) {
    0x0040e49c jne 0x40e4c8                                      |             
    0x0040e49e cmp qword [rbp + 0x28], 0x17                      |             
                                                                 |             if (*((rbp + 0x28)) != 0x17) {
    0x0040e4a3 je 0x40e4b3                                       |                 
    0x0040e4a5 mov rsi, qword [rbp + 8]                          |                 rsi = *((rbp + 8));
    0x0040e4a9 mov rdi, qword [rbp + 0x30]                       |                 rdi = *((rbp + 0x30));
    0x0040e4ad mov rax, qword [rdi]                              |                 rax = *(rdi);
    0x0040e4b0 call qword [rax + 0x18]                           |                 uint64_t (*rax + 0x18)() ();
                                                                 |             }
    0x0040e4b3 mov qword [rbp + 0x20], 0xffffffffffffffff        |             *((rbp + 0x20)) = 0xffffffffffffffff;
    0x0040e4bb mov rdi, qword [rsp + 0x58]                       |             
    0x0040e4c0 mov rsi, rbp                                      |             
    0x0040e4c3 call 0x64a300                                     |             BloombergLP::bdlcc::SkipList_PoolUtil::deallocate(BloombergLP::bdlcc::SkipList_PoolManager*,void*) (*((rsp + 0x58)), rbp);
                                                                 |         }
    0x0040e4c8 mov rbp, rbx                                      |         
                                                                 |     }
    0x0040e4cb cmp dword [rbp + 0x38], 1                         |     
                                                                 |     if (*((rbp + 0x38)) != 1) {
    0x0040e4cf je 0x40e4f8                                       |         
    0x0040e4d1 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040e4d6 mov rbx, rax                                      |         rbx = rax;
    0x0040e4d9 mov rdi, rax                                      |         
    0x0040e4dc call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040e4e1 mov edi, 0x67b411                                 |         edi = "h.key() == 1";
    0x0040e4e6 mov esi, 0x12d0                                   |         esi = 0x12d0;
    0x0040e4eb call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040e4f0 mov rdi, rbx                                      |         
    0x0040e4f3 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040e4f8 cmp qword [rbp + 0x20], 5                         |     
                                                                 |     if (*((rbp + 0x20)) == 5) {
    0x0040e4fd jne 0x40e522                                      |         
    0x0040e4ff cmp qword [rbp + 0x28], 0x17                      |         
                                                                 |         if (*((rbp + 0x28)) != 0x17) {
    0x0040e504 je 0x40e50c                                       |             
    0x0040e506 mov rax, qword [rbp + 8]                          |             rax = *((rbp + 8));
    0x0040e50a jmp 0x40e510                                      |             
                                                                 |         } else {
    0x0040e50c lea rax, [rbp + 8]                                |             rax = rbp + 8;
                                                                 |         }
    0x0040e510 mov ecx, 0x20647766                               |         ecx = 0x20647766;
    0x0040e515 xor ecx, dword [rax]                              |         ecx ^= *(rax);
    0x0040e517 movzx eax, byte [rax + 4]                         |         eax = *((rax + 4));
    0x0040e51b xor eax, 0x31                                     |         eax ^= 0x31;
    0x0040e51e or eax, ecx                                       |         eax |= ecx;
                                                                 |         if (eax == 0) {
    0x0040e520 je 0x40e549                                       |             goto label_81;
                                                                 |         }
                                                                 |     }
    0x0040e522 call 0x64fbf0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040e527 mov rbx, rax                                      |     rbx = rax;
    0x0040e52a mov rdi, rax                                      |     
    0x0040e52d call 0x64f8a0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040e532 mov edi, 0x67b41e                                 |     edi = "h.data() == \"fwd 1\";
    0x0040e537 mov esi, 0x12d1                                   |     esi = 0x12d1;
    0x0040e53c call 0x405800                                     |     (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040e541 mov rdi, rbx                                      |     
    0x0040e544 call 0x64f9f0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 | label_81:
    0x0040e549 lea rdi, [rsp + 8]                                |     
    0x0040e54e call 0x5e9b60                                     |     rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::popFrontImp() (rsp + 8);
    0x0040e553 mov rbx, rax                                      |     rbx = rax;
    0x0040e556 test rax, rax                                     |     
                                                                 |     if (rax != 0) {
    0x0040e559 je 0x40e594                                       |         
    0x0040e55b mov rdi, rbp                                      |         
    0x0040e55e call 0x649ba0                                     |         eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (rbp);
    0x0040e563 test eax, eax                                     |         
                                                                 |         if (eax == 0) {
    0x0040e565 jne 0x40e591                                      |             
    0x0040e567 cmp qword [rbp + 0x28], 0x17                      |             
                                                                 |             if (*((rbp + 0x28)) != 0x17) {
    0x0040e56c je 0x40e57c                                       |                 
    0x0040e56e mov rsi, qword [rbp + 8]                          |                 rsi = *((rbp + 8));
    0x0040e572 mov rdi, qword [rbp + 0x30]                       |                 rdi = *((rbp + 0x30));
    0x0040e576 mov rax, qword [rdi]                              |                 rax = *(rdi);
    0x0040e579 call qword [rax + 0x18]                           |                 uint64_t (*rax + 0x18)() ();
                                                                 |             }
    0x0040e57c mov qword [rbp + 0x20], 0xffffffffffffffff        |             *((rbp + 0x20)) = 0xffffffffffffffff;
    0x0040e584 mov rdi, qword [rsp + 0x58]                       |             
    0x0040e589 mov rsi, rbp                                      |             
    0x0040e58c call 0x64a300                                     |             BloombergLP::bdlcc::SkipList_PoolUtil::deallocate(BloombergLP::bdlcc::SkipList_PoolManager*,void*) (*((rsp + 0x58)), rbp);
                                                                 |         }
    0x0040e591 mov rbp, rbx                                      |         
                                                                 |     }
    0x0040e594 cmp dword [rbp + 0x38], 1                         |     
                                                                 |     if (*((rbp + 0x38)) != 1) {
    0x0040e598 je 0x40e5c1                                       |         
    0x0040e59a call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040e59f mov rbx, rax                                      |         rbx = rax;
    0x0040e5a2 mov rdi, rax                                      |         
    0x0040e5a5 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040e5aa mov edi, 0x67b411                                 |         edi = "h.key() == 1";
    0x0040e5af mov esi, 0x12d4                                   |         esi = 0x12d4;
    0x0040e5b4 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040e5b9 mov rdi, rbx                                      |         
    0x0040e5bc call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040e5c1 cmp qword [rbp + 0x20], 0xc                       |     
                                                                 |     if (*((rbp + 0x20)) == 0xc) {
    0x0040e5c6 jne 0x40e7ab                                      |         
    0x0040e5cc cmp qword [rbp + 0x28], 0x17                      |         
                                                                 |         if (*((rbp + 0x28)) != 0x17) {
    0x0040e5d1 je 0x40e78c                                       |             
    0x0040e5d7 mov rax, qword [rbp + 8]                          |             rax = *((rbp + 8));
    0x0040e5db jmp 0x40e790                                      |             goto label_82;
                                                                 | label_56:
    0x0040e5e0 add rax, 8                                        |             rax += 8;
                                                                 | label_57:
    0x0040e5e4 cmp byte [rax], 0x30                              |             
                                                                 |             if (*(rax) != 0x30) {
    0x0040e5e7 je 0x40e610                                       |                 
                                                                 | label_55:
    0x0040e5e9 call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040e5ee mov rbx, rax                                      |                 rbx = rax;
    0x0040e5f1 mov rdi, rax                                      |                 
    0x0040e5f4 call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040e5f9 mov edi, 0x67b401                                 |                 edi = "h.data() == \"0\";
    0x0040e5fe mov esi, 0x1412                                   |                 esi = 0x1412;
    0x0040e603 call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040e608 mov rdi, rbx                                      |                 
    0x0040e60b call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |             }
    0x0040e610 mov dword [rsp + 0x78], 0xffffffff                |             *((rsp + 0x78)) = 0xffffffff;
    0x0040e618 lea rdi, [rsp + 8]                                |             
    0x0040e61d lea rsi, [rsp + 0x1f0]                            |             
    0x0040e625 lea rdx, [rsp + 0x78]                             |             
    0x0040e62a call 0x4552e0                                     |             eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findUpperBound(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 8, rsp + 0x1f0, rsp + 0x78);
    0x0040e62f test eax, eax                                     |             
                                                                 |             if (eax != 0) {
    0x0040e631 je 0x40e65a                                       |                 
    0x0040e633 call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040e638 mov rbx, rax                                      |                 rbx = rax;
    0x0040e63b mov rdi, rax                                      |                 
    0x0040e63e call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040e643 mov edi, 0x67b872                                 |                 edi = "!mX.findUpperBound(&h,-1)";
    0x0040e648 mov esi, 0x1414                                   |                 esi = 0x1414;
    0x0040e64d call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040e652 mov rdi, rbx                                      |                 
    0x0040e655 call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |             }
    0x0040e65a mov rax, qword [rsp + 0x1f8]                      |             rax = *((rsp + 0x1f8));
    0x0040e662 cmp dword [rax + 0x38], 0                         |             
                                                                 |             if (*((rax + 0x38)) != 0) {
    0x0040e666 je 0x40e697                                       |                 
    0x0040e668 call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040e66d mov rbx, rax                                      |                 rbx = rax;
    0x0040e670 mov rdi, rax                                      |                 
    0x0040e673 call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040e678 mov edi, 0x67b3f4                                 |                 edi = "h.key() == 0";
    0x0040e67d mov esi, 0x1415                                   |                 esi = 0x1415;
    0x0040e682 call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040e687 mov rdi, rbx                                      |                 
    0x0040e68a call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040e68f mov rax, qword [rsp + 0x1f8]                      |                 rax = *((rsp + 0x1f8));
                                                                 |             }
    0x0040e697 cmp qword [rax + 0x20], 1                         |             
                                                                 |             if (*((rax + 0x20)) != 1) {
    0x0040e69c jne 0x40e872                                      |                 goto label_83;
                                                                 |             }
    0x0040e6a2 cmp qword [rax + 0x28], 0x17                      |             
                                                                 |             if (*((rax + 0x28)) == 0x17) {
    0x0040e6a7 je 0x40e869                                       |                 goto label_84;
                                                                 |             }
    0x0040e6ad mov rax, qword [rax + 8]                          |             rax = *((rax + 8));
    0x0040e6b1 jmp 0x40e86d                                      |             goto label_85;
                                                                 | label_62:
    0x0040e6b6 add rax, 8                                        |             rax += 8;
                                                                 | label_63:
    0x0040e6ba cmp byte [rax], 0x30                              |             
                                                                 |             if (*(rax) != 0x30) {
    0x0040e6bd je 0x40e6e6                                       |                 
                                                                 | label_61:
    0x0040e6bf call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040e6c4 mov rbx, rax                                      |                 rbx = rax;
    0x0040e6c7 mov rdi, rax                                      |                 
    0x0040e6ca call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040e6cf mov edi, 0x67b401                                 |                 edi = "h.data() == \"0\";
    0x0040e6d4 mov esi, 0x133d                                   |                 esi = 0x133d;
    0x0040e6d9 call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040e6de mov rdi, rbx                                      |                 
    0x0040e6e1 call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |             }
    0x0040e6e6 mov dword [rsp + 0x78], 0xffffffff                |             *((rsp + 0x78)) = 0xffffffff;
    0x0040e6ee lea rdi, [rsp + 8]                                |             
    0x0040e6f3 lea rsi, [rsp + 0xc0]                             |             
    0x0040e6fb lea rdx, [rsp + 0x78]                             |             
    0x0040e700 call 0x455160                                     |             eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findUpperBoundR(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 8, rsp + 0xc0, rsp + 0x78);
    0x0040e705 test eax, eax                                     |             
                                                                 |             if (eax != 0) {
    0x0040e707 je 0x40e730                                       |                 
    0x0040e709 call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040e70e mov rbx, rax                                      |                 rbx = rax;
    0x0040e711 mov rdi, rax                                      |                 
    0x0040e714 call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040e719 mov edi, 0x67b5a7                                 |                 edi = "!mX.findUpperBoundR(&h,-1)";
    0x0040e71e mov esi, 0x133f                                   |                 esi = 0x133f;
    0x0040e723 call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040e728 mov rdi, rbx                                      |                 
    0x0040e72b call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |             }
    0x0040e730 mov rax, qword [rsp + 0xc8]                       |             rax = *((rsp + 0xc8));
    0x0040e738 cmp dword [rax + 0x38], 0                         |             
                                                                 |             if (*((rax + 0x38)) != 0) {
    0x0040e73c je 0x40e76d                                       |                 
    0x0040e73e call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040e743 mov rbx, rax                                      |                 rbx = rax;
    0x0040e746 mov rdi, rax                                      |                 
    0x0040e749 call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040e74e mov edi, 0x67b3f4                                 |                 edi = "h.key() == 0";
    0x0040e753 mov esi, 0x1340                                   |                 esi = 0x1340;
    0x0040e758 call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040e75d mov rdi, rbx                                      |                 
    0x0040e760 call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040e765 mov rax, qword [rsp + 0xc8]                       |                 rax = *((rsp + 0xc8));
                                                                 |             }
    0x0040e76d cmp qword [rax + 0x20], 1                         |             
                                                                 |             if (*((rax + 0x20)) != 1) {
    0x0040e772 jne 0x40e948                                      |                 goto label_86;
                                                                 |             }
    0x0040e778 cmp qword [rax + 0x28], 0x17                      |             
                                                                 |             if (*((rax + 0x28)) == 0x17) {
    0x0040e77d je 0x40e93f                                       |                 goto label_87;
                                                                 |             }
    0x0040e783 mov rax, qword [rax + 8]                          |             rax = *((rax + 8));
    0x0040e787 jmp 0x40e943                                      |             goto label_88;
                                                                 |         }
    0x0040e78c lea rax, [rbp + 8]                                |         rax = rbp + 8;
                                                                 | label_82:
    0x0040e790 movabs rcx, 0x662d656c6464696d                    |         rcx = 0x662d656c6464696d;
    0x0040e79a xor rcx, qword [rax]                              |         rcx ^= *(rax);
    0x0040e79d mov eax, dword [rax + 8]                          |         eax = *((rax + 8));
    0x0040e7a0 xor rax, 0x31206477                               |         rax ^= 0x31206477;
    0x0040e7a6 or rax, rcx                                       |         rax |= rcx;
                                                                 |         if (rax == 0) {
    0x0040e7a9 je 0x40e7d2                                       |             goto label_89;
                                                                 |         }
                                                                 |     }
    0x0040e7ab call 0x64fbf0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040e7b0 mov rbx, rax                                      |     rbx = rax;
    0x0040e7b3 mov rdi, rax                                      |     
    0x0040e7b6 call 0x64f8a0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040e7bb mov edi, 0x67b432                                 |     edi = "h.data() == \"middle-fwd 1\";
    0x0040e7c0 mov esi, 0x12d5                                   |     esi = 0x12d5;
    0x0040e7c5 call 0x405800                                     |     (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040e7ca mov rdi, rbx                                      |     
    0x0040e7cd call 0x64f9f0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 | label_89:
    0x0040e7d2 lea rdi, [rsp + 8]                                |     
    0x0040e7d7 call 0x5e9b60                                     |     rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::popFrontImp() (rsp + 8);
    0x0040e7dc mov rbx, rax                                      |     rbx = rax;
    0x0040e7df test rax, rax                                     |     
                                                                 |     if (rax != 0) {
    0x0040e7e2 je 0x40e81d                                       |         
    0x0040e7e4 mov rdi, rbp                                      |         
    0x0040e7e7 call 0x649ba0                                     |         eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (rbp);
    0x0040e7ec test eax, eax                                     |         
                                                                 |         if (eax == 0) {
    0x0040e7ee jne 0x40e81a                                      |             
    0x0040e7f0 cmp qword [rbp + 0x28], 0x17                      |             
                                                                 |             if (*((rbp + 0x28)) != 0x17) {
    0x0040e7f5 je 0x40e805                                       |                 
    0x0040e7f7 mov rsi, qword [rbp + 8]                          |                 rsi = *((rbp + 8));
    0x0040e7fb mov rdi, qword [rbp + 0x30]                       |                 rdi = *((rbp + 0x30));
    0x0040e7ff mov rax, qword [rdi]                              |                 rax = *(rdi);
    0x0040e802 call qword [rax + 0x18]                           |                 uint64_t (*rax + 0x18)() ();
                                                                 |             }
    0x0040e805 mov qword [rbp + 0x20], 0xffffffffffffffff        |             *((rbp + 0x20)) = 0xffffffffffffffff;
    0x0040e80d mov rdi, qword [rsp + 0x58]                       |             
    0x0040e812 mov rsi, rbp                                      |             
    0x0040e815 call 0x64a300                                     |             BloombergLP::bdlcc::SkipList_PoolUtil::deallocate(BloombergLP::bdlcc::SkipList_PoolManager*,void*) (*((rsp + 0x58)), rbp);
                                                                 |         }
    0x0040e81a mov rbp, rbx                                      |         
                                                                 |     }
    0x0040e81d cmp dword [rbp + 0x38], 1                         |     
                                                                 |     if (*((rbp + 0x38)) != 1) {
    0x0040e821 je 0x40e84a                                       |         
    0x0040e823 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040e828 mov rbx, rax                                      |         rbx = rax;
    0x0040e82b mov rdi, rax                                      |         
    0x0040e82e call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040e833 mov edi, 0x67b411                                 |         edi = "h.key() == 1";
    0x0040e838 mov esi, 0x12d8                                   |         esi = 0x12d8;
    0x0040e83d call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040e842 mov rdi, rbx                                      |         
    0x0040e845 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040e84a cmp qword [rbp + 0x20], 0xf                       |     
                                                                 |     if (*((rbp + 0x20)) == 0xf) {
    0x0040e84f jne 0x40ea39                                      |         
    0x0040e855 cmp qword [rbp + 0x28], 0x17                      |         
                                                                 |         if (*((rbp + 0x28)) != 0x17) {
    0x0040e85a je 0x40ea15                                       |             
    0x0040e860 mov rax, qword [rbp + 8]                          |             rax = *((rbp + 8));
    0x0040e864 jmp 0x40ea19                                      |             goto label_90;
                                                                 | label_84:
    0x0040e869 add rax, 8                                        |             rax += 8;
                                                                 | label_85:
    0x0040e86d cmp byte [rax], 0x30                              |             
                                                                 |             if (*(rax) != 0x30) {
    0x0040e870 je 0x40e899                                       |                 
                                                                 | label_83:
    0x0040e872 call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040e877 mov rbx, rax                                      |                 rbx = rax;
    0x0040e87a mov rdi, rax                                      |                 
    0x0040e87d call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040e882 mov edi, 0x67b401                                 |                 edi = "h.data() == \"0\";
    0x0040e887 mov esi, 0x1416                                   |                 esi = 0x1416;
    0x0040e88c call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040e891 mov rdi, rbx                                      |                 
    0x0040e894 call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |             }
    0x0040e899 mov dword [rsp + 0x78], 0                         |             *((rsp + 0x78)) = 0;
    0x0040e8a1 lea rdi, [rsp + 8]                                |             
    0x0040e8a6 lea rsi, [rsp + 0x1f0]                            |             
    0x0040e8ae lea rdx, [rsp + 0x78]                             |             
    0x0040e8b3 call 0x4552e0                                     |             eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findUpperBound(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 8, rsp + 0x1f0, rsp + 0x78);
    0x0040e8b8 test eax, eax                                     |             
                                                                 |             if (eax != 0) {
    0x0040e8ba je 0x40e8e3                                       |                 
    0x0040e8bc call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040e8c1 mov rbx, rax                                      |                 rbx = rax;
    0x0040e8c4 mov rdi, rax                                      |                 
    0x0040e8c7 call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040e8cc mov edi, 0x67b88c                                 |                 edi = "!mX.findUpperBound(&h, 0)";
    0x0040e8d1 mov esi, 0x1419                                   |                 esi = 0x1419;
    0x0040e8d6 call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040e8db mov rdi, rbx                                      |                 
    0x0040e8de call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |             }
    0x0040e8e3 mov rax, qword [rsp + 0x1f8]                      |             rax = *((rsp + 0x1f8));
    0x0040e8eb cmp dword [rax + 0x38], 1                         |             
                                                                 |             if (*((rax + 0x38)) != 1) {
    0x0040e8ef je 0x40e920                                       |                 
    0x0040e8f1 call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040e8f6 mov rbx, rax                                      |                 rbx = rax;
    0x0040e8f9 mov rdi, rax                                      |                 
    0x0040e8fc call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040e901 mov edi, 0x67b411                                 |                 edi = "h.key() == 1";
    0x0040e906 mov esi, 0x141a                                   |                 esi = 0x141a;
    0x0040e90b call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040e910 mov rdi, rbx                                      |                 
    0x0040e913 call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040e918 mov rax, qword [rsp + 0x1f8]                      |                 rax = *((rsp + 0x1f8));
                                                                 |             }
    0x0040e920 cmp qword [rax + 0x20], 5                         |             
                                                                 |             if (*((rax + 0x20)) != 5) {
    0x0040e925 jne 0x40eb0d                                      |                 goto label_91;
                                                                 |             }
    0x0040e92b cmp qword [rax + 0x28], 0x17                      |             
                                                                 |             if (*((rax + 0x28)) == 0x17) {
    0x0040e930 je 0x40eaf7                                       |                 goto label_92;
                                                                 |             }
    0x0040e936 mov rax, qword [rax + 8]                          |             rax = *((rax + 8));
    0x0040e93a jmp 0x40eafb                                      |             goto label_93;
                                                                 | label_87:
    0x0040e93f add rax, 8                                        |             rax += 8;
                                                                 | label_88:
    0x0040e943 cmp byte [rax], 0x30                              |             
                                                                 |             if (*(rax) != 0x30) {
    0x0040e946 je 0x40e96f                                       |                 
                                                                 | label_86:
    0x0040e948 call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040e94d mov rbx, rax                                      |                 rbx = rax;
    0x0040e950 mov rdi, rax                                      |                 
    0x0040e953 call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040e958 mov edi, 0x67b401                                 |                 edi = "h.data() == \"0\";
    0x0040e95d mov esi, 0x1341                                   |                 esi = 0x1341;
    0x0040e962 call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040e967 mov rdi, rbx                                      |                 
    0x0040e96a call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |             }
    0x0040e96f mov dword [rsp + 0x78], 0                         |             *((rsp + 0x78)) = 0;
    0x0040e977 lea rdi, [rsp + 8]                                |             
    0x0040e97c lea rsi, [rsp + 0xc0]                             |             
    0x0040e984 lea rdx, [rsp + 0x78]                             |             
    0x0040e989 call 0x455160                                     |             eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findUpperBoundR(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 8, rsp + 0xc0, rsp + 0x78);
    0x0040e98e test eax, eax                                     |             
                                                                 |             if (eax != 0) {
    0x0040e990 je 0x40e9b9                                       |                 
    0x0040e992 call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040e997 mov rbx, rax                                      |                 rbx = rax;
    0x0040e99a mov rdi, rax                                      |                 
    0x0040e99d call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040e9a2 mov edi, 0x67b5c2                                 |                 edi = "!mX.findUpperBoundR(&h, 0)";
    0x0040e9a7 mov esi, 0x1344                                   |                 esi = 0x1344;
    0x0040e9ac call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040e9b1 mov rdi, rbx                                      |                 
    0x0040e9b4 call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |             }
    0x0040e9b9 mov rax, qword [rsp + 0xc8]                       |             rax = *((rsp + 0xc8));
    0x0040e9c1 cmp dword [rax + 0x38], 1                         |             
                                                                 |             if (*((rax + 0x38)) != 1) {
    0x0040e9c5 je 0x40e9f6                                       |                 
    0x0040e9c7 call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040e9cc mov rbx, rax                                      |                 rbx = rax;
    0x0040e9cf mov rdi, rax                                      |                 
    0x0040e9d2 call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040e9d7 mov edi, 0x67b411                                 |                 edi = "h.key() == 1";
    0x0040e9dc mov esi, 0x1345                                   |                 esi = 0x1345;
    0x0040e9e1 call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040e9e6 mov rdi, rbx                                      |                 
    0x0040e9e9 call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040e9ee mov rax, qword [rsp + 0xc8]                       |                 rax = *((rsp + 0xc8));
                                                                 |             }
    0x0040e9f6 cmp qword [rax + 0x20], 5                         |             
                                                                 |             if (*((rax + 0x20)) != 5) {
    0x0040e9fb jne 0x40ebf0                                      |                 goto label_94;
                                                                 |             }
    0x0040ea01 cmp qword [rax + 0x28], 0x17                      |             
                                                                 |             if (*((rax + 0x28)) == 0x17) {
    0x0040ea06 je 0x40ebda                                       |                 goto label_95;
                                                                 |             }
    0x0040ea0c mov rax, qword [rax + 8]                          |             rax = *((rax + 8));
    0x0040ea10 jmp 0x40ebde                                      |             goto label_96;
                                                                 |         }
    0x0040ea15 lea rax, [rbp + 8]                                |         rax = rbp + 8;
                                                                 | label_90:
    0x0040ea19 movabs rcx, 0x622d656c6464696d                    |         rcx = 0x622d656c6464696d;
    0x0040ea23 xor rcx, qword [rax]                              |         rcx ^= *(rax);
    0x0040ea26 movabs rdx, 0x203120206b636162                    |         rdx = 0x203120206b636162;
    0x0040ea30 xor rdx, qword [rax + 7]                          |         rdx ^= *((rax + 7));
    0x0040ea34 or rdx, rcx                                       |         rdx |= rcx;
                                                                 |         if (rdx == 0) {
    0x0040ea37 je 0x40ea60                                       |             goto label_97;
                                                                 |         }
                                                                 |     }
    0x0040ea39 call 0x64fbf0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040ea3e mov rbx, rax                                      |     rbx = rax;
    0x0040ea41 mov rdi, rax                                      |     
    0x0040ea44 call 0x64f8a0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040ea49 mov edi, 0x67b44d                                 |     edi = "h.data() == \"middle-back  1 \";
    0x0040ea4e mov esi, 0x12d9                                   |     esi = 0x12d9;
    0x0040ea53 call 0x405800                                     |     (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040ea58 mov rdi, rbx                                      |     
    0x0040ea5b call 0x64f9f0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 | label_97:
    0x0040ea60 lea rdi, [rsp + 8]                                |     
    0x0040ea65 call 0x5e9b60                                     |     rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::popFrontImp() (rsp + 8);
    0x0040ea6a mov rbx, rax                                      |     rbx = rax;
    0x0040ea6d test rax, rax                                     |     
                                                                 |     if (rax != 0) {
    0x0040ea70 je 0x40eaab                                       |         
    0x0040ea72 mov rdi, rbp                                      |         
    0x0040ea75 call 0x649ba0                                     |         eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (rbp);
    0x0040ea7a test eax, eax                                     |         
                                                                 |         if (eax == 0) {
    0x0040ea7c jne 0x40eaa8                                      |             
    0x0040ea7e cmp qword [rbp + 0x28], 0x17                      |             
                                                                 |             if (*((rbp + 0x28)) != 0x17) {
    0x0040ea83 je 0x40ea93                                       |                 
    0x0040ea85 mov rsi, qword [rbp + 8]                          |                 rsi = *((rbp + 8));
    0x0040ea89 mov rdi, qword [rbp + 0x30]                       |                 rdi = *((rbp + 0x30));
    0x0040ea8d mov rax, qword [rdi]                              |                 rax = *(rdi);
    0x0040ea90 call qword [rax + 0x18]                           |                 uint64_t (*rax + 0x18)() ();
                                                                 |             }
    0x0040ea93 mov qword [rbp + 0x20], 0xffffffffffffffff        |             *((rbp + 0x20)) = 0xffffffffffffffff;
    0x0040ea9b mov rdi, qword [rsp + 0x58]                       |             
    0x0040eaa0 mov rsi, rbp                                      |             
    0x0040eaa3 call 0x64a300                                     |             BloombergLP::bdlcc::SkipList_PoolUtil::deallocate(BloombergLP::bdlcc::SkipList_PoolManager*,void*) (*((rsp + 0x58)), rbp);
                                                                 |         }
    0x0040eaa8 mov rbp, rbx                                      |         
                                                                 |     }
    0x0040eaab cmp dword [rbp + 0x38], 1                         |     
                                                                 |     if (*((rbp + 0x38)) != 1) {
    0x0040eaaf je 0x40ead8                                       |         
    0x0040eab1 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040eab6 mov rbx, rax                                      |         rbx = rax;
    0x0040eab9 mov rdi, rax                                      |         
    0x0040eabc call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040eac1 mov edi, 0x67b411                                 |         edi = "h.key() == 1";
    0x0040eac6 mov esi, 0x12dc                                   |         esi = 0x12dc;
    0x0040eacb call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040ead0 mov rdi, rbx                                      |         
    0x0040ead3 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040ead8 cmp qword [rbp + 0x20], 6                         |     
                                                                 |     if (*((rbp + 0x20)) == 6) {
    0x0040eadd jne 0x40ecd5                                      |         
    0x0040eae3 cmp qword [rbp + 0x28], 0x17                      |         
                                                                 |         if (*((rbp + 0x28)) != 0x17) {
    0x0040eae8 je 0x40ecbd                                       |             
    0x0040eaee mov rax, qword [rbp + 8]                          |             rax = *((rbp + 8));
    0x0040eaf2 jmp 0x40ecc1                                      |             goto label_98;
                                                                 | label_92:
    0x0040eaf7 add rax, 8                                        |             rax += 8;
                                                                 | label_93:
    0x0040eafb mov ecx, 0x20647766                               |             ecx = 0x20647766;
    0x0040eb00 xor ecx, dword [rax]                              |             ecx ^= *(rax);
    0x0040eb02 movzx eax, byte [rax + 4]                         |             eax = *((rax + 4));
    0x0040eb06 xor eax, 0x31                                     |             eax ^= 0x31;
    0x0040eb09 or eax, ecx                                       |             eax |= ecx;
                                                                 |             if (eax != 0) {
    0x0040eb0b je 0x40eb34                                       |                 
                                                                 | label_91:
    0x0040eb0d call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040eb12 mov rbx, rax                                      |                 rbx = rax;
    0x0040eb15 mov rdi, rax                                      |                 
    0x0040eb18 call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040eb1d mov edi, 0x67b41e                                 |                 edi = "h.data() == \"fwd 1\";
    0x0040eb22 mov esi, 0x141b                                   |                 esi = 0x141b;
    0x0040eb27 call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040eb2c mov rdi, rbx                                      |                 
    0x0040eb2f call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |             }
    0x0040eb34 mov dword [rsp + 0x78], 0                         |             *((rsp + 0x78)) = 0;
    0x0040eb3c lea rdi, [rsp + 8]                                |             
    0x0040eb41 lea rsi, [rsp + 0x1f0]                            |             
    0x0040eb49 lea rdx, [rsp + 0x78]                             |             
    0x0040eb4e call 0x455470                                     |             eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findLowerBound(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 8, rsp + 0x1f0, rsp + 0x78);
    0x0040eb53 test eax, eax                                     |             
                                                                 |             if (eax != 0) {
    0x0040eb55 je 0x40eb7e                                       |                 
    0x0040eb57 call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040eb5c mov rbx, rax                                      |                 rbx = rax;
    0x0040eb5f mov rdi, rax                                      |                 
    0x0040eb62 call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040eb67 mov edi, 0x67b8a6                                 |                 edi = "!mX.findLowerBound(&h, 0)";
    0x0040eb6c mov esi, 0x141d                                   |                 esi = 0x141d;
    0x0040eb71 call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040eb76 mov rdi, rbx                                      |                 
    0x0040eb79 call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |             }
    0x0040eb7e mov rax, qword [rsp + 0x1f8]                      |             rax = *((rsp + 0x1f8));
    0x0040eb86 cmp dword [rax + 0x38], 0                         |             
                                                                 |             if (*((rax + 0x38)) != 0) {
    0x0040eb8a je 0x40ebbb                                       |                 
    0x0040eb8c call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040eb91 mov rbx, rax                                      |                 rbx = rax;
    0x0040eb94 mov rdi, rax                                      |                 
    0x0040eb97 call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040eb9c mov edi, 0x67b3f4                                 |                 edi = "h.key() == 0";
    0x0040eba1 mov esi, 0x141e                                   |                 esi = 0x141e;
    0x0040eba6 call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040ebab mov rdi, rbx                                      |                 
    0x0040ebae call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040ebb3 mov rax, qword [rsp + 0x1f8]                      |                 rax = *((rsp + 0x1f8));
                                                                 |             }
    0x0040ebbb cmp qword [rax + 0x20], 1                         |             
                                                                 |             if (*((rax + 0x20)) != 1) {
    0x0040ebc0 jne 0x40f1af                                      |                 goto label_99;
                                                                 |             }
    0x0040ebc6 cmp qword [rax + 0x28], 0x17                      |             
                                                                 |             if (*((rax + 0x28)) == 0x17) {
    0x0040ebcb je 0x40f1a6                                       |                 goto label_100;
                                                                 |             }
    0x0040ebd1 mov rax, qword [rax + 8]                          |             rax = *((rax + 8));
    0x0040ebd5 jmp 0x40f1aa                                      |             goto label_101;
                                                                 | label_95:
    0x0040ebda add rax, 8                                        |             rax += 8;
                                                                 | label_96:
    0x0040ebde mov ecx, 0x20647766                               |             ecx = 0x20647766;
    0x0040ebe3 xor ecx, dword [rax]                              |             ecx ^= *(rax);
    0x0040ebe5 movzx eax, byte [rax + 4]                         |             eax = *((rax + 4));
    0x0040ebe9 xor eax, 0x31                                     |             eax ^= 0x31;
    0x0040ebec or eax, ecx                                       |             eax |= ecx;
                                                                 |             if (eax != 0) {
    0x0040ebee je 0x40ec17                                       |                 
                                                                 | label_94:
    0x0040ebf0 call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040ebf5 mov rbx, rax                                      |                 rbx = rax;
    0x0040ebf8 mov rdi, rax                                      |                 
    0x0040ebfb call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040ec00 mov edi, 0x67b41e                                 |                 edi = "h.data() == \"fwd 1\";
    0x0040ec05 mov esi, 0x1346                                   |                 esi = 0x1346;
    0x0040ec0a call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040ec0f mov rdi, rbx                                      |                 
    0x0040ec12 call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |             }
    0x0040ec17 mov dword [rsp + 0x78], 0                         |             *((rsp + 0x78)) = 0;
    0x0040ec1f lea rdi, [rsp + 8]                                |             
    0x0040ec24 lea rsi, [rsp + 0xc0]                             |             
    0x0040ec2c lea rdx, [rsp + 0x78]                             |             
    0x0040ec31 call 0x454fe0                                     |             eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findLowerBoundR(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 8, rsp + 0xc0, rsp + 0x78);
    0x0040ec36 test eax, eax                                     |             
                                                                 |             if (eax != 0) {
    0x0040ec38 je 0x40ec61                                       |                 
    0x0040ec3a call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040ec3f mov rbx, rax                                      |                 rbx = rax;
    0x0040ec42 mov rdi, rax                                      |                 
    0x0040ec45 call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040ec4a mov edi, 0x67b5dd                                 |                 edi = "!mX.findLowerBoundR(&h, 0)";
    0x0040ec4f mov esi, 0x1348                                   |                 esi = 0x1348;
    0x0040ec54 call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040ec59 mov rdi, rbx                                      |                 
    0x0040ec5c call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |             }
    0x0040ec61 mov rax, qword [rsp + 0xc8]                       |             rax = *((rsp + 0xc8));
    0x0040ec69 cmp dword [rax + 0x38], 0                         |             
                                                                 |             if (*((rax + 0x38)) != 0) {
    0x0040ec6d je 0x40ec9e                                       |                 
    0x0040ec6f call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040ec74 mov rbx, rax                                      |                 rbx = rax;
    0x0040ec77 mov rdi, rax                                      |                 
    0x0040ec7a call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040ec7f mov edi, 0x67b3f4                                 |                 edi = "h.key() == 0";
    0x0040ec84 mov esi, 0x1349                                   |                 esi = 0x1349;
    0x0040ec89 call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040ec8e mov rdi, rbx                                      |                 
    0x0040ec91 call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040ec96 mov rax, qword [rsp + 0xc8]                       |                 rax = *((rsp + 0xc8));
                                                                 |             }
    0x0040ec9e cmp qword [rax + 0x20], 1                         |             
                                                                 |             if (*((rax + 0x20)) != 1) {
    0x0040eca3 jne 0x40f285                                      |                 goto label_102;
                                                                 |             }
    0x0040eca9 cmp qword [rax + 0x28], 0x17                      |             
                                                                 |             if (*((rax + 0x28)) == 0x17) {
    0x0040ecae je 0x40f27c                                       |                 goto label_103;
                                                                 |             }
    0x0040ecb4 mov rax, qword [rax + 8]                          |             rax = *((rax + 8));
    0x0040ecb8 jmp 0x40f280                                      |             goto label_104;
                                                                 |         }
    0x0040ecbd lea rax, [rbp + 8]                                |         rax = rbp + 8;
                                                                 | label_98:
    0x0040ecc1 mov ecx, 0x6b636162                               |         ecx = 0x6b636162;
    0x0040ecc6 xor ecx, dword [rax]                              |         ecx ^= *(rax);
    0x0040ecc8 movzx eax, word [rax + 4]                         |         eax = *((rax + 4));
    0x0040eccc xor eax, 0x3120                                   |         eax ^= 0x3120;
    0x0040ecd1 or eax, ecx                                       |         eax |= ecx;
                                                                 |         if (eax == 0) {
    0x0040ecd3 je 0x40ecfc                                       |             goto label_105;
                                                                 |         }
                                                                 |     }
    0x0040ecd5 call 0x64fbf0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040ecda mov rbx, rax                                      |     rbx = rax;
    0x0040ecdd mov rdi, rax                                      |     
    0x0040ece0 call 0x64f8a0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040ece5 mov edi, 0x67b46b                                 |     edi = "h.data() == \"back 1\";
    0x0040ecea mov esi, 0x12dd                                   |     esi = 0x12dd;
    0x0040ecef call 0x405800                                     |     (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040ecf4 mov rdi, rbx                                      |     
    0x0040ecf7 call 0x64f9f0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 | label_105:
    0x0040ecfc cmp dword [rip + 0x50b6d9], 0                     |     
                                                                 |     if (*(obj.veryVerbose) != 0) {
    0x0040ed03 je 0x40ed1d                                       |         
    0x0040ed05 lea rdi, [rsp + 8]                                |         
    0x0040ed0a mov esi, 0x91a328                                 |         
    0x0040ed0f xor edx, edx                                      |         
    0x0040ed11 mov ecx, 4                                        |         
    0x0040ed16 call 0x454cb0                                     |         BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::print(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,int,int)const (rsp + 8, obj.std::__1::cout, 0, 4);
    0x0040ed1b jmp 0x40ed9a                                      |         
                                                                 |     } else {
    0x0040ed1d cmp dword [rip + 0x50b6b4], 0                     |         
                                                                 |         if (*(obj.verbose) == 0) {
    0x0040ed24 je 0x40ed9a                                       |             goto label_106;
                                                                 |         }
    0x0040ed26 lea rdi, [rsp + 8]                                |         
    0x0040ed2b mov esi, 0x91a328                                 |         
    0x0040ed30 xor edx, edx                                      |         
    0x0040ed32 mov ecx, 0xffffffff                               |         
    0x0040ed37 call 0x454cb0                                     |         rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::print(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,int,int)const (rsp + 8, obj.std::__1::cout, 0, 0xffffffff);
    0x0040ed3c mov rbx, rax                                      |         rbx = rax;
    0x0040ed3f mov rax, qword [rax]                              |         rax = *(rax);
    0x0040ed42 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040ed46 add rsi, rbx                                      |         rsi += rbx;
    0x0040ed49 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040ed51 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040ed56 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040ed5e mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040ed63 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040ed68 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040ed6b mov rdi, rax                                      |         rdi = rax;
    0x0040ed6e mov esi, 0xa                                      |         esi = 0xa;
    0x0040ed73 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040ed76 mov r15d, eax                                     |         r15d = eax;
    0x0040ed79 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040ed81 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040ed86 movsx esi, r15b                                   |         esi = (int32_t) r15b;
    0x0040ed8a mov rdi, rbx                                      |         rdi = rbx;
    0x0040ed8d call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040ed92 mov rdi, rbx                                      |         rdi = rbx;
    0x0040ed95 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
                                                                 | label_106:
    0x0040ed9a mov rdi, rbp                                      |     
    0x0040ed9d call 0x649ba0                                     |     eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (rbp);
    0x0040eda2 test eax, eax                                     |     
                                                                 |     if (eax == 0) {
    0x0040eda4 jne 0x40edd0                                      |         
    0x0040eda6 cmp qword [rbp + 0x28], 0x17                      |         
                                                                 |         if (*((rbp + 0x28)) != 0x17) {
    0x0040edab je 0x40edbb                                       |             
    0x0040edad mov rsi, qword [rbp + 8]                          |             rsi = *((rbp + 8));
    0x0040edb1 mov rdi, qword [rbp + 0x30]                       |             rdi = *((rbp + 0x30));
    0x0040edb5 mov rax, qword [rdi]                              |             rax = *(rdi);
    0x0040edb8 call qword [rax + 0x18]                           |             uint64_t (*rax + 0x18)() ();
                                                                 |         }
    0x0040edbb mov qword [rbp + 0x20], 0xffffffffffffffff        |         *((rbp + 0x20)) = 0xffffffffffffffff;
    0x0040edc3 mov rdi, qword [rsp + 0x58]                       |         
    0x0040edc8 mov rsi, rbp                                      |         
    0x0040edcb call 0x64a300                                     |         BloombergLP::bdlcc::SkipList_PoolUtil::deallocate(BloombergLP::bdlcc::SkipList_PoolManager*,void*) (*((rsp + 0x58)), rbp);
                                                                 |     }
    0x0040edd0 lea rdi, [rsp + 8]                                |     
    0x0040edd5 call 0x454c10                                     |     BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::~SkipList() (rsp + 8);
    0x0040edda cmp dword [rip + 0x50b5f7], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040ede1 je 0x40ef2a                                       |         
    0x0040ede7 mov rax, qword [rip + 0x50b53a]                   |         rax = std::__1::cout;
    0x0040edee mov esi, 0x91a328                                 |         esi = std::__1::cout;
    0x0040edf3 add rsi, qword [rax - 0x18]                       |         rsi += *((rax - 0x18));
    0x0040edf7 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040edff call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040ee04 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040ee0c mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040ee11 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040ee16 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040ee19 mov rdi, rax                                      |         rdi = rax;
    0x0040ee1c mov esi, 0xa                                      |         esi = 0xa;
    0x0040ee21 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040ee24 mov ebx, eax                                      |         ebx = eax;
    0x0040ee26 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040ee2e call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040ee33 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x0040ee36 mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x0040ee3b call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040ee40 mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x0040ee45 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040ee4a mov edi, 0x91a328                                 |         
    0x0040ee4f mov esi, 0x67b480                                 |         
    0x0040ee54 mov edx, 0x2a                                     |         
    0x0040ee59 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "add - verify insertion order is not stable", 0x2a);
    0x0040ee5e mov rbx, rax                                      |         rbx = rax;
    0x0040ee61 mov rax, qword [rax]                              |         rax = *(rax);
    0x0040ee64 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040ee68 add rsi, rbx                                      |         rsi += rbx;
    0x0040ee6b lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040ee73 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040ee78 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040ee80 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040ee85 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040ee8a mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040ee8d mov rdi, rax                                      |         rdi = rax;
    0x0040ee90 mov esi, 0xa                                      |         esi = 0xa;
    0x0040ee95 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040ee98 mov ebp, eax                                      |         
    0x0040ee9a lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040eea2 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040eea7 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x0040eeab mov rdi, rbx                                      |         rdi = rbx;
    0x0040eeae call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040eeb3 mov rdi, rbx                                      |         rdi = rbx;
    0x0040eeb6 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040eebb mov esi, 0x67b4ab                                 |         
    0x0040eec0 mov edx, 0x29                                     |         
    0x0040eec5 mov rdi, rbx                                      |         
    0x0040eec8 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rbx, "=========================================", 0x29);
    0x0040eecd mov rbx, rax                                      |         rbx = rax;
    0x0040eed0 mov rax, qword [rax]                              |         rax = *(rax);
    0x0040eed3 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040eed7 add rsi, rbx                                      |         rsi += rbx;
    0x0040eeda lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040eee2 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040eee7 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040eeef mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040eef4 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040eef9 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040eefc mov rdi, rax                                      |         rdi = rax;
    0x0040eeff mov esi, 0xa                                      |         esi = 0xa;
    0x0040ef04 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040ef07 mov ebp, eax                                      |         
    0x0040ef09 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040ef11 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040ef16 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x0040ef1a mov rdi, rbx                                      |         rdi = rbx;
    0x0040ef1d call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040ef22 mov rdi, rbx                                      |         rdi = rbx;
    0x0040ef25 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x0040ef2a lea rdi, [rsp + 8]                                |     
    0x0040ef2f call 0x649c40                                     |     BloombergLP::bdlcc::SkipList_RandomLevelGenerator::SkipList_RandomLevelGenerator() (rsp + 8);
    0x0040ef34 mov dword [rsp + 0x10], 0                         |     *((rsp + 0x10)) = 0;
    0x0040ef3c lea rbx, [rsp + 0x28]                             |     rbx = rsp + 0x28;
    0x0040ef41 mov rdi, rbx                                      |     rdi = rbx;
    0x0040ef44 xor esi, esi                                      |     esi = 0;
    0x0040ef46 call 0x404cc0                                     |     pthread_mutex_init ();
    0x0040ef4b mov dword [rsp + 0x50], 0                         |     *((rsp + 0x50)) = 0;
    0x0040ef53 mov qword [rsp + 0x58], 0                         |     *((rsp + 0x58)) = 0;
    0x0040ef5c mov qword [rsp + 0x60], r14                       |     *((rsp + 0x60)) = r14;
    0x0040ef61 movaps xmm0, xmmword [rip + 0x26b468]             |     xmm0 = *(0x0067a3d0);
    0x0040ef68 movaps xmmword [rsp + 0x1f0], xmm0                |     *((rsp + 0x1f0)) = xmm0;
    0x0040ef70 movaps xmm0, xmmword [rip + 0x26b469]             |     xmm0 = *(0x0067a3e0);
    0x0040ef77 movaps xmmword [rsp + 0x200], xmm0                |     *((rsp + 0x200)) = xmm0;
    0x0040ef7f movaps xmm0, xmmword [rip + 0x26b46a]             |     xmm0 = *(0x0067a3f0);
    0x0040ef86 movaps xmmword [rsp + 0x210], xmm0                |     *((rsp + 0x210)) = xmm0;
    0x0040ef8e movaps xmm0, xmmword [rip + 0x26b46b]             |     xmm0 = *(0x0067a400);
    0x0040ef95 movaps xmmword [rsp + 0x220], xmm0                |     *((rsp + 0x220)) = xmm0;
    0x0040ef9d movaps xmm0, xmmword [rip + 0x26b46c]             |     xmm0 = *(0x0067a410);
    0x0040efa4 movaps xmmword [rsp + 0x230], xmm0                |     *((rsp + 0x230)) = xmm0;
    0x0040efac movaps xmm0, xmmword [rip + 0x26b46d]             |     xmm0 = *(0x0067a420);
    0x0040efb3 movaps xmmword [rsp + 0x240], xmm0                |     *((rsp + 0x240)) = xmm0;
    0x0040efbb movaps xmm0, xmmword [rip + 0x26b46e]             |     xmm0 = *(0x0067a430);
    0x0040efc2 movaps xmmword [rsp + 0x250], xmm0                |     *((rsp + 0x250)) = xmm0;
    0x0040efca movapd xmm0, xmmword [rip + 0x26b46e]             |     __asm ("movapd xmm0, xmmword [0x0067a440]");
    0x0040efd2 movapd xmmword [rsp + 0x260], xmm0                |     __asm ("movapd xmmword [rsp + 0x260], xmm0");
    0x0040efdb lea rdi, [rsp + 0x1f0]                            |     
    0x0040efe3 mov esi, 0x20                                     |     
    0x0040efe8 mov rdx, r14                                      |     
    0x0040efeb call 0x64a120                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::createPoolManager(int*,int,BloombergLP::bslma::Allocator*) (rsp + 0x1f0, 0x20, r14);
    0x0040eff0 mov qword [rsp + 0x58], rax                       |     *((rsp + 0x58)) = rax;
    0x0040eff5 mov rdi, rax                                      |     
    0x0040eff8 mov esi, 0x1f                                     |     
    0x0040effd call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (rax, 0x1f);
    0x0040f002 mov qword [rsp + 0x18], rax                       |     *((rsp + 0x18)) = rax;
    0x0040f007 mov rdi, qword [rsp + 0x58]                       |     
    0x0040f00c mov esi, 0x1f                                     |     
    0x0040f011 call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x58)), 0x1f);
    0x0040f016 mov qword [rsp + 0x20], rax                       |     *((rsp + 0x20)) = rax;
    0x0040f01b xor ecx, ecx                                      |     ecx = 0;
    0x0040f01d nop dword [rax]                                   |     
                                                                 |     do {
    0x0040f020 mov rax, qword [rsp + 0x18]                       |         rax = *((rsp + 0x18));
    0x0040f025 mov qword [rax + rcx + 0x48], 0                   |         *((rax + rcx + 0x48)) = 0;
    0x0040f02e mov rax, qword [rsp + 0x18]                       |         rax = *((rsp + 0x18));
    0x0040f033 mov rdx, qword [rsp + 0x20]                       |         rdx = *((rsp + 0x20));
    0x0040f038 mov qword [rax + rcx + 0x40], rdx                 |         *((rax + rcx + 0x40)) = rdx;
    0x0040f03d mov rax, qword [rsp + 0x18]                       |         rax = *((rsp + 0x18));
    0x0040f042 mov rdx, qword [rsp + 0x20]                       |         rdx = *((rsp + 0x20));
    0x0040f047 mov qword [rdx + rcx + 0x48], rax                 |         *((rdx + rcx + 0x48)) = rax;
    0x0040f04c mov rax, qword [rsp + 0x20]                       |         rax = *((rsp + 0x20));
    0x0040f051 mov qword [rax + rcx + 0x40], 0                   |         *((rax + rcx + 0x40)) = 0;
    0x0040f05a add rcx, 0x10                                     |         rcx += 0x10;
    0x0040f05e cmp rcx, 0x200                                    |         
    0x0040f065 jne 0x40f020                                      |         
                                                                 |     } while (rcx != 0x200);
    0x0040f067 lea rbx, [rsp + 0x2c4]                            |     rbx = rsp + 0x2c4;
    0x0040f06f mov r12d, 0xc                                     |     r12d = 0xc;
    0x0040f075 lea r14, [rsp + 0x1f0]                            |     r14 = rsp + 0x1f0;
    0x0040f07d lea r15, [rsp + 8]                                |     r15 = rsp + 8;
    0x0040f082 jmp 0x40f09d                                      |     
                                                                 |     while (*((rsp + 0x210)) == 0x17) {
                                                                 | label_6:
    0x0040f090 add rbx, 0x18                                     |         rbx += 0x18;
    0x0040f094 dec r12                                           |         r12--;
                                                                 |         if (r12 == 0) {
    0x0040f097 je 0x40f14d                                       |             goto label_107;
                                                                 |         }
    0x0040f09d mov rbp, qword [rbx + 4]                          |         rbp = *((rbx + 4));
    0x0040f0a1 mov rax, qword [rip + 0x50ba98]                   |         rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040f0a8 test rax, rax                                     |         
                                                                 |         if (rax == 0) {
    0x0040f0ab jne 0x40f0b2                                      |             
    0x0040f0ad call 0x64e700                                     |             rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |         }
    0x0040f0b2 mov qword [rsp + 0x1f0], 0                        |         *((rsp + 0x1f0)) = 0;
    0x0040f0be movapd xmm0, xmmword [rip + 0x26b2fa]             |         __asm ("movapd xmm0, xmmword [0x0067a3c0]");
    0x0040f0c6 movupd xmmword [rsp + 0x208], xmm0                |         __asm ("movupd xmmword [rsp + 0x208], xmm0");
    0x0040f0cf mov qword [rsp + 0x218], rax                      |         *((rsp + 0x218)) = rax;
    0x0040f0d7 mov rdi, rbp                                      |         
    0x0040f0da call 0x404d40                                     |         rax = strlen (rbp);
    0x0040f0df mov qword [rsp + 0x208], 0                        |         *((rsp + 0x208)) = 0;
    0x0040f0eb mov ecx, 0x67cde6                                 |         
    0x0040f0f0 mov rdi, r14                                      |         
    0x0040f0f3 mov rsi, rbp                                      |         
    0x0040f0f6 mov rdx, rax                                      |         
    0x0040f0f9 call 0x653850                                     |         bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (r14, rbp, rax, "string<...>::assign(char*...): string too long");
    0x0040f0fe mov rdi, r15                                      |         
    0x0040f101 call 0x649c50                                     |         eax = BloombergLP::bdlcc::SkipList_RandomLevelGenerator::randomLevel() (r15);
    0x0040f106 mov rdi, r15                                      |         
    0x0040f109 mov esi, eax                                      |         
    0x0040f10b mov rdx, rbx                                      |         
    0x0040f10e mov rcx, r14                                      |         
    0x0040f111 call 0x5e9830                                     |         rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::allocateNode(int,intconst&,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>const&) (r15, eax, rbx, r14);
    0x0040f116 mov rdi, r15                                      |         
    0x0040f119 xor esi, esi                                      |         
    0x0040f11b mov rdx, rax                                      |         
    0x0040f11e call 0x5e9c40                                     |         BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::addNode(bool*,BloombergLP::bdlcc::SkipList_Node<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*) (r15, 0, rax);
    0x0040f123 cmp qword [rsp + 0x210], 0x17                     |         
    0x0040f12c je 0x40f090                                       |         
                                                                 |     }
    0x0040f132 mov rsi, qword [rsp + 0x1f0]                      |     rsi = *((rsp + 0x1f0));
    0x0040f13a mov rdi, qword [rsp + 0x218]                      |     rdi = *((rsp + 0x218));
    0x0040f142 mov rax, qword [rdi]                              |     rax = *(rdi);
    0x0040f145 call qword [rax + 0x18]                           |     uint64_t (*rax + 0x18)() ();
    0x0040f148 jmp 0x40f090                                      |     goto label_6;
                                                                 | label_107:
    0x0040f14d lea rdi, [rsp + 8]                                |     
    0x0040f152 call 0x5e9b60                                     |     rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::popFrontImp() (rsp + 8);
    0x0040f157 mov rbp, rax                                      |     
    0x0040f15a cmp dword [rax + 0x38], 0                         |     
                                                                 |     if (*((rax + 0x38)) != 0) {
    0x0040f15e je 0x40f187                                       |         
    0x0040f160 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f165 mov rbx, rax                                      |         rbx = rax;
    0x0040f168 mov rdi, rax                                      |         
    0x0040f16b call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f170 mov edi, 0x67b3f4                                 |         edi = "h.key() == 0";
    0x0040f175 mov esi, 0x12f1                                   |         esi = 0x12f1;
    0x0040f17a call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f17f mov rdi, rbx                                      |         
    0x0040f182 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040f187 cmp qword [rbp + 0x20], 1                         |     
                                                                 |     if (*((rbp + 0x20)) != 1) {
    0x0040f18c jne 0x411561                                      |         goto label_108;
                                                                 |     }
    0x0040f192 cmp qword [rbp + 0x28], 0x17                      |     
                                                                 |     if (*((rbp + 0x28)) == 0x17) {
    0x0040f197 je 0x411555                                       |         goto label_109;
                                                                 |     }
    0x0040f19d mov rax, qword [rbp + 8]                          |     rax = *((rbp + 8));
    0x0040f1a1 jmp 0x41155c                                      |     goto label_110;
                                                                 | label_100:
    0x0040f1a6 add rax, 8                                        |     rax += 8;
                                                                 | label_101:
    0x0040f1aa cmp byte [rax], 0x30                              |     
                                                                 |     if (*(rax) != 0x30) {
    0x0040f1ad je 0x40f1d6                                       |         
                                                                 | label_99:
    0x0040f1af call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f1b4 mov rbx, rax                                      |         rbx = rax;
    0x0040f1b7 mov rdi, rax                                      |         
    0x0040f1ba call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f1bf mov edi, 0x67b401                                 |         edi = "h.data() == \"0\";
    0x0040f1c4 mov esi, 0x141f                                   |         esi = 0x141f;
    0x0040f1c9 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f1ce mov rdi, rbx                                      |         
    0x0040f1d1 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040f1d6 mov dword [rsp + 0x78], 6                         |     *((rsp + 0x78)) = 6;
    0x0040f1de lea rdi, [rsp + 8]                                |     
    0x0040f1e3 lea rsi, [rsp + 0x1f0]                            |     
    0x0040f1eb lea rdx, [rsp + 0x78]                             |     
    0x0040f1f0 call 0x455470                                     |     eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findLowerBound(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 8, rsp + 0x1f0, rsp + 0x78);
    0x0040f1f5 test eax, eax                                     |     
                                                                 |     if (eax != 0) {
    0x0040f1f7 je 0x40f220                                       |         
    0x0040f1f9 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f1fe mov rbx, rax                                      |         rbx = rax;
    0x0040f201 mov rdi, rax                                      |         
    0x0040f204 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f209 mov edi, 0x67b8c0                                 |         edi = "!mX.findLowerBound(&h,6)";
    0x0040f20e mov esi, 0x1422                                   |         esi = 0x1422;
    0x0040f213 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f218 mov rdi, rbx                                      |         
    0x0040f21b call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040f220 mov rax, qword [rsp + 0x1f8]                      |     rax = *((rsp + 0x1f8));
    0x0040f228 cmp dword [rax + 0x38], 8                         |     
                                                                 |     if (*((rax + 0x38)) != 8) {
    0x0040f22c je 0x40f25d                                       |         
    0x0040f22e call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f233 mov rbx, rax                                      |         rbx = rax;
    0x0040f236 mov rdi, rax                                      |         
    0x0040f239 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f23e mov edi, 0x67b612                                 |         edi = "h.key() == 8";
    0x0040f243 mov esi, 0x1423                                   |         esi = 0x1423;
    0x0040f248 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f24d mov rdi, rbx                                      |         
    0x0040f250 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040f255 mov rax, qword [rsp + 0x1f8]                      |         rax = *((rsp + 0x1f8));
                                                                 |     }
    0x0040f25d cmp qword [rax + 0x20], 7                         |     
                                                                 |     if (*((rax + 0x20)) == 7) {
    0x0040f262 jne 0x40f369                                      |         
    0x0040f268 cmp qword [rax + 0x28], 0x17                      |         
                                                                 |         if (*((rax + 0x28)) != 0x17) {
    0x0040f26d je 0x40f352                                       |             
    0x0040f273 mov rax, qword [rax + 8]                          |             rax = *((rax + 8));
    0x0040f277 jmp 0x40f356                                      |             goto label_111;
                                                                 | label_103:
    0x0040f27c add rax, 8                                        |             rax += 8;
                                                                 | label_104:
    0x0040f280 cmp byte [rax], 0x30                              |             
                                                                 |             if (*(rax) != 0x30) {
    0x0040f283 je 0x40f2ac                                       |                 
                                                                 | label_102:
    0x0040f285 call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f28a mov rbx, rax                                      |                 rbx = rax;
    0x0040f28d mov rdi, rax                                      |                 
    0x0040f290 call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f295 mov edi, 0x67b401                                 |                 edi = "h.data() == \"0\";
    0x0040f29a mov esi, 0x134a                                   |                 esi = 0x134a;
    0x0040f29f call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f2a4 mov rdi, rbx                                      |                 
    0x0040f2a7 call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |             }
    0x0040f2ac mov dword [rsp + 0x78], 6                         |             *((rsp + 0x78)) = 6;
    0x0040f2b4 lea rdi, [rsp + 8]                                |             
    0x0040f2b9 lea rsi, [rsp + 0xc0]                             |             
    0x0040f2c1 lea rdx, [rsp + 0x78]                             |             
    0x0040f2c6 call 0x454fe0                                     |             eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findLowerBoundR(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 8, rsp + 0xc0, rsp + 0x78);
    0x0040f2cb test eax, eax                                     |             
                                                                 |             if (eax != 0) {
    0x0040f2cd je 0x40f2f6                                       |                 
    0x0040f2cf call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f2d4 mov rbx, rax                                      |                 rbx = rax;
    0x0040f2d7 mov rdi, rax                                      |                 
    0x0040f2da call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f2df mov edi, 0x67b5f8                                 |                 edi = "!mX.findLowerBoundR(&h,6)";
    0x0040f2e4 mov esi, 0x134d                                   |                 esi = 0x134d;
    0x0040f2e9 call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f2ee mov rdi, rbx                                      |                 
    0x0040f2f1 call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |             }
    0x0040f2f6 mov rax, qword [rsp + 0xc8]                       |             rax = *((rsp + 0xc8));
    0x0040f2fe cmp dword [rax + 0x38], 8                         |             
                                                                 |             if (*((rax + 0x38)) != 8) {
    0x0040f302 je 0x40f333                                       |                 
    0x0040f304 call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f309 mov rbx, rax                                      |                 rbx = rax;
    0x0040f30c mov rdi, rax                                      |                 
    0x0040f30f call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f314 mov edi, 0x67b612                                 |                 edi = "h.key() == 8";
    0x0040f319 mov esi, 0x134e                                   |                 esi = 0x134e;
    0x0040f31e call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f323 mov rdi, rbx                                      |                 
    0x0040f326 call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040f32b mov rax, qword [rsp + 0xc8]                       |                 rax = *((rsp + 0xc8));
                                                                 |             }
    0x0040f333 cmp qword [rax + 0x20], 7                         |             
                                                                 |             if (*((rax + 0x20)) != 7) {
    0x0040f338 jne 0x40f44d                                      |                 goto label_112;
                                                                 |             }
    0x0040f33e cmp qword [rax + 0x28], 0x17                      |             
                                                                 |             if (*((rax + 0x28)) == 0x17) {
    0x0040f343 je 0x40f436                                       |                 goto label_113;
                                                                 |             }
    0x0040f349 mov rax, qword [rax + 8]                          |             rax = *((rax + 8));
    0x0040f34d jmp 0x40f43a                                      |             goto label_114;
                                                                 |         }
    0x0040f352 add rax, 8                                        |         rax += 8;
                                                                 | label_111:
    0x0040f356 mov ecx, 0x73726966                               |         ecx = 0x73726966;
    0x0040f35b xor ecx, dword [rax]                              |         ecx ^= *(rax);
    0x0040f35d mov edx, 0x38207473                               |         edx = 0x38207473;
    0x0040f362 xor edx, dword [rax + 3]                          |         edx ^= *((rax + 3));
    0x0040f365 or edx, ecx                                       |         edx |= ecx;
                                                                 |         if (edx == 0) {
    0x0040f367 je 0x40f390                                       |             goto label_115;
                                                                 |         }
                                                                 |     }
    0x0040f369 call 0x64fbf0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f36e mov rbx, rax                                      |     rbx = rax;
    0x0040f371 mov rdi, rax                                      |     
    0x0040f374 call 0x64f8a0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f379 mov edi, 0x67b61f                                 |     edi = "h.data() == \"first 8\";
    0x0040f37e mov esi, 0x1424                                   |     esi = 0x1424;
    0x0040f383 call 0x405800                                     |     (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f388 mov rdi, rbx                                      |     
    0x0040f38b call 0x64f9f0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 | label_115:
    0x0040f390 mov dword [rsp + 0x78], 6                         |     *((rsp + 0x78)) = 6;
    0x0040f398 lea rdi, [rsp + 8]                                |     
    0x0040f39d lea rsi, [rsp + 0x1f0]                            |     
    0x0040f3a5 lea rdx, [rsp + 0x78]                             |     
    0x0040f3aa call 0x4552e0                                     |     eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findUpperBound(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 8, rsp + 0x1f0, rsp + 0x78);
    0x0040f3af test eax, eax                                     |     
                                                                 |     if (eax != 0) {
    0x0040f3b1 je 0x40f3da                                       |         
    0x0040f3b3 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f3b8 mov rbx, rax                                      |         rbx = rax;
    0x0040f3bb mov rdi, rax                                      |         
    0x0040f3be call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f3c3 mov edi, 0x67b8d9                                 |         edi = "!mX.findUpperBound(&h,6)";
    0x0040f3c8 mov esi, 0x1426                                   |         esi = 0x1426;
    0x0040f3cd call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f3d2 mov rdi, rbx                                      |         
    0x0040f3d5 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040f3da mov rax, qword [rsp + 0x1f8]                      |     rax = *((rsp + 0x1f8));
    0x0040f3e2 cmp dword [rax + 0x38], 8                         |     
                                                                 |     if (*((rax + 0x38)) != 8) {
    0x0040f3e6 je 0x40f417                                       |         
    0x0040f3e8 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f3ed mov rbx, rax                                      |         rbx = rax;
    0x0040f3f0 mov rdi, rax                                      |         
    0x0040f3f3 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f3f8 mov edi, 0x67b612                                 |         edi = "h.key() == 8";
    0x0040f3fd mov esi, 0x1427                                   |         esi = 0x1427;
    0x0040f402 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f407 mov rdi, rbx                                      |         
    0x0040f40a call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040f40f mov rax, qword [rsp + 0x1f8]                      |         rax = *((rsp + 0x1f8));
                                                                 |     }
    0x0040f417 cmp qword [rax + 0x20], 7                         |     
                                                                 |     if (*((rax + 0x20)) == 7) {
    0x0040f41c jne 0x40f531                                      |         
    0x0040f422 cmp qword [rax + 0x28], 0x17                      |         
                                                                 |         if (*((rax + 0x28)) != 0x17) {
    0x0040f427 je 0x40f51a                                       |             
    0x0040f42d mov rax, qword [rax + 8]                          |             rax = *((rax + 8));
    0x0040f431 jmp 0x40f51e                                      |             goto label_116;
                                                                 | label_113:
    0x0040f436 add rax, 8                                        |             rax += 8;
                                                                 | label_114:
    0x0040f43a mov ecx, 0x73726966                               |             ecx = 0x73726966;
    0x0040f43f xor ecx, dword [rax]                              |             ecx ^= *(rax);
    0x0040f441 mov edx, 0x38207473                               |             edx = 0x38207473;
    0x0040f446 xor edx, dword [rax + 3]                          |             edx ^= *((rax + 3));
    0x0040f449 or edx, ecx                                       |             edx |= ecx;
                                                                 |             if (edx != 0) {
    0x0040f44b je 0x40f474                                       |                 
                                                                 | label_112:
    0x0040f44d call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f452 mov rbx, rax                                      |                 rbx = rax;
    0x0040f455 mov rdi, rax                                      |                 
    0x0040f458 call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f45d mov edi, 0x67b61f                                 |                 edi = "h.data() == \"first 8\";
    0x0040f462 mov esi, 0x134f                                   |                 esi = 0x134f;
    0x0040f467 call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f46c mov rdi, rbx                                      |                 
    0x0040f46f call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |             }
    0x0040f474 mov dword [rsp + 0x78], 6                         |             *((rsp + 0x78)) = 6;
    0x0040f47c lea rdi, [rsp + 8]                                |             
    0x0040f481 lea rsi, [rsp + 0xc0]                             |             
    0x0040f489 lea rdx, [rsp + 0x78]                             |             
    0x0040f48e call 0x455160                                     |             eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findUpperBoundR(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 8, rsp + 0xc0, rsp + 0x78);
    0x0040f493 test eax, eax                                     |             
                                                                 |             if (eax != 0) {
    0x0040f495 je 0x40f4be                                       |                 
    0x0040f497 call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f49c mov rbx, rax                                      |                 rbx = rax;
    0x0040f49f mov rdi, rax                                      |                 
    0x0040f4a2 call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f4a7 mov edi, 0x67b635                                 |                 edi = "!mX.findUpperBoundR(&h,6)";
    0x0040f4ac mov esi, 0x1351                                   |                 esi = 0x1351;
    0x0040f4b1 call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f4b6 mov rdi, rbx                                      |                 
    0x0040f4b9 call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |             }
    0x0040f4be mov rax, qword [rsp + 0xc8]                       |             rax = *((rsp + 0xc8));
    0x0040f4c6 cmp dword [rax + 0x38], 8                         |             
                                                                 |             if (*((rax + 0x38)) != 8) {
    0x0040f4ca je 0x40f4fb                                       |                 
    0x0040f4cc call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f4d1 mov rbx, rax                                      |                 rbx = rax;
    0x0040f4d4 mov rdi, rax                                      |                 
    0x0040f4d7 call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f4dc mov edi, 0x67b612                                 |                 edi = "h.key() == 8";
    0x0040f4e1 mov esi, 0x1352                                   |                 esi = 0x1352;
    0x0040f4e6 call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f4eb mov rdi, rbx                                      |                 
    0x0040f4ee call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040f4f3 mov rax, qword [rsp + 0xc8]                       |                 rax = *((rsp + 0xc8));
                                                                 |             }
    0x0040f4fb cmp qword [rax + 0x20], 7                         |             
                                                                 |             if (*((rax + 0x20)) != 7) {
    0x0040f500 jne 0x40f65f                                      |                 goto label_117;
                                                                 |             }
    0x0040f506 cmp qword [rax + 0x28], 0x17                      |             
                                                                 |             if (*((rax + 0x28)) == 0x17) {
    0x0040f50b je 0x40f648                                       |                 goto label_118;
                                                                 |             }
    0x0040f511 mov rax, qword [rax + 8]                          |             rax = *((rax + 8));
    0x0040f515 jmp 0x40f64c                                      |             goto label_119;
                                                                 |         }
    0x0040f51a add rax, 8                                        |         rax += 8;
                                                                 | label_116:
    0x0040f51e mov ecx, 0x73726966                               |         ecx = 0x73726966;
    0x0040f523 xor ecx, dword [rax]                              |         ecx ^= *(rax);
    0x0040f525 mov edx, 0x38207473                               |         edx = 0x38207473;
    0x0040f52a xor edx, dword [rax + 3]                          |         edx ^= *((rax + 3));
    0x0040f52d or edx, ecx                                       |         edx |= ecx;
                                                                 |         if (edx == 0) {
    0x0040f52f je 0x40f558                                       |             goto label_120;
                                                                 |         }
                                                                 |     }
    0x0040f531 call 0x64fbf0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f536 mov rbx, rax                                      |     rbx = rax;
    0x0040f539 mov rdi, rax                                      |     
    0x0040f53c call 0x64f8a0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f541 mov edi, 0x67b61f                                 |     edi = "h.data() == \"first 8\";
    0x0040f546 mov esi, 0x1428                                   |     esi = 0x1428;
    0x0040f54b call 0x405800                                     |     (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f550 mov rdi, rbx                                      |     
    0x0040f553 call 0x64f9f0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 | label_120:
    0x0040f558 mov dword [rsp + 0x78], 8                         |     *((rsp + 0x78)) = 8;
    0x0040f560 lea rdi, [rsp + 8]                                |     
    0x0040f565 lea rsi, [rsp + 0x1f0]                            |     
    0x0040f56d lea rdx, [rsp + 0x78]                             |     
    0x0040f572 call 0x4552e0                                     |     eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findUpperBound(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 8, rsp + 0x1f0, rsp + 0x78);
    0x0040f577 test eax, eax                                     |     
                                                                 |     if (eax == 0) {
    0x0040f579 jne 0x40f5a2                                      |         
    0x0040f57b call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f580 mov rbx, rax                                      |         rbx = rax;
    0x0040f583 mov rdi, rax                                      |         
    0x0040f586 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f58b mov edi, 0x67b8f2                                 |         edi = "mX.findUpperBound(&h, 8)";
    0x0040f590 mov esi, 0x142b                                   |         esi = 0x142b;
    0x0040f595 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f59a mov rdi, rbx                                      |         
    0x0040f59d call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040f5a2 mov dword [rsp + 0x78], 8                         |     *((rsp + 0x78)) = 8;
    0x0040f5aa lea rdi, [rsp + 8]                                |     
    0x0040f5af lea rsi, [rsp + 0x1f0]                            |     
    0x0040f5b7 lea rdx, [rsp + 0x78]                             |     
    0x0040f5bc call 0x455470                                     |     eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findLowerBound(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 8, rsp + 0x1f0, rsp + 0x78);
    0x0040f5c1 test eax, eax                                     |     
                                                                 |     if (eax != 0) {
    0x0040f5c3 je 0x40f5ec                                       |         
    0x0040f5c5 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f5ca mov rbx, rax                                      |         rbx = rax;
    0x0040f5cd mov rdi, rax                                      |         
    0x0040f5d0 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f5d5 mov edi, 0x67b90b                                 |         edi = "!mX.findLowerBound(&h, 8)";
    0x0040f5da mov esi, 0x142d                                   |         esi = 0x142d;
    0x0040f5df call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f5e4 mov rdi, rbx                                      |         
    0x0040f5e7 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040f5ec mov rax, qword [rsp + 0x1f8]                      |     rax = *((rsp + 0x1f8));
    0x0040f5f4 cmp dword [rax + 0x38], 8                         |     
                                                                 |     if (*((rax + 0x38)) != 8) {
    0x0040f5f8 je 0x40f629                                       |         
    0x0040f5fa call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f5ff mov rbx, rax                                      |         rbx = rax;
    0x0040f602 mov rdi, rax                                      |         
    0x0040f605 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f60a mov edi, 0x67b612                                 |         edi = "h.key() == 8";
    0x0040f60f mov esi, 0x142e                                   |         esi = 0x142e;
    0x0040f614 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f619 mov rdi, rbx                                      |         
    0x0040f61c call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040f621 mov rax, qword [rsp + 0x1f8]                      |         rax = *((rsp + 0x1f8));
                                                                 |     }
    0x0040f629 cmp qword [rax + 0x20], 7                         |     
                                                                 |     if (*((rax + 0x20)) == 7) {
    0x0040f62e jne 0x40f78d                                      |         
    0x0040f634 cmp qword [rax + 0x28], 0x17                      |         
                                                                 |         if (*((rax + 0x28)) != 0x17) {
    0x0040f639 je 0x40f776                                       |             
    0x0040f63f mov rax, qword [rax + 8]                          |             rax = *((rax + 8));
    0x0040f643 jmp 0x40f77a                                      |             goto label_121;
                                                                 | label_118:
    0x0040f648 add rax, 8                                        |             rax += 8;
                                                                 | label_119:
    0x0040f64c mov ecx, 0x73726966                               |             ecx = 0x73726966;
    0x0040f651 xor ecx, dword [rax]                              |             ecx ^= *(rax);
    0x0040f653 mov edx, 0x38207473                               |             edx = 0x38207473;
    0x0040f658 xor edx, dword [rax + 3]                          |             edx ^= *((rax + 3));
    0x0040f65b or edx, ecx                                       |             edx |= ecx;
                                                                 |             if (edx != 0) {
    0x0040f65d je 0x40f686                                       |                 
                                                                 | label_117:
    0x0040f65f call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f664 mov rbx, rax                                      |                 rbx = rax;
    0x0040f667 mov rdi, rax                                      |                 
    0x0040f66a call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f66f mov edi, 0x67b61f                                 |                 edi = "h.data() == \"first 8\";
    0x0040f674 mov esi, 0x1353                                   |                 esi = 0x1353;
    0x0040f679 call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f67e mov rdi, rbx                                      |                 
    0x0040f681 call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |             }
    0x0040f686 mov dword [rsp + 0x78], 8                         |             *((rsp + 0x78)) = 8;
    0x0040f68e lea rdi, [rsp + 8]                                |             
    0x0040f693 lea rsi, [rsp + 0xc0]                             |             
    0x0040f69b lea rdx, [rsp + 0x78]                             |             
    0x0040f6a0 call 0x455160                                     |             eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findUpperBoundR(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 8, rsp + 0xc0, rsp + 0x78);
    0x0040f6a5 test eax, eax                                     |             
                                                                 |             if (eax == 0) {
    0x0040f6a7 jne 0x40f6d0                                      |                 
    0x0040f6a9 call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f6ae mov rbx, rax                                      |                 rbx = rax;
    0x0040f6b1 mov rdi, rax                                      |                 
    0x0040f6b4 call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f6b9 mov edi, 0x67b64f                                 |                 edi = "mX.findUpperBoundR(&h, 8)";
    0x0040f6be mov esi, 0x1356                                   |                 esi = 0x1356;
    0x0040f6c3 call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f6c8 mov rdi, rbx                                      |                 
    0x0040f6cb call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |             }
    0x0040f6d0 mov dword [rsp + 0x78], 8                         |             *((rsp + 0x78)) = 8;
    0x0040f6d8 lea rdi, [rsp + 8]                                |             
    0x0040f6dd lea rsi, [rsp + 0xc0]                             |             
    0x0040f6e5 lea rdx, [rsp + 0x78]                             |             
    0x0040f6ea call 0x454fe0                                     |             eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findLowerBoundR(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 8, rsp + 0xc0, rsp + 0x78);
    0x0040f6ef test eax, eax                                     |             
                                                                 |             if (eax != 0) {
    0x0040f6f1 je 0x40f71a                                       |                 
    0x0040f6f3 call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f6f8 mov rbx, rax                                      |                 rbx = rax;
    0x0040f6fb mov rdi, rax                                      |                 
    0x0040f6fe call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f703 mov edi, 0x67b669                                 |                 edi = "!mX.findLowerBoundR(&h, 8)";
    0x0040f708 mov esi, 0x1358                                   |                 esi = 0x1358;
    0x0040f70d call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f712 mov rdi, rbx                                      |                 
    0x0040f715 call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |             }
    0x0040f71a mov rax, qword [rsp + 0xc8]                       |             rax = *((rsp + 0xc8));
    0x0040f722 cmp dword [rax + 0x38], 8                         |             
                                                                 |             if (*((rax + 0x38)) != 8) {
    0x0040f726 je 0x40f757                                       |                 
    0x0040f728 call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f72d mov rbx, rax                                      |                 rbx = rax;
    0x0040f730 mov rdi, rax                                      |                 
    0x0040f733 call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f738 mov edi, 0x67b612                                 |                 edi = "h.key() == 8";
    0x0040f73d mov esi, 0x1359                                   |                 esi = 0x1359;
    0x0040f742 call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f747 mov rdi, rbx                                      |                 
    0x0040f74a call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040f74f mov rax, qword [rsp + 0xc8]                       |                 rax = *((rsp + 0xc8));
                                                                 |             }
    0x0040f757 cmp qword [rax + 0x20], 7                         |             
                                                                 |             if (*((rax + 0x20)) != 7) {
    0x0040f75c jne 0x40f871                                      |                 goto label_122;
                                                                 |             }
    0x0040f762 cmp qword [rax + 0x28], 0x17                      |             
                                                                 |             if (*((rax + 0x28)) == 0x17) {
    0x0040f767 je 0x40f85a                                       |                 goto label_123;
                                                                 |             }
    0x0040f76d mov rax, qword [rax + 8]                          |             rax = *((rax + 8));
    0x0040f771 jmp 0x40f85e                                      |             goto label_124;
                                                                 |         }
    0x0040f776 add rax, 8                                        |         rax += 8;
                                                                 | label_121:
    0x0040f77a mov ecx, 0x73726966                               |         ecx = 0x73726966;
    0x0040f77f xor ecx, dword [rax]                              |         ecx ^= *(rax);
    0x0040f781 mov edx, 0x38207473                               |         edx = 0x38207473;
    0x0040f786 xor edx, dword [rax + 3]                          |         edx ^= *((rax + 3));
    0x0040f789 or edx, ecx                                       |         edx |= ecx;
                                                                 |         if (edx == 0) {
    0x0040f78b je 0x40f7b4                                       |             goto label_125;
                                                                 |         }
                                                                 |     }
    0x0040f78d call 0x64fbf0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f792 mov rbx, rax                                      |     rbx = rax;
    0x0040f795 mov rdi, rax                                      |     
    0x0040f798 call 0x64f8a0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f79d mov edi, 0x67b61f                                 |     edi = "h.data() == \"first 8\";
    0x0040f7a2 mov esi, 0x142f                                   |     esi = 0x142f;
    0x0040f7a7 call 0x405800                                     |     (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f7ac mov rdi, rbx                                      |     
    0x0040f7af call 0x64f9f0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 | label_125:
    0x0040f7b4 mov dword [rsp + 0x78], 4                         |     *((rsp + 0x78)) = 4;
    0x0040f7bc lea rdi, [rsp + 8]                                |     
    0x0040f7c1 lea rsi, [rsp + 0x1f0]                            |     
    0x0040f7c9 lea rdx, [rsp + 0x78]                             |     
    0x0040f7ce call 0x4552e0                                     |     eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findUpperBound(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 8, rsp + 0x1f0, rsp + 0x78);
    0x0040f7d3 test eax, eax                                     |     
                                                                 |     if (eax != 0) {
    0x0040f7d5 je 0x40f7fe                                       |         
    0x0040f7d7 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f7dc mov rbx, rax                                      |         rbx = rax;
    0x0040f7df mov rdi, rax                                      |         
    0x0040f7e2 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f7e7 mov edi, 0x67b925                                 |         edi = "!mX.findUpperBound(&h, 4)";
    0x0040f7ec mov esi, 0x1432                                   |         esi = 0x1432;
    0x0040f7f1 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f7f6 mov rdi, rbx                                      |         
    0x0040f7f9 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040f7fe mov rax, qword [rsp + 0x1f8]                      |     rax = *((rsp + 0x1f8));
    0x0040f806 cmp dword [rax + 0x38], 8                         |     
                                                                 |     if (*((rax + 0x38)) != 8) {
    0x0040f80a je 0x40f83b                                       |         
    0x0040f80c call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f811 mov rbx, rax                                      |         rbx = rax;
    0x0040f814 mov rdi, rax                                      |         
    0x0040f817 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f81c mov edi, 0x67b612                                 |         edi = "h.key() == 8";
    0x0040f821 mov esi, 0x1433                                   |         esi = 0x1433;
    0x0040f826 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f82b mov rdi, rbx                                      |         
    0x0040f82e call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040f833 mov rax, qword [rsp + 0x1f8]                      |         rax = *((rsp + 0x1f8));
                                                                 |     }
    0x0040f83b cmp qword [rax + 0x20], 7                         |     
                                                                 |     if (*((rax + 0x20)) == 7) {
    0x0040f840 jne 0x40f955                                      |         
    0x0040f846 cmp qword [rax + 0x28], 0x17                      |         
                                                                 |         if (*((rax + 0x28)) != 0x17) {
    0x0040f84b je 0x40f93e                                       |             
    0x0040f851 mov rax, qword [rax + 8]                          |             rax = *((rax + 8));
    0x0040f855 jmp 0x40f942                                      |             goto label_126;
                                                                 | label_123:
    0x0040f85a add rax, 8                                        |             rax += 8;
                                                                 | label_124:
    0x0040f85e mov ecx, 0x73726966                               |             ecx = 0x73726966;
    0x0040f863 xor ecx, dword [rax]                              |             ecx ^= *(rax);
    0x0040f865 mov edx, 0x38207473                               |             edx = 0x38207473;
    0x0040f86a xor edx, dword [rax + 3]                          |             edx ^= *((rax + 3));
    0x0040f86d or edx, ecx                                       |             edx |= ecx;
                                                                 |             if (edx != 0) {
    0x0040f86f je 0x40f898                                       |                 
                                                                 | label_122:
    0x0040f871 call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f876 mov rbx, rax                                      |                 rbx = rax;
    0x0040f879 mov rdi, rax                                      |                 
    0x0040f87c call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f881 mov edi, 0x67b61f                                 |                 edi = "h.data() == \"first 8\";
    0x0040f886 mov esi, 0x135a                                   |                 esi = 0x135a;
    0x0040f88b call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f890 mov rdi, rbx                                      |                 
    0x0040f893 call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |             }
    0x0040f898 mov dword [rsp + 0x78], 4                         |             *((rsp + 0x78)) = 4;
    0x0040f8a0 lea rdi, [rsp + 8]                                |             
    0x0040f8a5 lea rsi, [rsp + 0xc0]                             |             
    0x0040f8ad lea rdx, [rsp + 0x78]                             |             
    0x0040f8b2 call 0x455160                                     |             eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findUpperBoundR(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 8, rsp + 0xc0, rsp + 0x78);
    0x0040f8b7 test eax, eax                                     |             
                                                                 |             if (eax != 0) {
    0x0040f8b9 je 0x40f8e2                                       |                 
    0x0040f8bb call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f8c0 mov rbx, rax                                      |                 rbx = rax;
    0x0040f8c3 mov rdi, rax                                      |                 
    0x0040f8c6 call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f8cb mov edi, 0x67b684                                 |                 edi = "!mX.findUpperBoundR(&h, 4)";
    0x0040f8d0 mov esi, 0x135d                                   |                 esi = 0x135d;
    0x0040f8d5 call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f8da mov rdi, rbx                                      |                 
    0x0040f8dd call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |             }
    0x0040f8e2 mov rax, qword [rsp + 0xc8]                       |             rax = *((rsp + 0xc8));
    0x0040f8ea cmp dword [rax + 0x38], 8                         |             
                                                                 |             if (*((rax + 0x38)) != 8) {
    0x0040f8ee je 0x40f91f                                       |                 
    0x0040f8f0 call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f8f5 mov rbx, rax                                      |                 rbx = rax;
    0x0040f8f8 mov rdi, rax                                      |                 
    0x0040f8fb call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f900 mov edi, 0x67b612                                 |                 edi = "h.key() == 8";
    0x0040f905 mov esi, 0x135e                                   |                 esi = 0x135e;
    0x0040f90a call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f90f mov rdi, rbx                                      |                 
    0x0040f912 call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040f917 mov rax, qword [rsp + 0xc8]                       |                 rax = *((rsp + 0xc8));
                                                                 |             }
    0x0040f91f cmp qword [rax + 0x20], 7                         |             
                                                                 |             if (*((rax + 0x20)) != 7) {
    0x0040f924 jne 0x40fa39                                      |                 goto label_127;
                                                                 |             }
    0x0040f92a cmp qword [rax + 0x28], 0x17                      |             
                                                                 |             if (*((rax + 0x28)) == 0x17) {
    0x0040f92f je 0x40fa22                                       |                 goto label_128;
                                                                 |             }
    0x0040f935 mov rax, qword [rax + 8]                          |             rax = *((rax + 8));
    0x0040f939 jmp 0x40fa26                                      |             goto label_129;
                                                                 |         }
    0x0040f93e add rax, 8                                        |         rax += 8;
                                                                 | label_126:
    0x0040f942 mov ecx, 0x73726966                               |         ecx = 0x73726966;
    0x0040f947 xor ecx, dword [rax]                              |         ecx ^= *(rax);
    0x0040f949 mov edx, 0x38207473                               |         edx = 0x38207473;
    0x0040f94e xor edx, dword [rax + 3]                          |         edx ^= *((rax + 3));
    0x0040f951 or edx, ecx                                       |         edx |= ecx;
                                                                 |         if (edx == 0) {
    0x0040f953 je 0x40f97c                                       |             goto label_130;
                                                                 |         }
                                                                 |     }
    0x0040f955 call 0x64fbf0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f95a mov rbx, rax                                      |     rbx = rax;
    0x0040f95d mov rdi, rax                                      |     
    0x0040f960 call 0x64f8a0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f965 mov edi, 0x67b61f                                 |     edi = "h.data() == \"first 8\";
    0x0040f96a mov esi, 0x1434                                   |     esi = 0x1434;
    0x0040f96f call 0x405800                                     |     (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f974 mov rdi, rbx                                      |     
    0x0040f977 call 0x64f9f0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 | label_130:
    0x0040f97c mov dword [rsp + 0x78], 4                         |     *((rsp + 0x78)) = 4;
    0x0040f984 lea rdi, [rsp + 8]                                |     
    0x0040f989 lea rsi, [rsp + 0x1f0]                            |     
    0x0040f991 lea rdx, [rsp + 0x78]                             |     
    0x0040f996 call 0x455470                                     |     eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findLowerBound(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 8, rsp + 0x1f0, rsp + 0x78);
    0x0040f99b test eax, eax                                     |     
                                                                 |     if (eax != 0) {
    0x0040f99d je 0x40f9c6                                       |         
    0x0040f99f call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f9a4 mov rbx, rax                                      |         rbx = rax;
    0x0040f9a7 mov rdi, rax                                      |         
    0x0040f9aa call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f9af mov edi, 0x67b93f                                 |         edi = "!mX.findLowerBound(&h, 4)";
    0x0040f9b4 mov esi, 0x1436                                   |         esi = 0x1436;
    0x0040f9b9 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f9be mov rdi, rbx                                      |         
    0x0040f9c1 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040f9c6 mov rax, qword [rsp + 0x1f8]                      |     rax = *((rsp + 0x1f8));
    0x0040f9ce cmp dword [rax + 0x38], 4                         |     
                                                                 |     if (*((rax + 0x38)) != 4) {
    0x0040f9d2 je 0x40fa03                                       |         
    0x0040f9d4 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040f9d9 mov rbx, rax                                      |         rbx = rax;
    0x0040f9dc mov rdi, rax                                      |         
    0x0040f9df call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040f9e4 mov edi, 0x67b6ba                                 |         edi = "h.key() == 4";
    0x0040f9e9 mov esi, 0x1437                                   |         esi = 0x1437;
    0x0040f9ee call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040f9f3 mov rdi, rbx                                      |         
    0x0040f9f6 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040f9fb mov rax, qword [rsp + 0x1f8]                      |         rax = *((rsp + 0x1f8));
                                                                 |     }
    0x0040fa03 cmp qword [rax + 0x20], 7                         |     
                                                                 |     if (*((rax + 0x20)) == 7) {
    0x0040fa08 jne 0x40fb1d                                      |         
    0x0040fa0e cmp qword [rax + 0x28], 0x17                      |         
                                                                 |         if (*((rax + 0x28)) != 0x17) {
    0x0040fa13 je 0x40fb06                                       |             
    0x0040fa19 mov rax, qword [rax + 8]                          |             rax = *((rax + 8));
    0x0040fa1d jmp 0x40fb0a                                      |             goto label_131;
                                                                 | label_128:
    0x0040fa22 add rax, 8                                        |             rax += 8;
                                                                 | label_129:
    0x0040fa26 mov ecx, 0x73726966                               |             ecx = 0x73726966;
    0x0040fa2b xor ecx, dword [rax]                              |             ecx ^= *(rax);
    0x0040fa2d mov edx, 0x38207473                               |             edx = 0x38207473;
    0x0040fa32 xor edx, dword [rax + 3]                          |             edx ^= *((rax + 3));
    0x0040fa35 or edx, ecx                                       |             edx |= ecx;
                                                                 |             if (edx != 0) {
    0x0040fa37 je 0x40fa60                                       |                 
                                                                 | label_127:
    0x0040fa39 call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040fa3e mov rbx, rax                                      |                 rbx = rax;
    0x0040fa41 mov rdi, rax                                      |                 
    0x0040fa44 call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040fa49 mov edi, 0x67b61f                                 |                 edi = "h.data() == \"first 8\";
    0x0040fa4e mov esi, 0x135f                                   |                 esi = 0x135f;
    0x0040fa53 call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040fa58 mov rdi, rbx                                      |                 
    0x0040fa5b call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |             }
    0x0040fa60 mov dword [rsp + 0x78], 4                         |             *((rsp + 0x78)) = 4;
    0x0040fa68 lea rdi, [rsp + 8]                                |             
    0x0040fa6d lea rsi, [rsp + 0xc0]                             |             
    0x0040fa75 lea rdx, [rsp + 0x78]                             |             
    0x0040fa7a call 0x454fe0                                     |             eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findLowerBoundR(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 8, rsp + 0xc0, rsp + 0x78);
    0x0040fa7f test eax, eax                                     |             
                                                                 |             if (eax != 0) {
    0x0040fa81 je 0x40faaa                                       |                 
    0x0040fa83 call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040fa88 mov rbx, rax                                      |                 rbx = rax;
    0x0040fa8b mov rdi, rax                                      |                 
    0x0040fa8e call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040fa93 mov edi, 0x67b69f                                 |                 edi = "!mX.findLowerBoundR(&h, 4)";
    0x0040fa98 mov esi, 0x1361                                   |                 esi = 0x1361;
    0x0040fa9d call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040faa2 mov rdi, rbx                                      |                 
    0x0040faa5 call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |             }
    0x0040faaa mov rax, qword [rsp + 0xc8]                       |             rax = *((rsp + 0xc8));
    0x0040fab2 cmp dword [rax + 0x38], 4                         |             
                                                                 |             if (*((rax + 0x38)) != 4) {
    0x0040fab6 je 0x40fae7                                       |                 
    0x0040fab8 call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040fabd mov rbx, rax                                      |                 rbx = rax;
    0x0040fac0 mov rdi, rax                                      |                 
    0x0040fac3 call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040fac8 mov edi, 0x67b6ba                                 |                 edi = "h.key() == 4";
    0x0040facd mov esi, 0x1362                                   |                 esi = 0x1362;
    0x0040fad2 call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040fad7 mov rdi, rbx                                      |                 
    0x0040fada call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040fadf mov rax, qword [rsp + 0xc8]                       |                 rax = *((rsp + 0xc8));
                                                                 |             }
    0x0040fae7 cmp qword [rax + 0x20], 7                         |             
                                                                 |             if (*((rax + 0x20)) != 7) {
    0x0040faec jne 0x40fe02                                      |                 goto label_132;
                                                                 |             }
    0x0040faf2 cmp qword [rax + 0x28], 0x17                      |             
                                                                 |             if (*((rax + 0x28)) == 0x17) {
    0x0040faf7 je 0x40fdeb                                       |                 goto label_133;
                                                                 |             }
    0x0040fafd mov rax, qword [rax + 8]                          |             rax = *((rax + 8));
    0x0040fb01 jmp 0x40fdef                                      |             goto label_134;
                                                                 |         }
    0x0040fb06 add rax, 8                                        |         rax += 8;
                                                                 | label_131:
    0x0040fb0a mov ecx, 0x73726966                               |         ecx = 0x73726966;
    0x0040fb0f xor ecx, dword [rax]                              |         ecx ^= *(rax);
    0x0040fb11 mov edx, 0x34207473                               |         edx = 0x34207473;
    0x0040fb16 xor edx, dword [rax + 3]                          |         edx ^= *((rax + 3));
    0x0040fb19 or edx, ecx                                       |         edx |= ecx;
                                                                 |         if (edx == 0) {
    0x0040fb1b je 0x40fb44                                       |             goto label_135;
                                                                 |         }
                                                                 |     }
    0x0040fb1d call 0x64fbf0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040fb22 mov rbx, rax                                      |     rbx = rax;
    0x0040fb25 mov rdi, rax                                      |     
    0x0040fb28 call 0x64f8a0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040fb2d mov edi, 0x67b6c7                                 |     edi = "h.data() == \"first 4\";
    0x0040fb32 mov esi, 0x1438                                   |     esi = 0x1438;
    0x0040fb37 call 0x405800                                     |     (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040fb3c mov rdi, rbx                                      |     
    0x0040fb3f call 0x64f9f0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 | label_135:
    0x0040fb44 cmp dword [rip + 0x50a891], 0                     |     
                                                                 |     if (*(obj.veryVerbose) != 0) {
    0x0040fb4b je 0x40fb65                                       |         
    0x0040fb4d lea rdi, [rsp + 8]                                |         
    0x0040fb52 mov esi, 0x91a328                                 |         
    0x0040fb57 xor edx, edx                                      |         
    0x0040fb59 mov ecx, 4                                        |         
    0x0040fb5e call 0x454cb0                                     |         BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::print(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,int,int)const (rsp + 8, obj.std::__1::cout, 0, 4);
    0x0040fb63 jmp 0x40fbd8                                      |         
                                                                 |     } else {
    0x0040fb65 cmp dword [rip + 0x50a86c], 0                     |         
                                                                 |         if (*(obj.verbose) == 0) {
    0x0040fb6c je 0x40fbd8                                       |             goto label_136;
                                                                 |         }
    0x0040fb6e lea rdi, [rsp + 8]                                |         
    0x0040fb73 mov esi, 0x91a328                                 |         
    0x0040fb78 xor edx, edx                                      |         
    0x0040fb7a mov ecx, 0xffffffff                               |         
    0x0040fb7f call 0x454cb0                                     |         rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::print(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,int,int)const (rsp + 8, obj.std::__1::cout, 0, 0xffffffff);
    0x0040fb84 mov rbx, rax                                      |         rbx = rax;
    0x0040fb87 mov rax, qword [rax]                              |         rax = *(rax);
    0x0040fb8a mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040fb8e add rsi, rbx                                      |         rsi += rbx;
    0x0040fb91 lea rdi, [rsp + 0x78]                             |         rdi = rsp + 0x78;
    0x0040fb96 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040fb9b lea rdi, [rsp + 0x78]                             |         rdi = rsp + 0x78;
    0x0040fba0 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040fba5 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040fbaa mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040fbad mov rdi, rax                                      |         rdi = rax;
    0x0040fbb0 mov esi, 0xa                                      |         esi = 0xa;
    0x0040fbb5 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040fbb8 mov ebp, eax                                      |         
    0x0040fbba lea rdi, [rsp + 0x78]                             |         rdi = rsp + 0x78;
    0x0040fbbf call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040fbc4 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x0040fbc8 mov rdi, rbx                                      |         rdi = rbx;
    0x0040fbcb call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040fbd0 mov rdi, rbx                                      |         rdi = rbx;
    0x0040fbd3 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
                                                                 | label_136:
    0x0040fbd8 mov rbx, qword [rsp + 0x1f8]                      |     rbx = *((rsp + 0x1f8));
    0x0040fbe0 test rbx, rbx                                     |     
                                                                 |     if (rbx != 0) {
    0x0040fbe3 je 0x40fc22                                       |         
    0x0040fbe5 mov rbp, qword [rsp + 0x1f0]                      |         rbp = *((rsp + 0x1f0));
    0x0040fbed mov rdi, rbx                                      |         
    0x0040fbf0 call 0x649ba0                                     |         eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (rbx);
    0x0040fbf5 test eax, eax                                     |         
                                                                 |         if (eax != 0) {
    0x0040fbf7 jne 0x40fc22                                      |             goto label_137;
                                                                 |         }
    0x0040fbf9 cmp qword [rbx + 0x28], 0x17                      |         
                                                                 |         if (*((rbx + 0x28)) != 0x17) {
    0x0040fbfe je 0x40fc0e                                       |             
    0x0040fc00 mov rsi, qword [rbx + 8]                          |             rsi = *((rbx + 8));
    0x0040fc04 mov rdi, qword [rbx + 0x30]                       |             rdi = *((rbx + 0x30));
    0x0040fc08 mov rax, qword [rdi]                              |             rax = *(rdi);
    0x0040fc0b call qword [rax + 0x18]                           |             uint64_t (*rax + 0x18)() ();
                                                                 |         }
    0x0040fc0e mov qword [rbx + 0x20], 0xffffffffffffffff        |         *((rbx + 0x20)) = 0xffffffffffffffff;
    0x0040fc16 mov rdi, qword [rbp + 0x50]                       |         
    0x0040fc1a mov rsi, rbx                                      |         
    0x0040fc1d call 0x64a300                                     |         BloombergLP::bdlcc::SkipList_PoolUtil::deallocate(BloombergLP::bdlcc::SkipList_PoolManager*,void*) (*((rbp + 0x50)), rbx);
                                                                 |     }
                                                                 | label_137:
    0x0040fc22 lea rdi, [rsp + 8]                                |     
    0x0040fc27 call 0x454c10                                     |     BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::~SkipList() (rsp + 8);
    0x0040fc2c cmp dword [rip + 0x50a7a5], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040fc33 je 0x40fcd1                                       |         
    0x0040fc39 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040fc3e mov r15, rax                                      |         r15 = rax;
    0x0040fc41 mov rdi, rax                                      |         
    0x0040fc44 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040fc49 mov edi, 0x91a328                                 |         
    0x0040fc4e mov esi, 0x67b4d5                                 |         
    0x0040fc53 mov edx, 0x15                                     |         
    0x0040fc58 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "da.numBytesInUse() = ", 0x15);
    0x0040fc5d mov rsi, qword [rsp + 0x490]                      |         rsi = *((rsp + 0x490));
    0x0040fc65 mov rdi, rax                                      |         rdi = rax;
    0x0040fc68 call 0x405130                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (long long) ();
    0x0040fc6d mov rbp, rax                                      |         
    0x0040fc70 mov rax, qword [rax]                              |         rax = *(rax);
    0x0040fc73 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040fc77 add rsi, rbp                                      |         rsi += rbp;
    0x0040fc7a lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040fc82 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040fc87 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040fc8f mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040fc94 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040fc99 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040fc9c mov rdi, rax                                      |         rdi = rax;
    0x0040fc9f mov esi, 0xa                                      |         esi = 0xa;
    0x0040fca4 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040fca7 mov ebx, eax                                      |         ebx = eax;
    0x0040fca9 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040fcb1 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040fcb6 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x0040fcb9 mov rdi, rbp                                      |         rdi = rbp;
    0x0040fcbc call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040fcc1 mov rdi, rbp                                      |         rdi = rbp;
    0x0040fcc4 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040fcc9 mov rdi, r15                                      |         
    0x0040fccc call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r15);
                                                                 |     }
    0x0040fcd1 mov rax, qword [rsp + 0x490]                      |     rax = *((rsp + 0x490));
    0x0040fcd9 test rax, rax                                     |     
                                                                 |     if (rax != 0) {
    0x0040fcdc je 0x40fd05                                       |         
    0x0040fcde call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040fce3 mov rbx, rax                                      |         rbx = rax;
    0x0040fce6 mov rdi, rax                                      |         
    0x0040fce9 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040fcee mov edi, 0x67b4eb                                 |         edi = "0 == da.numBytesInUse()";
    0x0040fcf3 mov esi, 0x1440                                   |         esi = 0x1440;
    0x0040fcf8 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040fcfd mov rdi, rbx                                      |         
    0x0040fd00 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040fd05 cmp dword [rip + 0x50a6cc], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040fd0c je 0x40fdaa                                       |         
    0x0040fd12 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040fd17 mov r15, rax                                      |         r15 = rax;
    0x0040fd1a mov rdi, rax                                      |         
    0x0040fd1d call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040fd22 mov edi, 0x91a328                                 |         
    0x0040fd27 mov esi, 0x67b503                                 |         
    0x0040fd2c mov edx, 0x15                                     |         
    0x0040fd31 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "ta.numBytesInUse() = ", 0x15);
    0x0040fd36 mov rsi, qword [rsp + 0x110]                      |         rsi = *((rsp + 0x110));
    0x0040fd3e mov rdi, rax                                      |         rdi = rax;
    0x0040fd41 call 0x405130                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (long long) ();
    0x0040fd46 mov rbp, rax                                      |         
    0x0040fd49 mov rax, qword [rax]                              |         rax = *(rax);
    0x0040fd4c mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040fd50 add rsi, rbp                                      |         rsi += rbp;
    0x0040fd53 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040fd5b call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040fd60 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040fd68 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040fd6d call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040fd72 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040fd75 mov rdi, rax                                      |         rdi = rax;
    0x0040fd78 mov esi, 0xa                                      |         esi = 0xa;
    0x0040fd7d call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040fd80 mov ebx, eax                                      |         ebx = eax;
    0x0040fd82 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040fd8a call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040fd8f movsx esi, bl                                     |         esi = (int32_t) bl;
    0x0040fd92 mov rdi, rbp                                      |         rdi = rbp;
    0x0040fd95 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040fd9a mov rdi, rbp                                      |         rdi = rbp;
    0x0040fd9d call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040fda2 mov rdi, r15                                      |         
    0x0040fda5 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r15);
                                                                 |     }
    0x0040fdaa mov rax, qword [rsp + 0x110]                      |     rax = *((rsp + 0x110));
    0x0040fdb2 test rax, rax                                     |     
                                                                 |     if (rax != 0) {
    0x0040fdb5 je 0x40fdde                                       |         
    0x0040fdb7 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040fdbc mov rbx, rax                                      |         rbx = rax;
    0x0040fdbf mov rdi, rax                                      |         
    0x0040fdc2 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040fdc7 mov edi, 0x67b519                                 |         edi = "0 == ta.numBytesInUse()";
    0x0040fdcc mov esi, 0x1442                                   |         esi = 0x1442;
    0x0040fdd1 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040fdd6 mov rdi, rbx                                      |         
    0x0040fdd9 call 0x64f9f0                                     |         rax = BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040fdde lea rdi, [rsp + 0x560]                            |     rdi = rsp + 0x560;
    0x0040fde6 jmp 0x411b5a                                      |     goto label_138;
                                                                 | label_133:
    0x0040fdeb add rax, 8                                        |     rax += 8;
                                                                 | label_134:
    0x0040fdef mov ecx, 0x73726966                               |     ecx = 0x73726966;
    0x0040fdf4 xor ecx, dword [rax]                              |     ecx ^= *(rax);
    0x0040fdf6 mov edx, 0x34207473                               |     edx = 0x34207473;
    0x0040fdfb xor edx, dword [rax + 3]                          |     edx ^= *((rax + 3));
    0x0040fdfe or edx, ecx                                       |     edx |= ecx;
                                                                 |     if (edx != 0) {
    0x0040fe00 je 0x40fe29                                       |         
                                                                 | label_132:
    0x0040fe02 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040fe07 mov rbx, rax                                      |         rbx = rax;
    0x0040fe0a mov rdi, rax                                      |         
    0x0040fe0d call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040fe12 mov edi, 0x67b6c7                                 |         edi = "h.data() == \"first 4\";
    0x0040fe17 mov esi, 0x1363                                   |         esi = 0x1363;
    0x0040fe1c call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040fe21 mov rdi, rbx                                      |         
    0x0040fe24 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040fe29 cmp dword [rip + 0x50a5ac], 0                     |     
                                                                 |     if (*(obj.veryVerbose) != 0) {
    0x0040fe30 je 0x40fe4a                                       |         
    0x0040fe32 lea rdi, [rsp + 8]                                |         
    0x0040fe37 mov esi, 0x91a328                                 |         
    0x0040fe3c xor edx, edx                                      |         
    0x0040fe3e mov ecx, 4                                        |         
    0x0040fe43 call 0x454cb0                                     |         BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::print(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,int,int)const (rsp + 8, obj.std::__1::cout, 0, 4);
    0x0040fe48 jmp 0x40febd                                      |         
                                                                 |     } else {
    0x0040fe4a cmp dword [rip + 0x50a587], 0                     |         
                                                                 |         if (*(obj.verbose) == 0) {
    0x0040fe51 je 0x40febd                                       |             goto label_139;
                                                                 |         }
    0x0040fe53 lea rdi, [rsp + 8]                                |         
    0x0040fe58 mov esi, 0x91a328                                 |         
    0x0040fe5d xor edx, edx                                      |         
    0x0040fe5f mov ecx, 0xffffffff                               |         
    0x0040fe64 call 0x454cb0                                     |         rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::print(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,int,int)const (rsp + 8, obj.std::__1::cout, 0, 0xffffffff);
    0x0040fe69 mov rbx, rax                                      |         rbx = rax;
    0x0040fe6c mov rax, qword [rax]                              |         rax = *(rax);
    0x0040fe6f mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040fe73 add rsi, rbx                                      |         rsi += rbx;
    0x0040fe76 lea rdi, [rsp + 0x78]                             |         rdi = rsp + 0x78;
    0x0040fe7b call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040fe80 lea rdi, [rsp + 0x78]                             |         rdi = rsp + 0x78;
    0x0040fe85 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040fe8a call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040fe8f mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040fe92 mov rdi, rax                                      |         rdi = rax;
    0x0040fe95 mov esi, 0xa                                      |         esi = 0xa;
    0x0040fe9a call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040fe9d mov ebp, eax                                      |         
    0x0040fe9f lea rdi, [rsp + 0x78]                             |         rdi = rsp + 0x78;
    0x0040fea4 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040fea9 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x0040fead mov rdi, rbx                                      |         rdi = rbx;
    0x0040feb0 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040feb5 mov rdi, rbx                                      |         rdi = rbx;
    0x0040feb8 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
                                                                 | label_139:
    0x0040febd mov rbx, qword [rsp + 0xc8]                       |     rbx = *((rsp + 0xc8));
    0x0040fec5 test rbx, rbx                                     |     
                                                                 |     if (rbx != 0) {
    0x0040fec8 je 0x40ff07                                       |         
    0x0040feca mov rbp, qword [rsp + 0xc0]                       |         rbp = *((rsp + 0xc0));
    0x0040fed2 mov rdi, rbx                                      |         
    0x0040fed5 call 0x649ba0                                     |         eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (rbx);
    0x0040feda test eax, eax                                     |         
                                                                 |         if (eax != 0) {
    0x0040fedc jne 0x40ff07                                      |             goto label_140;
                                                                 |         }
    0x0040fede cmp qword [rbx + 0x28], 0x17                      |         
                                                                 |         if (*((rbx + 0x28)) != 0x17) {
    0x0040fee3 je 0x40fef3                                       |             
    0x0040fee5 mov rsi, qword [rbx + 8]                          |             rsi = *((rbx + 8));
    0x0040fee9 mov rdi, qword [rbx + 0x30]                       |             rdi = *((rbx + 0x30));
    0x0040feed mov rax, qword [rdi]                              |             rax = *(rdi);
    0x0040fef0 call qword [rax + 0x18]                           |             uint64_t (*rax + 0x18)() ();
                                                                 |         }
    0x0040fef3 mov qword [rbx + 0x20], 0xffffffffffffffff        |         *((rbx + 0x20)) = 0xffffffffffffffff;
    0x0040fefb mov rdi, qword [rbp + 0x50]                       |         
    0x0040feff mov rsi, rbx                                      |         
    0x0040ff02 call 0x64a300                                     |         BloombergLP::bdlcc::SkipList_PoolUtil::deallocate(BloombergLP::bdlcc::SkipList_PoolManager*,void*) (*((rbp + 0x50)), rbx);
                                                                 |     }
                                                                 | label_140:
    0x0040ff07 lea rdi, [rsp + 8]                                |     
    0x0040ff0c call 0x454c10                                     |     BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::~SkipList() (rsp + 8);
    0x0040ff11 mov ebx, 1                                        |     ebx = 1;
    0x0040ff16 lock xadd dword [rip + 0x50a4d2], ebx             |     __asm ("lock xadd dword [obj._anonymous_namespace_::u::RandGen::s_globalSeed], ebx");
    0x0040ff1e mov qword [rsp + 0x78], 0                         |     *((rsp + 0x78)) = 0;
    0x0040ff27 lea rax, [rsp + 0x440]                            |     rax = rsp + 0x440;
    0x0040ff2f mov qword [rsp + 0xa0], rax                       |     *((rsp + 0xa0)) = rax;
    0x0040ff37 movapd xmm0, xmmword [rip + 0x26a481]             |     __asm ("movapd xmm0, xmmword [0x0067a3c0]");
    0x0040ff3f movupd xmmword [rsp + 0x90], xmm0                 |     __asm ("movupd xmmword [rsp + 0x90], xmm0");
    0x0040ff48 lea rdi, [rsp + 0x78]                             |     
    0x0040ff4d mov esi, 0x67b6dd                                 |     
    0x0040ff52 mov edx, 4                                        |     
    0x0040ff57 mov ecx, 0x67cde6                                 |     
    0x0040ff5c call 0x653850                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rsp + 0x78, "woof", 4, "string<...>::assign(char*...): string too long");
    0x0040ff61 inc ebx                                           |     ebx++;
    0x0040ff63 movsxd rax, ebx                                   |     rax = (int64_t) ebx;
    0x0040ff66 movabs rcx, 0xb046976f22528f5                     |     rcx = 0xb046976f22528f5;
    0x0040ff70 imul rcx, rax                                     |     rcx *= rax;
    0x0040ff74 movabs rax, 0x9af678222e728119                    |     rax = 0x9af678222e728119;
    0x0040ff7e add rax, rcx                                      |     rax += rcx;
    0x0040ff81 mov qword [rsp + 0x1e8], rax                      |     *((rsp + 0x1e8)) = rax;
    0x0040ff89 lea r12, [rsp + 0x28]                             |     r12 = rsp + 0x28;
    0x0040ff8e xor eax, eax                                      |     eax = 0;
    0x0040ff90 mov qword [rsp + 0x1e0], rax                      |     *((rsp + 0x1e0)) = rax;
    0x0040ff98 lea r15, [rsp + 8]                                |     r15 = rsp + 8;
    0x0040ff9d jmp 0x40ffc3                                      |     
    0x0040ffc3 xorpd xmm0, xmm0                                  |     __asm ("xorpd xmm0, xmm0");
    0x0040ffc7 movapd xmmword [rsp + 0x570], xmm0                |     __asm ("movapd xmmword [rsp + 0x570], xmm0");
    0x0040ffd0 movapd xmmword [rsp + 0x560], xmm0                |     __asm ("movapd xmmword [rsp + 0x560], xmm0");
    0x0040ffd9 mov qword [rsp + 0x580], 0                        |     *((rsp + 0x580)) = 0;
    0x0040ffe5 mov rdi, r15                                      |     
    0x0040ffe8 call 0x649c40                                     |     BloombergLP::bdlcc::SkipList_RandomLevelGenerator::SkipList_RandomLevelGenerator() (r15);
    0x0040ffed mov dword [rsp + 0x10], 0                         |     *((rsp + 0x10)) = 0;
    0x0040fff5 mov rdi, r12                                      |     rdi = r12;
    0x0040fff8 xor esi, esi                                      |     esi = 0;
    0x0040fffa call 0x404cc0                                     |     pthread_mutex_init ();
    0x0040ffff mov dword [rsp + 0x50], 0                         |     *((rsp + 0x50)) = 0;
    0x00410007 mov qword [rsp + 0x58], 0                         |     *((rsp + 0x58)) = 0;
    0x00410010 lea rdx, [rsp + 0x440]                            |     
    0x00410018 mov qword [rsp + 0x60], rdx                       |     *((rsp + 0x60)) = rdx;
    0x0041001d movaps xmm0, xmmword [rip + 0x26a3ac]             |     xmm0 = *(0x0067a3d0);
    0x00410024 movaps xmmword [rsp + 0xc0], xmm0                 |     *((rsp + 0xc0)) = xmm0;
    0x0041002c movaps xmm0, xmmword [rip + 0x26a3ad]             |     xmm0 = *(0x0067a3e0);
    0x00410033 movaps xmmword [rsp + 0xd0], xmm0                 |     *((rsp + 0xd0)) = xmm0;
    0x0041003b movaps xmm0, xmmword [rip + 0x26a3ae]             |     xmm0 = *(0x0067a3f0);
    0x00410042 movaps xmmword [rsp + 0xe0], xmm0                 |     *((rsp + 0xe0)) = xmm0;
    0x0041004a movaps xmm0, xmmword [rip + 0x26a3af]             |     xmm0 = *(0x0067a400);
    0x00410051 movaps xmmword [rsp + 0xf0], xmm0                 |     *((rsp + 0xf0)) = xmm0;
    0x00410059 movaps xmm0, xmmword [rip + 0x26a3b0]             |     xmm0 = *(0x0067a410);
    0x00410060 movaps xmmword [rsp + 0x100], xmm0                |     *((rsp + 0x100)) = xmm0;
    0x00410068 movaps xmm0, xmmword [rip + 0x26a3b1]             |     xmm0 = *(0x0067a420);
    0x0041006f movaps xmmword [rsp + 0x110], xmm0                |     *((rsp + 0x110)) = xmm0;
    0x00410077 movaps xmm0, xmmword [rip + 0x26a3b2]             |     xmm0 = *(0x0067a430);
    0x0041007e movaps xmmword [rsp + 0x120], xmm0                |     *((rsp + 0x120)) = xmm0;
    0x00410086 movapd xmm0, xmmword [rip + 0x26a3b2]             |     __asm ("movapd xmm0, xmmword [0x0067a440]");
    0x0041008e movapd xmmword [rsp + 0x130], xmm0                |     __asm ("movapd xmmword [rsp + 0x130], xmm0");
    0x00410097 lea rdi, [rsp + 0xc0]                             |     
    0x0041009f mov esi, 0x20                                     |     
    0x004100a4 call 0x64a120                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::createPoolManager(int*,int,BloombergLP::bslma::Allocator*) (rsp + 0xc0, 0x20, rsp + 0x440);
    0x004100a9 mov qword [rsp + 0x58], rax                       |     *((rsp + 0x58)) = rax;
    0x004100ae mov rdi, rax                                      |     
    0x004100b1 mov esi, 0x1f                                     |     
    0x004100b6 call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (rax, 0x1f);
    0x004100bb mov qword [rsp + 0x18], rax                       |     *((rsp + 0x18)) = rax;
    0x004100c0 mov rdi, qword [rsp + 0x58]                       |     
    0x004100c5 mov esi, 0x1f                                     |     
    0x004100ca call 0x64a060                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x58)), 0x1f);
    0x004100cf mov qword [rsp + 0x20], rax                       |     *((rsp + 0x20)) = rax;
    0x004100d4 xor ecx, ecx                                      |     ecx = 0;
    0x004100d6 nop word cs:[rax + rax]                           |     
                                                                 |     do {
    0x004100e0 mov rax, qword [rsp + 0x18]                       |         rax = *((rsp + 0x18));
    0x004100e5 mov qword [rax + rcx + 0x48], 0                   |         *((rax + rcx + 0x48)) = 0;
    0x004100ee mov rax, qword [rsp + 0x18]                       |         rax = *((rsp + 0x18));
    0x004100f3 mov rdx, qword [rsp + 0x20]                       |         rdx = *((rsp + 0x20));
    0x004100f8 mov qword [rax + rcx + 0x40], rdx                 |         *((rax + rcx + 0x40)) = rdx;
    0x004100fd mov rax, qword [rsp + 0x18]                       |         rax = *((rsp + 0x18));
    0x00410102 mov rdx, qword [rsp + 0x20]                       |         rdx = *((rsp + 0x20));
    0x00410107 mov qword [rdx + rcx + 0x48], rax                 |         *((rdx + rcx + 0x48)) = rax;
    0x0041010c mov rax, qword [rsp + 0x20]                       |         rax = *((rsp + 0x20));
    0x00410111 mov qword [rax + rcx + 0x40], 0                   |         *((rax + rcx + 0x40)) = 0;
    0x0041011a add rcx, 0x10                                     |         rcx += 0x10;
    0x0041011e cmp rcx, 0x200                                    |         
    0x00410125 jne 0x4100e0                                      |         
                                                                 |     } while (rcx != 0x200);
    0x00410127 mov rax, qword [rsp + 0x1e0]                      |     rax = *((rsp + 0x1e0));
    0x0041012f mov ebx, eax                                      |     ebx = eax;
    0x00410131 test eax, eax                                     |     
                                                                 |     if (eax == 0) {
    0x00410133 je 0x4101d0                                       |         goto label_141;
                                                                 |     }
    0x00410139 nop dword [rax]                                   |     
                                                                 |     do {
    0x00410140 mov rax, qword [rsp + 0x1e8]                      |         rax = *((rsp + 0x1e8));
    0x00410148 movabs rcx, 0x5851f42d4c957f2d                    |         rcx = 0x5851f42d4c957f2d;
    0x00410152 imul rax, rcx                                     |         rax *= rcx;
    0x00410156 movabs rcx, 0x14057b7ef767814f                    |         rcx = 0x14057b7ef767814f;
    0x00410160 add rax, rcx                                      |         rax += rcx;
    0x00410163 mov qword [rsp + 0x1e8], rax                      |         *((rsp + 0x1e8)) = rax;
    0x0041016b shr rax, 0x20                                     |         rax >>= 0x20;
    0x0041016f mov rcx, rax                                      |         rcx = rax;
    0x00410172 mov edx, 0xcccccccd                               |         edx = 0xcccccccd;
    0x00410177 imul rcx, rdx                                     |         rcx *= rdx;
    0x0041017b shr rcx, 0x23                                     |         rcx >>= 0x23;
    0x0041017f add ecx, ecx                                      |         ecx += ecx;
    0x00410181 lea ecx, [rcx + rcx*4]                            |         ecx = rcx * 5;
    0x00410184 sub eax, ecx                                      |         eax -= ecx;
    0x00410186 mov dword [rsp + 0xc0], eax                       |         *((rsp + 0xc0)) = eax;
    0x0041018d mov rdi, r15                                      |         
    0x00410190 call 0x649c50                                     |         eax = BloombergLP::bdlcc::SkipList_RandomLevelGenerator::randomLevel() (r15);
    0x00410195 mov rdi, r15                                      |         
    0x00410198 mov esi, eax                                      |         
    0x0041019a lea rdx, [rsp + 0xc0]                             |         
    0x004101a2 lea rcx, [rsp + 0x78]                             |         
    0x004101a7 call 0x5e9830                                     |         rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::allocateNode(int,intconst&,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>const&) (r15, eax, rsp + 0xc0, rsp + 0x78);
    0x004101ac mov rdi, r15                                      |         
    0x004101af xor esi, esi                                      |         
    0x004101b1 mov rdx, rax                                      |         
    0x004101b4 call 0x5e9c40                                     |         BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::addNode(bool*,BloombergLP::bdlcc::SkipList_Node<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*) (r15, 0, rax);
    0x004101b9 movsxd rax, dword [rsp + 0xc0]                    |         rax = *((rsp + 0xc0));
    0x004101c1 inc dword [rsp + rax*4 + 0x560]                   |         *((rsp + rax*4 + 0x560))++;
    0x004101c8 dec ebx                                           |         ebx--;
    0x004101ca jne 0x410140                                      |         
                                                                 |     } while (ebx != 0);
                                                                 | label_141:
    0x004101d0 mov rdi, r12                                      |     rdi = r12;
    0x004101d3 call 0x4052c0                                     |     pthread_mutex_lock ();
    0x004101d8 mov ebx, dword [rsp + 0x50]                       |     ebx = *((rsp + 0x50));
    0x004101dc mov rdi, r12                                      |     rdi = r12;
    0x004101df call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x004101e4 cmp ebx, dword [rsp + 0x1e0]                      |     
                                                                 |     if (ebx != *((rsp + 0x1e0))) {
    0x004101eb je 0x410214                                       |         
    0x004101ed call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x004101f2 mov rbx, rax                                      |         rbx = rax;
    0x004101f5 mov rdi, rax                                      |         
    0x004101f8 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x004101fd mov edi, 0x67b6e2                                 |         edi = "X.length() == len";
    0x00410202 mov esi, 0x137b                                   |         esi = 0x137b;
    0x00410207 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0041020c mov rdi, rbx                                      |         
    0x0041020f call 0x64f9f0                                     |         eax = BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x00410214 mov dword [rsp + 0x68], 0                         |     *((rsp + 0x68)) = 0;
    0x0041021c xor eax, eax                                      |     eax = 0;
    0x0041021e jmp 0x410248                                      |     
    0x00410248 xorpd xmm0, xmm0                                  |     __asm ("xorpd xmm0, xmm0");
    0x0041024c movapd xmmword [rsp + 0x510], xmm0                |     __asm ("movapd xmmword [rsp + 0x510], xmm0");
    0x00410255 movapd xmmword [rsp + 0x1c0], xmm0                |     __asm ("movapd xmmword [rsp + 0x1c0], xmm0");
    0x0041025e movsxd rcx, eax                                   |     rcx = (int64_t) eax;
    0x00410261 cmp ecx, 9                                        |     
    0x00410264 mov eax, 9                                        |     eax = 9;
                                                                 |     if (ecx > 9) {
    0x00410269 cmovg eax, ecx                                    |         eax = ecx;
                                                                 |     }
    0x0041026c nop dword [rax]                                   |     
                                                                 |     do {
    0x00410270 mov rbp, rcx                                      |         
    0x00410273 cmp rax, rcx                                      |         
                                                                 |         if (rax == rcx) {
    0x00410276 je 0x410286                                       |             goto label_142;
                                                                 |         }
    0x00410278 lea rcx, [rbp + 1]                                |         rcx = rbp + 1;
    0x0041027c cmp dword [rsp + rbp*4 + 0x564], 0                |         
    0x00410284 je 0x410270                                       |         
                                                                 |     } while (*((rsp + rbp*4 + 0x564)) == 0);
                                                                 | label_142:
    0x00410286 mov rdi, r15                                      |     
    0x00410289 lea rsi, [rsp + 0x1c0]                            |     
    0x00410291 lea rdx, [rsp + 0x68]                             |     
    0x00410296 call 0x4552e0                                     |     eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findUpperBound(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (r15, rsp + 0x1c0, rsp + 0x68);
    0x0041029b mov r15d, eax                                     |     r15d = eax;
    0x0041029e mov rdi, r12                                      |     rdi = r12;
    0x004102a1 call 0x4052c0                                     |     pthread_mutex_lock ();
    0x004102a6 mov rbx, qword [rsp + 0x18]                       |     rbx = *((rsp + 0x18));
    0x004102ab mov edi, dword [rsp + 0x10]                       |     edi = *((rsp + 0x10));
    0x004102af test edi, edi                                     |     
                                                                 |     if (edi < 0) {
    0x004102b1 js 0x4102f0                                       |         goto label_143;
                                                                 |     }
    0x004102b3 mov rax, qword [rsp + 0x20]                       |     rax = *((rsp + 0x20));
    0x004102b8 mov ecx, dword [rsp + 0x68]                       |     ecx = *((rsp + 0x68));
    0x004102bc test dil, 1                                       |     
                                                                 |     if ((dil & 1) != 0) {
    0x004102c0 jne 0x410300                                      |         goto label_144;
                                                                 |     }
    0x004102c2 nop word cs:[rax + rax]                           |     
    0x004102cc nop dword [rax]                                   |     
                                                                 |     do {
    0x004102d0 mov rdx, rbx                                      |         rdx = rbx;
    0x004102d3 mov rsi, rdi                                      |         rsi = rdi;
    0x004102d6 shl rsi, 4                                        |         rsi <<= 4;
    0x004102da mov rbx, qword [rbx + rsi + 0x40]                 |         rbx = *((rbx + rsi + 0x40));
    0x004102df cmp rbx, rax                                      |         
                                                                 |         if (rbx == rax) {
    0x004102e2 je 0x41030c                                       |             goto label_145;
                                                                 |         }
    0x004102e4 cmp ecx, dword [rbx + 0x38]                       |         
    0x004102e7 jge 0x4102d0                                      |         
                                                                 |     } while (ecx >= *((rbx + 0x38)));
    0x004102e9 jmp 0x41030f                                      |     goto label_146;
                                                                 | label_143:
    0x004102f0 mov rax, qword [rsp + 0x20]                       |     rax = *((rsp + 0x20));
    0x004102f5 jmp 0x410320                                      |     goto label_147;
                                                                 | label_144:
    0x00410300 mov rsi, rdi                                      |     rsi = rdi;
    0x00410303 mov rdx, rbx                                      |     rdx = rbx;
    0x00410306 test edi, edi                                     |     
                                                                 |     if (edi != 0) {
    0x00410308 jne 0x410350                                      |         goto label_148;
                                                                 |     }
    0x0041030a jmp 0x410320                                      |     goto label_147;
                                                                 | label_145:
    0x0041030c mov rbx, rax                                      |     rbx = rax;
                                                                 | label_146:
    0x0041030f mov qword [rsp + rdi*8 + 0xc0], rbx               |     *((rsp + rdi*8 + 0xc0)) = rbx;
    0x00410317 lea rsi, [rdi - 1]                                |     rsi = rdi - 1;
    0x0041031b test edi, edi                                     |     
                                                                 |     if (edi != 0) {
    0x0041031d jne 0x410350                                      |         goto label_148;
                                                                 |     }
    0x0041031f nop                                               |     
                                                                 |     do {
                                                                 | label_147:
    0x00410320 mov r13, qword [rsp + 0xc0]                       |         r13 = *((rsp + 0xc0));
    0x00410328 cmp r13, rax                                      |         
                                                                 |         if (r13 == rax) {
    0x0041032b je 0x4103a0                                       |             goto label_149;
                                                                 |         }
    0x0041032d mov rdi, r13                                      |         
    0x00410330 call 0x649be0                                     |         rax = BloombergLP::bdlcc::SkipList_Control::incrementRefCount() (r13);
    0x00410335 jmp 0x4103a3                                      |         goto label_150;
                                                                 | label_7:
    0x00410337 mov rdi, rax                                      |         rdi = rax;
                                                                 | label_9:
    0x0041033a mov qword [rsp + rsi*8 + 0xb8], rdi               |         *((rsp + rsi*8 + 0xb8)) = rdi;
    0x00410342 lea rdi, [rsi - 2]                                |         rdi = rsi - 2;
    0x00410346 cmp rsi, 1                                        |         
    0x0041034a mov rsi, rdi                                      |         rsi = rdi;
    0x0041034d jle 0x410320                                      |         
                                                                 |     } while (rsi <= 1);
    0x0041034f nop                                               |     
                                                                 |     do {
                                                                 | label_148:
    0x00410350 mov rdi, rdx                                      |         rdi = rdx;
    0x00410353 mov rdx, rsi                                      |         rdx = rsi;
    0x00410356 shl rdx, 4                                        |         rdx <<= 4;
    0x0041035a mov rdx, qword [rdi + rdx + 0x40]                 |         rdx = *((rdi + rdx + 0x40));
    0x0041035f cmp rdx, rax                                      |         
                                                                 |         if (rdx == rax) {
    0x00410362 je 0x41036b                                       |             goto label_151;
                                                                 |         }
    0x00410364 cmp ecx, dword [rdx + 0x38]                       |         
    0x00410367 jge 0x410350                                      |         
                                                                 |     } while (ecx >= *((rdx + 0x38)));
    0x00410369 jmp 0x41036e                                      |     goto label_152;
                                                                 | label_151:
    0x0041036b mov rdx, rax                                      |     rdx = rax;
                                                                 | label_152:
    0x0041036e mov qword [rsp + rsi*8 + 0xc0], rdx               |     *((rsp + rsi*8 + 0xc0)) = rdx;
    0x00410376 lea rbx, [rsi - 1]                                |     rbx = rsi - 1;
    0x0041037a nop word [rax + rax]                              |     
                                                                 | label_8:
    0x00410380 mov rdx, rdi                                      |     rdx = rdi;
    0x00410383 mov rdi, rbx                                      |     rdi = rbx;
    0x00410386 shl rdi, 4                                        |     rdi <<= 4;
    0x0041038a mov rdi, qword [rdx + rdi + 0x40]                 |     rdi = *((rdx + rdi + 0x40));
    0x0041038f cmp rdi, rax                                      |     
                                                                 |     if (rdi == rax) {
    0x00410392 je 0x410337                                       |         goto label_7;
                                                                 |     }
    0x00410394 cmp ecx, dword [rdi + 0x38]                       |     
                                                                 |     if (ecx >= *((rdi + 0x38))) {
    0x00410397 jge 0x410380                                      |         goto label_8;
                                                                 |     }
    0x00410399 jmp 0x41033a                                      |     goto label_9;
                                                                 | label_149:
    0x004103a0 xor r13d, r13d                                    |     r13d = 0;
                                                                 | label_150:
    0x004103a3 test r15d, r15d                                   |     
    0x004103a6 sete bl                                           |     bl = (r15d == 0) ? 1 : 0;
    0x004103a9 lea rdi, [rsp + 0x28]                             |     rdi = rsp + 0x28;
    0x004103ae call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x004103b3 test r13, r13                                     |     
    0x004103b6 sete al                                           |     al = (r13 == 0) ? 1 : 0;
    0x004103b9 xor al, bl                                        |     al ^= bl;
                                                                 |     if (r13 == 0) {
    0x004103bb jne 0x41040b                                      |         
    0x004103bd call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x004103c2 mov rbx, rax                                      |         rbx = rax;
    0x004103c5 mov rdi, rax                                      |         
    0x004103c8 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x004103cd mov edi, 0x67b6f4                                 |         edi = "found == foundRaw";
    0x004103d2 mov esi, 0x138c                                   |         esi = 0x138c;
    0x004103d7 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x004103dc mov rdi, rbx                                      |         
    0x004103df call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x004103e4 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x004103e9 mov rbx, rax                                      |         rbx = rax;
    0x004103ec mov rdi, rax                                      |         
    0x004103ef call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x004103f4 mov edi, 0x67b706                                 |         edi = "found == !!pr";
    0x004103f9 mov esi, 0x138d                                   |         esi = 0x138d;
    0x004103fe call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00410403 mov rdi, rbx                                      |         
    0x00410406 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0041040b cmp qword [rsp + 0x1c8], r13                      |     
                                                                 |     if (*((rsp + 0x1c8)) != r13) {
    0x00410413 je 0x41043c                                       |         
    0x00410415 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0041041a mov rbx, rax                                      |         rbx = rax;
    0x0041041d mov rdi, rax                                      |         
    0x00410420 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00410425 mov edi, 0x67b714                                 |         edi = "pr == phF";
    0x0041042a mov esi, 0x138e                                   |         esi = 0x138e;
    0x0041042f call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00410434 mov rdi, rbx                                      |         
    0x00410437 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0041043c test r15d, r15d                                   |     
    0x0041043f sete al                                           |     al = (r15d == 0) ? 1 : 0;
    0x00410442 cmp rbp, 9                                        |     
    0x00410446 setl cl                                           |     cl = (rbp < 9) ? 1 : 0;
    0x00410449 mov byte [rsp], al                                |     *(rsp) = al;
    0x0041044c mov byte [rsp + 0x70], cl                         |     *((rsp + 0x70)) = cl;
    0x00410450 cmp cl, al                                        |     
                                                                 |     if (cl != al) {
    0x00410452 je 0x41047b                                       |         
    0x00410454 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00410459 mov rbx, rax                                      |         rbx = rax;
    0x0041045c mov rdi, rax                                      |         
    0x0041045f call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00410464 mov edi, 0x67b71e                                 |         edi = "found == expected";
    0x00410469 mov esi, 0x138f                                   |         esi = 0x138f;
    0x0041046e call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00410473 mov rdi, rbx                                      |         
    0x00410476 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0041047b test r15d, r15d                                   |     
                                                                 |     if (r15d == 0) {
    0x0041047e je 0x410510                                       |         goto label_153;
                                                                 |     }
    0x00410484 lea rdi, [rsp + 8]                                |     
    0x00410489 lea rsi, [rsp + 0x510]                            |     
    0x00410491 lea rdx, [rsp + 0x68]                             |     
    0x00410496 call 0x455160                                     |     eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findUpperBoundR(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 8, rsp + 0x510, rsp + 0x68);
    0x0041049b mov ebp, eax                                      |     
    0x0041049d lea r12, [rsp + 0x28]                             |     r12 = rsp + 0x28;
    0x004104a2 mov rdi, r12                                      |     rdi = r12;
    0x004104a5 call 0x4052c0                                     |     pthread_mutex_lock ();
    0x004104aa mov rbx, qword [rsp + 0x20]                       |     rbx = *((rsp + 0x20));
    0x004104af mov edi, dword [rsp + 0x10]                       |     edi = *((rsp + 0x10));
    0x004104b3 test edi, edi                                     |     
                                                                 |     if (edi < 0) {
    0x004104b5 js 0x4105a0                                       |         goto label_154;
                                                                 |     }
    0x004104bb mov rax, qword [rsp + 0x18]                       |     rax = *((rsp + 0x18));
    0x004104c0 mov ecx, dword [rsp + 0x68]                       |     ecx = *((rsp + 0x68));
    0x004104c4 test dil, 1                                       |     
                                                                 |     if ((dil & 1) != 0) {
    0x004104c8 jne 0x410590                                      |         goto label_155;
                                                                 |     }
    0x004104ce nop                                               |     
                                                                 |     do {
    0x004104d0 mov rdx, rbx                                      |         rdx = rbx;
    0x004104d3 mov rsi, rdi                                      |         rsi = rdi;
    0x004104d6 shl rsi, 4                                        |         rsi <<= 4;
    0x004104da mov rbx, qword [rbx + rsi + 0x48]                 |         rbx = *((rbx + rsi + 0x48));
    0x004104df cmp rbx, rax                                      |         
                                                                 |         if (rbx == rax) {
    0x004104e2 je 0x4104e9                                       |             goto label_156;
                                                                 |         }
    0x004104e4 cmp ecx, dword [rbx + 0x38]                       |         
    0x004104e7 jl 0x4104d0                                       |         
                                                                 |     } while (ecx < *((rbx + 0x38)));
                                                                 | label_156:
    0x004104e9 mov qword [rsp + rdi*8 + 0xc0], rdx               |     *((rsp + rdi*8 + 0xc0)) = rdx;
    0x004104f1 lea rsi, [rdi - 1]                                |     rsi = rdi - 1;
    0x004104f5 test edi, edi                                     |     
                                                                 |     if (edi != 0) {
    0x004104f7 jne 0x4105d0                                      |         goto label_157;
                                                                 |     }
    0x004104fd jmp 0x4105a0                                      |     goto label_154;
                                                                 | label_153:
    0x00410510 mov eax, dword [rsp + 0x68]                       |     eax = *((rsp + 0x68));
    0x00410514 mov r12, qword [rsp + 0x1c8]                      |     r12 = *((rsp + 0x1c8));
    0x0041051c cmp eax, dword [r12 + 0x38]                       |     
                                                                 |     if (eax >= *((r12 + 0x38))) {
    0x00410521 jl 0x410552                                       |         
    0x00410523 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00410528 mov rbx, rax                                      |         rbx = rax;
    0x0041052b mov rdi, rax                                      |         
    0x0041052e call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00410533 mov edi, 0x67b730                                 |         edi = "key < phF.key()";
    0x00410538 mov esi, 0x1391                                   |         esi = 0x1391;
    0x0041053d call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00410542 mov rdi, rbx                                      |         
    0x00410545 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0041054a mov r12, qword [rsp + 0x1c8]                      |         r12 = *((rsp + 0x1c8));
                                                                 |     }
    0x00410552 mov rdx, qword [rsp + 0x90]                       |     rdx = *((rsp + 0x90));
    0x0041055a cmp rdx, qword [r12 + 0x20]                       |     
                                                                 |     if (rdx != *((r12 + 0x20))) {
    0x0041055f jne 0x4107fc                                      |         goto label_158;
                                                                 |     }
    0x00410565 test rdx, rdx                                     |     
                                                                 |     if (rdx == 0) {
    0x00410568 je 0x41083d                                       |         goto label_159;
                                                                 |     }
    0x0041056e cmp qword [r12 + 0x28], 0x17                      |     
                                                                 |     if (*((r12 + 0x28)) == 0x17) {
    0x00410574 je 0x4107d9                                       |         goto label_160;
                                                                 |     }
    0x0041057a mov rsi, qword [r12 + 8]                          |     rsi = *((r12 + 8));
    0x0041057f jmp 0x4107de                                      |     goto label_161;
                                                                 | label_155:
    0x00410590 mov rsi, rdi                                      |     rsi = rdi;
    0x00410593 mov rdx, rbx                                      |     rdx = rbx;
    0x00410596 test edi, edi                                     |     
                                                                 |     if (edi != 0) {
    0x00410598 jne 0x4105d0                                      |         goto label_157;
                                                                 |     }
    0x0041059a nop word [rax + rax]                              |     
                                                                 |     do {
                                                                 | label_154:
    0x004105a0 mov r14, qword [rsp + 0xc0]                       |         r14 = *((rsp + 0xc0));
    0x004105a8 cmp r14, qword [rsp + 0x20]                       |         
                                                                 |         if (r14 == *((rsp + 0x20))) {
    0x004105ad je 0x410620                                       |             goto label_162;
                                                                 |         }
    0x004105af mov rdi, r14                                      |         
    0x004105b2 call 0x649be0                                     |         rax = BloombergLP::bdlcc::SkipList_Control::incrementRefCount() (r14);
    0x004105b7 jmp 0x410623                                      |         goto label_163;
                                                                 | label_10:
    0x004105b9 mov qword [rsp + rsi*8 + 0xb8], rdx               |         *((rsp + rsi*8 + 0xb8)) = rdx;
    0x004105c1 lea rdi, [rsi - 2]                                |         rdi = rsi - 2;
    0x004105c5 cmp rsi, 1                                        |         
    0x004105c9 mov rsi, rdi                                      |         rsi = rdi;
    0x004105cc jle 0x4105a0                                      |         
                                                                 |     } while (rsi <= 1);
    0x004105ce nop                                               |     
                                                                 |     do {
                                                                 | label_157:
    0x004105d0 mov rdi, rdx                                      |         rdi = rdx;
    0x004105d3 mov rdx, rsi                                      |         rdx = rsi;
    0x004105d6 shl rdx, 4                                        |         rdx <<= 4;
    0x004105da mov rdx, qword [rdi + rdx + 0x48]                 |         rdx = *((rdi + rdx + 0x48));
    0x004105df cmp rdx, rax                                      |         
                                                                 |         if (rdx == rax) {
    0x004105e2 je 0x4105e9                                       |             goto label_164;
                                                                 |         }
    0x004105e4 cmp ecx, dword [rdx + 0x38]                       |         
    0x004105e7 jl 0x4105d0                                       |         
                                                                 |     } while (ecx < *((rdx + 0x38)));
                                                                 | label_164:
    0x004105e9 mov qword [rsp + rsi*8 + 0xc0], rdi               |     *((rsp + rsi*8 + 0xc0)) = rdi;
    0x004105f1 lea rbx, [rsi - 1]                                |     rbx = rsi - 1;
    0x004105f5 nop word cs:[rax + rax]                           |     
    0x004105ff nop                                               |     
                                                                 | label_11:
    0x00410600 mov rdx, rdi                                      |     rdx = rdi;
    0x00410603 mov rdi, rbx                                      |     rdi = rbx;
    0x00410606 shl rdi, 4                                        |     rdi <<= 4;
    0x0041060a mov rdi, qword [rdx + rdi + 0x48]                 |     rdi = *((rdx + rdi + 0x48));
    0x0041060f cmp rdi, rax                                      |     
                                                                 |     if (rdi == rax) {
    0x00410612 je 0x4105b9                                       |         goto label_10;
                                                                 |     }
    0x00410614 cmp ecx, dword [rdi + 0x38]                       |     
                                                                 |     if (ecx < *((rdi + 0x38))) {
    0x00410617 jl 0x410600                                       |         goto label_11;
                                                                 |     }
    0x00410619 jmp 0x4105b9                                      |     goto label_10;
                                                                 | label_162:
    0x00410620 xor r14d, r14d                                    |     r14d = 0;
                                                                 | label_163:
    0x00410623 test r15d, r15d                                   |     
    0x00410626 sete bl                                           |     bl = (r15d == 0) ? 1 : 0;
    0x00410629 mov rdi, r12                                      |     rdi = r12;
    0x0041062c call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x00410631 test ebp, ebp                                     |     
    0x00410633 setne al                                          |     al = (ebp != 0) ? 1 : 0;
    0x00410636 xor al, bl                                        |     al ^= bl;
                                                                 |     if (ebp == 0) {
    0x00410638 jne 0x410661                                      |         
    0x0041063a call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0041063f mov rbp, rax                                      |         
    0x00410642 mov rdi, rax                                      |         
    0x00410645 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0041064a mov edi, 0x67b762                                 |         edi = "found == foundR";
    0x0041064f mov esi, 0x139f                                   |         esi = 0x139f;
    0x00410654 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00410659 mov rdi, rbp                                      |         
    0x0041065c call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbp);
                                                                 |     }
    0x00410661 test r14, r14                                     |     
    0x00410664 sete al                                           |     al = (r14 == 0) ? 1 : 0;
    0x00410667 test r15d, r15d                                   |     
    0x0041066a sete cl                                           |     cl = (r15d == 0) ? 1 : 0;
    0x0041066d xor cl, al                                        |     cl ^= al;
                                                                 |     if (r15d == 0) {
    0x0041066f jne 0x4106bf                                      |         
    0x00410671 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00410676 mov rbp, rax                                      |         
    0x00410679 mov rdi, rax                                      |         
    0x0041067c call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00410681 mov edi, 0x67b772                                 |         edi = "found == foundRRaw";
    0x00410686 mov esi, 0x13a0                                   |         esi = 0x13a0;
    0x0041068b call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00410690 mov rdi, rbp                                      |         
    0x00410693 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbp);
    0x00410698 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0041069d mov rbp, rax                                      |         
    0x004106a0 mov rdi, rax                                      |         
    0x004106a3 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x004106a8 mov edi, 0x67b706                                 |         edi = "found == !!pr";
    0x004106ad mov esi, 0x13a1                                   |         esi = 0x13a1;
    0x004106b2 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x004106b7 mov rdi, rbp                                      |         
    0x004106ba call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbp);
                                                                 |     }
    0x004106bf mov rax, qword [rsp + 0x1c8]                      |     rax = *((rsp + 0x1c8));
    0x004106c7 cmp rax, qword [rsp + 0x518]                      |     
                                                                 |     if (rax != *((rsp + 0x518))) {
    0x004106cf je 0x410700                                       |         
    0x004106d1 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x004106d6 mov rbp, rax                                      |         
    0x004106d9 mov rdi, rax                                      |         
    0x004106dc call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x004106e1 mov edi, 0x67b785                                 |         edi = "phF == ph";
    0x004106e6 mov esi, 0x13a2                                   |         esi = 0x13a2;
    0x004106eb call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x004106f0 mov rdi, rbp                                      |         
    0x004106f3 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbp);
    0x004106f8 mov rax, qword [rsp + 0x518]                      |         rax = *((rsp + 0x518));
                                                                 |     }
    0x00410700 cmp rax, r14                                      |     
                                                                 |     if (rax != r14) {
    0x00410703 je 0x41072c                                       |         
    0x00410705 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0041070a mov rbp, rax                                      |         
    0x0041070d mov rdi, rax                                      |         
    0x00410710 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00410715 mov edi, 0x67b78f                                 |         edi = "pr == ph";
    0x0041071a mov esi, 0x13a3                                   |         esi = 0x13a3;
    0x0041071f call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00410724 mov rdi, rbp                                      |         
    0x00410727 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbp);
                                                                 |     }
    0x0041072c mov al, byte [rsp + 0x70]                         |     al = *((rsp + 0x70));
    0x00410730 xor al, byte [rsp]                                |     al ^= *(rsp);
                                                                 |     if (rax == r14) {
    0x00410733 je 0x41075c                                       |         void (*0x41075c)() ();
                                                                 |     }
                                                                 | label_160:
    0x004107d9 lea rsi, [r12 + 8]                                |     rsi = r12 + 8;
                                                                 | label_161:
    0x004107de cmp qword [rsp + 0x98], 0x17                      |     
    0x004107e7 lea rdi, [rsp + 0x78]                             |     rdi = rsp + 0x78;
                                                                 |     if (*((rsp + 0x98)) != 0x17) {
    0x004107ec je 0x4107f3                                       |         
    0x004107ee mov rdi, qword [rsp + 0x78]                       |         rdi = *((rsp + 0x78));
                                                                 |     }
    0x004107f3 call 0x404f20                                     |     eax = bcmp ();
    0x004107f8 test eax, eax                                     |     
                                                                 |     if (eax != 0) {
    0x004107fa je 0x41083d                                       |         
                                                                 | label_158:
    0x004107fc call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00410801 mov rbx, rax                                      |         rbx = rax;
    0x00410804 mov rdi, rax                                      |         
    0x00410807 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0041080c mov edi, 0x67b740                                 |         edi = "s == phF.data()";
    0x00410811 mov esi, 0x1392                                   |         esi = 0x1392;
    0x00410816 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0041081b mov rdi, rbx                                      |         
    0x0041081e call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x00410823 mov rbp, qword [rsp + 0x1c0]                      |         rbp = *((rsp + 0x1c0));
    0x0041082b mov r12, qword [rsp + 0x1c8]                      |         r12 = *((rsp + 0x1c8));
    0x00410833 test r12, r12                                     |         
                                                                 |         if (r12 == 0) {
    0x00410836 jne 0x410845                                      |             
    0x00410838 xor r12d, r12d                                    |             r12d = 0;
    0x0041083b jmp 0x41084d                                      |             
                                                                 |         } else {
                                                                 | label_159:
    0x0041083d mov rbp, qword [rsp + 0x1c0]                      |             rbp = *((rsp + 0x1c0));
                                                                 |         }
    0x00410845 mov rdi, r12                                      |         
    0x00410848 call 0x649be0                                     |         BloombergLP::bdlcc::SkipList_Control::incrementRefCount() (r12);
                                                                 |     }
    0x0041084d lea rbx, [rsp + 0x28]                             |     rbx = rsp + 0x28;
    0x00410852 mov rdi, rbx                                      |     rdi = rbx;
    0x00410855 call 0x4052c0                                     |     pthread_mutex_lock ();
    0x0041085a cmp qword [r12 + 0x40], 0                         |     
                                                                 |     if (*((r12 + 0x40)) != 0) {
    0x00410860 je 0x410892                                       |         
    0x00410862 mov rdi, r12                                      |         
    0x00410865 call 0x649ba0                                     |         BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (r12);
    0x0041086a mov rbx, qword [r12 + 0x48]                       |         rbx = *((r12 + 0x48));
    0x0041086f cmp qword [rsp + 0x18], rbx                       |         
                                                                 |         if (*((rsp + 0x18)) != rbx) {
    0x00410874 je 0x4108d0                                       |             
    0x00410876 mov rdi, rbx                                      |             
    0x00410879 call 0x649be0                                     |             BloombergLP::bdlcc::SkipList_Control::incrementRefCount() (rbx);
    0x0041087e lea rdi, [rsp + 0x28]                             |             rdi = rsp + 0x28;
    0x00410883 call 0x4053c0                                     |             pthread_mutex_unlock ();
    0x00410888 mov r12, rbx                                      |             r12 = rbx;
    0x0041088b test rbx, rbx                                     |             
                                                                 |             if (rbx == 0) {
    0x0041088e jne 0x41089a                                      |                 
    0x00410890 jmp 0x4108da                                      |                 
                                                                 |             } else {
    0x00410892 mov rdi, rbx                                      |                 rdi = rbx;
    0x00410895 call 0x4053c0                                     |                 pthread_mutex_unlock ();
                                                                 |             }
    0x0041089a mov eax, dword [r12 + 0x38]                       |             eax = *((r12 + 0x38));
    0x0041089f cmp eax, dword [rsp + 0x68]                       |             
                                                                 |             if (eax > *((rsp + 0x68))) {
    0x004108a3 jle 0x4108cc                                      |                 
    0x004108a5 call 0x64fbf0                                     |                 rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x004108aa mov r14, rax                                      |                 r14 = rax;
    0x004108ad mov rdi, rax                                      |                 
    0x004108b0 call 0x64f8a0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x004108b5 mov edi, 0x67b750                                 |                 edi = "phSB.key() <= key";
    0x004108ba mov esi, 0x1397                                   |                 esi = 0x1397;
    0x004108bf call 0x405800                                     |                 (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x004108c4 mov rdi, r14                                      |                 
    0x004108c7 call 0x64f9f0                                     |                 BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r14);
                                                                 |             }
    0x004108cc xor ebx, ebx                                      |             ebx = 0;
    0x004108ce jmp 0x4108df                                      |             goto label_165;
                                                                 |         }
    0x004108d0 lea rdi, [rsp + 0x28]                             |         rdi = rsp + 0x28;
    0x004108d5 call 0x4053c0                                     |         pthread_mutex_unlock ();
                                                                 |     }
    0x004108da mov bl, 1                                         |     bl = 1;
    0x004108dc xor r12d, r12d                                    |     r12d = 0;
                                                                 | label_165:
    0x004108df mov rdi, r13                                      |     
    0x004108e2 call 0x649ba0                                     |     eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (r13);
    0x004108e7 test eax, eax                                     |     
                                                                 |     if (eax != 0) {
    0x004108e9 jne 0x410915                                      |         goto label_166;
                                                                 |     }
    0x004108eb cmp qword [r13 + 0x28], 0x17                      |     
                                                                 |     if (*((r13 + 0x28)) == 0x17) {
    0x004108f0 je 0x410900                                       |         void (*0x410900)() ();
                                                                 |     }
                                                                 | label_166:
    0x00410915 test bl, bl                                       |     
                                                                 |     if (bl == 0) {
    0x00410917 je 0x410964                                       |         void (*0x410964)() ();
                                                                 |     }
                                                                 | label_109:
    0x00411555 mov rax, rbp                                      |     rax = rbp;
    0x00411558 add rax, 8                                        |     rax += 8;
                                                                 | label_110:
    0x0041155c cmp byte [rax], 0x30                              |     
                                                                 |     if (*(rax) != 0x30) {
    0x0041155f je 0x411588                                       |         
                                                                 | label_108:
    0x00411561 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00411566 mov rbx, rax                                      |         rbx = rax;
    0x00411569 mov rdi, rax                                      |         
    0x0041156c call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00411571 mov edi, 0x67b401                                 |         edi = "h.data() == \"0\";
    0x00411576 mov esi, 0x12f2                                   |         esi = 0x12f2;
    0x0041157b call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00411580 mov rdi, rbx                                      |         
    0x00411583 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x00411588 lea rdi, [rsp + 8]                                |     
    0x0041158d call 0x5e9b60                                     |     rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::popFrontImp() (rsp + 8);
    0x00411592 mov rbx, rax                                      |     rbx = rax;
    0x00411595 test rax, rax                                     |     
                                                                 |     if (rax != 0) {
    0x00411598 je 0x4115d3                                       |         
    0x0041159a mov rdi, rbp                                      |         
    0x0041159d call 0x649ba0                                     |         eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (rbp);
    0x004115a2 test eax, eax                                     |         
                                                                 |         if (eax == 0) {
    0x004115a4 jne 0x4115d0                                      |             
    0x004115a6 cmp qword [rbp + 0x28], 0x17                      |             
                                                                 |             if (*((rbp + 0x28)) != 0x17) {
    0x004115ab je 0x4115bb                                       |                 
    0x004115ad mov rsi, qword [rbp + 8]                          |                 rsi = *((rbp + 8));
    0x004115b1 mov rdi, qword [rbp + 0x30]                       |                 rdi = *((rbp + 0x30));
    0x004115b5 mov rax, qword [rdi]                              |                 rax = *(rdi);
    0x004115b8 call qword [rax + 0x18]                           |                 uint64_t (*rax + 0x18)() ();
                                                                 |             }
    0x004115bb mov qword [rbp + 0x20], 0xffffffffffffffff        |             *((rbp + 0x20)) = 0xffffffffffffffff;
    0x004115c3 mov rdi, qword [rsp + 0x58]                       |             
    0x004115c8 mov rsi, rbp                                      |             
    0x004115cb call 0x64a300                                     |             BloombergLP::bdlcc::SkipList_PoolUtil::deallocate(BloombergLP::bdlcc::SkipList_PoolManager*,void*) (*((rsp + 0x58)), rbp);
                                                                 |         }
    0x004115d0 mov rbp, rbx                                      |         
                                                                 |     }
    0x004115d3 cmp dword [rbp + 0x38], 1                         |     
                                                                 |     if (*((rbp + 0x38)) != 1) {
    0x004115d7 je 0x411600                                       |         
    0x004115d9 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x004115de mov rbx, rax                                      |         rbx = rax;
    0x004115e1 mov rdi, rax                                      |         
    0x004115e4 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x004115e9 mov edi, 0x67b411                                 |         edi = "h.key() == 1";
    0x004115ee mov esi, 0x12f5                                   |         esi = 0x12f5;
    0x004115f3 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x004115f8 mov rdi, rbx                                      |         
    0x004115fb call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x00411600 cmp qword [rbp + 0x20], 6                         |     
                                                                 |     if (*((rbp + 0x20)) == 6) {
    0x00411605 jne 0x41162c                                      |         
    0x00411607 cmp qword [rbp + 0x28], 0x17                      |         
                                                                 |         if (*((rbp + 0x28)) != 0x17) {
    0x0041160c je 0x411614                                       |             
    0x0041160e mov rax, qword [rbp + 8]                          |             rax = *((rbp + 8));
    0x00411612 jmp 0x411618                                      |             
                                                                 |         } else {
    0x00411614 lea rax, [rbp + 8]                                |             rax = rbp + 8;
                                                                 |         }
    0x00411618 mov ecx, 0x6b636162                               |         ecx = 0x6b636162;
    0x0041161d xor ecx, dword [rax]                              |         ecx ^= *(rax);
    0x0041161f movzx eax, word [rax + 4]                         |         eax = *((rax + 4));
    0x00411623 xor eax, 0x3120                                   |         eax ^= 0x3120;
    0x00411628 or eax, ecx                                       |         eax |= ecx;
                                                                 |         if (eax == 0) {
    0x0041162a je 0x411653                                       |             goto label_167;
                                                                 |         }
                                                                 |     }
    0x0041162c call 0x64fbf0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00411631 mov rbx, rax                                      |     rbx = rax;
    0x00411634 mov rdi, rax                                      |     
    0x00411637 call 0x64f8a0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0041163c mov edi, 0x67b46b                                 |     edi = "h.data() == \"back 1\";
    0x00411641 mov esi, 0x12f6                                   |     esi = 0x12f6;
    0x00411646 call 0x405800                                     |     (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0041164b mov rdi, rbx                                      |     
    0x0041164e call 0x64f9f0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 | label_167:
    0x00411653 lea rdi, [rsp + 8]                                |     
    0x00411658 call 0x5e9b60                                     |     rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::popFrontImp() (rsp + 8);
    0x0041165d mov rbx, rax                                      |     rbx = rax;
    0x00411660 test rax, rax                                     |     
                                                                 |     if (rax != 0) {
    0x00411663 je 0x41169e                                       |         
    0x00411665 mov rdi, rbp                                      |         
    0x00411668 call 0x649ba0                                     |         eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (rbp);
    0x0041166d test eax, eax                                     |         
                                                                 |         if (eax == 0) {
    0x0041166f jne 0x41169b                                      |             
    0x00411671 cmp qword [rbp + 0x28], 0x17                      |             
                                                                 |             if (*((rbp + 0x28)) != 0x17) {
    0x00411676 je 0x411686                                       |                 
    0x00411678 mov rsi, qword [rbp + 8]                          |                 rsi = *((rbp + 8));
    0x0041167c mov rdi, qword [rbp + 0x30]                       |                 rdi = *((rbp + 0x30));
    0x00411680 mov rax, qword [rdi]                              |                 rax = *(rdi);
    0x00411683 call qword [rax + 0x18]                           |                 uint64_t (*rax + 0x18)() ();
                                                                 |             }
    0x00411686 mov qword [rbp + 0x20], 0xffffffffffffffff        |             *((rbp + 0x20)) = 0xffffffffffffffff;
    0x0041168e mov rdi, qword [rsp + 0x58]                       |             
    0x00411693 mov rsi, rbp                                      |             
    0x00411696 call 0x64a300                                     |             BloombergLP::bdlcc::SkipList_PoolUtil::deallocate(BloombergLP::bdlcc::SkipList_PoolManager*,void*) (*((rsp + 0x58)), rbp);
                                                                 |         }
    0x0041169b mov rbp, rbx                                      |         
                                                                 |     }
    0x0041169e cmp dword [rbp + 0x38], 1                         |     
                                                                 |     if (*((rbp + 0x38)) != 1) {
    0x004116a2 je 0x4116cb                                       |         
    0x004116a4 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x004116a9 mov rbx, rax                                      |         rbx = rax;
    0x004116ac mov rdi, rax                                      |         
    0x004116af call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x004116b4 mov edi, 0x67b411                                 |         edi = "h.key() == 1";
    0x004116b9 mov esi, 0x12f9                                   |         esi = 0x12f9;
    0x004116be call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x004116c3 mov rdi, rbx                                      |         
    0x004116c6 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x004116cb cmp qword [rbp + 0x20], 0xf                       |     
                                                                 |     if (*((rbp + 0x20)) == 0xf) {
    0x004116d0 jne 0x411703                                      |         
    0x004116d2 cmp qword [rbp + 0x28], 0x17                      |         
                                                                 |         if (*((rbp + 0x28)) != 0x17) {
    0x004116d7 je 0x4116df                                       |             
    0x004116d9 mov rax, qword [rbp + 8]                          |             rax = *((rbp + 8));
    0x004116dd jmp 0x4116e3                                      |             
                                                                 |         } else {
    0x004116df lea rax, [rbp + 8]                                |             rax = rbp + 8;
                                                                 |         }
    0x004116e3 movabs rcx, 0x622d656c6464696d                    |         rcx = 0x622d656c6464696d;
    0x004116ed xor rcx, qword [rax]                              |         rcx ^= *(rax);
    0x004116f0 movabs rdx, 0x203120206b636162                    |         rdx = 0x203120206b636162;
    0x004116fa xor rdx, qword [rax + 7]                          |         rdx ^= *((rax + 7));
    0x004116fe or rdx, rcx                                       |         rdx |= rcx;
                                                                 |         if (rdx == 0) {
    0x00411701 je 0x41172a                                       |             goto label_168;
                                                                 |         }
                                                                 |     }
    0x00411703 call 0x64fbf0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00411708 mov rbx, rax                                      |     rbx = rax;
    0x0041170b mov rdi, rax                                      |     
    0x0041170e call 0x64f8a0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00411713 mov edi, 0x67b44d                                 |     edi = "h.data() == \"middle-back  1 \";
    0x00411718 mov esi, 0x12fa                                   |     esi = 0x12fa;
    0x0041171d call 0x405800                                     |     (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00411722 mov rdi, rbx                                      |     
    0x00411725 call 0x64f9f0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 | label_168:
    0x0041172a lea rdi, [rsp + 8]                                |     
    0x0041172f call 0x5e9b60                                     |     rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::popFrontImp() (rsp + 8);
    0x00411734 mov rbx, rax                                      |     rbx = rax;
    0x00411737 test rax, rax                                     |     
                                                                 |     if (rax != 0) {
    0x0041173a je 0x411775                                       |         
    0x0041173c mov rdi, rbp                                      |         
    0x0041173f call 0x649ba0                                     |         eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (rbp);
    0x00411744 test eax, eax                                     |         
                                                                 |         if (eax == 0) {
    0x00411746 jne 0x411772                                      |             
    0x00411748 cmp qword [rbp + 0x28], 0x17                      |             
                                                                 |             if (*((rbp + 0x28)) != 0x17) {
    0x0041174d je 0x41175d                                       |                 
    0x0041174f mov rsi, qword [rbp + 8]                          |                 rsi = *((rbp + 8));
    0x00411753 mov rdi, qword [rbp + 0x30]                       |                 rdi = *((rbp + 0x30));
    0x00411757 mov rax, qword [rdi]                              |                 rax = *(rdi);
    0x0041175a call qword [rax + 0x18]                           |                 uint64_t (*rax + 0x18)() ();
                                                                 |             }
    0x0041175d mov qword [rbp + 0x20], 0xffffffffffffffff        |             *((rbp + 0x20)) = 0xffffffffffffffff;
    0x00411765 mov rdi, qword [rsp + 0x58]                       |             
    0x0041176a mov rsi, rbp                                      |             
    0x0041176d call 0x64a300                                     |             BloombergLP::bdlcc::SkipList_PoolUtil::deallocate(BloombergLP::bdlcc::SkipList_PoolManager*,void*) (*((rsp + 0x58)), rbp);
                                                                 |         }
    0x00411772 mov rbp, rbx                                      |         
                                                                 |     }
    0x00411775 cmp dword [rbp + 0x38], 1                         |     
                                                                 |     if (*((rbp + 0x38)) != 1) {
    0x00411779 je 0x4117a2                                       |         
    0x0041177b call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00411780 mov rbx, rax                                      |         rbx = rax;
    0x00411783 mov rdi, rax                                      |         
    0x00411786 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0041178b mov edi, 0x67b411                                 |         edi = "h.key() == 1";
    0x00411790 mov esi, 0x12fd                                   |         esi = 0x12fd;
    0x00411795 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0041179a mov rdi, rbx                                      |         
    0x0041179d call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x004117a2 cmp qword [rbp + 0x20], 0xc                       |     
                                                                 |     if (*((rbp + 0x20)) == 0xc) {
    0x004117a7 jne 0x4117d5                                      |         
    0x004117a9 cmp qword [rbp + 0x28], 0x17                      |         
                                                                 |         if (*((rbp + 0x28)) != 0x17) {
    0x004117ae je 0x4117b6                                       |             
    0x004117b0 mov rax, qword [rbp + 8]                          |             rax = *((rbp + 8));
    0x004117b4 jmp 0x4117ba                                      |             
                                                                 |         } else {
    0x004117b6 lea rax, [rbp + 8]                                |             rax = rbp + 8;
                                                                 |         }
    0x004117ba movabs rcx, 0x662d656c6464696d                    |         rcx = 0x662d656c6464696d;
    0x004117c4 xor rcx, qword [rax]                              |         rcx ^= *(rax);
    0x004117c7 mov eax, dword [rax + 8]                          |         eax = *((rax + 8));
    0x004117ca xor rax, 0x31206477                               |         rax ^= 0x31206477;
    0x004117d0 or rax, rcx                                       |         rax |= rcx;
                                                                 |         if (rax == 0) {
    0x004117d3 je 0x4117fc                                       |             goto label_169;
                                                                 |         }
                                                                 |     }
    0x004117d5 call 0x64fbf0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x004117da mov rbx, rax                                      |     rbx = rax;
    0x004117dd mov rdi, rax                                      |     
    0x004117e0 call 0x64f8a0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x004117e5 mov edi, 0x67b432                                 |     edi = "h.data() == \"middle-fwd 1\";
    0x004117ea mov esi, 0x12fe                                   |     esi = 0x12fe;
    0x004117ef call 0x405800                                     |     (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x004117f4 mov rdi, rbx                                      |     
    0x004117f7 call 0x64f9f0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 | label_169:
    0x004117fc lea rdi, [rsp + 8]                                |     
    0x00411801 call 0x5e9b60                                     |     rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::popFrontImp() (rsp + 8);
    0x00411806 mov rbx, rax                                      |     rbx = rax;
    0x00411809 test rax, rax                                     |     
                                                                 |     if (rax != 0) {
    0x0041180c je 0x411847                                       |         
    0x0041180e mov rdi, rbp                                      |         
    0x00411811 call 0x649ba0                                     |         eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (rbp);
    0x00411816 test eax, eax                                     |         
                                                                 |         if (eax == 0) {
    0x00411818 jne 0x411844                                      |             
    0x0041181a cmp qword [rbp + 0x28], 0x17                      |             
                                                                 |             if (*((rbp + 0x28)) != 0x17) {
    0x0041181f je 0x41182f                                       |                 
    0x00411821 mov rsi, qword [rbp + 8]                          |                 rsi = *((rbp + 8));
    0x00411825 mov rdi, qword [rbp + 0x30]                       |                 rdi = *((rbp + 0x30));
    0x00411829 mov rax, qword [rdi]                              |                 rax = *(rdi);
    0x0041182c call qword [rax + 0x18]                           |                 uint64_t (*rax + 0x18)() ();
                                                                 |             }
    0x0041182f mov qword [rbp + 0x20], 0xffffffffffffffff        |             *((rbp + 0x20)) = 0xffffffffffffffff;
    0x00411837 mov rdi, qword [rsp + 0x58]                       |             
    0x0041183c mov rsi, rbp                                      |             
    0x0041183f call 0x64a300                                     |             BloombergLP::bdlcc::SkipList_PoolUtil::deallocate(BloombergLP::bdlcc::SkipList_PoolManager*,void*) (*((rsp + 0x58)), rbp);
                                                                 |         }
    0x00411844 mov rbp, rbx                                      |         
                                                                 |     }
    0x00411847 cmp dword [rbp + 0x38], 1                         |     
                                                                 |     if (*((rbp + 0x38)) != 1) {
    0x0041184b je 0x411874                                       |         
    0x0041184d call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00411852 mov rbx, rax                                      |         rbx = rax;
    0x00411855 mov rdi, rax                                      |         
    0x00411858 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0041185d mov edi, 0x67b411                                 |         edi = "h.key() == 1";
    0x00411862 mov esi, 0x1301                                   |         esi = 0x1301;
    0x00411867 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0041186c mov rdi, rbx                                      |         
    0x0041186f call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x00411874 cmp qword [rbp + 0x20], 5                         |     
                                                                 |     if (*((rbp + 0x20)) == 5) {
    0x00411879 jne 0x41189e                                      |         
    0x0041187b cmp qword [rbp + 0x28], 0x17                      |         
                                                                 |         if (*((rbp + 0x28)) != 0x17) {
    0x00411880 je 0x411888                                       |             
    0x00411882 mov rax, qword [rbp + 8]                          |             rax = *((rbp + 8));
    0x00411886 jmp 0x41188c                                      |             
                                                                 |         } else {
    0x00411888 lea rax, [rbp + 8]                                |             rax = rbp + 8;
                                                                 |         }
    0x0041188c mov ecx, 0x20647766                               |         ecx = 0x20647766;
    0x00411891 xor ecx, dword [rax]                              |         ecx ^= *(rax);
    0x00411893 movzx eax, byte [rax + 4]                         |         eax = *((rax + 4));
    0x00411897 xor eax, 0x31                                     |         eax ^= 0x31;
    0x0041189a or eax, ecx                                       |         eax |= ecx;
                                                                 |         if (eax == 0) {
    0x0041189c je 0x4118c5                                       |             goto label_170;
                                                                 |         }
                                                                 |     }
    0x0041189e call 0x64fbf0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x004118a3 mov rbx, rax                                      |     rbx = rax;
    0x004118a6 mov rdi, rax                                      |     
    0x004118a9 call 0x64f8a0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x004118ae mov edi, 0x67b41e                                 |     edi = "h.data() == \"fwd 1\";
    0x004118b3 mov esi, 0x1302                                   |     esi = 0x1302;
    0x004118b8 call 0x405800                                     |     (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x004118bd mov rdi, rbx                                      |     
    0x004118c0 call 0x64f9f0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 | label_170:
    0x004118c5 cmp dword [rip + 0x508b10], 0                     |     
                                                                 |     if (*(obj.veryVerbose) != 0) {
    0x004118cc je 0x4118e6                                       |         
    0x004118ce lea rdi, [rsp + 8]                                |         
    0x004118d3 mov esi, 0x91a328                                 |         
    0x004118d8 xor edx, edx                                      |         
    0x004118da mov ecx, 4                                        |         
    0x004118df call 0x454cb0                                     |         BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::print(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,int,int)const (rsp + 8, obj.std::__1::cout, 0, 4);
    0x004118e4 jmp 0x411963                                      |         
                                                                 |     } else {
    0x004118e6 cmp dword [rip + 0x508aeb], 0                     |         
                                                                 |         if (*(obj.verbose) == 0) {
    0x004118ed je 0x411963                                       |             goto label_171;
                                                                 |         }
    0x004118ef lea rdi, [rsp + 8]                                |         
    0x004118f4 mov esi, 0x91a328                                 |         
    0x004118f9 xor edx, edx                                      |         
    0x004118fb mov ecx, 0xffffffff                               |         
    0x00411900 call 0x454cb0                                     |         rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::print(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,int,int)const (rsp + 8, obj.std::__1::cout, 0, 0xffffffff);
    0x00411905 mov rbx, rax                                      |         rbx = rax;
    0x00411908 mov rax, qword [rax]                              |         rax = *(rax);
    0x0041190b mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0041190f add rsi, rbx                                      |         rsi += rbx;
    0x00411912 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0041191a call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0041191f lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00411927 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0041192c call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00411931 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00411934 mov rdi, rax                                      |         rdi = rax;
    0x00411937 mov esi, 0xa                                      |         esi = 0xa;
    0x0041193c call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0041193f mov r14d, eax                                     |         r14d = eax;
    0x00411942 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0041194a call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0041194f movsx esi, r14b                                   |         esi = (int32_t) r14b;
    0x00411953 mov rdi, rbx                                      |         rdi = rbx;
    0x00411956 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0041195b mov rdi, rbx                                      |         rdi = rbx;
    0x0041195e call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
                                                                 | label_171:
    0x00411963 mov rdi, rbp                                      |     
    0x00411966 call 0x649ba0                                     |     eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (rbp);
    0x0041196b test eax, eax                                     |     
                                                                 |     if (eax == 0) {
    0x0041196d jne 0x411999                                      |         
    0x0041196f cmp qword [rbp + 0x28], 0x17                      |         
                                                                 |         if (*((rbp + 0x28)) != 0x17) {
    0x00411974 je 0x411984                                       |             
    0x00411976 mov rsi, qword [rbp + 8]                          |             rsi = *((rbp + 8));
    0x0041197a mov rdi, qword [rbp + 0x30]                       |             rdi = *((rbp + 0x30));
    0x0041197e mov rax, qword [rdi]                              |             rax = *(rdi);
    0x00411981 call qword [rax + 0x18]                           |             uint64_t (*rax + 0x18)() ();
                                                                 |         }
    0x00411984 mov qword [rbp + 0x20], 0xffffffffffffffff        |         *((rbp + 0x20)) = 0xffffffffffffffff;
    0x0041198c mov rdi, qword [rsp + 0x58]                       |         
    0x00411991 mov rsi, rbp                                      |         
    0x00411994 call 0x64a300                                     |         BloombergLP::bdlcc::SkipList_PoolUtil::deallocate(BloombergLP::bdlcc::SkipList_PoolManager*,void*) (*((rsp + 0x58)), rbp);
                                                                 |     }
    0x00411999 lea rdi, [rsp + 8]                                |     
    0x0041199e call 0x454c10                                     |     BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::~SkipList() (rsp + 8);
    0x004119a3 cmp dword [rip + 0x508a2e], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x004119aa je 0x411a48                                       |         
    0x004119b0 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x004119b5 mov r15, rax                                      |         r15 = rax;
    0x004119b8 mov rdi, rax                                      |         
    0x004119bb call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x004119c0 mov edi, 0x91a328                                 |         
    0x004119c5 mov esi, 0x67b4d5                                 |         
    0x004119ca mov edx, 0x15                                     |         
    0x004119cf call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "da.numBytesInUse() = ", 0x15);
    0x004119d4 mov rsi, qword [rsp + 0x490]                      |         rsi = *((rsp + 0x490));
    0x004119dc mov rdi, rax                                      |         rdi = rax;
    0x004119df call 0x405130                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (long long) ();
    0x004119e4 mov rbp, rax                                      |         
    0x004119e7 mov rax, qword [rax]                              |         rax = *(rax);
    0x004119ea mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x004119ee add rsi, rbp                                      |         rsi += rbp;
    0x004119f1 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x004119f9 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x004119fe lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00411a06 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00411a0b call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00411a10 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00411a13 mov rdi, rax                                      |         rdi = rax;
    0x00411a16 mov esi, 0xa                                      |         esi = 0xa;
    0x00411a1b call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00411a1e mov ebx, eax                                      |         ebx = eax;
    0x00411a20 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00411a28 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00411a2d movsx esi, bl                                     |         esi = (int32_t) bl;
    0x00411a30 mov rdi, rbp                                      |         rdi = rbp;
    0x00411a33 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00411a38 mov rdi, rbp                                      |         rdi = rbp;
    0x00411a3b call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x00411a40 mov rdi, r15                                      |         
    0x00411a43 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r15);
                                                                 |     }
    0x00411a48 mov rax, qword [rsp + 0x490]                      |     rax = *((rsp + 0x490));
    0x00411a50 test rax, rax                                     |     
                                                                 |     if (rax != 0) {
    0x00411a53 je 0x411a7c                                       |         
    0x00411a55 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00411a5a mov rbx, rax                                      |         rbx = rax;
    0x00411a5d mov rdi, rax                                      |         
    0x00411a60 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00411a65 mov edi, 0x67b4eb                                 |         edi = "0 == da.numBytesInUse()";
    0x00411a6a mov esi, 0x130a                                   |         esi = 0x130a;
    0x00411a6f call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00411a74 mov rdi, rbx                                      |         
    0x00411a77 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x00411a7c cmp dword [rip + 0x508955], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x00411a83 je 0x411b21                                       |         
    0x00411a89 call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00411a8e mov r15, rax                                      |         r15 = rax;
    0x00411a91 mov rdi, rax                                      |         
    0x00411a94 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00411a99 mov edi, 0x91a328                                 |         
    0x00411a9e mov esi, 0x67b503                                 |         
    0x00411aa3 mov edx, 0x15                                     |         
    0x00411aa8 call 0x5bce00                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "ta.numBytesInUse() = ", 0x15);
    0x00411aad mov rsi, qword [rsp + 0x110]                      |         rsi = *((rsp + 0x110));
    0x00411ab5 mov rdi, rax                                      |         rdi = rax;
    0x00411ab8 call 0x405130                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (long long) ();
    0x00411abd mov rbp, rax                                      |         
    0x00411ac0 mov rax, qword [rax]                              |         rax = *(rax);
    0x00411ac3 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x00411ac7 add rsi, rbp                                      |         rsi += rbp;
    0x00411aca lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00411ad2 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00411ad7 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00411adf mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00411ae4 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00411ae9 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00411aec mov rdi, rax                                      |         rdi = rax;
    0x00411aef mov esi, 0xa                                      |         esi = 0xa;
    0x00411af4 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00411af7 mov ebx, eax                                      |         ebx = eax;
    0x00411af9 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00411b01 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00411b06 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x00411b09 mov rdi, rbp                                      |         rdi = rbp;
    0x00411b0c call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00411b11 mov rdi, rbp                                      |         rdi = rbp;
    0x00411b14 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x00411b19 mov rdi, r15                                      |         
    0x00411b1c call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r15);
                                                                 |     }
    0x00411b21 mov rax, qword [rsp + 0x110]                      |     rax = *((rsp + 0x110));
    0x00411b29 test rax, rax                                     |     
                                                                 |     if (rax != 0) {
    0x00411b2c je 0x411b55                                       |         
    0x00411b2e call 0x64fbf0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00411b33 mov rbx, rax                                      |         rbx = rax;
    0x00411b36 mov rdi, rax                                      |         
    0x00411b39 call 0x64f8a0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00411b3e mov edi, 0x67b519                                 |         edi = "0 == ta.numBytesInUse()";
    0x00411b43 mov esi, 0x130c                                   |         esi = 0x130c;
    0x00411b48 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00411b4d mov rdi, rbx                                      |         
    0x00411b50 call 0x64f9f0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x00411b55 lea rdi, [rsp + 0x78]                             |     
                                                                 | label_138:
    0x00411b5a call 0x64e7b0                                     |     BloombergLP::bslma::DefaultAllocatorGuard::~DefaultAllocatorGuard() (rsp + 0x78);
    0x00411b5f lea rdi, [rsp + 0x440]                            |     
    0x00411b67 call 0x64eb90                                     |     BloombergLP::bslma::TestAllocator::~TestAllocator() (rsp + 0x440);
                                                                 | label_67:
    0x00411b6c lea rdi, [rsp + 0xc0]                             |     
    0x00411b74 call 0x64eb90                                     |     BloombergLP::bslma::TestAllocator::~TestAllocator() (rsp + 0xc0);
    0x00411b79 jmp 0x411d4d                                      |     void (*0x411d4d)() ();
                                                                 | label_23:
    0x00411e13 mov edi, 0x91a528                                 |     
    0x00411e18 call 0x650c60                                     |     eax = BloombergLP::bsls::Review::updateCount(BloombergLP::bsls::Atomic_TypeTraits<BloombergLP::bsls::AtomicOperations_ALL_ALL_ClangIntrinsics>::Int*) (method.BloombergLP::bdlt::Datetime.validateAndTraceLogRepresentation___const::lambda__1::operator_____const::count);
    0x00411e1d mov qword [rsp + 0xc0], 0x67c2bf                  |     *((rsp + 0xc0)) = "detected invalid 'bdlt::Datetime'; see TEAM 579660115";
    0x00411e29 mov qword [rsp + 0xc8], 0x67c2f5                  |     *((rsp + 0xc8)) = "/home/parsa/experiments/assumptions/crush/ccm-assume/groups/bdl/bdlt/bdlt_datetime.h";
    0x00411e35 mov dword [rsp + 0xd0], 0x466                     |     *((rsp + 0xd0)) = 0x466;
    0x00411e40 mov qword [rsp + 0xd8], 0x6966a2                  |     *((rsp + 0xd8)) = "R-INV";
    0x00411e4c mov dword [rsp + 0xe0], eax                       |     *((rsp + 0xe0)) = eax;
    0x00411e53 lea rdi, [rsp + 0xc0]                             |     rdi = rsp + 0xc0;
    0x00411e5b call 0x650c80                                     |     BloombergLP::bsls::Review::invokeHandler(BloombergLP::bsls::ReviewViolationconst&) ();
    0x00411e60 mov rax, rbx                                      |     rax = rbx;
    0x00411e63 shr rax, 0x20                                     |     rax >>= 0x20;
    0x00411e67 shl rbx, 0x25                                     |     rbx <<= 0x25;
    0x00411e6b movabs rcx, 0x7fffffe000000000                    |     rcx = 0x7fffffe000000000;
    0x00411e75 add rcx, rbx                                      |     rcx += rbx;
    0x00411e78 imul rbx, rax, 0x3e8                              |     rbx = rax * 0x3e8;
    0x00411e7f or rbx, rcx                                       |     rbx |= rcx;
    0x00411e82 movabs rax, 0x8000000000000000                    |     rax = 0x8000000000000000;
    0x00411e8c or rbx, rax                                       |     rbx |= rax;
    0x00411e8f jmp 0x4085c3                                      |     goto label_12;
                                                                 | label_25:
    0x00411e94 mov edi, 0x91a528                                 |     
    0x00411e99 call 0x650c60                                     |     eax = BloombergLP::bsls::Review::updateCount(BloombergLP::bsls::Atomic_TypeTraits<BloombergLP::bsls::AtomicOperations_ALL_ALL_ClangIntrinsics>::Int*) (method.BloombergLP::bdlt::Datetime.validateAndTraceLogRepresentation___const::lambda__1::operator_____const::count);
    0x00411e9e mov qword [rsp + 0xc0], 0x67c2bf                  |     *((rsp + 0xc0)) = "detected invalid 'bdlt::Datetime'; see TEAM 579660115";
    0x00411eaa mov qword [rsp + 0xc8], 0x67c2f5                  |     *((rsp + 0xc8)) = "/home/parsa/experiments/assumptions/crush/ccm-assume/groups/bdl/bdlt/bdlt_datetime.h";
    0x00411eb6 mov dword [rsp + 0xd0], 0x466                     |     *((rsp + 0xd0)) = 0x466;
    0x00411ec1 mov qword [rsp + 0xd8], 0x6966a2                  |     *((rsp + 0xd8)) = "R-INV";
    0x00411ecd mov dword [rsp + 0xe0], eax                       |     *((rsp + 0xe0)) = eax;
    0x00411ed4 lea rdi, [rsp + 0xc0]                             |     rdi = rsp + 0xc0;
    0x00411edc call 0x650c80                                     |     BloombergLP::bsls::Review::invokeHandler(BloombergLP::bsls::ReviewViolationconst&) ();
    0x00411ee1 mov rax, qword [rsp + 8]                          |     rax = *((rsp + 8));
    0x00411ee6 mov rcx, rax                                      |     rcx = *((rsp + 8));
    0x00411ee9 shr rcx, 0x20                                     |     rcx >>= 0x20;
    0x00411eed shl rax, 0x25                                     |     rax <<= 0x25;
    0x00411ef1 movabs rdx, 0x7fffffe000000000                    |     rdx = 0x7fffffe000000000;
    0x00411efb add rdx, rax                                      |     rdx += rax;
    0x00411efe imul rax, rcx, 0x3e8                              |     rax = rcx * 0x3e8;
    0x00411f05 or rax, rdx                                       |     rax |= rdx;
    0x00411f08 movabs rcx, 0x8000000000000000                    |     rcx = 0x8000000000000000;
    0x00411f12 or rax, rcx                                       |     rax |= rcx;
    0x00411f15 jmp 0x408929                                      |     goto label_13;
                                                                 | label_26:
    0x00411f1a mov edi, 0x91a528                                 |     
    0x00411f1f call 0x650c60                                     |     eax = BloombergLP::bsls::Review::updateCount(BloombergLP::bsls::Atomic_TypeTraits<BloombergLP::bsls::AtomicOperations_ALL_ALL_ClangIntrinsics>::Int*) (method.BloombergLP::bdlt::Datetime.validateAndTraceLogRepresentation___const::lambda__1::operator_____const::count);
    0x00411f24 mov qword [rsp + 0xc0], 0x67c2bf                  |     *((rsp + 0xc0)) = "detected invalid 'bdlt::Datetime'; see TEAM 579660115";
    0x00411f30 mov qword [rsp + 0xc8], 0x67c2f5                  |     *((rsp + 0xc8)) = "/home/parsa/experiments/assumptions/crush/ccm-assume/groups/bdl/bdlt/bdlt_datetime.h";
    0x00411f3c mov dword [rsp + 0xd0], 0x466                     |     *((rsp + 0xd0)) = 0x466;
    0x00411f47 mov qword [rsp + 0xd8], 0x6966a2                  |     *((rsp + 0xd8)) = "R-INV";
    0x00411f53 mov dword [rsp + 0xe0], eax                       |     *((rsp + 0xe0)) = eax;
    0x00411f5a lea rdi, [rsp + 0xc0]                             |     rdi = rsp + 0xc0;
    0x00411f62 call 0x650c80                                     |     BloombergLP::bsls::Review::invokeHandler(BloombergLP::bsls::ReviewViolationconst&) ();
    0x00411f67 mov rax, qword [rsp + 8]                          |     rax = *((rsp + 8));
    0x00411f6c mov rcx, rax                                      |     rcx = *((rsp + 8));
    0x00411f6f shr rcx, 0x20                                     |     rcx >>= 0x20;
    0x00411f73 shl rax, 0x25                                     |     rax <<= 0x25;
    0x00411f77 movabs rdx, 0x7fffffe000000000                    |     rdx = 0x7fffffe000000000;
    0x00411f81 add rdx, rax                                      |     rdx += rax;
    0x00411f84 imul rax, rcx, 0x3e8                              |     rax = rcx * 0x3e8;
    0x00411f8b or rax, rdx                                       |     rax |= rdx;
    0x00411f8e movabs rcx, 0x8000000000000000                    |     rcx = 0x8000000000000000;
    0x00411f98 or rax, rcx                                       |     rax |= rcx;
    0x00411f9b jmp 0x408b17                                      |     goto label_14;
                                                                 | label_52:
    0x00411fa0 mov edi, 0x91a528                                 |     
    0x00411fa5 call 0x650c60                                     |     eax = BloombergLP::bsls::Review::updateCount(BloombergLP::bsls::Atomic_TypeTraits<BloombergLP::bsls::AtomicOperations_ALL_ALL_ClangIntrinsics>::Int*) (method.BloombergLP::bdlt::Datetime.validateAndTraceLogRepresentation___const::lambda__1::operator_____const::count);
    0x00411faa mov qword [rsp + 0xc0], 0x67c2bf                  |     *((rsp + 0xc0)) = "detected invalid 'bdlt::Datetime'; see TEAM 579660115";
    0x00411fb6 mov qword [rsp + 0xc8], 0x67c2f5                  |     *((rsp + 0xc8)) = "/home/parsa/experiments/assumptions/crush/ccm-assume/groups/bdl/bdlt/bdlt_datetime.h";
    0x00411fc2 mov dword [rsp + 0xd0], 0x466                     |     *((rsp + 0xd0)) = 0x466;
    0x00411fcd mov qword [rsp + 0xd8], 0x6966a2                  |     *((rsp + 0xd8)) = "R-INV";
    0x00411fd9 mov dword [rsp + 0xe0], eax                       |     *((rsp + 0xe0)) = eax;
    0x00411fe0 lea rdi, [rsp + 0xc0]                             |     rdi = rsp + 0xc0;
    0x00411fe8 call 0x650c80                                     |     BloombergLP::bsls::Review::invokeHandler(BloombergLP::bsls::ReviewViolationconst&) ();
    0x00411fed mov rax, rbx                                      |     rax = rbx;
    0x00411ff0 shr rax, 0x20                                     |     rax >>= 0x20;
    0x00411ff4 shl rbx, 0x25                                     |     rbx <<= 0x25;
    0x00411ff8 movabs rcx, 0x7fffffe000000000                    |     rcx = 0x7fffffe000000000;
    0x00412002 add rcx, rbx                                      |     rcx += rbx;
    0x00412005 imul rbx, rax, 0x3e8                              |     rbx = rax * 0x3e8;
    0x0041200c or rbx, rcx                                       |     rbx |= rcx;
    0x0041200f movabs rax, 0x8000000000000000                    |     rax = 0x8000000000000000;
    0x00412019 or rbx, rax                                       |     rbx |= rax;
    0x0041201c jmp 0x40bd3a                                      |     goto label_15;
                                                                 | label_24:
    0x00412021 mov edi, 0x91a528                                 |     
    0x00412026 call 0x650c60                                     |     eax = BloombergLP::bsls::Review::updateCount(BloombergLP::bsls::Atomic_TypeTraits<BloombergLP::bsls::AtomicOperations_ALL_ALL_ClangIntrinsics>::Int*) (method.BloombergLP::bdlt::Datetime.validateAndTraceLogRepresentation___const::lambda__1::operator_____const::count);
    0x0041202b mov qword [rsp + 0xc0], 0x67c2bf                  |     *((rsp + 0xc0)) = "detected invalid 'bdlt::Datetime'; see TEAM 579660115";
    0x00412037 mov qword [rsp + 0xc8], 0x67c2f5                  |     *((rsp + 0xc8)) = "/home/parsa/experiments/assumptions/crush/ccm-assume/groups/bdl/bdlt/bdlt_datetime.h";
    0x00412043 mov dword [rsp + 0xd0], 0x466                     |     *((rsp + 0xd0)) = 0x466;
    0x0041204e mov qword [rsp + 0xd8], 0x6966a2                  |     *((rsp + 0xd8)) = "R-INV";
    0x0041205a mov dword [rsp + 0xe0], eax                       |     *((rsp + 0xe0)) = eax;
    0x00412061 lea rdi, [rsp + 0xc0]                             |     rdi = rsp + 0xc0;
    0x00412069 call 0x650c80                                     |     BloombergLP::bsls::Review::invokeHandler(BloombergLP::bsls::ReviewViolationconst&) ();
    0x0041206e mov rax, qword [rsp + 8]                          |     rax = *((rsp + 8));
    0x00412073 mov rcx, rax                                      |     rcx = *((rsp + 8));
    0x00412076 shr rcx, 0x20                                     |     rcx >>= 0x20;
    0x0041207a shl rax, 0x25                                     |     rax <<= 0x25;
    0x0041207e movabs rdx, 0x7fffffe000000000                    |     rdx = 0x7fffffe000000000;
    0x00412088 add rdx, rax                                      |     rdx += rax;
    0x0041208b imul rcx, rcx, 0x3e8                              |     rcx *= 0x3e8;
    0x00412092 or rcx, rdx                                       |     rcx |= rdx;
    0x00412095 movabs rax, 0x8000000000000000                    |     rax = 0x8000000000000000;
    0x0041209f or rcx, rax                                       |     rcx |= rax;
    0x004120a2 jmp 0x40872c                                      |     goto label_16;
                                                                 | }
