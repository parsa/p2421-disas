    ; assembly                                                                                                                                                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                 | /* bdlcc_skiplist.t/none @ 0x5c5ac0 */
                                                                                                                                                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                                                                                                                                                 |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::SkipList_void_______void________BloombergLP::bsls::AtomicInt__BloombergLP::bslmt::Barrier___BloombergLP::bdlf ()          | uint64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf_Nil_void_BloombergLP::bdlcc::SkipList_void_void_BloombergLP::bsls::AtomicInt_BloombergLP::bslmt::Barrier_BloombergLP::bdlf (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                 |     rcx = arg4;
                                                                                                                                                                                                                                                                                 |     rdx = arg3;
                                                                                                                                                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                                                                                                                                                 |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::SkipList<void (*)(), void (*)()>*, BloombergLP::bsls::AtomicInt*, BloombergLP::bslmt::Barrier*), BloombergLP::bdlf::Bind_BoundTuple3<BloombergLP::bdlcc::SkipList<void (*)(), void (*)()>*, BloombergLP::bsls::AtomicInt*, BloombergLP::bslmt::Barrier*> > >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::SkipList<void (*)(), void (*)()>*, BloombergLP::bsls::AtomicInt*, BloombergLP::bslmt::Barrier*), BloombergLP::bdlf::Bind_BoundTuple3<BloombergLP::bdlcc::SkipList<void (*)(), void (*)()>*, BloombergLP::bsls::AtomicInt*, BloombergLP::bslmt::Barrier*> > const&, BloombergLP::bslma::Allocator*) */
    0x005c5ac0 push rbp                                                                                                                                                                                                                                                          |     
    0x005c5ac1 push r15                                                                                                                                                                                                                                                          |     
    0x005c5ac3 push r14                                                                                                                                                                                                                                                          |     
    0x005c5ac5 push r13                                                                                                                                                                                                                                                          |     
    0x005c5ac7 push r12                                                                                                                                                                                                                                                          |     
    0x005c5ac9 push rbx                                                                                                                                                                                                                                                          |     
    0x005c5aca push rax                                                                                                                                                                                                                                                          |     
    0x005c5acb mov r14, rcx                                                                                                                                                                                                                                                      |     r14 = rcx;
    0x005c5ace mov r12, rdx                                                                                                                                                                                                                                                      |     r12 = rdx;
    0x005c5ad1 mov r15, rsi                                                                                                                                                                                                                                                      |     r15 = rsi;
    0x005c5ad4 mov qword [rsp], rdi                                                                                                                                                                                                                                              |     *(rsp) = rdi;
    0x005c5ad8 cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                      |     
                                                                                                                                                                                                                                                                                 |     if (*((rsi + 0x38)) != 0x17) {
    0x005c5add je 0x5c5ae5                                                                                                                                                                                                                                                       |         
    0x005c5adf mov r13, qword [r15 + 0x18]                                                                                                                                                                                                                                       |         r13 = *((r15 + 0x18));
    0x005c5ae3 jmp 0x5c5ae9                                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |     } else {
    0x005c5ae5 lea r13, [r15 + 0x18]                                                                                                                                                                                                                                             |         r13 = r15 + 0x18;
                                                                                                                                                                                                                                                                                 |     }
    0x005c5ae9 mov rbp, qword [r15 + 0x30]                                                                                                                                                                                                                                       |     rbp = *((r15 + 0x30));
    0x005c5aed test r14, r14                                                                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                                                                 |     if (r14 == 0) {
    0x005c5af0 jne 0x5c5b06                                                                                                                                                                                                                                                      |         
    0x005c5af2 mov r14, qword [rip + 0x355047]                                                                                                                                                                                                                                   |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x005c5af9 test r14, r14                                                                                                                                                                                                                                                     |         
                                                                                                                                                                                                                                                                                 |         if (r14 != 0) {
    0x005c5afc jne 0x5c5b06                                                                                                                                                                                                                                                      |             goto label_0;
                                                                                                                                                                                                                                                                                 |         }
    0x005c5afe call 0x64efc0                                                                                                                                                                                                                                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x005c5b03 mov r14, rax                                                                                                                                                                                                                                                      |         r14 = rax;
                                                                                                                                                                                                                                                                                 |     }
                                                                                                                                                                                                                                                                                 | label_0:
    0x005c5b06 mov rax, qword [r14]                                                                                                                                                                                                                                              |     rax = *(r14);
    0x005c5b09 mov esi, 0x58                                                                                                                                                                                                                                                     |     esi = 0x58;
    0x005c5b0e mov rdi, r14                                                                                                                                                                                                                                                      |     rdi = r14;
    0x005c5b11 call qword [rax + 0x10]                                                                                                                                                                                                                                           |     rax = uint64_t (*rax + 0x10)() ();
    0x005c5b14 mov rbx, rax                                                                                                                                                                                                                                                      |     rbx = rax;
    0x005c5b17 mov qword [rax], 0x5c5c40                                                                                                                                                                                                                                         |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::SkipList_void_______void________BloombergLP::bsls::AtomicInt__BloombergLP::bslmt::Barrier___BloombergLP::bdlf::Bind_Boun;
    0x005c5b1e mov rax, qword [r12]                                                                                                                                                                                                                                              |     rax = *(r12);
    0x005c5b22 mov qword [rbx + 8], rax                                                                                                                                                                                                                                          |     *((rbx + 8)) = rax;
    0x005c5b26 mov rax, qword [r12 + 8]                                                                                                                                                                                                                                          |     rax = *((r12 + 8));
    0x005c5b2b mov qword [rbx + 0x10], rax                                                                                                                                                                                                                                       |     *((rbx + 0x10)) = rax;
    0x005c5b2f mov rax, qword [r12 + 0x10]                                                                                                                                                                                                                                       |     rax = *((r12 + 0x10));
    0x005c5b34 mov qword [rbx + 0x18], rax                                                                                                                                                                                                                                       |     *((rbx + 0x18)) = rax;
    0x005c5b38 mov rax, qword [r12 + 0x18]                                                                                                                                                                                                                                       |     rax = *((r12 + 0x18));
    0x005c5b3d mov qword [rbx + 0x20], rax                                                                                                                                                                                                                                       |     *((rbx + 0x20)) = rax;
    0x005c5b41 lea rdi, [rbx + 0x28]                                                                                                                                                                                                                                             |     
    0x005c5b45 mov qword [rbx + 0x28], 0                                                                                                                                                                                                                                         |     *((rbx + 0x28)) = 0;
    0x005c5b4d mov qword [rbx + 0x50], r14                                                                                                                                                                                                                                       |     *((rbx + 0x50)) = r14;
    0x005c5b51 movaps xmm0, xmmword [rip + 0xb5138]                                                                                                                                                                                                                              |     xmm0 = .comment;
    0x005c5b58 movups xmmword [rbx + 0x40], xmm0                                                                                                                                                                                                                                 |     __asm ("movups xmmword [rbx + 0x40], xmm0");
    0x005c5b5c mov ecx, 0x67cb5d                                                                                                                                                                                                                                                 |     
    0x005c5b61 mov rsi, r13                                                                                                                                                                                                                                                      |     
    0x005c5b64 mov rdx, rbp                                                                                                                                                                                                                                                      |     
    0x005c5b67 call 0x654130                                                                                                                                                                                                                                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x28, r13, rbp, "string<...>::assign<Iter>(i,j): string too long");
    0x005c5b6c mov edx, 0x650100                                                                                                                                                                                                                                                 |     
    0x005c5b71 mov rdi, qword [rsp]                                                                                                                                                                                                                                              |     
    0x005c5b75 mov rsi, r15                                                                                                                                                                                                                                                      |     
    0x005c5b78 mov rcx, rbx                                                                                                                                                                                                                                                      |     
    0x005c5b7b call 0x650a90                                                                                                                                                                                                                                                     |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x005c5b80 mov ebp, eax                                                                                                                                                                                                                                                      |     
    0x005c5b82 test eax, eax                                                                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                                                                 |     if (eax != 0) {
    0x005c5b84 je 0x5c5baf                                                                                                                                                                                                                                                       |         
    0x005c5b86 cmp qword [rbx + 0x48], 0x17                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |         if (*((rbx + 0x48)) != 0x17) {
    0x005c5b8b je 0x5c5b9b                                                                                                                                                                                                                                                       |             
    0x005c5b8d mov rsi, qword [rbx + 0x28]                                                                                                                                                                                                                                       |             rsi = *((rbx + 0x28));
    0x005c5b91 mov rdi, qword [rbx + 0x50]                                                                                                                                                                                                                                       |             rdi = *((rbx + 0x50));
    0x005c5b95 mov rax, qword [rdi]                                                                                                                                                                                                                                              |             rax = *(rdi);
    0x005c5b98 call qword [rax + 0x18]                                                                                                                                                                                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |         }
    0x005c5b9b mov qword [rbx + 0x40], 0xffffffffffffffff                                                                                                                                                                                                                        |         *((rbx + 0x40)) = 0xffffffffffffffff;
    0x005c5ba3 mov rax, qword [r14]                                                                                                                                                                                                                                              |         rax = *(r14);
    0x005c5ba6 mov rdi, r14                                                                                                                                                                                                                                                      |         rdi = r14;
    0x005c5ba9 mov rsi, rbx                                                                                                                                                                                                                                                      |         rsi = rbx;
    0x005c5bac call qword [rax + 0x18]                                                                                                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |     }
    0x005c5baf mov eax, ebp                                                                                                                                                                                                                                                      |     eax = ebp;
    0x005c5bb1 add rsp, 8                                                                                                                                                                                                                                                        |     
    0x005c5bb5 pop rbx                                                                                                                                                                                                                                                           |     
    0x005c5bb6 pop r12                                                                                                                                                                                                                                                           |     
    0x005c5bb8 pop r13                                                                                                                                                                                                                                                           |     
    0x005c5bba pop r14                                                                                                                                                                                                                                                           |     
    0x005c5bbc pop r15                                                                                                                                                                                                                                                           |     
    0x005c5bbe pop rbp                                                                                                                                                                                                                                                           |     
    0x005c5bbf ret                                                                                                                                                                                                                                                               |     return rax;
                                                                                                                                                                                                                                                                                 | }
