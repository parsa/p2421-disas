    ; assembly                                                                                                                                                                                                                                                                       | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                     | /* bdlcc_skiplist.t/assume @ 0x437ad0 */
                                                                                                                                                                                                                                                                                     | #include <stdint.h>
                                                                                                                                                                                                                                                                                     |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::SkipList_int___anonymous_namespace_::u::CountedDelete___int___BloombergLP::bdlf::Bind_BoundTuple2_BloombergLP::bd ()          | int64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf_Nil_void_BloombergLP::bdlcc::SkipList_int_anonymous_namespace_::u::CountedDelete_int_BloombergLP::bdlf::Bind_BoundTuple2_BloombergLP::bd (uint32_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                     |     rcx = arg4;
                                                                                                                                                                                                                                                                                     |     rdx = arg3;
                                                                                                                                                                                                                                                                                     |     rsi = arg2;
                                                                                                                                                                                                                                                                                     |     rdi = arg1;
                                                                                                                                                                                                                                                                                     |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::SkipList<int, (anonymous namespace)::u::CountedDelete>*, int), BloombergLP::bdlf::Bind_BoundTuple2<BloombergLP::bdlcc::SkipList<int, (anonymous namespace)::u::CountedDelete>*, int> > >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::SkipList<int, (anonymous namespace)::u::CountedDelete>*, int), BloombergLP::bdlf::Bind_BoundTuple2<BloombergLP::bdlcc::SkipList<int, (anonymous namespace)::u::CountedDelete>*, int> > const&, BloombergLP::bslma::Allocator*) */
    0x00437ad0 push rbp                                                                                                                                                                                                                                                              |     
    0x00437ad1 push r15                                                                                                                                                                                                                                                              |     
    0x00437ad3 push r14                                                                                                                                                                                                                                                              |     
    0x00437ad5 push r13                                                                                                                                                                                                                                                              |     
    0x00437ad7 push r12                                                                                                                                                                                                                                                              |     
    0x00437ad9 push rbx                                                                                                                                                                                                                                                              |     
    0x00437ada push rax                                                                                                                                                                                                                                                              |     
    0x00437adb mov r14, rcx                                                                                                                                                                                                                                                          |     r14 = rcx;
    0x00437ade mov r12, rdx                                                                                                                                                                                                                                                          |     r12 = rdx;
    0x00437ae1 mov r15, rsi                                                                                                                                                                                                                                                          |     r15 = rsi;
    0x00437ae4 mov qword [rsp], rdi                                                                                                                                                                                                                                                  |     *(rsp) = rdi;
    0x00437ae8 mov r13, qword [rsi + 0x30]                                                                                                                                                                                                                                           |     r13 = *((rsi + 0x30));
    0x00437aec cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                          |     
                                                                                                                                                                                                                                                                                     |     if (*((rsi + 0x38)) != 0x17) {
    0x00437af1 je 0x437af9                                                                                                                                                                                                                                                           |         
    0x00437af3 mov rbp, qword [r15 + 0x18]                                                                                                                                                                                                                                           |         rbp = *((r15 + 0x18));
    0x00437af7 jmp 0x437afd                                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |     } else {
    0x00437af9 lea rbp, [r15 + 0x18]                                                                                                                                                                                                                                                 |         rbp = r15 + 0x18;
                                                                                                                                                                                                                                                                                     |     }
    0x00437afd mov rax, qword [r14]                                                                                                                                                                                                                                                  |     rax = *(r14);
    0x00437b00 mov esi, 0x50                                                                                                                                                                                                                                                         |     esi = 0x50;
    0x00437b05 mov rdi, r14                                                                                                                                                                                                                                                          |     rdi = r14;
    0x00437b08 call qword [rax + 0x10]                                                                                                                                                                                                                                               |     rax = uint64_t (*rax + 0x10)() ();
    0x00437b0b mov rbx, rax                                                                                                                                                                                                                                                          |     rbx = rax;
    0x00437b0e mov qword [rax], 0x437c30                                                                                                                                                                                                                                             |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::SkipList_int___anonymous_namespace_::u::CountedDelete___int___BloombergLP::bdlf::Bind_BoundTuple2_BloombergLP::bdlcc::SkipLi;
    0x00437b15 mov rax, qword [r12]                                                                                                                                                                                                                                                  |     rax = *(r12);
    0x00437b19 mov qword [rbx + 8], rax                                                                                                                                                                                                                                              |     *((rbx + 8)) = rax;
    0x00437b1d mov rax, qword [r12 + 8]                                                                                                                                                                                                                                              |     rax = *((r12 + 8));
    0x00437b22 mov qword [rbx + 0x10], rax                                                                                                                                                                                                                                           |     *((rbx + 0x10)) = rax;
    0x00437b26 mov eax, dword [r12 + 0x10]                                                                                                                                                                                                                                           |     eax = *((r12 + 0x10));
    0x00437b2b mov dword [rbx + 0x18], eax                                                                                                                                                                                                                                           |     *((rbx + 0x18)) = eax;
    0x00437b2e lea rdi, [rbx + 0x20]                                                                                                                                                                                                                                                 |     
    0x00437b32 mov qword [rbx + 0x20], 0                                                                                                                                                                                                                                             |     *((rbx + 0x20)) = 0;
    0x00437b3a mov qword [rbx + 0x48], r14                                                                                                                                                                                                                                           |     *((rbx + 0x48)) = r14;
    0x00437b3e movaps xmm0, xmmword [rip + 0x24287b]                                                                                                                                                                                                                                 |     xmm0 = .comment;
    0x00437b45 movups xmmword [rbx + 0x38], xmm0                                                                                                                                                                                                                                     |     __asm ("movups xmmword [rbx + 0x38], xmm0");
    0x00437b49 mov ecx, 0x67c28f                                                                                                                                                                                                                                                     |     
    0x00437b4e mov rsi, rbp                                                                                                                                                                                                                                                          |     
    0x00437b51 mov rdx, r13                                                                                                                                                                                                                                                          |     
    0x00437b54 call 0x653850                                                                                                                                                                                                                                                         |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x20, rbp, r13, "string<...>::assign<Iter>(i,j): string too long");
    0x00437b59 mov edx, 0x64f840                                                                                                                                                                                                                                                     |     
    0x00437b5e mov rdi, qword [rsp]                                                                                                                                                                                                                                                  |     
    0x00437b62 mov rsi, r15                                                                                                                                                                                                                                                          |     
    0x00437b65 mov rcx, rbx                                                                                                                                                                                                                                                          |     
    0x00437b68 call 0x6501d0                                                                                                                                                                                                                                                         |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x00437b6d mov ebp, eax                                                                                                                                                                                                                                                          |     
    0x00437b6f test eax, eax                                                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                                                     |     if (eax != 0) {
    0x00437b71 je 0x437b9c                                                                                                                                                                                                                                                           |         
    0x00437b73 cmp qword [rbx + 0x40], 0x17                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |         if (*((rbx + 0x40)) != 0x17) {
    0x00437b78 je 0x437b88                                                                                                                                                                                                                                                           |             
    0x00437b7a mov rsi, qword [rbx + 0x20]                                                                                                                                                                                                                                           |             rsi = *((rbx + 0x20));
    0x00437b7e mov rdi, qword [rbx + 0x48]                                                                                                                                                                                                                                           |             rdi = *((rbx + 0x48));
    0x00437b82 mov rax, qword [rdi]                                                                                                                                                                                                                                                  |             rax = *(rdi);
    0x00437b85 call qword [rax + 0x18]                                                                                                                                                                                                                                               |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |         }
    0x00437b88 mov qword [rbx + 0x38], 0xffffffffffffffff                                                                                                                                                                                                                            |         *((rbx + 0x38)) = 0xffffffffffffffff;
    0x00437b90 mov rax, qword [r14]                                                                                                                                                                                                                                                  |         rax = *(r14);
    0x00437b93 mov rdi, r14                                                                                                                                                                                                                                                          |         rdi = r14;
    0x00437b96 mov rsi, rbx                                                                                                                                                                                                                                                          |         rsi = rbx;
    0x00437b99 call qword [rax + 0x18]                                                                                                                                                                                                                                               |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |     }
    0x00437b9c mov eax, ebp                                                                                                                                                                                                                                                          |     eax = ebp;
    0x00437b9e add rsp, 8                                                                                                                                                                                                                                                            |     
    0x00437ba2 pop rbx                                                                                                                                                                                                                                                               |     
    0x00437ba3 pop r12                                                                                                                                                                                                                                                               |     
    0x00437ba5 pop r13                                                                                                                                                                                                                                                               |     
    0x00437ba7 pop r14                                                                                                                                                                                                                                                               |     
    0x00437ba9 pop r15                                                                                                                                                                                                                                                               |     
    0x00437bab pop rbp                                                                                                                                                                                                                                                               |     
    0x00437bac ret                                                                                                                                                                                                                                                                   |     return rax;
                                                                                                                                                                                                                                                                                     | }
