    ; assembly                                                   | /* r2dec pseudo code output */
                                                                 | /* bdlcc_skiplist.t/none @ 0x407c20 */
                                                                 | #include <stdint.h>
                                                                 |  
    ; (fcn) main ()                                              | int32_t main (char ** argv, int32_t argc) {
                                                                 |     int64_t var_sp_8h;
                                                                 |     int64_t var_10h;
                                                                 |     int64_t var_sp_18h;
                                                                 |     int64_t var_20h;
                                                                 |     int64_t var_sp_28h;
                                                                 |     int64_t var_sp_30h;
                                                                 |     uint32_t var_40h;
                                                                 |     uint32_t var_48h;
                                                                 |     int64_t var_50h;
                                                                 |     int64_t var_58h;
                                                                 |     int64_t var_60h;
                                                                 |     int64_t var_68h;
                                                                 |     uint32_t var_70h;
                                                                 |     uint32_t var_78h;
                                                                 |     int64_t var_80h;
                                                                 |     uint32_t var_90h;
                                                                 |     uint32_t var_98h;
                                                                 |     uint32_t var_a0h;
                                                                 |     uint32_t var_b0h;
                                                                 |     uint32_t var_b8h;
                                                                 |     char * var_c0h;
                                                                 |     int64_t var_c8h;
                                                                 |     int64_t var_d0h;
                                                                 |     uint32_t var_d8h;
                                                                 |     uint32_t var_e0h;
                                                                 |     char * var_e8h;
                                                                 |     int64_t var_f0h;
                                                                 |     int64_t var_f8h;
                                                                 |     int64_t var_100h;
                                                                 |     int64_t var_108h;
                                                                 |     int64_t var_110h;
                                                                 |     uint32_t var_118h;
                                                                 |     int64_t var_120h;
                                                                 |     int64_t var_130h;
                                                                 |     int64_t var_1c0h;
                                                                 |     int64_t var_1c8h;
                                                                 |     int64_t var_1d0h;
                                                                 |     int64_t var_1d4h;
                                                                 |     int64_t var_1e0h;
                                                                 |     int64_t var_1e8h;
                                                                 |     char * s1;
                                                                 |     int64_t var_1f4h;
                                                                 |     int64_t var_200h;
                                                                 |     uint32_t var_210h;
                                                                 |     char * var_218h;
                                                                 |     int64_t var_220h;
                                                                 |     int64_t var_230h;
                                                                 |     int64_t var_238h;
                                                                 |     int64_t var_240h;
                                                                 |     int64_t var_250h;
                                                                 |     uint32_t var_258h;
                                                                 |     int64_t var_260h;
                                                                 |     int64_t var_278h;
                                                                 |     int64_t var_290h;
                                                                 |     int64_t var_300h;
                                                                 |     int64_t var_308h;
                                                                 |     int64_t var_340h;
                                                                 |     uint32_t var_368h;
                                                                 |     int64_t var_370h;
                                                                 |     int64_t var_378h;
                                                                 |     int64_t var_380h;
                                                                 |     uint32_t var_388h;
                                                                 |     uint32_t var_390h;
                                                                 |     int64_t var_398h;
                                                                 |     int64_t var_3a0h;
                                                                 |     int64_t var_3b0h;
                                                                 |     int64_t var_3b8h;
                                                                 |     int64_t var_3c0h;
                                                                 |     int64_t var_3c8h;
                                                                 |     int64_t var_3d0h;
                                                                 |     int64_t var_3e0h;
                                                                 |     char * var_440h;
                                                                 |     uint32_t var_448h;
                                                                 |     int64_t var_450h;
                                                                 |     uint32_t var_458h;
                                                                 |     int64_t var_460h;
                                                                 |     int64_t var_480h;
                                                                 |     int64_t var_488h;
                                                                 |     int64_t var_490h;
                                                                 |     uint32_t var_498h;
                                                                 |     int64_t var_4a0h;
                                                                 |     int64_t var_4b0h;
                                                                 |     int64_t var_510h;
                                                                 |     int64_t var_518h;
                                                                 |     int64_t var_520h;
                                                                 |     int64_t var_528h;
                                                                 |     int64_t var_530h;
                                                                 |     int64_t var_540h;
                                                                 |     uint32_t var_548h;
                                                                 |     int64_t var_549h;
                                                                 |     int64_t var_558h;
                                                                 |     uint32_t var_560h;
                                                                 |     int64_t var_568h;
                                                                 |     int64_t var_570h;
                                                                 |     int64_t var_578h;
                                                                 |     int64_t var_580h;
                                                                 |     uint32_t var_598h;
                                                                 |     int64_t var_5a0h;
                                                                 |     int64_t var_5b0h;
                                                                 |     rsi = argv;
                                                                 |     rdi = argc;
    0x004072f0 push rbp                                          |     
    0x004072f1 push r15                                          |     
    0x004072f3 push r14                                          |     
    0x004072f5 push r13                                          |     
    0x004072f7 push r12                                          |     
    0x004072f9 push rbx                                          |     
    0x004072fa sub rsp, 0x5b8                                    |     
    0x00407301 mov r15, rsi                                      |     r15 = rsi;
    0x00407304 mov ebx, edi                                      |     ebx = edi;
    0x00407306 xor r12d, r12d                                    |     r12d = 0;
    0x00407309 cmp edi, 2                                        |     
                                                                 |     if (edi >= 2) {
    0x0040730c jl 0x407321                                       |         
    0x0040730e mov rdi, qword [r15 + 8]                          |         
    0x00407312 xor esi, esi                                      |         
    0x00407314 mov edx, 0xa                                      |         
    0x00407319 call 0x404f50                                     |         rax = strtol (*((r15 + 8)), 0, 0xa);
    0x0040731e mov r12, rax                                      |         r12 = rax;
                                                                 |     }
    0x00407321 xor eax, eax                                      |     eax = 0;
    0x00407323 cmp ebx, 2                                        |     
    0x00407326 setg al                                           |     al = (ebx > 2) ? 1 : 0;
    0x00407329 mov dword [rip + 0x5130a9], eax                   |     *(obj.verbose) = eax;
    0x0040732f xor eax, eax                                      |     eax = 0;
    0x00407331 cmp ebx, 3                                        |     
    0x00407334 setg al                                           |     al = (ebx > 3) ? 1 : 0;
    0x00407337 mov dword [rip + 0x51309f], eax                   |     *(obj.veryVerbose) = eax;
    0x0040733d xor eax, eax                                      |     eax = 0;
    0x0040733f cmp ebx, 4                                        |     
    0x00407342 setg al                                           |     al = (ebx > 4) ? 1 : 0;
    0x00407345 mov dword [rip + 0x513095], eax                   |     *(obj.veryVeryVerbose) = eax;
    0x0040734b xor eax, eax                                      |     eax = 0;
    0x0040734d cmp ebx, 5                                        |     
    0x00407350 setg al                                           |     al = (ebx > 5) ? 1 : 0;
    0x00407353 mov dword [rip + 0x51308b], eax                   |     *(obj.veryVeryVeryVerbose) = eax;
    0x00407359 mov edi, 0x91a328                                 |     
    0x0040735e mov esi, 0x67b9c9                                 |     
    0x00407363 mov edx, 5                                        |     
    0x00407368 call 0x5bcfd0                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "TEST ", 5);
    0x0040736d mov esi, 0x67b9cf                                 |     
    0x00407372 mov edx, 0x58                                     |     
    0x00407377 mov rdi, rax                                      |     
    0x0040737a call 0x5bcfd0                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, "/home/parsa/experiments/assumptions/crush/ccm-none/groups/bdl/bdlcc/bdlcc_skiplist.t.cpp", 0x58);
    0x0040737f mov esi, 0x67ba28                                 |     
    0x00407384 mov edx, 6                                        |     
    0x00407389 mov rdi, rax                                      |     
    0x0040738c call 0x5bcfd0                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, " CASE ", 6);
    0x00407391 mov rdi, rax                                      |     rdi = rax;
    0x00407394 mov esi, r12d                                     |     esi = r12d;
    0x00407397 call 0x405010                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040739c mov rbx, rax                                      |     rbx = rax;
    0x0040739f mov rax, qword [rax]                              |     rax = *(rax);
    0x004073a2 mov rsi, qword [rax - 0x18]                       |     rsi = *((rax - 0x18));
    0x004073a6 add rsi, rbx                                      |     rsi += rbx;
    0x004073a9 lea rbp, [rsp + 0x1f0]                            |     rbp = rsp + 0x1f0;
    0x004073b1 mov rdi, rbp                                      |     rdi = rbp;
    0x004073b4 call 0x405070                                     |     std::_1::ios_base::getloc()const ();
    0x004073b9 mov esi, 0x91a270                                 |     esi = obj.std::__1::ctype_char_::id;
    0x004073be mov rdi, rbp                                      |     rdi = rbp;
    0x004073c1 call 0x4051a0                                     |     rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x004073c6 mov rcx, qword [rax]                              |     rcx = *(rax);
    0x004073c9 mov rdi, rax                                      |     rdi = rax;
    0x004073cc mov esi, 0xa                                      |     esi = 0xa;
    0x004073d1 call qword [rcx + 0x38]                           |     eax = uint64_t (*rcx + 0x38)() ();
    0x004073d4 mov r14d, eax                                     |     r14d = eax;
    0x004073d7 lea rdi, [rsp + 0x1f0]                            |     rdi = rsp + 0x1f0;
    0x004073df call 0x405240                                     |     std::_1::locale::~locale() ();
    0x004073e4 movsx esi, r14b                                   |     esi = (int32_t) r14b;
    0x004073e8 mov rdi, rbx                                      |     rdi = rbx;
    0x004073eb call 0x404e30                                     |     std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x004073f0 mov rdi, rbx                                      |     rdi = rbx;
    0x004073f3 call 0x405040                                     |     std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x004073f8 lea rdi, [rsp + 0x5b0]                            |     
    0x00407400 mov esi, 0x651570                                 |     
    0x00407405 call 0x651670                                     |     BloombergLP::bsls::ReviewFailureHandlerGuard::ReviewFailureHandlerGuard(void(*)(BloombergLP::bsls::ReviewViolationconst&)) (rsp + 0x5b0, method.BloombergLP::bsls::Review.failByAbort_BloombergLP::bsls::ReviewViolation_const_);
    0x0040740a lea eax, [r12 + 0x65]                             |     eax = r12 + 0x65;
    0x0040740f cmp eax, 0x80                                     |     
                                                                 |     if (eax <= 0x80) {
    0x00407414 ja 0x407490                                       |         
                                                                 |         /* switch table (129 cases) at 0x677aa0 */
    0x00407416 jmp qword [rax*8 + 0x677aa0]                      |         
    0x0040741d call 0x438380                                     |         TestDriver<signedchar,signedchar>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x00407422 call 0x438a00                                     |         TestDriver<unsigned long,unsigned long>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x00407427 call 0x439080                                     |         TestDriver<BloombergLP::bsltf::TemplateTestFacility_StubClass*,BloombergLP::bsltf::TemplateTestFacility_StubClass*>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x0040742c call 0x439700                                     |         TestDriver<void(*)(),void(*)()>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x00407431 call 0x439d80                                     |         TestDriver<BloombergLP::bsltf::EnumeratedTestType::Enum,BloombergLP::bsltf::EnumeratedTestType::Enum>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x00407436 call 0x43a400                                     |         TestDriver<BloombergLP::bsltf::UnionTestType,BloombergLP::bsltf::UnionTestType>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x0040743b call 0x43aac0                                     |         TestDriver<BloombergLP::bsltf::SimpleTestType,BloombergLP::bsltf::SimpleTestType>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x00407440 call 0x43b0d0                                     |         TestDriver<BloombergLP::bsltf::AllocTestType,BloombergLP::bsltf::AllocTestType>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x00407445 call 0x43b6e0                                     |         TestDriver<BloombergLP::bsltf::BitwiseCopyableTestType,BloombergLP::bsltf::BitwiseCopyableTestType>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x0040744a call 0x43bcf0                                     |         TestDriver<BloombergLP::bsltf::BitwiseMoveableTestType,BloombergLP::bsltf::BitwiseMoveableTestType>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x0040744f call 0x43c300                                     |         TestDriver<BloombergLP::bsltf::AllocBitwiseMoveableTestType,BloombergLP::bsltf::AllocBitwiseMoveableTestType>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x00407454 call 0x43c910                                     |         TestDriver<BloombergLP::bsltf::MovableTestType,BloombergLP::bsltf::MovableTestType>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x00407459 call 0x43cf20                                     |         TestDriver<BloombergLP::bsltf::MovableAllocTestType,BloombergLP::bsltf::MovableAllocTestType>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x0040745e call 0x43d530                                     |         TestDriver<BloombergLP::bsltf::NonTypicalOverloadsTestType,BloombergLP::bsltf::NonTypicalOverloadsTestType>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x00407463 call 0x43db40                                     |         TestDriver<int,int(BloombergLP::bsltf::TemplateTestFacility_StubClass::*)()>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x00407468 call 0x43e1d0                                     |         TestDriver<int,BloombergLP::bsltf::AllocTestType>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x0040746d call 0x43e7f0                                     |         TestDriver<int,BloombergLP::bsltf::MovableAllocTestType>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x00407472 call 0x43ee10                                     |         TestDriver<int,BloombergLP::bsltf::SimpleTestType>::manyThreadsRandomModesOnOneSkipListMain() ();
    0x00407477 jmp 0x411d77                                      |         void (*0x411d77)() ();
    0x0040747c call 0x406120                                     |         SKIPLIST_OLD_TEST_CASES_NAMEPSACE::run() ();
    0x00407481 jmp 0x411d77                                      |         void (*0x411d77)() ();
    0x00407486 call 0x406e50                                     |         SKIPLIST_TEST_CASE_MINUS_100::run() ();
    0x0040748b jmp 0x411d77                                      |         void (*0x411d77)() ();
                                                                 |     }
    0x00407490 mov edi, 0x91a280                                 |     
    0x00407495 mov esi, 0x67c812                                 |     
    0x0040749a mov edx, 0xf                                      |     
    0x0040749f call 0x5bcfd0                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cerr, "WARNING: CASE `", 0xf);
    0x004074a4 mov rdi, rax                                      |     rdi = rax;
    0x004074a7 mov esi, r12d                                     |     esi = r12d;
    0x004074aa call 0x405010                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x004074af mov esi, 0x67c822                                 |     
    0x004074b4 mov edx, 0xc                                      |     
    0x004074b9 mov rdi, rax                                      |     
    0x004074bc call 0x5bcfd0                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, ' NOT FOUND.", 0xc);
    0x004074c1 mov rbx, rax                                      |     rbx = rax;
    0x004074c4 mov rax, qword [rax]                              |     rax = *(rax);
    0x004074c7 mov rsi, qword [rax - 0x18]                       |     rsi = *((rax - 0x18));
    0x004074cb add rsi, rbx                                      |     rsi += rbx;
    0x004074ce lea rdi, [rsp + 0x1f0]                            |     rdi = rsp + 0x1f0;
    0x004074d6 call 0x405070                                     |     std::_1::ios_base::getloc()const ();
    0x004074db lea rdi, [rsp + 0x1f0]                            |     rdi = rsp + 0x1f0;
    0x004074e3 mov esi, 0x91a270                                 |     esi = obj.std::__1::ctype_char_::id;
    0x004074e8 call 0x4051a0                                     |     rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x004074ed mov rcx, qword [rax]                              |     rcx = *(rax);
    0x004074f0 mov rdi, rax                                      |     rdi = rax;
    0x004074f3 mov esi, 0xa                                      |     esi = 0xa;
    0x004074f8 call qword [rcx + 0x38]                           |     eax = uint64_t (*rcx + 0x38)() ();
    0x004074fb mov ebp, eax                                      |     
    0x004074fd lea rdi, [rsp + 0x1f0]                            |     rdi = rsp + 0x1f0;
    0x00407505 call 0x405240                                     |     std::_1::locale::~locale() ();
    0x0040750a movsx esi, bpl                                    |     esi = (int32_t) bpl;
    0x0040750e mov rdi, rbx                                      |     rdi = rbx;
    0x00407511 call 0x404e30                                     |     std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00407516 mov rdi, rbx                                      |     rdi = rbx;
    0x00407519 call 0x405040                                     |     std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040751e mov dword [rip + 0x512efc], 0xffffffff            |     *(obj._anonymous_namespace_::testStatus) = 0xffffffff;
    0x00407528 mov ebx, 0xffffffff                               |     ebx = 0xffffffff;
    0x0040752d jmp 0x411e1c                                      |     void (*0x411e1c)() ();
    0x00407532 cmp dword [rip + 0x512e9f], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x00407539 je 0x407682                                       |         
    0x0040753f mov rax, qword [rip + 0x512de2]                   |         rax = std::__1::cout;
    0x00407546 mov esi, 0x91a328                                 |         esi = std::__1::cout;
    0x0040754b add rsi, qword [rax - 0x18]                       |         rsi += *((rax - 0x18));
    0x0040754f lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00407557 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040755c lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00407564 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00407569 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040756e mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00407571 mov rdi, rax                                      |         rdi = rax;
    0x00407574 mov esi, 0xa                                      |         esi = 0xa;
    0x00407579 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040757c mov ebx, eax                                      |         ebx = eax;
    0x0040757e lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00407586 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040758b movsx esi, bl                                     |         esi = (int32_t) bl;
    0x0040758e mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x00407593 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00407598 mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x0040759d call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x004075a2 mov edi, 0x91a328                                 |         
    0x004075a7 mov esi, 0x67c6dc                                 |         
    0x004075ac mov edx, 0xe                                      |         
    0x004075b1 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "BREATHING TEST", 0xe);
    0x004075b6 mov rbx, rax                                      |         rbx = rax;
    0x004075b9 mov rax, qword [rax]                              |         rax = *(rax);
    0x004075bc mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x004075c0 add rsi, rbx                                      |         rsi += rbx;
    0x004075c3 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x004075cb call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x004075d0 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x004075d8 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x004075dd call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x004075e2 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x004075e5 mov rdi, rax                                      |         rdi = rax;
    0x004075e8 mov esi, 0xa                                      |         esi = 0xa;
    0x004075ed call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x004075f0 mov ebp, eax                                      |         
    0x004075f2 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x004075fa call 0x405240                                     |         std::_1::locale::~locale() ();
    0x004075ff movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x00407603 mov rdi, rbx                                      |         rdi = rbx;
    0x00407606 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040760b mov rdi, rbx                                      |         rdi = rbx;
    0x0040760e call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x00407613 mov esi, 0x67c23e                                 |         
    0x00407618 mov edx, 0xe                                      |         
    0x0040761d mov rdi, rbx                                      |         
    0x00407620 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rbx, 0x67c23e, 0xe);
    0x00407625 mov rbx, rax                                      |         rbx = rax;
    0x00407628 mov rax, qword [rax]                              |         rax = *(rax);
    0x0040762b mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040762f add rsi, rbx                                      |         rsi += rbx;
    0x00407632 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040763a call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040763f lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00407647 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040764c call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00407651 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00407654 mov rdi, rax                                      |         rdi = rax;
    0x00407657 mov esi, 0xa                                      |         esi = 0xa;
    0x0040765c call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040765f mov ebp, eax                                      |         
    0x00407661 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00407669 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040766e movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x00407672 mov rdi, rbx                                      |         rdi = rbx;
    0x00407675 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040767a mov rdi, rbx                                      |         rdi = rbx;
    0x0040767d call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x00407682 lea rdi, [rsp + 0xc0]                             |     
    0x0040768a call 0x64a5e0                                     |     BloombergLP::bdlcc::SkipList_RandomLevelGenerator::SkipList_RandomLevelGenerator() (rsp + 0xc0);
    0x0040768f mov dword [rsp + 0xc8], 0                         |     *((rsp + 0xc8)) = 0;
    0x0040769a lea rbx, [rsp + 0xe0]                             |     rbx = rsp + 0xe0;
    0x004076a2 mov rdi, rbx                                      |     rdi = rbx;
    0x004076a5 xor esi, esi                                      |     esi = 0;
    0x004076a7 call 0x404cc0                                     |     pthread_mutex_init ();
    0x004076ac mov dword [rsp + 0x108], 0                        |     *((rsp + 0x108)) = 0;
    0x004076b7 mov qword [rsp + 0x110], 0                        |     *((rsp + 0x110)) = 0;
    0x004076c3 mov rdx, qword [rip + 0x513476]                   |     rdx = BloombergLP::bslma::Default::s_defaultAllocator;
    0x004076ca test rdx, rdx                                     |     
                                                                 |     if (rdx == 0) {
    0x004076cd jne 0x4076d7                                      |         
    0x004076cf call 0x64efc0                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x004076d4 mov rdx, rax                                      |         
                                                                 |     }
    0x004076d7 mov qword [rsp + 0x118], rdx                      |     *((rsp + 0x118)) = rdx;
    0x004076df movaps xmm0, xmmword [rip + 0x27352a]             |     xmm0 = "(8HXhx";
    0x004076e6 movaps xmmword [rsp + 0x1f0], xmm0                |     *((rsp + 0x1f0)) = xmm0;
    0x004076ee movaps xmm0, xmmword [rip + 0x27352b]             |     xmm0 = *(0x0067ac20);
    0x004076f5 movaps xmmword [rsp + 0x200], xmm0                |     *((rsp + 0x200)) = xmm0;
    0x004076fd movaps xmm0, xmmword [rip + 0x27352c]             |     xmm0 = *(0x0067ac30);
    0x00407704 movaps xmmword [rsp + 0x210], xmm0                |     *((rsp + 0x210)) = xmm0;
    0x0040770c movaps xmm0, xmmword [rip + 0x27352d]             |     xmm0 = *(0x0067ac40);
    0x00407713 movaps xmmword [rsp + 0x220], xmm0                |     *((rsp + 0x220)) = xmm0;
    0x0040771b movaps xmm0, xmmword [rip + 0x27352e]             |     xmm0 = *(0x0067ac50);
    0x00407722 movaps xmmword [rsp + 0x230], xmm0                |     *((rsp + 0x230)) = xmm0;
    0x0040772a movaps xmm0, xmmword [rip + 0x27352f]             |     xmm0 = *(0x0067ac60);
    0x00407731 movaps xmmword [rsp + 0x240], xmm0                |     *((rsp + 0x240)) = xmm0;
    0x00407739 movaps xmm0, xmmword [rip + 0x273530]             |     xmm0 = *(0x0067ac70);
    0x00407740 movaps xmmword [rsp + 0x250], xmm0                |     *((rsp + 0x250)) = xmm0;
    0x00407748 movapd xmm0, xmmword [rip + 0x273530]             |     __asm ("movapd xmm0, xmmword [0x0067ac80]");
    0x00407750 movapd xmmword [rsp + 0x260], xmm0                |     __asm ("movapd xmmword [rsp + 0x260], xmm0");
    0x00407759 lea rdi, [rsp + 0x1f0]                            |     
    0x00407761 mov esi, 0x20                                     |     
    0x00407766 call 0x64aae0                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::createPoolManager(int*,int,BloombergLP::bslma::Allocator*) (rsp + 0x1f0, 0x20, rax);
    0x0040776b mov qword [rsp + 0x110], rax                      |     *((rsp + 0x110)) = rax;
    0x00407773 mov rdi, rax                                      |     
    0x00407776 mov esi, 0x1f                                     |     
    0x0040777b call 0x64aa20                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (rax, 0x1f);
    0x00407780 mov qword [rsp + 0xd0], rax                       |     *((rsp + 0xd0)) = rax;
    0x00407788 mov rdi, qword [rsp + 0x110]                      |     
    0x00407790 mov esi, 0x1f                                     |     
    0x00407795 call 0x64aa20                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x110)), 0x1f);
    0x0040779a mov qword [rsp + 0xd8], rax                       |     *((rsp + 0xd8)) = rax;
    0x004077a2 xor ecx, ecx                                      |     ecx = 0;
    0x004077a4 nop word cs:[rax + rax]                           |     
    0x004077ae nop                                               |     
                                                                 |     do {
    0x004077b0 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x004077b8 mov qword [rax + rcx + 0x20], 0                   |         *((rax + rcx + 0x20)) = 0;
    0x004077c1 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x004077c9 mov rdx, qword [rsp + 0xd8]                       |         rdx = *((rsp + 0xd8));
    0x004077d1 mov qword [rax + rcx + 0x18], rdx                 |         *((rax + rcx + 0x18)) = rdx;
    0x004077d6 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x004077de mov rdx, qword [rsp + 0xd8]                       |         rdx = *((rsp + 0xd8));
    0x004077e6 mov qword [rdx + rcx + 0x20], rax                 |         *((rdx + rcx + 0x20)) = rax;
    0x004077eb mov rax, qword [rsp + 0xd8]                       |         rax = *((rsp + 0xd8));
    0x004077f3 mov qword [rax + rcx + 0x18], 0                   |         *((rax + rcx + 0x18)) = 0;
    0x004077fc add rcx, 0x10                                     |         rcx += 0x10;
    0x00407800 cmp rcx, 0x200                                    |         
    0x00407807 jne 0x4077b0                                      |         
                                                                 |     } while (rcx != 0x200);
    0x00407809 lea r12, [rsp + 0xe0]                             |     r12 = rsp + 0xe0;
    0x00407811 mov rdi, r12                                      |     rdi = r12;
    0x00407814 call 0x4052c0                                     |     pthread_mutex_lock ();
    0x00407819 mov rax, qword [rsp + 0xd0]                       |     rax = *((rsp + 0xd0));
    0x00407821 mov rbx, qword [rsp + 0xd8]                       |     rbx = *((rsp + 0xd8));
    0x00407829 mov rbp, qword [rax + 0x18]                       |     rbp = *((rax + 0x18));
    0x0040782d mov rdi, r12                                      |     rdi = r12;
    0x00407830 call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x00407835 cmp rbx, rbp                                      |     
                                                                 |     if (rbx != rbp) {
    0x00407838 je 0x407861                                       |         
    0x0040783a call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040783f mov rbp, rax                                      |         
    0x00407842 mov rdi, rax                                      |         
    0x00407845 call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040784a mov edi, 0x67d76f                                 |         edi = 0x67d76f;
    0x0040784f mov esi, 0x1698                                   |         esi = 0x1698;
    0x00407854 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00407859 mov rdi, rbp                                      |         
    0x0040785c call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbp);
                                                                 |     }
    0x00407861 mov rdi, r12                                      |     rdi = r12;
    0x00407864 call 0x4052c0                                     |     pthread_mutex_lock ();
    0x00407869 mov ebx, dword [rsp + 0x108]                      |     ebx = *((rsp + 0x108));
    0x00407870 mov rdi, r12                                      |     rdi = r12;
    0x00407873 call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x00407878 test ebx, ebx                                     |     
                                                                 |     if (ebx != 0) {
    0x0040787a je 0x4078a3                                       |         
    0x0040787c call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00407881 mov rbp, rax                                      |         
    0x00407884 mov rdi, rax                                      |         
    0x00407887 call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040788c mov edi, 0x67c6eb                                 |         edi = "0 == X.length()";
    0x00407891 mov esi, 0x1699                                   |         esi = 0x1699;
    0x00407896 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040789b mov rdi, rbp                                      |         
    0x0040789e call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbp);
                                                                 |     }
    0x004078a3 lea rdi, [rsp + 0xc0]                             |     
    0x004078ab call 0x64a5f0                                     |     eax = BloombergLP::bdlcc::SkipList_RandomLevelGenerator::randomLevel() (rsp + 0xc0);
    0x004078b0 mov ecx, dword [rsp + 0xc8]                       |     ecx = *((rsp + 0xc8));
    0x004078b7 lea esi, [rcx + 1]                                |     esi = rcx + 1;
    0x004078ba cmp ecx, eax                                      |     
                                                                 |     if (ecx >= eax) {
    0x004078bc cmovge esi, eax                                   |         esi = eax;
                                                                 |     }
    0x004078bf mov rdi, qword [rsp + 0x110]                      |     
    0x004078c7 call 0x64aa20                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x110)), rsi);
    0x004078cc mov rbp, rax                                      |     
    0x004078cf cmp qword [rsp + 0x118], 0                        |     
                                                                 |     if (*((rsp + 0x118)) == 0) {
    0x004078d8 jne 0x4078eb                                      |         
    0x004078da mov rax, qword [rip + 0x51325f]                   |         rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x004078e1 test rax, rax                                     |         
                                                                 |         if (rax != 0) {
    0x004078e4 jne 0x4078eb                                      |             goto label_7;
                                                                 |         }
    0x004078e6 call 0x64efc0                                     |         BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |     }
                                                                 | label_7:
    0x004078eb mov dword [rbp + 0x10], 0                         |     *((rbp + 0x10)) = 0;
    0x004078f2 mov qword [rbp + 8], 0x67c6fb                     |     *((rbp + 8)) = 0x67c6fb;
    0x004078fa mov rdi, rbp                                      |     
    0x004078fd call 0x64a590                                     |     BloombergLP::bdlcc::SkipList_Control::incrementRefCount() (rbp);
    0x00407902 mov qword [rbp + 0x18], 0                         |     *((rbp + 0x18)) = 0;
    0x0040790a lea rdi, [rsp + 0xc0]                             |     
    0x00407912 xor esi, esi                                      |     
    0x00407914 mov rdx, rbp                                      |     
    0x00407917 call 0x64a1a0                                     |     BloombergLP::bdlcc::SkipList<int,char const*>::addNode(bool*,BloombergLP::bdlcc::SkipList_Node<int,char const*>*) (rsp + 0xc0, 0, rbp);
    0x0040791c mov rdi, r12                                      |     rdi = r12;
    0x0040791f call 0x4052c0                                     |     pthread_mutex_lock ();
    0x00407924 mov rax, qword [rsp + 0xd0]                       |     rax = *((rsp + 0xd0));
    0x0040792c mov rbx, qword [rsp + 0xd8]                       |     rbx = *((rsp + 0xd8));
    0x00407934 mov rbp, qword [rax + 0x18]                       |     rbp = *((rax + 0x18));
    0x00407938 mov rdi, r12                                      |     rdi = r12;
    0x0040793b call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x00407940 cmp rbx, rbp                                      |     
                                                                 |     if (rbx == rbp) {
    0x00407943 jne 0x40796c                                      |         
    0x00407945 call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040794a mov rbp, rax                                      |         
    0x0040794d mov rdi, rax                                      |         
    0x00407950 call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00407955 mov edi, 0x67c6fe                                 |         edi = "!X.isEmpty()";
    0x0040795a mov esi, 0x169b                                   |         esi = 0x169b;
    0x0040795f call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00407964 mov rdi, rbp                                      |         
    0x00407967 call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbp);
                                                                 |     }
    0x0040796c mov rdi, r12                                      |     rdi = r12;
    0x0040796f call 0x4052c0                                     |     pthread_mutex_lock ();
    0x00407974 mov ebx, dword [rsp + 0x108]                      |     ebx = *((rsp + 0x108));
    0x0040797b mov rdi, r12                                      |     rdi = r12;
    0x0040797e call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x00407983 cmp ebx, 1                                        |     
                                                                 |     if (ebx != 1) {
    0x00407986 je 0x4079af                                       |         
    0x00407988 call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040798d mov rbp, rax                                      |         
    0x00407990 mov rdi, rax                                      |         
    0x00407993 call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00407998 mov edi, 0x67c70b                                 |         edi = "1 == X.length()";
    0x0040799d mov esi, 0x169c                                   |         esi = 0x169c;
    0x004079a2 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x004079a7 mov rdi, rbp                                      |         
    0x004079aa call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbp);
                                                                 |     }
    0x004079af lea rdi, [rsp + 0xc0]                             |     
    0x004079b7 call 0x64a370                                     |     rax = BloombergLP::bdlcc::SkipList<int,char const*>::popFrontImp() (rsp + 0xc0);
    0x004079bc mov r14, rax                                      |     r14 = rax;
    0x004079bf test rax, rax                                     |     
                                                                 |     if (rax == 0) {
    0x004079c2 jne 0x4079ee                                      |         
    0x004079c4 call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x004079c9 mov rbp, rax                                      |         
    0x004079cc mov rdi, rax                                      |         
    0x004079cf call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x004079d4 mov edi, 0x67c71b                                 |         edi = "ret==0";
    0x004079d9 mov esi, 0x169f                                   |         esi = 0x169f;
    0x004079de call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x004079e3 mov rdi, rbp                                      |         
    0x004079e6 call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbp);
    0x004079eb xor r14d, r14d                                    |         r14d = 0;
                                                                 |     }
    0x004079ee mov rdi, r12                                      |     rdi = r12;
    0x004079f1 call 0x4052c0                                     |     pthread_mutex_lock ();
    0x004079f6 mov rax, qword [rsp + 0xd0]                       |     rax = *((rsp + 0xd0));
    0x004079fe mov rbx, qword [rsp + 0xd8]                       |     rbx = *((rsp + 0xd8));
    0x00407a06 mov rbp, qword [rax + 0x18]                       |     rbp = *((rax + 0x18));
    0x00407a0a mov rdi, r12                                      |     rdi = r12;
    0x00407a0d call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x00407a12 cmp rbx, rbp                                      |     
                                                                 |     if (rbx != rbp) {
    0x00407a15 je 0x407a3e                                       |         
    0x00407a17 call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00407a1c mov rbp, rax                                      |         
    0x00407a1f mov rdi, rax                                      |         
    0x00407a22 call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00407a27 mov edi, 0x67d76f                                 |         edi = 0x67d76f;
    0x00407a2c mov esi, 0x16a0                                   |         esi = 0x16a0;
    0x00407a31 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00407a36 mov rdi, rbp                                      |         
    0x00407a39 call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbp);
                                                                 |     }
    0x00407a3e mov rdi, r12                                      |     rdi = r12;
    0x00407a41 call 0x4052c0                                     |     pthread_mutex_lock ();
    0x00407a46 mov ebx, dword [rsp + 0x108]                      |     ebx = *((rsp + 0x108));
    0x00407a4d mov rdi, r12                                      |     rdi = r12;
    0x00407a50 call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x00407a55 test ebx, ebx                                     |     
                                                                 |     if (ebx != 0) {
    0x00407a57 je 0x407ae0                                       |         
    0x00407a5d call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00407a62 mov r13, rax                                      |         r13 = rax;
    0x00407a65 mov rdi, rax                                      |         
    0x00407a68 call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00407a6d mov edi, 0x91a328                                 |         
    0x00407a72 mov esi, 0x67c6f0                                 |         
    0x00407a77 mov edx, 0xa                                      |         
    0x00407a7c call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, 0x67c6f0, 0xa);
    0x00407a81 mov esi, 0x67b8c6                                 |         
    0x00407a86 mov edx, 2                                        |         
    0x00407a8b mov rdi, rax                                      |         
    0x00407a8e call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67b8c6, 2);
    0x00407a93 mov rbx, rax                                      |         rbx = rax;
    0x00407a96 mov rdi, r12                                      |         rdi = r12;
    0x00407a99 call 0x4052c0                                     |         pthread_mutex_lock ();
    0x00407a9e mov ebp, dword [rsp + 0x108]                      |         ebp = *((rsp + 0x108));
    0x00407aa5 mov rdi, r12                                      |         rdi = r12;
    0x00407aa8 call 0x4053c0                                     |         pthread_mutex_unlock ();
    0x00407aad mov rdi, rbx                                      |         rdi = rbx;
    0x00407ab0 mov esi, ebp                                      |         esi = ebp;
    0x00407ab2 call 0x405010                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x00407ab7 mov esi, 0x696ad0                                 |         
    0x00407abc mov edx, 1                                        |         
    0x00407ac1 mov rdi, rax                                      |         
    0x00407ac4 call 0x5bcfd0                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x696ad0, 1);
    0x00407ac9 mov edi, 0x67c6eb                                 |         edi = "0 == X.length()";
    0x00407ace mov esi, 0x16a1                                   |         esi = 0x16a1;
    0x00407ad3 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00407ad8 mov rdi, r13                                      |         
    0x00407adb call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r13);
                                                                 |     }
    0x00407ae0 mov rbp, qword [r14 + 8]                          |     rbp = *((r14 + 8));
    0x00407ae4 mov rax, qword [rip + 0x513055]                   |     rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00407aeb test rax, rax                                     |     
                                                                 |     if (rax == 0) {
    0x00407aee jne 0x407af5                                      |         
    0x00407af0 call 0x64efc0                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |     }
    0x00407af5 mov qword [rsp + 0x370], 0                        |     *((rsp + 0x370)) = 0;
    0x00407b01 movapd xmm0, xmmword [rip + 0x273187]             |     __asm ("movapd xmm0, xmmword [0x0067ac90]");
    0x00407b09 movupd xmmword [rsp + 0x388], xmm0                |     __asm ("movupd xmmword [rsp + 0x388], xmm0");
    0x00407b12 mov qword [rsp + 0x398], rax                      |     *((rsp + 0x398)) = rax;
    0x00407b1a mov rdi, rbp                                      |     
    0x00407b1d call 0x404d40                                     |     rax = strlen (rbp);
    0x00407b22 mov qword [rsp + 0x388], 0                        |     *((rsp + 0x388)) = 0;
    0x00407b2e lea r13, [rsp + 0x370]                            |     r13 = rsp + 0x370;
    0x00407b36 mov ecx, 0x67d6b2                                 |     
    0x00407b3b mov rdi, r13                                      |     
    0x00407b3e mov rsi, rbp                                      |     
    0x00407b41 mov rdx, rax                                      |     
    0x00407b44 call 0x654130                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (r13, rbp, rax, "string<...>::assign(char*...): string too long");
    0x00407b49 cmp dword [rip + 0x512888], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x00407b50 je 0x407bee                                       |         
    0x00407b56 call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00407b5b mov r12, rax                                      |         r12 = rax;
    0x00407b5e mov rdi, rax                                      |         
    0x00407b61 call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00407b66 mov edi, 0x91a328                                 |         
    0x00407b6b mov esi, 0x67bb78                                 |         
    0x00407b70 mov edx, 4                                        |         
    0x00407b75 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, 0x67bb78, 4);
    0x00407b7a lea rsi, [rsp + 0x370]                            |         
    0x00407b82 mov rdi, rax                                      |         
    0x00407b85 call 0x5ba050                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&bsl::operator << <char,std::_1::char_traits<char>,bsl::allocator<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>const&) (rax, rsp + 0x370);
    0x00407b8a mov rbp, rax                                      |         
    0x00407b8d mov rax, qword [rax]                              |         rax = *(rax);
    0x00407b90 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x00407b94 add rsi, rbp                                      |         rsi += rbp;
    0x00407b97 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00407b9f call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00407ba4 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00407bac mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00407bb1 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00407bb6 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00407bb9 mov rdi, rax                                      |         rdi = rax;
    0x00407bbc mov esi, 0xa                                      |         esi = 0xa;
    0x00407bc1 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00407bc4 mov ebx, eax                                      |         ebx = eax;
    0x00407bc6 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00407bce call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00407bd3 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x00407bd6 mov rdi, rbp                                      |         rdi = rbp;
    0x00407bd9 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00407bde mov rdi, rbp                                      |         rdi = rbp;
    0x00407be1 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x00407be6 mov rdi, r12                                      |         
    0x00407be9 call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r12);
                                                                 |     }
    0x00407bee mov rdi, r14                                      |     
    0x00407bf1 call 0x64a560                                     |     eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (r14);
    0x00407bf6 test eax, eax                                     |     
                                                                 |     if (eax == 0) {
    0x00407bf8 jne 0x407c0a                                      |         
    0x00407bfa mov rdi, qword [rsp + 0x110]                      |         
    0x00407c02 mov rsi, r14                                      |         
    0x00407c05 call 0x64ab40                                     |         BloombergLP::bdlcc::SkipList_PoolUtil::deallocate(BloombergLP::bdlcc::SkipList_PoolManager*,void*) (*((rsp + 0x110)), r14);
                                                                 |     }
    0x00407c0a cmp qword [rsp + 0x388], 2                        |     
                                                                 |     if (*((rsp + 0x388)) == 2) {
    0x00407c13 jne 0x407c34                                      |         
    0x00407c15 cmp qword [rsp + 0x390], 0x17                     |         
                                                                 |         if (*((rsp + 0x390)) != 0x17) {
    0x00407c1e je 0x407c28                                       |             
    0x00407c20 mov r13, qword [rsp + 0x370]                      |             r13 = *((rsp + 0x370));
                                                                 |         }
    0x00407c28 movzx eax, word [r13]                             |         eax = *(r13);
    0x00407c2d cmp eax, 0x6948                                   |         
                                                                 |         if (eax == 0x6948) {
    0x00407c32 je 0x407c5b                                       |             goto label_8;
                                                                 |         }
                                                                 |     }
    0x00407c34 call 0x6504b0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00407c39 mov rbx, rax                                      |     rbx = rax;
    0x00407c3c mov rdi, rax                                      |     
    0x00407c3f call 0x650160                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00407c44 mov edi, 0x67c722                                 |     edi = "d==\"Hi\";
    0x00407c49 mov esi, 0x16a5                                   |     esi = 0x16a5;
    0x00407c4e call 0x405800                                     |     (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00407c53 mov rdi, rbx                                      |     
    0x00407c56 call 0x6502b0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 | label_8:
    0x00407c5b lea rdi, [rsp + 0x440]                            |     
    0x00407c63 call 0x64a5e0                                     |     BloombergLP::bdlcc::SkipList_RandomLevelGenerator::SkipList_RandomLevelGenerator() (rsp + 0x440);
    0x00407c68 mov dword [rsp + 0x448], 0                        |     *((rsp + 0x448)) = 0;
    0x00407c73 lea rbx, [rsp + 0x460]                            |     rbx = rsp + 0x460;
    0x00407c7b mov rdi, rbx                                      |     rdi = rbx;
    0x00407c7e xor esi, esi                                      |     esi = 0;
    0x00407c80 call 0x404cc0                                     |     pthread_mutex_init ();
    0x00407c85 mov dword [rsp + 0x488], 0                        |     *((rsp + 0x488)) = 0;
    0x00407c90 mov qword [rsp + 0x490], 0                        |     *((rsp + 0x490)) = 0;
    0x00407c9c mov rdx, qword [rip + 0x512e9d]                   |     rdx = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00407ca3 test rdx, rdx                                     |     
                                                                 |     if (rdx == 0) {
    0x00407ca6 jne 0x407cb0                                      |         
    0x00407ca8 call 0x64efc0                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x00407cad mov rdx, rax                                      |         
                                                                 |     }
    0x00407cb0 mov qword [rsp + 0x498], rdx                      |     *((rsp + 0x498)) = rdx;
    0x00407cb8 movaps xmm0, xmmword [rip + 0x272fe1]             |     xmm0 = *(0x0067aca0);
    0x00407cbf movaps xmmword [rsp + 0x1f0], xmm0                |     *((rsp + 0x1f0)) = xmm0;
    0x00407cc7 movaps xmm0, xmmword [rip + 0x272fe2]             |     xmm0 = *(0x0067acb0);
    0x00407cce movaps xmmword [rsp + 0x200], xmm0                |     *((rsp + 0x200)) = xmm0;
    0x00407cd6 movaps xmm0, xmmword [rip + 0x272fe3]             |     xmm0 = *(0x0067acc0);
    0x00407cdd movaps xmmword [rsp + 0x210], xmm0                |     *((rsp + 0x210)) = xmm0;
    0x00407ce5 movaps xmm0, xmmword [rip + 0x272fe4]             |     xmm0 = *(0x0067acd0);
    0x00407cec movaps xmmword [rsp + 0x220], xmm0                |     *((rsp + 0x220)) = xmm0;
    0x00407cf4 movaps xmm0, xmmword [rip + 0x272fe5]             |     xmm0 = *(0x0067ace0);
    0x00407cfb movaps xmmword [rsp + 0x230], xmm0                |     *((rsp + 0x230)) = xmm0;
    0x00407d03 movaps xmm0, xmmword [rip + 0x272fe6]             |     xmm0 = *(0x0067acf0);
    0x00407d0a movaps xmmword [rsp + 0x240], xmm0                |     *((rsp + 0x240)) = xmm0;
    0x00407d12 movaps xmm0, xmmword [rip + 0x272fe7]             |     xmm0 = *(0x0067ad00);
    0x00407d19 movaps xmmword [rsp + 0x250], xmm0                |     *((rsp + 0x250)) = xmm0;
    0x00407d21 movapd xmm0, xmmword [rip + 0x272fe7]             |     __asm ("movapd xmm0, xmmword [0x0067ad10]");
    0x00407d29 movapd xmmword [rsp + 0x260], xmm0                |     __asm ("movapd xmmword [rsp + 0x260], xmm0");
    0x00407d32 lea rdi, [rsp + 0x1f0]                            |     
    0x00407d3a mov esi, 0x20                                     |     
    0x00407d3f call 0x64aae0                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::createPoolManager(int*,int,BloombergLP::bslma::Allocator*) (rsp + 0x1f0, 0x20, rax);
    0x00407d44 mov qword [rsp + 0x490], rax                      |     *((rsp + 0x490)) = rax;
    0x00407d4c mov rdi, rax                                      |     
    0x00407d4f mov esi, 0x1f                                     |     
    0x00407d54 call 0x64aa20                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (rax, 0x1f);
    0x00407d59 mov qword [rsp + 0x450], rax                      |     *((rsp + 0x450)) = rax;
    0x00407d61 mov rdi, qword [rsp + 0x490]                      |     
    0x00407d69 mov esi, 0x1f                                     |     
    0x00407d6e call 0x64aa20                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x490)), 0x1f);
    0x00407d73 mov qword [rsp + 0x458], rax                      |     *((rsp + 0x458)) = rax;
    0x00407d7b xor ecx, ecx                                      |     ecx = 0;
    0x00407d7d nop dword [rax]                                   |     
                                                                 |     do {
    0x00407d80 mov rax, qword [rsp + 0x450]                      |         rax = *((rsp + 0x450));
    0x00407d88 mov qword [rax + rcx + 0x48], 0                   |         *((rax + rcx + 0x48)) = 0;
    0x00407d91 mov rax, qword [rsp + 0x450]                      |         rax = *((rsp + 0x450));
    0x00407d99 mov rdx, qword [rsp + 0x458]                      |         rdx = *((rsp + 0x458));
    0x00407da1 mov qword [rax + rcx + 0x40], rdx                 |         *((rax + rcx + 0x40)) = rdx;
    0x00407da6 mov rax, qword [rsp + 0x450]                      |         rax = *((rsp + 0x450));
    0x00407dae mov rdx, qword [rsp + 0x458]                      |         rdx = *((rsp + 0x458));
    0x00407db6 mov qword [rdx + rcx + 0x48], rax                 |         *((rdx + rcx + 0x48)) = rax;
    0x00407dbb mov rax, qword [rsp + 0x458]                      |         rax = *((rsp + 0x458));
    0x00407dc3 mov qword [rax + rcx + 0x40], 0                   |         *((rax + rcx + 0x40)) = 0;
    0x00407dcc add rcx, 0x10                                     |         rcx += 0x10;
    0x00407dd0 cmp rcx, 0x200                                    |         
    0x00407dd7 jne 0x407d80                                      |         
                                                                 |     } while (rcx != 0x200);
    0x00407dd9 lea r14, [rsp + 0x460]                            |     r14 = rsp + 0x460;
    0x00407de1 mov rdi, r14                                      |     rdi = r14;
    0x00407de4 call 0x4052c0                                     |     pthread_mutex_lock ();
    0x00407de9 mov rax, qword [rsp + 0x450]                      |     rax = *((rsp + 0x450));
    0x00407df1 mov rbx, qword [rsp + 0x458]                      |     rbx = *((rsp + 0x458));
    0x00407df9 mov rbp, qword [rax + 0x40]                       |     rbp = *((rax + 0x40));
    0x00407dfd mov rdi, r14                                      |     rdi = r14;
    0x00407e00 call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x00407e05 cmp rbx, rbp                                      |     
                                                                 |     if (rbx != rbp) {
    0x00407e08 je 0x407e31                                       |         
    0x00407e0a call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00407e0f mov rbx, rax                                      |         rbx = rax;
    0x00407e12 mov rdi, rax                                      |         
    0x00407e15 call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00407e1a mov edi, 0x67c73c                                 |         edi = 0x67c73c;
    0x00407e1f mov esi, 0x16aa                                   |         esi = 0x16aa;
    0x00407e24 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00407e29 mov rdi, rbx                                      |         
    0x00407e2c call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x00407e31 mov dword [rsp + 0x10], 3                         |     *((rsp + 0x10)) = 3;
    0x00407e39 mov rax, qword [rip + 0x512d00]                   |     rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00407e40 test rax, rax                                     |     
                                                                 |     if (rax == 0) {
    0x00407e43 jne 0x407e4a                                      |         
    0x00407e45 call 0x64efc0                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |     }
    0x00407e4a mov qword [rsp + 0x1f0], 0                        |     *((rsp + 0x1f0)) = 0;
    0x00407e56 mov qword [rsp + 0x218], rax                      |     *((rsp + 0x218)) = rax;
    0x00407e5e movapd xmm0, xmmword [rip + 0x272e2a]             |     __asm ("movapd xmm0, xmmword [0x0067ac90]");
    0x00407e66 movupd xmmword [rsp + 0x208], xmm0                |     __asm ("movupd xmmword [rsp + 0x208], xmm0");
    0x00407e6f lea rdi, [rsp + 0x1f0]                            |     
    0x00407e77 mov esi, 0x67e395                                 |     
    0x00407e7c mov edx, 1                                        |     
    0x00407e81 mov ecx, 0x67d6b2                                 |     
    0x00407e86 call 0x654130                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rsp + 0x1f0, 0x67e395, 1, "string<...>::assign(char*...): string too long");
    0x00407e8b lea rdi, [rsp + 0x440]                            |     
    0x00407e93 call 0x64a5f0                                     |     eax = BloombergLP::bdlcc::SkipList_RandomLevelGenerator::randomLevel() (rsp + 0x440);
    0x00407e98 lea rdi, [rsp + 0x440]                            |     
    0x00407ea0 lea rdx, [rsp + 0x10]                             |     
    0x00407ea5 lea rcx, [rsp + 0x1f0]                            |     
    0x00407ead mov esi, eax                                      |     
    0x00407eaf call 0x5e9aa0                                     |     rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::allocateNode(int,intconst&,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>const&) (rsp + 0x440, eax, rsp + 0x10, rsp + 0x1f0);
    0x00407eb4 lea rdi, [rsp + 0x440]                            |     
    0x00407ebc xor esi, esi                                      |     
    0x00407ebe mov rdx, rax                                      |     
    0x00407ec1 call 0x5e9ec0                                     |     BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::addNode(bool*,BloombergLP::bdlcc::SkipList_Node<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*) (rsp + 0x440, 0, rax);
    0x00407ec6 cmp qword [rsp + 0x210], 0x17                     |     
                                                                 |     if (*((rsp + 0x210)) != 0x17) {
    0x00407ecf je 0x407ee7                                       |         
    0x00407ed1 mov rsi, qword [rsp + 0x1f0]                      |         rsi = *((rsp + 0x1f0));
    0x00407ed9 mov rdi, qword [rsp + 0x218]                      |         rdi = *((rsp + 0x218));
    0x00407ee1 mov rax, qword [rdi]                              |         rax = *(rdi);
    0x00407ee4 call qword [rax + 0x18]                           |         uint64_t (*rax + 0x18)() ();
                                                                 |     }
    0x00407ee7 mov dword [rsp + 0x10], 2                         |     *((rsp + 0x10)) = 2;
    0x00407eef mov rax, qword [rip + 0x512c4a]                   |     rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00407ef6 test rax, rax                                     |     
                                                                 |     if (rax == 0) {
    0x00407ef9 jne 0x407f00                                      |         
    0x00407efb call 0x64efc0                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |     }
    0x00407f00 mov qword [rsp + 0x1f0], 0                        |     *((rsp + 0x1f0)) = 0;
    0x00407f0c mov qword [rsp + 0x218], rax                      |     *((rsp + 0x218)) = rax;
    0x00407f14 movapd xmm0, xmmword [rip + 0x272d74]             |     __asm ("movapd xmm0, xmmword [0x0067ac90]");
    0x00407f1c movupd xmmword [rsp + 0x208], xmm0                |     __asm ("movupd xmmword [rsp + 0x208], xmm0");
    0x00407f25 lea rdi, [rsp + 0x1f0]                            |     
    0x00407f2d mov esi, 0x67daa7                                 |     
    0x00407f32 mov edx, 1                                        |     
    0x00407f37 mov ecx, 0x67d6b2                                 |     
    0x00407f3c call 0x654130                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rsp + 0x1f0, 0x67daa7, 1, "string<...>::assign(char*...): string too long");
    0x00407f41 lea rdi, [rsp + 0x440]                            |     
    0x00407f49 call 0x64a5f0                                     |     eax = BloombergLP::bdlcc::SkipList_RandomLevelGenerator::randomLevel() (rsp + 0x440);
    0x00407f4e lea rdi, [rsp + 0x440]                            |     
    0x00407f56 lea rdx, [rsp + 0x10]                             |     
    0x00407f5b lea rcx, [rsp + 0x1f0]                            |     
    0x00407f63 mov esi, eax                                      |     
    0x00407f65 call 0x5e9aa0                                     |     rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::allocateNode(int,intconst&,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>const&) (rsp + 0x440, eax, rsp + 0x10, rsp + 0x1f0);
    0x00407f6a lea rdi, [rsp + 0x440]                            |     
    0x00407f72 xor esi, esi                                      |     
    0x00407f74 mov rdx, rax                                      |     
    0x00407f77 call 0x5e9ec0                                     |     BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::addNode(bool*,BloombergLP::bdlcc::SkipList_Node<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*) (rsp + 0x440, 0, rax);
    0x00407f7c cmp qword [rsp + 0x210], 0x17                     |     
                                                                 |     if (*((rsp + 0x210)) != 0x17) {
    0x00407f85 je 0x407f9d                                       |         
    0x00407f87 mov rsi, qword [rsp + 0x1f0]                      |         rsi = *((rsp + 0x1f0));
    0x00407f8f mov rdi, qword [rsp + 0x218]                      |         rdi = *((rsp + 0x218));
    0x00407f97 mov rax, qword [rdi]                              |         rax = *(rdi);
    0x00407f9a call qword [rax + 0x18]                           |         uint64_t (*rax + 0x18)() ();
                                                                 |     }
    0x00407f9d mov dword [rsp + 0x10], 0                         |     *((rsp + 0x10)) = 0;
    0x00407fa5 mov rax, qword [rip + 0x512b94]                   |     rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00407fac test rax, rax                                     |     
                                                                 |     if (rax == 0) {
    0x00407faf jne 0x407fb6                                      |         
    0x00407fb1 call 0x64efc0                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |     }
    0x00407fb6 mov qword [rsp + 0x1f0], 0                        |     *((rsp + 0x1f0)) = 0;
    0x00407fc2 mov qword [rsp + 0x218], rax                      |     *((rsp + 0x218)) = rax;
    0x00407fca movapd xmm0, xmmword [rip + 0x272cbe]             |     __asm ("movapd xmm0, xmmword [0x0067ac90]");
    0x00407fd2 movupd xmmword [rsp + 0x208], xmm0                |     __asm ("movupd xmmword [rsp + 0x208], xmm0");
    0x00407fdb lea rdi, [rsp + 0x1f0]                            |     
    0x00407fe3 mov esi, 0x67bccd                                 |     
    0x00407fe8 mov edx, 1                                        |     
    0x00407fed mov ecx, 0x67d6b2                                 |     
    0x00407ff2 call 0x654130                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rsp + 0x1f0, 0x67bccd, 1, "string<...>::assign(char*...): string too long");
    0x00407ff7 lea rdi, [rsp + 0x440]                            |     
    0x00407fff call 0x64a5f0                                     |     eax = BloombergLP::bdlcc::SkipList_RandomLevelGenerator::randomLevel() (rsp + 0x440);
    0x00408004 lea rdi, [rsp + 0x440]                            |     
    0x0040800c lea rdx, [rsp + 0x10]                             |     
    0x00408011 lea rcx, [rsp + 0x1f0]                            |     
    0x00408019 mov esi, eax                                      |     
    0x0040801b call 0x5e9aa0                                     |     rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::allocateNode(int,intconst&,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>const&) (rsp + 0x440, eax, rsp + 0x10, rsp + 0x1f0);
    0x00408020 lea rdi, [rsp + 0x440]                            |     
    0x00408028 xor esi, esi                                      |     
    0x0040802a mov rdx, rax                                      |     
    0x0040802d call 0x5e9ec0                                     |     BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::addNode(bool*,BloombergLP::bdlcc::SkipList_Node<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*) (rsp + 0x440, 0, rax);
    0x00408032 cmp qword [rsp + 0x210], 0x17                     |     
                                                                 |     if (*((rsp + 0x210)) != 0x17) {
    0x0040803b je 0x408053                                       |         
    0x0040803d mov rsi, qword [rsp + 0x1f0]                      |         rsi = *((rsp + 0x1f0));
    0x00408045 mov rdi, qword [rsp + 0x218]                      |         rdi = *((rsp + 0x218));
    0x0040804d mov rax, qword [rdi]                              |         rax = *(rdi);
    0x00408050 call qword [rax + 0x18]                           |         uint64_t (*rax + 0x18)() ();
                                                                 |     }
    0x00408053 mov dword [rsp + 0x10], 1                         |     *((rsp + 0x10)) = 1;
    0x0040805b mov rax, qword [rip + 0x512ade]                   |     rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00408062 test rax, rax                                     |     
                                                                 |     if (rax == 0) {
    0x00408065 jne 0x40806c                                      |         
    0x00408067 call 0x64efc0                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |     }
    0x0040806c mov qword [rsp + 0x1f0], 0                        |     *((rsp + 0x1f0)) = 0;
    0x00408078 mov qword [rsp + 0x218], rax                      |     *((rsp + 0x218)) = rax;
    0x00408080 movapd xmm0, xmmword [rip + 0x272c08]             |     __asm ("movapd xmm0, xmmword [0x0067ac90]");
    0x00408088 movupd xmmword [rsp + 0x208], xmm0                |     __asm ("movupd xmmword [rsp + 0x208], xmm0");
    0x00408091 lea rdi, [rsp + 0x1f0]                            |     
    0x00408099 mov esi, 0x67da8a                                 |     
    0x0040809e mov edx, 1                                        |     
    0x004080a3 mov ecx, 0x67d6b2                                 |     
    0x004080a8 call 0x654130                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rsp + 0x1f0, 0x67da8a, 1, "string<...>::assign(char*...): string too long");
    0x004080ad lea rdi, [rsp + 0x440]                            |     
    0x004080b5 call 0x64a5f0                                     |     eax = BloombergLP::bdlcc::SkipList_RandomLevelGenerator::randomLevel() (rsp + 0x440);
    0x004080ba lea rdi, [rsp + 0x440]                            |     
    0x004080c2 lea rdx, [rsp + 0x10]                             |     
    0x004080c7 lea rcx, [rsp + 0x1f0]                            |     
    0x004080cf mov esi, eax                                      |     
    0x004080d1 call 0x5e9aa0                                     |     rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::allocateNode(int,intconst&,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>const&) (rsp + 0x440, eax, rsp + 0x10, rsp + 0x1f0);
    0x004080d6 lea rdi, [rsp + 0x440]                            |     
    0x004080de xor esi, esi                                      |     
    0x004080e0 mov rdx, rax                                      |     
    0x004080e3 call 0x5e9ec0                                     |     BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::addNode(bool*,BloombergLP::bdlcc::SkipList_Node<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*) (rsp + 0x440, 0, rax);
    0x004080e8 cmp qword [rsp + 0x210], 0x17                     |     
                                                                 |     if (*((rsp + 0x210)) != 0x17) {
    0x004080f1 je 0x408109                                       |         
    0x004080f3 mov rsi, qword [rsp + 0x1f0]                      |         rsi = *((rsp + 0x1f0));
    0x004080fb mov rdi, qword [rsp + 0x218]                      |         rdi = *((rsp + 0x218));
    0x00408103 mov rax, qword [rdi]                              |         rax = *(rdi);
    0x00408106 call qword [rax + 0x18]                           |         uint64_t (*rax + 0x18)() ();
                                                                 |     }
    0x00408109 mov rdi, r14                                      |     rdi = r14;
    0x0040810c call 0x4052c0                                     |     pthread_mutex_lock ();
    0x00408111 mov ebx, dword [rsp + 0x488]                      |     ebx = *((rsp + 0x488));
    0x00408118 mov rdi, r14                                      |     rdi = r14;
    0x0040811b call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x00408120 cmp ebx, 4                                        |     
                                                                 |     if (ebx != 4) {
    0x00408123 je 0x40814c                                       |         
    0x00408125 call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040812a mov rbx, rax                                      |         rbx = rax;
    0x0040812d mov rdi, rax                                      |         
    0x00408130 call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00408135 mov edi, 0x67c72a                                 |         edi = "4 == X2.length()";
    0x0040813a mov esi, 0x16af                                   |         esi = 0x16af;
    0x0040813f call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00408144 mov rdi, rbx                                      |         
    0x00408147 call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040814c mov rdi, r14                                      |     rdi = r14;
    0x0040814f call 0x4052c0                                     |     pthread_mutex_lock ();
    0x00408154 mov rax, qword [rsp + 0x450]                      |     rax = *((rsp + 0x450));
    0x0040815c mov rbx, qword [rsp + 0x458]                      |     rbx = *((rsp + 0x458));
    0x00408164 mov rbp, qword [rax + 0x40]                       |     rbp = *((rax + 0x40));
    0x00408168 mov rdi, r14                                      |     rdi = r14;
    0x0040816b call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x00408170 cmp rbx, rbp                                      |     
                                                                 |     if (rbx == rbp) {
    0x00408173 jne 0x40819c                                      |         
    0x00408175 call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040817a mov rbx, rax                                      |         rbx = rax;
    0x0040817d mov rdi, rax                                      |         
    0x00408180 call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00408185 mov edi, 0x67c73b                                 |         edi = "!X2.isEmpty()";
    0x0040818a mov esi, 0x16b0                                   |         esi = 0x16b0;
    0x0040818f call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00408194 mov rdi, rbx                                      |         
    0x00408197 call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040819c lea rdi, [rsp + 0x440]                            |     
    0x004081a4 call 0x5e9de0                                     |     rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::popFrontImp() (rsp + 0x440);
    0x004081a9 mov r15, rax                                      |     r15 = rax;
    0x004081ac mov rdi, r14                                      |     rdi = r14;
    0x004081af call 0x4052c0                                     |     pthread_mutex_lock ();
    0x004081b4 mov ebx, dword [rsp + 0x488]                      |     ebx = *((rsp + 0x488));
    0x004081bb mov rdi, r14                                      |     rdi = r14;
    0x004081be call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x004081c3 cmp ebx, 3                                        |     
                                                                 |     if (ebx != 3) {
    0x004081c6 je 0x40824f                                       |         
    0x004081cc call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x004081d1 mov r12, rax                                      |         r12 = rax;
    0x004081d4 mov rdi, rax                                      |         
    0x004081d7 call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x004081dc mov edi, 0x91a328                                 |         
    0x004081e1 mov esi, 0x67c7ee                                 |         
    0x004081e6 mov edx, 0xb                                      |         
    0x004081eb call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, 0x67c7ee, 0xb);
    0x004081f0 mov esi, 0x67b8c6                                 |         
    0x004081f5 mov edx, 2                                        |         
    0x004081fa mov rdi, rax                                      |         
    0x004081fd call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67b8c6, 2);
    0x00408202 mov rbx, rax                                      |         rbx = rax;
    0x00408205 mov rdi, r14                                      |         rdi = r14;
    0x00408208 call 0x4052c0                                     |         pthread_mutex_lock ();
    0x0040820d mov ebp, dword [rsp + 0x488]                      |         ebp = *((rsp + 0x488));
    0x00408214 mov rdi, r14                                      |         rdi = r14;
    0x00408217 call 0x4053c0                                     |         pthread_mutex_unlock ();
    0x0040821c mov rdi, rbx                                      |         rdi = rbx;
    0x0040821f mov esi, ebp                                      |         esi = ebp;
    0x00408221 call 0x405010                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x00408226 mov esi, 0x696ad0                                 |         
    0x0040822b mov edx, 1                                        |         
    0x00408230 mov rdi, rax                                      |         
    0x00408233 call 0x5bcfd0                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x696ad0, 1);
    0x00408238 mov edi, 0x67c749                                 |         edi = "3 == X2.length()";
    0x0040823d mov esi, 0x16b4                                   |         esi = 0x16b4;
    0x00408242 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00408247 mov rdi, r12                                      |         
    0x0040824a call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r12);
                                                                 |     }
    0x0040824f test r15, r15                                     |     
                                                                 |     if (r15 == 0) {
    0x00408252 jne 0x40827b                                      |         
    0x00408254 call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00408259 mov rbx, rax                                      |         rbx = rax;
    0x0040825c mov rdi, rax                                      |         
    0x0040825f call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00408264 mov edi, 0x67c71b                                 |         edi = "ret==0";
    0x00408269 mov esi, 0x16b5                                   |         esi = 0x16b5;
    0x0040826e call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00408273 mov rdi, rbx                                      |         
    0x00408276 call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040827b cmp dword [rip + 0x512156], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x00408282 je 0x4083c1                                       |         
    0x00408288 call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040828d mov r12, rax                                      |         r12 = rax;
    0x00408290 mov rdi, rax                                      |         
    0x00408293 call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00408298 mov edi, 0x91a328                                 |         
    0x0040829d mov esi, 0x67c75a                                 |         
    0x004082a2 mov edx, 0xd                                      |         
    0x004082a7 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "h2->data() = ", 0xd);
    0x004082ac lea rsi, [r15 + 8]                                |         
    0x004082b0 mov rdi, rax                                      |         
    0x004082b3 call 0x5ba050                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&bsl::operator << <char,std::_1::char_traits<char>,bsl::allocator<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>const&) (rax, r15 + 8);
    0x004082b8 mov rbx, rax                                      |         rbx = rax;
    0x004082bb mov rax, qword [rax]                              |         rax = *(rax);
    0x004082be mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x004082c2 add rsi, rbx                                      |         rsi += rbx;
    0x004082c5 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x004082cd call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x004082d2 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x004082da mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x004082df call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x004082e4 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x004082e7 mov rdi, rax                                      |         rdi = rax;
    0x004082ea mov esi, 0xa                                      |         esi = 0xa;
    0x004082ef call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x004082f2 mov r13d, eax                                     |         r13d = eax;
    0x004082f5 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x004082fd call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00408302 movsx esi, r13b                                   |         esi = (int32_t) r13b;
    0x00408306 mov rdi, rbx                                      |         rdi = rbx;
    0x00408309 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040830e mov rdi, rbx                                      |         rdi = rbx;
    0x00408311 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x00408316 mov rdi, r12                                      |         
    0x00408319 call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r12);
    0x0040831e cmp dword [rip + 0x5120b3], 0                     |         
                                                                 |         if (*(obj.verbose) == 0) {
    0x00408325 je 0x4083c1                                       |             goto label_9;
                                                                 |         }
    0x0040832b call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00408330 mov r12, rax                                      |         r12 = rax;
    0x00408333 mov rdi, rax                                      |         
    0x00408336 call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040833b mov edi, 0x91a328                                 |         
    0x00408340 mov esi, 0x67c768                                 |         
    0x00408345 mov edx, 0xc                                      |         
    0x0040834a call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "h2->key() = ", 0xc);
    0x0040834f mov esi, dword [r15 + 0x38]                       |         esi = *((r15 + 0x38));
    0x00408353 mov rdi, rax                                      |         rdi = rax;
    0x00408356 call 0x405010                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040835b mov rbx, rax                                      |         rbx = rax;
    0x0040835e mov rax, qword [rax]                              |         rax = *(rax);
    0x00408361 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x00408365 add rsi, rbx                                      |         rsi += rbx;
    0x00408368 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00408370 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00408375 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040837d mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00408382 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00408387 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040838a mov rdi, rax                                      |         rdi = rax;
    0x0040838d mov esi, 0xa                                      |         esi = 0xa;
    0x00408392 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00408395 mov r13d, eax                                     |         r13d = eax;
    0x00408398 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x004083a0 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x004083a5 movsx esi, r13b                                   |         esi = (int32_t) r13b;
    0x004083a9 mov rdi, rbx                                      |         rdi = rbx;
    0x004083ac call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x004083b1 mov rdi, rbx                                      |         rdi = rbx;
    0x004083b4 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x004083b9 mov rdi, r12                                      |         
    0x004083bc call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r12);
                                                                 |     }
                                                                 | label_9:
    0x004083c1 cmp qword [r15 + 0x20], 1                         |     
                                                                 |     if (*((r15 + 0x20)) != 1) {
    0x004083c6 jne 0x40dbb0                                      |         void (*0x40dbb0)() ();
                                                                 |     }
    0x004083cc cmp qword [r15 + 0x28], 0x17                      |     
                                                                 |     if (*((r15 + 0x28)) == 0x17) {
    0x004083d1 je 0x40dba4                                       |         void (*0x40dba4)() ();
                                                                 |     }
    0x004083d7 mov rax, qword [r15 + 8]                          |     rax = *((r15 + 8));
    0x004083db jmp 0x40dbab                                      |     void (*0x40dbab)() ();
    0x004083e0 cmp dword [rip + 0x511ff1], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x004083e7 je 0x408530                                       |         
    0x004083ed mov rax, qword [rip + 0x511f34]                   |         rax = std::__1::cout;
    0x004083f4 mov esi, 0x91a328                                 |         esi = std::__1::cout;
    0x004083f9 add rsi, qword [rax - 0x18]                       |         rsi += *((rax - 0x18));
    0x004083fd lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00408405 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040840a lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00408412 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00408417 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040841c mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040841f mov rdi, rax                                      |         rdi = rax;
    0x00408422 mov esi, 0xa                                      |         esi = 0xa;
    0x00408427 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040842a mov ebx, eax                                      |         ebx = eax;
    0x0040842c lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00408434 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00408439 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x0040843c mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x00408441 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00408446 mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x0040844b call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x00408450 mov edi, 0x91a328                                 |         
    0x00408455 mov esi, 0x67c625                                 |         
    0x0040845a mov edx, 0xd                                      |         
    0x0040845f call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "Usage Example", 0xd);
    0x00408464 mov rbx, rax                                      |         rbx = rax;
    0x00408467 mov rax, qword [rax]                              |         rax = *(rax);
    0x0040846a mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040846e add rsi, rbx                                      |         rsi += rbx;
    0x00408471 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00408479 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040847e lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00408486 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040848b call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00408490 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00408493 mov rdi, rax                                      |         rdi = rax;
    0x00408496 mov esi, 0xa                                      |         esi = 0xa;
    0x0040849b call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040849e mov ebp, eax                                      |         
    0x004084a0 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x004084a8 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x004084ad movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x004084b1 mov rdi, rbx                                      |         rdi = rbx;
    0x004084b4 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x004084b9 mov rdi, rbx                                      |         rdi = rbx;
    0x004084bc call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x004084c1 mov esi, 0x67c23f                                 |         
    0x004084c6 mov edx, 0xd                                      |         
    0x004084cb mov rdi, rbx                                      |         
    0x004084ce call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rbx, 0x67c23f, 0xd);
    0x004084d3 mov rbx, rax                                      |         rbx = rax;
    0x004084d6 mov rax, qword [rax]                              |         rax = *(rax);
    0x004084d9 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x004084dd add rsi, rbx                                      |         rsi += rbx;
    0x004084e0 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x004084e8 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x004084ed lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x004084f5 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x004084fa call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x004084ff mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00408502 mov rdi, rax                                      |         rdi = rax;
    0x00408505 mov esi, 0xa                                      |         esi = 0xa;
    0x0040850a call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040850d mov ebp, eax                                      |         
    0x0040850f lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00408517 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040851c movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x00408520 mov rdi, rbx                                      |         rdi = rbx;
    0x00408523 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00408528 mov rdi, rbx                                      |         rdi = rbx;
    0x0040852b call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x00408530 lea rdi, [rsp + 0x1f0]                            |     
    0x00408538 xor esi, esi                                      |     
    0x0040853a call 0x5b9c80                                     |     USAGE::SimpleScheduler::SimpleScheduler(BloombergLP::bslma::Allocator*) (rsp + 0x1f0, 0);
    0x0040853f xorpd xmm0, xmm0                                  |     __asm ("xorpd xmm0, xmm0");
    0x00408543 movapd xmmword [rsp + 0x440], xmm0                |     __asm ("movapd xmmword [rsp + 0x440], xmm0");
    0x0040854c mov qword [rsp + 0x450], 0                        |     *((rsp + 0x450)) = 0;
    0x00408558 mov rax, qword [rip + 0x5125e1]                   |     rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040855f test rax, rax                                     |     
                                                                 |     if (rax == 0) {
    0x00408562 jne 0x408569                                      |         
    0x00408564 call 0x64efc0                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |     }
    0x00408569 mov qword [rsp + 0x458], rax                      |     *((rsp + 0x458)) = rax;
    0x00408571 call 0x64b230                                     |     rax = BloombergLP::bdlt::DatetimeImpUtil::epoch_1970_01_01() ();
    0x00408576 mov rbx, rax                                      |     rbx = rax;
    0x00408579 mov rax, qword [rip + 0x5114e0]                   |     rax = BloombergLP::bdlt::CurrentTime::s_currenttimeCallback_p;
    0x00408580 call rax                                          |     rax = void (*rax)() ();
    0x00408582 mov r14, rax                                      |     r14 = rax;
    0x00408585 mov ebp, edx                                      |     
    0x00408587 mov rbx, qword [rbx]                              |     rbx = *(rbx);
    0x0040858a test rbx, rbx                                     |     
                                                                 |     if (rbx >= 0) {
    0x0040858d jns 0x411e3d                                      |         void (*0x411e3d)() ();
                                                                 |     }
    0x00408593 movabs rcx, 0xffffffebe228a000                    |     rcx = 0xffffffebe228a000;
    0x0040859d movabs r13, 0x1ffffffc00                          |     r13 = 0x1ffffffc00;
    0x004085a7 movabs rdi, 0x141dd76000                          |     rdi = 0x141dd76000;
    0x004085b1 mov rax, rbx                                      |     rax = rbx;
    0x004085b4 and rax, r13                                      |     rax &= r13;
    0x004085b7 add rax, rcx                                      |     rax += rcx;
    0x004085ba shr rax, 0xa                                      |     rax >>= 0xa;
    0x004085be mov rcx, rbx                                      |     rcx = rbx;
    0x004085c1 shr rcx, 0x25                                     |     rcx >>= 0x25;
    0x004085c5 and ecx, 0x3ffffff                                |     ecx &= 0x3ffffff;
    0x004085cb imul rcx, rdi                                     |     rcx *= rdi;
    0x004085cf lea rdx, [r13 + 0x3ff]                            |     rdx = r13 + 0x3ff;
    0x004085d6 and rdx, rbx                                      |     rdx &= rbx;
    0x004085d9 xor esi, esi                                      |     esi = 0;
    0x004085db cmp rax, 0x35a4e9                                 |     
                                                                 |     if (rax >= 0x35a4e9) {
    0x004085e1 cmovae rsi, rdx                                   |         rsi = rdx;
                                                                 |     }
    0x004085e5 add rsi, rcx                                      |     rsi += rcx;
    0x004085e8 imul rax, r14, 0xf4240                            |     rax = r14 * 0xf4240;
    0x004085ef movsxd rcx, ebp                                   |     rcx = (int64_t) ebp;
    0x004085f2 imul rcx, rcx, 0x10624dd3                         |     rcx *= 0x10624dd3;
    0x004085f9 mov rdx, rcx                                      |     rdx = rcx;
    0x004085fc shr rdx, 0x3f                                     |     rdx >>= 0x3f;
    0x00408600 sar rcx, 0x26                                     |     rcx >>= 0x26;
    0x00408604 add ecx, edx                                      |     ecx += edx;
    0x00408606 movsxd rcx, ecx                                   |     rcx = (int64_t) ecx;
    0x00408609 add rcx, rax                                      |     rcx += rax;
    0x0040860c add rcx, rsi                                      |     rcx += rsi;
    0x0040860f movabs rdx, 0x32e73fb956a1b897                    |     rdx = 0x32e73fb956a1b897;
    0x00408619 mov rax, rcx                                      |     rax = rcx;
    0x0040861c mul rdx                                           |     rdx:rax = rax * rdx;
    0x0040861f shr rdx, 0x22                                     |     rdx >>= 0x22;
    0x00408623 mov rax, rdx                                      |     rax = rdx;
    0x00408626 shl rax, 0x25                                     |     rax <<= 0x25;
    0x0040862a imul rdx, rdi                                     |     rdx *= rdi;
    0x0040862e sub rcx, rdx                                      |     rcx -= rdx;
    0x00408631 or rcx, rax                                       |     rcx |= rax;
    0x00408634 movabs rax, 0x8000000000000000                    |     rax = 0x8000000000000000;
    0x0040863e or rcx, rax                                       |     rcx |= rax;
    0x00408641 mov qword [rsp + 0x370], rcx                      |     *((rsp + 0x370)) = rcx;
    0x00408649 movabs rax, 0x800000141dd76000                    |     rax = 0x800000141dd76000;
    0x00408653 mov qword [rsp + 0x10], rax                       |     *((rsp + 0x10)) = rax;
    0x00408658 cmp dword [rip + 0x511d7d], 0                     |     
                                                                 |     if (*(obj.veryVerbose) == 0) {
    0x0040865f je 0x4086fc                                       |         goto label_10;
                                                                 |     }
    0x00408665 mov edi, 0x91a328                                 |     
    0x0040866a mov esi, 0x67c633                                 |     
    0x0040866f mov edx, 0xc                                      |     
    0x00408674 call 0x5bcfd0                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "Start:      ", 0xc);
    0x00408679 lea rsi, [rsp + 0x370]                            |     
    0x00408681 mov rdi, rax                                      |     
    0x00408684 call 0x64b200                                     |     rax = BloombergLP::bdlt::operator << (std::_1::basic_ostream<char,std::_1::char_traits<char>>&,BloombergLP::bdlt::Datetimeconst&) (rax, rsp + 0x370);
    0x00408689 mov rbx, rax                                      |     rbx = rax;
    0x0040868c mov rax, qword [rax]                              |     rax = *(rax);
    0x0040868f mov rsi, qword [rax - 0x18]                       |     rsi = *((rax - 0x18));
    0x00408693 add rsi, rbx                                      |     rsi += rbx;
    0x00408696 lea rdi, [rsp + 0xc0]                             |     rdi = rsp + 0xc0;
    0x0040869e call 0x405070                                     |     std::_1::ios_base::getloc()const ();
    0x004086a3 lea rdi, [rsp + 0xc0]                             |     rdi = rsp + 0xc0;
    0x004086ab mov esi, 0x91a270                                 |     esi = obj.std::__1::ctype_char_::id;
    0x004086b0 call 0x4051a0                                     |     rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x004086b5 mov rcx, qword [rax]                              |     rcx = *(rax);
    0x004086b8 mov rdi, rax                                      |     rdi = rax;
    0x004086bb mov esi, 0xa                                      |     esi = 0xa;
    0x004086c0 call qword [rcx + 0x38]                           |     eax = uint64_t (*rcx + 0x38)() ();
    0x004086c3 mov ebp, eax                                      |     
    0x004086c5 lea rdi, [rsp + 0xc0]                             |     rdi = rsp + 0xc0;
    0x004086cd call 0x405240                                     |     std::_1::locale::~locale() ();
    0x004086d2 movsx esi, bpl                                    |     esi = (int32_t) bpl;
    0x004086d6 mov rdi, rbx                                      |     rdi = rbx;
    0x004086d9 call 0x404e30                                     |     std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x004086de mov rdi, rbx                                      |     rdi = rbx;
    0x004086e1 call 0x405040                                     |     std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x004086e6 mov rcx, qword [rsp + 0x370]                      |     rcx = *((rsp + 0x370));
    0x004086ee mov qword [rsp + 0x10], rcx                       |     *((rsp + 0x10)) = rcx;
    0x004086f3 test rcx, rcx                                     |     
                                                                 |     if (rcx >= 0) {
    0x004086f6 jns 0x41204b                                      |         void (*0x41204b)() ();
                                                                 |     }
                                                                 | label_10:
    0x004086fc mov ebp, 0xd693a400                               |     
    0x00408701 mov rax, rcx                                      |     rax = rcx;
    0x00408704 and rax, r13                                      |     rax &= r13;
    0x00408707 movabs rdx, 0xffffffebe228a000                    |     rdx = 0xffffffebe228a000;
    0x00408711 add rax, rdx                                      |     rax += rdx;
    0x00408714 mov rdx, rcx                                      |     rdx = rcx;
    0x00408717 shr rdx, 0x25                                     |     rdx >>= 0x25;
    0x0040871b and edx, 0x3ffffff                                |     edx &= 0x3ffffff;
    0x00408721 movabs rdi, 0x141dd76000                          |     rdi = 0x141dd76000;
    0x0040872b imul rdx, rdi                                     |     rdx *= rdi;
    0x0040872f lea r15, [r13 + 0x3ff]                            |     r15 = r13 + 0x3ff;
    0x00408736 and rcx, r15                                      |     rcx &= r15;
    0x00408739 xor esi, esi                                      |     esi = 0;
    0x0040873b cmp rax, rbp                                      |     
                                                                 |     if (rax >= rbp) {
    0x0040873e cmovae rsi, rcx                                   |         rsi = rcx;
                                                                 |     }
    0x00408742 lea rcx, [rdx + rsi + 0x225510]                   |     rcx = rdx + rsi + 0x225510;
    0x0040874a mov rax, rcx                                      |     rax = rcx;
    0x0040874d movabs rdx, 0x32e73fb956a1b897                    |     rdx = 0x32e73fb956a1b897;
    0x00408757 mul rdx                                           |     rdx:rax = rax * rdx;
    0x0040875a shr rdx, 0x22                                     |     rdx >>= 0x22;
    0x0040875e mov rax, rdx                                      |     rax = rdx;
    0x00408761 shl rax, 0x25                                     |     rax <<= 0x25;
    0x00408765 imul rdx, rdi                                     |     rdx *= rdi;
    0x00408769 sub rcx, rdx                                      |     rcx -= rdx;
    0x0040876c or rcx, rax                                       |     rcx |= rax;
    0x0040876f movabs rax, 0x8000000000000000                    |     rax = 0x8000000000000000;
    0x00408779 or rcx, rax                                       |     rcx |= rax;
    0x0040877c mov qword [rsp + 0x10], rcx                       |     *((rsp + 0x10)) = rcx;
    0x00408781 cmp dword [rip + 0x511c54], 0                     |     
                                                                 |     if (*(obj.veryVerbose) != 0) {
    0x00408788 je 0x408808                                       |         
    0x0040878a mov edi, 0x91a328                                 |         
    0x0040878f mov esi, 0x67c640                                 |         
    0x00408794 mov edx, 0xc                                      |         
    0x00408799 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "scheduling: ", 0xc);
    0x0040879e lea rsi, [rsp + 0x10]                             |         
    0x004087a3 mov rdi, rax                                      |         
    0x004087a6 call 0x64b200                                     |         rax = BloombergLP::bdlt::operator << (std::_1::basic_ostream<char,std::_1::char_traits<char>>&,BloombergLP::bdlt::Datetimeconst&) (rax, rsp + 0x10);
    0x004087ab mov rbx, rax                                      |         rbx = rax;
    0x004087ae mov rax, qword [rax]                              |         rax = *(rax);
    0x004087b1 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x004087b5 add rsi, rbx                                      |         rsi += rbx;
    0x004087b8 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x004087c0 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x004087c5 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x004087cd mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x004087d2 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x004087d7 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x004087da mov rdi, rax                                      |         rdi = rax;
    0x004087dd mov esi, 0xa                                      |         esi = 0xa;
    0x004087e2 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x004087e5 mov ebp, eax                                      |         
    0x004087e7 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x004087ef call 0x405240                                     |         std::_1::locale::~locale() ();
    0x004087f4 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x004087f8 mov rdi, rbx                                      |         rdi = rbx;
    0x004087fb call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00408800 mov rdi, rbx                                      |         rdi = rbx;
    0x00408803 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x00408808 mov rax, qword [rip + 0x512331]                   |     rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040880f test rax, rax                                     |     
                                                                 |     if (rax == 0) {
    0x00408812 jne 0x408819                                      |         
    0x00408814 call 0x64efc0                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |     }
    0x00408819 mov qword [rsp + 0xf0], rax                       |     *((rsp + 0xf0)) = rax;
    0x00408821 xorpd xmm0, xmm0                                  |     __asm ("xorpd xmm0, xmm0");
    0x00408825 movupd xmmword [rsp + 0xf8], xmm0                 |     __asm ("movupd xmmword [rsp + 0xf8], xmm0");
    0x0040882e lea rdi, [rsp + 0xc0]                             |     
    0x00408836 mov esi, 0x18                                     |     
    0x0040883b call 0x651f50                                     |     BloombergLP::bslstl::Function_Rep::allocateBuf(unsigned long) (rsp + 0xc0, 0x18);
    0x00408840 mov qword [rsp + 0xf8], 0x64a150                  |     *((rsp + 0xf8)) = method.BloombergLP::bslstl::Function_Rep::ManagerRet_BloombergLP::bslstl::Function_Rep::functionManager_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____bsl::vector_int__bsl::allocator_int_____int___BloombergLP::bdlf::Bind_BoundTuple2_bsl::vecto;
    0x0040884c mov qword [rsp + 0xc0], 0x4059c0                  |     *((rsp + 0xc0)) = method.USAGE.pushBackWrapper_bsl::vector_int__bsl::allocator_int_____int_;
    0x00408858 lea r14, [rsp + 0x440]                            |     r14 = rsp + 0x440;
    0x00408860 mov qword [rsp + 0xc8], r14                       |     *((rsp + 0xc8)) = r14;
    0x00408868 mov dword [rsp + 0xd0], 2                         |     *((rsp + 0xd0)) = 2;
    0x00408873 mov qword [rsp + 0x100], 0x64a140                 |     *((rsp + 0x100)) = method.BloombergLP::bslstl.Function_InvokerUtil_Dispatch_4__void_____BloombergLP::bdlf::Bind_BloombergLP::bslmf::Nil__void____bsl::vector_int__bsl::allocator_int_____int___BloombergLP::bdlf::Bind_BoundTuple2_bsl::vector_int__bsl::allocator_int_____int;
    0x0040887f lea rdi, [rsp + 0x1f0]                            |     
    0x00408887 call 0x64a5f0                                     |     eax = BloombergLP::bdlcc::SkipList_RandomLevelGenerator::randomLevel() (rsp + 0x1f0);
    0x0040888c lea rdi, [rsp + 0x1f0]                            |     
    0x00408894 lea rdx, [rsp + 0x10]                             |     
    0x00408899 lea rcx, [rsp + 0xc0]                             |     
    0x004088a1 mov esi, eax                                      |     
    0x004088a3 call 0x5bc580                                     |     rax = BloombergLP::bdlcc::SkipList<BloombergLP::bdlt::Datetime,bsl::function<void()>>::allocateNode(int,BloombergLP::bdlt::Datetimeconst&,bsl::function<void()>const&) (rsp + 0x1f0, eax, rsp + 0x10, rsp + 0xc0);
    0x004088a8 lea rdi, [rsp + 0x1f0]                            |     
    0x004088b0 lea rsi, [rsp + 0x78]                             |     
    0x004088b5 mov rdx, rax                                      |     
    0x004088b8 mov ecx, 1                                        |     ecx = 1;
    0x004088bd call 0x5bc660                                     |     BloombergLP::bdlcc::SkipList<BloombergLP::bdlt::Datetime,bsl::function<void()>>::addNodeImpR(bool*,BloombergLP::bdlcc::SkipList_Node<BloombergLP::bdlt::Datetime,bsl::function<void()>>*,bool) (rsp + 0x1f0, rsp + 0x78, rax);
    0x004088c2 cmp byte [rsp + 0x78], 0                          |     
                                                                 |     if (*((rsp + 0x78)) != 0) {
    0x004088c7 je 0x4088d6                                       |         
    0x004088c9 lea rdi, [rsp + 0x258]                            |         rdi = rsp + 0x258;
    0x004088d1 call 0x404bb0                                     |         pthread_cond_signal ();
                                                                 |     }
    0x004088d6 lea rdi, [rsp + 0xc0]                             |     
    0x004088de call 0x651ef0                                     |     BloombergLP::bslstl::Function_Rep::~Function_Rep() (rsp + 0xc0);
    0x004088e3 mov rax, qword [rsp + 0x370]                      |     rax = *((rsp + 0x370));
    0x004088eb mov qword [rsp + 0x10], rax                       |     *((rsp + 0x10)) = rax;
    0x004088f0 test rax, rax                                     |     
                                                                 |     if (rax >= 0) {
    0x004088f3 jns 0x411ebe                                      |         void (*0x411ebe)() ();
                                                                 |     }
    0x004088f9 mov rcx, rax                                      |     rcx = rax;
    0x004088fc and rcx, r13                                      |     rcx &= r13;
    0x004088ff movabs rdx, 0xffffffebe228a000                    |     rdx = 0xffffffebe228a000;
    0x00408909 add rcx, rdx                                      |     rcx += rdx;
    0x0040890c mov rdx, rax                                      |     rdx = rax;
    0x0040890f shr rdx, 0x25                                     |     rdx >>= 0x25;
    0x00408913 and edx, 0x3ffffff                                |     edx &= 0x3ffffff;
    0x00408919 movabs rdi, 0x141dd76000                          |     rdi = 0x141dd76000;
    0x00408923 imul rdx, rdi                                     |     rdx *= rdi;
    0x00408927 and rax, r15                                      |     rax &= r15;
    0x0040892a xor esi, esi                                      |     esi = 0;
    0x0040892c mov ebp, 0xd693a400                               |     
    0x00408931 cmp rcx, rbp                                      |     
                                                                 |     if (rcx >= rbp) {
    0x00408934 cmovae rsi, rax                                   |         rsi = rax;
                                                                 |     }
    0x00408938 lea rcx, [rdx + rsi + 0xb71b0]                    |     rcx = rdx + rsi + 0xb71b0;
    0x00408940 mov rax, rcx                                      |     rax = rcx;
    0x00408943 movabs rdx, 0x32e73fb956a1b897                    |     rdx = 0x32e73fb956a1b897;
    0x0040894d mul rdx                                           |     rdx:rax = rax * rdx;
    0x00408950 shr rdx, 0x22                                     |     rdx >>= 0x22;
    0x00408954 mov rax, rdx                                      |     rax = rdx;
    0x00408957 shl rax, 0x25                                     |     rax <<= 0x25;
    0x0040895b imul rdx, rdi                                     |     rdx *= rdi;
    0x0040895f sub rcx, rdx                                      |     rcx -= rdx;
    0x00408962 or rcx, rax                                       |     rcx |= rax;
    0x00408965 movabs rax, 0x8000000000000000                    |     rax = 0x8000000000000000;
    0x0040896f or rcx, rax                                       |     rcx |= rax;
    0x00408972 mov qword [rsp + 0x10], rcx                       |     *((rsp + 0x10)) = rcx;
    0x00408977 cmp dword [rip + 0x511a5e], 0                     |     
                                                                 |     if (*(obj.veryVerbose) != 0) {
    0x0040897e je 0x4089fe                                       |         
    0x00408980 mov edi, 0x91a328                                 |         
    0x00408985 mov esi, 0x67c640                                 |         
    0x0040898a mov edx, 0xc                                      |         
    0x0040898f call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "scheduling: ", 0xc);
    0x00408994 lea rsi, [rsp + 0x10]                             |         
    0x00408999 mov rdi, rax                                      |         
    0x0040899c call 0x64b200                                     |         rax = BloombergLP::bdlt::operator << (std::_1::basic_ostream<char,std::_1::char_traits<char>>&,BloombergLP::bdlt::Datetimeconst&) (rax, rsp + 0x10);
    0x004089a1 mov rbx, rax                                      |         rbx = rax;
    0x004089a4 mov rax, qword [rax]                              |         rax = *(rax);
    0x004089a7 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x004089ab add rsi, rbx                                      |         rsi += rbx;
    0x004089ae lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x004089b6 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x004089bb lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x004089c3 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x004089c8 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x004089cd mov rcx, qword [rax]                              |         rcx = *(rax);
    0x004089d0 mov rdi, rax                                      |         rdi = rax;
    0x004089d3 mov esi, 0xa                                      |         esi = 0xa;
    0x004089d8 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x004089db mov ebp, eax                                      |         
    0x004089dd lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x004089e5 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x004089ea movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x004089ee mov rdi, rbx                                      |         rdi = rbx;
    0x004089f1 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x004089f6 mov rdi, rbx                                      |         rdi = rbx;
    0x004089f9 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x004089fe mov rax, qword [rip + 0x51213b]                   |     rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00408a05 test rax, rax                                     |     
                                                                 |     if (rax == 0) {
    0x00408a08 jne 0x408a0f                                      |         
    0x00408a0a call 0x64efc0                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |     }
    0x00408a0f mov qword [rsp + 0xf0], rax                       |     *((rsp + 0xf0)) = rax;
    0x00408a17 xorpd xmm0, xmm0                                  |     __asm ("xorpd xmm0, xmm0");
    0x00408a1b movupd xmmword [rsp + 0xf8], xmm0                 |     __asm ("movupd xmmword [rsp + 0xf8], xmm0");
    0x00408a24 lea rdi, [rsp + 0xc0]                             |     
    0x00408a2c mov esi, 0x18                                     |     
    0x00408a31 call 0x651f50                                     |     BloombergLP::bslstl::Function_Rep::allocateBuf(unsigned long) (rsp + 0xc0, 0x18);
    0x00408a36 mov qword [rsp + 0xf8], 0x64a150                  |     *((rsp + 0xf8)) = method.BloombergLP::bslstl::Function_Rep::ManagerRet_BloombergLP::bslstl::Function_Rep::functionManager_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____bsl::vector_int__bsl::allocator_int_____int___BloombergLP::bdlf::Bind_BoundTuple2_bsl::vecto;
    0x00408a42 mov qword [rsp + 0xc0], 0x4059c0                  |     *((rsp + 0xc0)) = method.USAGE.pushBackWrapper_bsl::vector_int__bsl::allocator_int_____int_;
    0x00408a4e mov qword [rsp + 0xc8], r14                       |     *((rsp + 0xc8)) = r14;
    0x00408a56 mov dword [rsp + 0xd0], 0                         |     *((rsp + 0xd0)) = 0;
    0x00408a61 mov qword [rsp + 0x100], 0x64a140                 |     *((rsp + 0x100)) = method.BloombergLP::bslstl.Function_InvokerUtil_Dispatch_4__void_____BloombergLP::bdlf::Bind_BloombergLP::bslmf::Nil__void____bsl::vector_int__bsl::allocator_int_____int___BloombergLP::bdlf::Bind_BoundTuple2_bsl::vector_int__bsl::allocator_int_____int;
    0x00408a6d lea rdi, [rsp + 0x1f0]                            |     
    0x00408a75 call 0x64a5f0                                     |     eax = BloombergLP::bdlcc::SkipList_RandomLevelGenerator::randomLevel() (rsp + 0x1f0);
    0x00408a7a lea rdi, [rsp + 0x1f0]                            |     
    0x00408a82 lea rdx, [rsp + 0x10]                             |     
    0x00408a87 lea rcx, [rsp + 0xc0]                             |     
    0x00408a8f mov esi, eax                                      |     
    0x00408a91 call 0x5bc580                                     |     rax = BloombergLP::bdlcc::SkipList<BloombergLP::bdlt::Datetime,bsl::function<void()>>::allocateNode(int,BloombergLP::bdlt::Datetimeconst&,bsl::function<void()>const&) (rsp + 0x1f0, eax, rsp + 0x10, rsp + 0xc0);
    0x00408a96 lea rdi, [rsp + 0x1f0]                            |     
    0x00408a9e lea rsi, [rsp + 0x78]                             |     
    0x00408aa3 mov rdx, rax                                      |     
    0x00408aa6 mov ecx, 1                                        |     ecx = 1;
    0x00408aab call 0x5bc660                                     |     BloombergLP::bdlcc::SkipList<BloombergLP::bdlt::Datetime,bsl::function<void()>>::addNodeImpR(bool*,BloombergLP::bdlcc::SkipList_Node<BloombergLP::bdlt::Datetime,bsl::function<void()>>*,bool) (rsp + 0x1f0, rsp + 0x78, rax);
    0x00408ab0 cmp byte [rsp + 0x78], 0                          |     
                                                                 |     if (*((rsp + 0x78)) != 0) {
    0x00408ab5 je 0x408ac4                                       |         
    0x00408ab7 lea rdi, [rsp + 0x258]                            |         rdi = rsp + 0x258;
    0x00408abf call 0x404bb0                                     |         pthread_cond_signal ();
                                                                 |     }
    0x00408ac4 lea rdi, [rsp + 0xc0]                             |     
    0x00408acc call 0x651ef0                                     |     BloombergLP::bslstl::Function_Rep::~Function_Rep() (rsp + 0xc0);
    0x00408ad1 mov rax, qword [rsp + 0x370]                      |     rax = *((rsp + 0x370));
    0x00408ad9 mov qword [rsp + 0x10], rax                       |     *((rsp + 0x10)) = rax;
    0x00408ade test rax, rax                                     |     
                                                                 |     if (rax >= 0) {
    0x00408ae1 jns 0x411f44                                      |         void (*0x411f44)() ();
                                                                 |     }
    0x00408ae7 mov rcx, rax                                      |     rcx = rax;
    0x00408aea and rcx, r13                                      |     rcx &= r13;
    0x00408aed movabs rdx, 0xffffffebe228a000                    |     rdx = 0xffffffebe228a000;
    0x00408af7 add rcx, rdx                                      |     rcx += rdx;
    0x00408afa mov rdx, rax                                      |     rdx = rax;
    0x00408afd shr rdx, 0x25                                     |     rdx >>= 0x25;
    0x00408b01 and edx, 0x3ffffff                                |     edx &= 0x3ffffff;
    0x00408b07 movabs rdi, 0x141dd76000                          |     rdi = 0x141dd76000;
    0x00408b11 imul rdx, rdi                                     |     rdx *= rdi;
    0x00408b15 and rax, r15                                      |     rax &= r15;
    0x00408b18 xor esi, esi                                      |     esi = 0;
    0x00408b1a mov ebp, 0xd693a400                               |     
    0x00408b1f cmp rcx, rbp                                      |     
                                                                 |     if (rcx >= rbp) {
    0x00408b22 cmovae rsi, rax                                   |         rsi = rax;
                                                                 |     }
    0x00408b26 lea rcx, [rdx + rsi + 0x16e360]                   |     rcx = rdx + rsi + 0x16e360;
    0x00408b2e mov rax, rcx                                      |     rax = rcx;
    0x00408b31 movabs rdx, 0x32e73fb956a1b897                    |     rdx = 0x32e73fb956a1b897;
    0x00408b3b mul rdx                                           |     rdx:rax = rax * rdx;
    0x00408b3e shr rdx, 0x22                                     |     rdx >>= 0x22;
    0x00408b42 mov rax, rdx                                      |     rax = rdx;
    0x00408b45 shl rax, 0x25                                     |     rax <<= 0x25;
    0x00408b49 imul rdx, rdi                                     |     rdx *= rdi;
    0x00408b4d sub rcx, rdx                                      |     rcx -= rdx;
    0x00408b50 or rcx, rax                                       |     rcx |= rax;
    0x00408b53 movabs rax, 0x8000000000000000                    |     rax = 0x8000000000000000;
    0x00408b5d or rcx, rax                                       |     rcx |= rax;
    0x00408b60 mov qword [rsp + 0x10], rcx                       |     *((rsp + 0x10)) = rcx;
    0x00408b65 cmp dword [rip + 0x511870], 0                     |     
                                                                 |     if (*(obj.veryVerbose) != 0) {
    0x00408b6c je 0x408bec                                       |         
    0x00408b6e mov edi, 0x91a328                                 |         
    0x00408b73 mov esi, 0x67c640                                 |         
    0x00408b78 mov edx, 0xc                                      |         
    0x00408b7d call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "scheduling: ", 0xc);
    0x00408b82 lea rsi, [rsp + 0x10]                             |         
    0x00408b87 mov rdi, rax                                      |         
    0x00408b8a call 0x64b200                                     |         rax = BloombergLP::bdlt::operator << (std::_1::basic_ostream<char,std::_1::char_traits<char>>&,BloombergLP::bdlt::Datetimeconst&) (rax, rsp + 0x10);
    0x00408b8f mov rbx, rax                                      |         rbx = rax;
    0x00408b92 mov rax, qword [rax]                              |         rax = *(rax);
    0x00408b95 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x00408b99 add rsi, rbx                                      |         rsi += rbx;
    0x00408b9c lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x00408ba4 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00408ba9 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x00408bb1 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00408bb6 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00408bbb mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00408bbe mov rdi, rax                                      |         rdi = rax;
    0x00408bc1 mov esi, 0xa                                      |         esi = 0xa;
    0x00408bc6 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00408bc9 mov ebp, eax                                      |         
    0x00408bcb lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x00408bd3 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00408bd8 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x00408bdc mov rdi, rbx                                      |         rdi = rbx;
    0x00408bdf call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00408be4 mov rdi, rbx                                      |         rdi = rbx;
    0x00408be7 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x00408bec mov rax, qword [rip + 0x511f4d]                   |     rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00408bf3 test rax, rax                                     |     
                                                                 |     if (rax == 0) {
    0x00408bf6 jne 0x408bfd                                      |         
    0x00408bf8 call 0x64efc0                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |     }
    0x00408bfd mov qword [rsp + 0xf0], rax                       |     *((rsp + 0xf0)) = rax;
    0x00408c05 xorpd xmm0, xmm0                                  |     __asm ("xorpd xmm0, xmm0");
    0x00408c09 movupd xmmword [rsp + 0xf8], xmm0                 |     __asm ("movupd xmmword [rsp + 0xf8], xmm0");
    0x00408c12 lea rdi, [rsp + 0xc0]                             |     
    0x00408c1a mov esi, 0x18                                     |     
    0x00408c1f call 0x651f50                                     |     BloombergLP::bslstl::Function_Rep::allocateBuf(unsigned long) (rsp + 0xc0, 0x18);
    0x00408c24 mov qword [rsp + 0xf8], 0x64a150                  |     *((rsp + 0xf8)) = method.BloombergLP::bslstl::Function_Rep::ManagerRet_BloombergLP::bslstl::Function_Rep::functionManager_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____bsl::vector_int__bsl::allocator_int_____int___BloombergLP::bdlf::Bind_BoundTuple2_bsl::vecto;
    0x00408c30 mov qword [rsp + 0xc0], 0x4059c0                  |     *((rsp + 0xc0)) = method.USAGE.pushBackWrapper_bsl::vector_int__bsl::allocator_int_____int_;
    0x00408c3c mov qword [rsp + 0xc8], r14                       |     *((rsp + 0xc8)) = r14;
    0x00408c44 mov dword [rsp + 0xd0], 1                         |     *((rsp + 0xd0)) = 1;
    0x00408c4f mov qword [rsp + 0x100], 0x64a140                 |     *((rsp + 0x100)) = method.BloombergLP::bslstl.Function_InvokerUtil_Dispatch_4__void_____BloombergLP::bdlf::Bind_BloombergLP::bslmf::Nil__void____bsl::vector_int__bsl::allocator_int_____int___BloombergLP::bdlf::Bind_BoundTuple2_bsl::vector_int__bsl::allocator_int_____int;
    0x00408c5b lea rdi, [rsp + 0x1f0]                            |     
    0x00408c63 call 0x64a5f0                                     |     eax = BloombergLP::bdlcc::SkipList_RandomLevelGenerator::randomLevel() (rsp + 0x1f0);
    0x00408c68 lea rdi, [rsp + 0x1f0]                            |     
    0x00408c70 lea rdx, [rsp + 0x10]                             |     
    0x00408c75 lea rcx, [rsp + 0xc0]                             |     
    0x00408c7d mov esi, eax                                      |     
    0x00408c7f call 0x5bc580                                     |     rax = BloombergLP::bdlcc::SkipList<BloombergLP::bdlt::Datetime,bsl::function<void()>>::allocateNode(int,BloombergLP::bdlt::Datetimeconst&,bsl::function<void()>const&) (rsp + 0x1f0, eax, rsp + 0x10, rsp + 0xc0);
    0x00408c84 lea rdi, [rsp + 0x1f0]                            |     
    0x00408c8c lea rsi, [rsp + 0x78]                             |     
    0x00408c91 mov rdx, rax                                      |     
    0x00408c94 mov ecx, 1                                        |     ecx = 1;
    0x00408c99 call 0x5bc660                                     |     BloombergLP::bdlcc::SkipList<BloombergLP::bdlt::Datetime,bsl::function<void()>>::addNodeImpR(bool*,BloombergLP::bdlcc::SkipList_Node<BloombergLP::bdlt::Datetime,bsl::function<void()>>*,bool) (rsp + 0x1f0, rsp + 0x78, rax);
    0x00408c9e cmp byte [rsp + 0x78], 0                          |     
                                                                 |     if (*((rsp + 0x78)) != 0) {
    0x00408ca3 je 0x408cb2                                       |         
    0x00408ca5 lea rdi, [rsp + 0x258]                            |         rdi = rsp + 0x258;
    0x00408cad call 0x404bb0                                     |         pthread_cond_signal ();
                                                                 |     }
    0x00408cb2 lea rdi, [rsp + 0xc0]                             |     
    0x00408cba call 0x651ef0                                     |     BloombergLP::bslstl::Function_Rep::~Function_Rep() (rsp + 0xc0);
    0x00408cbf mov rax, qword [rsp + 0x448]                      |     rax = *((rsp + 0x448));
    0x00408cc7 cmp rax, qword [rsp + 0x440]                      |     
                                                                 |     if (rax != *((rsp + 0x440))) {
    0x00408ccf je 0x408cf8                                       |         
    0x00408cd1 call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00408cd6 mov rbx, rax                                      |         rbx = rax;
    0x00408cd9 mov rdi, rax                                      |         
    0x00408cdc call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00408ce1 mov edi, 0x67c64d                                 |         edi = "values.empty()";
    0x00408ce6 mov esi, 0x1673                                   |         esi = 0x1673;
    0x00408ceb call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00408cf0 mov rdi, rbx                                      |         
    0x00408cf3 call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x00408cf8 lea r14, [rsp + 0x340]                            |     r14 = rsp + 0x340;
    0x00408d00 mov rdi, r14                                      |     rdi = r14;
    0x00408d03 call 0x4052c0                                     |     pthread_mutex_lock ();
    0x00408d08 lea rbp, [rsp + 0x210]                            |     rbp = rsp + 0x210;
    0x00408d10 lea rbx, [rsp + 0x290]                            |     rbx = rsp + 0x290;
    0x00408d18 nop dword [rax + rax]                             |     
                                                                 |     do {
    0x00408d20 cmp dword [rsp + 0x368], 0                        |         
                                                                 |         if (*((rsp + 0x368)) != 0) {
    0x00408d28 jne 0x40bce9                                      |             goto label_11;
                                                                 |         }
    0x00408d2e mov rdi, rbp                                      |         rdi = rbp;
    0x00408d31 call 0x4052c0                                     |         pthread_mutex_lock ();
    0x00408d36 mov r12d, dword [rsp + 0x238]                     |         r12d = *((rsp + 0x238));
    0x00408d3e mov rdi, rbp                                      |         rdi = rbp;
    0x00408d41 call 0x4053c0                                     |         pthread_mutex_unlock ();
    0x00408d46 test r12d, r12d                                   |         
                                                                 |         if (r12d == 0) {
    0x00408d49 je 0x40bce9                                       |             goto label_11;
                                                                 |         }
    0x00408d4f mov rdi, rbx                                      |         rdi = rbx;
    0x00408d52 mov rsi, r14                                      |         rsi = r14;
    0x00408d55 call 0x405170                                     |         pthread_cond_wait ();
    0x00408d5a jmp 0x408d20                                      |         
                                                                 |     } while (1);
    0x00408d5c call 0x5a1d30                                     |     TestDriver<signedchar,signedchar>::allocationTest() ();
    0x00408d61 call 0x5a3220                                     |     TestDriver<unsigned long,unsigned long>::allocationTest() ();
    0x00408d66 call 0x5a46c0                                     |     TestDriver<BloombergLP::bsltf::TemplateTestFacility_StubClass*,BloombergLP::bsltf::TemplateTestFacility_StubClass*>::allocationTest() ();
    0x00408d6b call 0x5a5b70                                     |     TestDriver<void(*)(),void(*)()>::allocationTest() ();
    0x00408d70 call 0x5a7070                                     |     TestDriver<BloombergLP::bsltf::EnumeratedTestType::Enum,BloombergLP::bsltf::EnumeratedTestType::Enum>::allocationTest() ();
    0x00408d75 call 0x5a8530                                     |     TestDriver<BloombergLP::bsltf::UnionTestType,BloombergLP::bsltf::UnionTestType>::allocationTest() ();
    0x00408d7a call 0x5a9a90                                     |     TestDriver<BloombergLP::bsltf::SimpleTestType,BloombergLP::bsltf::SimpleTestType>::allocationTest() ();
    0x00408d7f call 0x5aafb0                                     |     TestDriver<BloombergLP::bsltf::AllocTestType,BloombergLP::bsltf::AllocTestType>::allocationTest() ();
    0x00408d84 call 0x5ac530                                     |     TestDriver<BloombergLP::bsltf::BitwiseCopyableTestType,BloombergLP::bsltf::BitwiseCopyableTestType>::allocationTest() ();
    0x00408d89 call 0x5ada50                                     |     TestDriver<BloombergLP::bsltf::BitwiseMoveableTestType,BloombergLP::bsltf::BitwiseMoveableTestType>::allocationTest() ();
    0x00408d8e call 0x5aef70                                     |     TestDriver<BloombergLP::bsltf::AllocBitwiseMoveableTestType,BloombergLP::bsltf::AllocBitwiseMoveableTestType>::allocationTest() ();
    0x00408d93 call 0x5b0670                                     |     TestDriver<BloombergLP::bsltf::MovableTestType,BloombergLP::bsltf::MovableTestType>::allocationTest() ();
    0x00408d98 call 0x5b1b90                                     |     TestDriver<BloombergLP::bsltf::MovableAllocTestType,BloombergLP::bsltf::MovableAllocTestType>::allocationTest() ();
    0x00408d9d call 0x5b31b0                                     |     TestDriver<BloombergLP::bsltf::NonTypicalOverloadsTestType,BloombergLP::bsltf::NonTypicalOverloadsTestType>::allocationTest() ();
    0x00408da2 call 0x5b46d0                                     |     TestDriver<int,int(BloombergLP::bsltf::TemplateTestFacility_StubClass::*)()>::allocationTest() ();
    0x00408da7 call 0x5b5d60                                     |     TestDriver<int,BloombergLP::bsltf::AllocTestType>::allocationTest() ();
    0x00408dac call 0x5b7260                                     |     TestDriver<int,BloombergLP::bsltf::MovableAllocTestType>::allocationTest() ();
    0x00408db1 call 0x5b87d0                                     |     TestDriver<int,BloombergLP::bsltf::SimpleTestType>::allocationTest() ();
    0x00408db6 jmp 0x411d77                                      |     void (*0x411d77)() ();
    0x00408dbb call 0x591ae0                                     |     TestDriver<signedchar,signedchar>::newFrontTest() ();
    0x00408dc0 call 0x592820                                     |     TestDriver<unsigned long,unsigned long>::newFrontTest() ();
    0x00408dc5 call 0x5935d0                                     |     TestDriver<BloombergLP::bsltf::TemplateTestFacility_StubClass*,BloombergLP::bsltf::TemplateTestFacility_StubClass*>::newFrontTest() ();
    0x00408dca call 0x5943f0                                     |     TestDriver<void(*)(),void(*)()>::newFrontTest() ();
    0x00408dcf call 0x595210                                     |     TestDriver<BloombergLP::bsltf::EnumeratedTestType::Enum,BloombergLP::bsltf::EnumeratedTestType::Enum>::newFrontTest() ();
    0x00408dd4 call 0x595f70                                     |     TestDriver<BloombergLP::bsltf::UnionTestType,BloombergLP::bsltf::UnionTestType>::newFrontTest() ();
    0x00408dd9 call 0x596eb0                                     |     TestDriver<BloombergLP::bsltf::SimpleTestType,BloombergLP::bsltf::SimpleTestType>::newFrontTest() ();
    0x00408dde call 0x597ce0                                     |     TestDriver<BloombergLP::bsltf::AllocTestType,BloombergLP::bsltf::AllocTestType>::newFrontTest() ();
    0x00408de3 call 0x598c80                                     |     TestDriver<BloombergLP::bsltf::BitwiseCopyableTestType,BloombergLP::bsltf::BitwiseCopyableTestType>::newFrontTest() ();
    0x00408de8 call 0x599ab0                                     |     TestDriver<BloombergLP::bsltf::BitwiseMoveableTestType,BloombergLP::bsltf::BitwiseMoveableTestType>::newFrontTest() ();
    0x00408ded call 0x59a8e0                                     |     TestDriver<BloombergLP::bsltf::AllocBitwiseMoveableTestType,BloombergLP::bsltf::AllocBitwiseMoveableTestType>::newFrontTest() ();
    0x00408df2 call 0x59b6c0                                     |     TestDriver<BloombergLP::bsltf::MovableTestType,BloombergLP::bsltf::MovableTestType>::newFrontTest() ();
    0x00408df7 call 0x59c590                                     |     TestDriver<BloombergLP::bsltf::MovableAllocTestType,BloombergLP::bsltf::MovableAllocTestType>::newFrontTest() ();
    0x00408dfc call 0x59d5b0                                     |     TestDriver<BloombergLP::bsltf::NonTypicalOverloadsTestType,BloombergLP::bsltf::NonTypicalOverloadsTestType>::newFrontTest() ();
    0x00408e01 call 0x59e3e0                                     |     TestDriver<int,int(BloombergLP::bsltf::TemplateTestFacility_StubClass::*)()>::newFrontTest() ();
    0x00408e06 call 0x59f2f0                                     |     TestDriver<int,BloombergLP::bsltf::AllocTestType>::newFrontTest() ();
    0x00408e0b call 0x5a0120                                     |     TestDriver<int,BloombergLP::bsltf::MovableAllocTestType>::newFrontTest() ();
    0x00408e10 call 0x5a0f90                                     |     TestDriver<int,BloombergLP::bsltf::SimpleTestType>::newFrontTest() ();
    0x00408e15 jmp 0x411d77                                      |     void (*0x411d77)() ();
    0x00408e1a cmp dword [rip + 0x5115b7], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x00408e21 je 0x408f6a                                       |         
    0x00408e27 mov rax, qword [rip + 0x5114fa]                   |         rax = std::__1::cout;
    0x00408e2e mov esi, 0x91a328                                 |         esi = std::__1::cout;
    0x00408e33 add rsi, qword [rax - 0x18]                       |         rsi += *((rax - 0x18));
    0x00408e37 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00408e3f call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00408e44 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00408e4c mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00408e51 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00408e56 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00408e59 mov rdi, rax                                      |         rdi = rax;
    0x00408e5c mov esi, 0xa                                      |         esi = 0xa;
    0x00408e61 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00408e64 mov ebx, eax                                      |         ebx = eax;
    0x00408e66 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00408e6e call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00408e73 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x00408e76 mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x00408e7b call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00408e80 mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x00408e85 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x00408e8a mov edi, 0x91a328                                 |         
    0x00408e8f mov esi, 0x67c619                                 |         
    0x00408e94 mov edx, 0xb                                      |         
    0x00408e99 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "update test", 0xb);
    0x00408e9e mov rbx, rax                                      |         rbx = rax;
    0x00408ea1 mov rax, qword [rax]                              |         rax = *(rax);
    0x00408ea4 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x00408ea8 add rsi, rbx                                      |         rsi += rbx;
    0x00408eab lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00408eb3 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00408eb8 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00408ec0 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00408ec5 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00408eca mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00408ecd mov rdi, rax                                      |         rdi = rax;
    0x00408ed0 mov esi, 0xa                                      |         esi = 0xa;
    0x00408ed5 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00408ed8 mov ebp, eax                                      |         
    0x00408eda lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00408ee2 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00408ee7 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x00408eeb mov rdi, rbx                                      |         rdi = rbx;
    0x00408eee call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00408ef3 mov rdi, rbx                                      |         rdi = rbx;
    0x00408ef6 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x00408efb mov esi, 0x67c23f                                 |         
    0x00408f00 mov edx, 0xd                                      |         
    0x00408f05 mov rdi, rbx                                      |         
    0x00408f08 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rbx, 0x67c23f, 0xd);
    0x00408f0d mov rbx, rax                                      |         rbx = rax;
    0x00408f10 mov rax, qword [rax]                              |         rax = *(rax);
    0x00408f13 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x00408f17 add rsi, rbx                                      |         rsi += rbx;
    0x00408f1a lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00408f22 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00408f27 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00408f2f mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00408f34 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00408f39 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00408f3c mov rdi, rax                                      |         rdi = rax;
    0x00408f3f mov esi, 0xa                                      |         esi = 0xa;
    0x00408f44 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00408f47 mov ebp, eax                                      |         
    0x00408f49 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00408f51 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00408f56 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x00408f5a mov rdi, rbx                                      |         rdi = rbx;
    0x00408f5d call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00408f62 mov rdi, rbx                                      |         rdi = rbx;
    0x00408f65 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x00408f6a call 0x54b460                                     |     TestDriver<signedchar,signedchar>::updateTest() ();
    0x00408f6f call 0x54f040                                     |     TestDriver<unsigned long,unsigned long>::updateTest() ();
    0x00408f74 call 0x552d40                                     |     TestDriver<BloombergLP::bsltf::TemplateTestFacility_StubClass*,BloombergLP::bsltf::TemplateTestFacility_StubClass*>::updateTest() ();
    0x00408f79 call 0x556b90                                     |     TestDriver<void(*)(),void(*)()>::updateTest() ();
    0x00408f7e call 0x55a9e0                                     |     TestDriver<BloombergLP::bsltf::EnumeratedTestType::Enum,BloombergLP::bsltf::EnumeratedTestType::Enum>::updateTest() ();
    0x00408f83 call 0x55e610                                     |     TestDriver<BloombergLP::bsltf::UnionTestType,BloombergLP::bsltf::UnionTestType>::updateTest() ();
    0x00408f88 call 0x562730                                     |     TestDriver<BloombergLP::bsltf::SimpleTestType,BloombergLP::bsltf::SimpleTestType>::updateTest() ();
    0x00408f8d call 0x566760                                     |     TestDriver<BloombergLP::bsltf::AllocTestType,BloombergLP::bsltf::AllocTestType>::updateTest() ();
    0x00408f92 call 0x56a600                                     |     TestDriver<BloombergLP::bsltf::BitwiseCopyableTestType,BloombergLP::bsltf::BitwiseCopyableTestType>::updateTest() ();
    0x00408f97 call 0x56e630                                     |     TestDriver<BloombergLP::bsltf::BitwiseMoveableTestType,BloombergLP::bsltf::BitwiseMoveableTestType>::updateTest() ();
    0x00408f9c call 0x572660                                     |     TestDriver<BloombergLP::bsltf::AllocBitwiseMoveableTestType,BloombergLP::bsltf::AllocBitwiseMoveableTestType>::updateTest() ();
    0x00408fa1 call 0x576580                                     |     TestDriver<BloombergLP::bsltf::MovableTestType,BloombergLP::bsltf::MovableTestType>::updateTest() ();
    0x00408fa6 call 0x57a390                                     |     TestDriver<BloombergLP::bsltf::MovableAllocTestType,BloombergLP::bsltf::MovableAllocTestType>::updateTest() ();
    0x00408fab call 0x57e390                                     |     TestDriver<BloombergLP::bsltf::NonTypicalOverloadsTestType,BloombergLP::bsltf::NonTypicalOverloadsTestType>::updateTest() ();
    0x00408fb0 call 0x5823c0                                     |     TestDriver<int,int(BloombergLP::bsltf::TemplateTestFacility_StubClass::*)()>::updateTest() ();
    0x00408fb5 call 0x5860c0                                     |     TestDriver<int,BloombergLP::bsltf::AllocTestType>::updateTest() ();
    0x00408fba call 0x589f00                                     |     TestDriver<int,BloombergLP::bsltf::MovableAllocTestType>::updateTest() ();
    0x00408fbf call 0x58ddc0                                     |     TestDriver<int,BloombergLP::bsltf::SimpleTestType>::updateTest() ();
    0x00408fc4 jmp 0x411d77                                      |     void (*0x411d77)() ();
    0x00408fc9 call 0x544b30                                     |     TestDriver<signedchar,signedchar>::iterationTest() ();
    0x00408fce call 0x545150                                     |     TestDriver<unsigned long,unsigned long>::iterationTest() ();
    0x00408fd3 call 0x545770                                     |     TestDriver<BloombergLP::bsltf::TemplateTestFacility_StubClass*,BloombergLP::bsltf::TemplateTestFacility_StubClass*>::iterationTest() ();
    0x00408fd8 call 0x545d90                                     |     TestDriver<void(*)(),void(*)()>::iterationTest() ();
    0x00408fdd call 0x5463b0                                     |     TestDriver<BloombergLP::bsltf::EnumeratedTestType::Enum,BloombergLP::bsltf::EnumeratedTestType::Enum>::iterationTest() ();
    0x00408fe2 call 0x5469d0                                     |     TestDriver<BloombergLP::bsltf::UnionTestType,BloombergLP::bsltf::UnionTestType>::iterationTest() ();
    0x00408fe7 call 0x547020                                     |     TestDriver<BloombergLP::bsltf::SimpleTestType,BloombergLP::bsltf::SimpleTestType>::iterationTest() ();
    0x00408fec call 0x5475c0                                     |     TestDriver<BloombergLP::bsltf::AllocTestType,BloombergLP::bsltf::AllocTestType>::iterationTest() ();
    0x00408ff1 call 0x547b60                                     |     TestDriver<BloombergLP::bsltf::BitwiseCopyableTestType,BloombergLP::bsltf::BitwiseCopyableTestType>::iterationTest() ();
    0x00408ff6 call 0x548100                                     |     TestDriver<BloombergLP::bsltf::BitwiseMoveableTestType,BloombergLP::bsltf::BitwiseMoveableTestType>::iterationTest() ();
    0x00408ffb call 0x5486a0                                     |     TestDriver<BloombergLP::bsltf::AllocBitwiseMoveableTestType,BloombergLP::bsltf::AllocBitwiseMoveableTestType>::iterationTest() ();
    0x00409000 call 0x548c40                                     |     TestDriver<BloombergLP::bsltf::MovableTestType,BloombergLP::bsltf::MovableTestType>::iterationTest() ();
    0x00409005 call 0x5491e0                                     |     TestDriver<BloombergLP::bsltf::MovableAllocTestType,BloombergLP::bsltf::MovableAllocTestType>::iterationTest() ();
    0x0040900a call 0x549780                                     |     TestDriver<BloombergLP::bsltf::NonTypicalOverloadsTestType,BloombergLP::bsltf::NonTypicalOverloadsTestType>::iterationTest() ();
    0x0040900f call 0x549d20                                     |     TestDriver<int,int(BloombergLP::bsltf::TemplateTestFacility_StubClass::*)()>::iterationTest() ();
    0x00409014 call 0x54a350                                     |     TestDriver<int,BloombergLP::bsltf::AllocTestType>::iterationTest() ();
    0x00409019 call 0x54a900                                     |     TestDriver<int,BloombergLP::bsltf::MovableAllocTestType>::iterationTest() ();
    0x0040901e call 0x54aeb0                                     |     TestDriver<int,BloombergLP::bsltf::SimpleTestType>::iterationTest() ();
    0x00409023 jmp 0x411d77                                      |     void (*0x411d77)() ();
    0x00409028 cmp dword [rip + 0x5113a9], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040902f je 0x409178                                       |         
    0x00409035 mov rax, qword [rip + 0x5112ec]                   |         rax = std::__1::cout;
    0x0040903c mov esi, 0x91a328                                 |         esi = std::__1::cout;
    0x00409041 add rsi, qword [rax - 0x18]                       |         rsi += *((rax - 0x18));
    0x00409045 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040904d call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00409052 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040905a mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040905f call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00409064 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00409067 mov rdi, rax                                      |         rdi = rax;
    0x0040906a mov esi, 0xa                                      |         esi = 0xa;
    0x0040906f call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00409072 mov ebx, eax                                      |         ebx = eax;
    0x00409074 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040907c call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00409081 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x00409084 mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x00409089 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040908e mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x00409093 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x00409098 mov edi, 0x91a328                                 |         
    0x0040909d mov esi, 0x67c60e                                 |         
    0x004090a2 mov edx, 0xa                                      |         
    0x004090a7 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "timer test", 0xa);
    0x004090ac mov rbx, rax                                      |         rbx = rax;
    0x004090af mov rax, qword [rax]                              |         rax = *(rax);
    0x004090b2 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x004090b6 add rsi, rbx                                      |         rsi += rbx;
    0x004090b9 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x004090c1 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x004090c6 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x004090ce mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x004090d3 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x004090d8 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x004090db mov rdi, rax                                      |         rdi = rax;
    0x004090de mov esi, 0xa                                      |         esi = 0xa;
    0x004090e3 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x004090e6 mov ebp, eax                                      |         
    0x004090e8 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x004090f0 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x004090f5 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x004090f9 mov rdi, rbx                                      |         rdi = rbx;
    0x004090fc call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00409101 mov rdi, rbx                                      |         rdi = rbx;
    0x00409104 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x00409109 mov esi, 0x67c242                                 |         
    0x0040910e mov edx, 0xa                                      |         
    0x00409113 mov rdi, rbx                                      |         
    0x00409116 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rbx, 0x67c242, 0xa);
    0x0040911b mov rbx, rax                                      |         rbx = rax;
    0x0040911e mov rax, qword [rax]                              |         rax = *(rax);
    0x00409121 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x00409125 add rsi, rbx                                      |         rsi += rbx;
    0x00409128 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00409130 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00409135 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040913d mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00409142 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00409147 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040914a mov rdi, rax                                      |         rdi = rax;
    0x0040914d mov esi, 0xa                                      |         esi = 0xa;
    0x00409152 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00409155 mov ebp, eax                                      |         
    0x00409157 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040915f call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00409164 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x00409168 mov rdi, rbx                                      |         rdi = rbx;
    0x0040916b call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00409170 mov rdi, rbx                                      |         rdi = rbx;
    0x00409173 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x00409178 mov qword [rsp + 0x370], 0                        |     *((rsp + 0x370)) = 0;
    0x00409184 mov dword [rsp + 0x378], 0                        |     *((rsp + 0x378)) = 0;
    0x0040918f mov rax, qword [rip + 0x5119aa]                   |     rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x00409196 test rax, rax                                     |     
                                                                 |     if (rax == 0) {
    0x00409199 jne 0x4091a0                                      |         
    0x0040919b call 0x64efc0                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |     }
    0x004091a0 mov qword [rsp + 0x470], rax                      |     *((rsp + 0x470)) = rax;
    0x004091a8 xorpd xmm0, xmm0                                  |     __asm ("xorpd xmm0, xmm0");
    0x004091ac movupd xmmword [rsp + 0x478], xmm0                |     __asm ("movupd xmmword [rsp + 0x478], xmm0");
    0x004091b5 lea rdi, [rsp + 0xc0]                             |     
    0x004091bd call 0x64a5e0                                     |     BloombergLP::bdlcc::SkipList_RandomLevelGenerator::SkipList_RandomLevelGenerator() (rsp + 0xc0);
    0x004091c2 mov dword [rsp + 0xc8], 0                         |     *((rsp + 0xc8)) = 0;
    0x004091cd lea rbx, [rsp + 0xe0]                             |     rbx = rsp + 0xe0;
    0x004091d5 mov rdi, rbx                                      |     rdi = rbx;
    0x004091d8 xor esi, esi                                      |     esi = 0;
    0x004091da call 0x404cc0                                     |     pthread_mutex_init ();
    0x004091df mov dword [rsp + 0x108], 0                        |     *((rsp + 0x108)) = 0;
    0x004091ea mov qword [rsp + 0x110], 0                        |     *((rsp + 0x110)) = 0;
    0x004091f6 mov rdx, qword [rip + 0x511943]                   |     rdx = BloombergLP::bslma::Default::s_defaultAllocator;
    0x004091fd test rdx, rdx                                     |     
                                                                 |     if (rdx == 0) {
    0x00409200 jne 0x40920a                                      |         
    0x00409202 call 0x64efc0                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x00409207 mov rdx, rax                                      |         
                                                                 |     }
    0x0040920a mov qword [rsp + 0x118], rdx                      |     *((rsp + 0x118)) = rdx;
    0x00409212 movaps xmm0, xmmword [rip + 0x271b07]             |     xmm0 = *(0x0067ad20);
    0x00409219 movaps xmmword [rsp + 0x1f0], xmm0                |     *((rsp + 0x1f0)) = xmm0;
    0x00409221 movaps xmm0, xmmword [rip + 0x271b08]             |     xmm0 = *(0x0067ad30);
    0x00409228 movaps xmmword [rsp + 0x200], xmm0                |     *((rsp + 0x200)) = xmm0;
    0x00409230 movaps xmm0, xmmword [rip + 0x271b09]             |     xmm0 = *(0x0067ad40);
    0x00409237 movaps xmmword [rsp + 0x210], xmm0                |     *((rsp + 0x210)) = xmm0;
    0x0040923f movaps xmm0, xmmword [rip + 0x271b0a]             |     xmm0 = *(0x0067ad50);
    0x00409246 movaps xmmword [rsp + 0x220], xmm0                |     *((rsp + 0x220)) = xmm0;
    0x0040924e movaps xmm0, xmmword [rip + 0x271b0b]             |     xmm0 = *(0x0067ad60);
    0x00409255 movaps xmmword [rsp + 0x230], xmm0                |     *((rsp + 0x230)) = xmm0;
    0x0040925d movaps xmm0, xmmword [rip + 0x271b0c]             |     xmm0 = *(0x0067ad70);
    0x00409264 movaps xmmword [rsp + 0x240], xmm0                |     *((rsp + 0x240)) = xmm0;
    0x0040926c movaps xmm0, xmmword [rip + 0x271b0d]             |     xmm0 = *(0x0067ad80);
    0x00409273 movaps xmmword [rsp + 0x250], xmm0                |     *((rsp + 0x250)) = xmm0;
    0x0040927b movapd xmm0, xmmword [rip + 0x271b0d]             |     __asm ("movapd xmm0, xmmword [0x0067ad90]");
    0x00409283 movapd xmmword [rsp + 0x260], xmm0                |     __asm ("movapd xmmword [rsp + 0x260], xmm0");
    0x0040928c lea rdi, [rsp + 0x1f0]                            |     
    0x00409294 mov esi, 0x20                                     |     
    0x00409299 call 0x64aae0                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::createPoolManager(int*,int,BloombergLP::bslma::Allocator*) (rsp + 0x1f0, 0x20, rax);
    0x0040929e mov qword [rsp + 0x110], rax                      |     *((rsp + 0x110)) = rax;
    0x004092a6 mov rdi, rax                                      |     
    0x004092a9 mov esi, 0x1f                                     |     
    0x004092ae call 0x64aa20                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (rax, 0x1f);
    0x004092b3 mov qword [rsp + 0xd0], rax                       |     *((rsp + 0xd0)) = rax;
    0x004092bb mov rdi, qword [rsp + 0x110]                      |     
    0x004092c3 mov esi, 0x1f                                     |     
    0x004092c8 call 0x64aa20                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x110)), 0x1f);
    0x004092cd mov qword [rsp + 0xd8], rax                       |     *((rsp + 0xd8)) = rax;
    0x004092d5 xor ecx, ecx                                      |     ecx = 0;
    0x004092d7 nop word [rax + rax]                              |     
                                                                 |     do {
    0x004092e0 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x004092e8 mov qword [rax + rcx + 0x78], 0                   |         *((rax + rcx + 0x78)) = 0;
    0x004092f1 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x004092f9 mov rdx, qword [rsp + 0xd8]                       |         rdx = *((rsp + 0xd8));
    0x00409301 mov qword [rax + rcx + 0x70], rdx                 |         *((rax + rcx + 0x70)) = rdx;
    0x00409306 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x0040930e mov rdx, qword [rsp + 0xd8]                       |         rdx = *((rsp + 0xd8));
    0x00409316 mov qword [rdx + rcx + 0x78], rax                 |         *((rdx + rcx + 0x78)) = rax;
    0x0040931b mov rax, qword [rsp + 0xd8]                       |         rax = *((rsp + 0xd8));
    0x00409323 mov qword [rax + rcx + 0x70], 0                   |         *((rax + rcx + 0x70)) = 0;
    0x0040932c add rcx, 0x10                                     |         rcx += 0x10;
    0x00409330 cmp rcx, 0x200                                    |         
    0x00409337 jne 0x4092e0                                      |         
                                                                 |     } while (rcx != 0x200);
    0x00409339 lea rdi, [rsp + 0xc0]                             |     
    0x00409341 call 0x64a5f0                                     |     eax = BloombergLP::bdlcc::SkipList_RandomLevelGenerator::randomLevel() (rsp + 0xc0);
    0x00409346 lea rdi, [rsp + 0xc0]                             |     
    0x0040934e lea rdx, [rsp + 0x370]                            |     
    0x00409356 lea rcx, [rsp + 0x440]                            |     
    0x0040935e mov esi, eax                                      |     
    0x00409360 call 0x649aa0                                     |     rax = BloombergLP::bdlcc::SkipList<BloombergLP::bsls::TimeInterval,bsl::function<void()>>::allocateNode(int,BloombergLP::bsls::TimeIntervalconst&,bsl::function<void()>const&) (rsp + 0xc0, eax, rsp + 0x370, rsp + 0x440);
    0x00409365 mov rbx, rax                                      |     rbx = rax;
    0x00409368 mov rdi, rax                                      |     
    0x0040936b call 0x64a590                                     |     BloombergLP::bdlcc::SkipList_Control::incrementRefCount() (rax);
    0x00409370 lea rdi, [rsp + 0xc0]                             |     
    0x00409378 xor esi, esi                                      |     
    0x0040937a mov rdx, rbx                                      |     
    0x0040937d call 0x649b80                                     |     BloombergLP::bdlcc::SkipList<BloombergLP::bsls::TimeInterval,bsl::function<void()>>::addNode(bool*,BloombergLP::bdlcc::SkipList_Node<BloombergLP::bsls::TimeInterval,bsl::function<void()>>*) (rsp + 0xc0, 0, rbx);
    0x00409382 test rbx, rbx                                     |     
                                                                 |     if (rbx != 0) {
    0x00409385 je 0x4093af                                       |         
    0x00409387 mov rdi, rbx                                      |         
    0x0040938a call 0x64a560                                     |         eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (rbx);
    0x0040938f test eax, eax                                     |         
                                                                 |         if (eax != 0) {
    0x00409391 jne 0x4093af                                      |             goto label_12;
                                                                 |         }
    0x00409393 mov rdi, rbx                                      |         
    0x00409396 add rdi, 0x10                                     |         rdi += 0x10;
    0x0040939a call 0x651ef0                                     |         BloombergLP::bslstl::Function_Rep::~Function_Rep() (rbx);
    0x0040939f mov rdi, qword [rsp + 0x110]                      |         
    0x004093a7 mov rsi, rbx                                      |         
    0x004093aa call 0x64ab40                                     |         BloombergLP::bdlcc::SkipList_PoolUtil::deallocate(BloombergLP::bdlcc::SkipList_PoolManager*,void*) (*((rsp + 0x110)), rbx);
                                                                 |     }
                                                                 | label_12:
    0x004093af lea rdi, [rsp + 0xc0]                             |     
    0x004093b7 call 0x544ab0                                     |     BloombergLP::bdlcc::SkipList<BloombergLP::bsls::TimeInterval,bsl::function<void()>>::~SkipList() (rsp + 0xc0);
    0x004093bc lea rdi, [rsp + 0x440]                            |     
    0x004093c4 call 0x651ef0                                     |     BloombergLP::bslstl::Function_Rep::~Function_Rep() (rsp + 0x440);
    0x004093c9 jmp 0x411d77                                      |     void (*0x411d77)() ();
    0x004093ce call 0x522c60                                     |     TestDriver<signedchar,signedchar>::findTest() ();
    0x004093d3 call 0x524910                                     |     TestDriver<unsigned long,unsigned long>::findTest() ();
    0x004093d8 call 0x5266c0                                     |     TestDriver<BloombergLP::bsltf::TemplateTestFacility_StubClass*,BloombergLP::bsltf::TemplateTestFacility_StubClass*>::findTest() ();
    0x004093dd call 0x5284f0                                     |     TestDriver<void(*)(),void(*)()>::findTest() ();
    0x004093e2 call 0x52a320                                     |     TestDriver<BloombergLP::bsltf::EnumeratedTestType::Enum,BloombergLP::bsltf::EnumeratedTestType::Enum>::findTest() ();
    0x004093e7 call 0x52c040                                     |     TestDriver<BloombergLP::bsltf::UnionTestType,BloombergLP::bsltf::UnionTestType>::findTest() ();
    0x004093ec call 0x52e110                                     |     TestDriver<BloombergLP::bsltf::SimpleTestType,BloombergLP::bsltf::SimpleTestType>::findTest() ();
    0x004093f1 call 0x52fea0                                     |     TestDriver<BloombergLP::bsltf::AllocTestType,BloombergLP::bsltf::AllocTestType>::findTest() ();
    0x004093f6 call 0x531cb0                                     |     TestDriver<BloombergLP::bsltf::BitwiseCopyableTestType,BloombergLP::bsltf::BitwiseCopyableTestType>::findTest() ();
    0x004093fb call 0x533a40                                     |     TestDriver<BloombergLP::bsltf::BitwiseMoveableTestType,BloombergLP::bsltf::BitwiseMoveableTestType>::findTest() ();
    0x00409400 call 0x5357d0                                     |     TestDriver<BloombergLP::bsltf::AllocBitwiseMoveableTestType,BloombergLP::bsltf::AllocBitwiseMoveableTestType>::findTest() ();
    0x00409405 call 0x537670                                     |     TestDriver<BloombergLP::bsltf::MovableTestType,BloombergLP::bsltf::MovableTestType>::findTest() ();
    0x0040940a call 0x539440                                     |     TestDriver<BloombergLP::bsltf::MovableAllocTestType,BloombergLP::bsltf::MovableAllocTestType>::findTest() ();
    0x0040940f call 0x53b3d0                                     |     TestDriver<BloombergLP::bsltf::NonTypicalOverloadsTestType,BloombergLP::bsltf::NonTypicalOverloadsTestType>::findTest() ();
    0x00409414 call 0x53d160                                     |     TestDriver<int,int(BloombergLP::bsltf::TemplateTestFacility_StubClass::*)()>::findTest() ();
    0x00409419 call 0x53ef60                                     |     TestDriver<int,BloombergLP::bsltf::AllocTestType>::findTest() ();
    0x0040941e call 0x540e50                                     |     TestDriver<int,BloombergLP::bsltf::MovableAllocTestType>::findTest() ();
    0x00409423 call 0x542df0                                     |     TestDriver<int,BloombergLP::bsltf::SimpleTestType>::findTest() ();
    0x00409428 jmp 0x411d77                                      |     void (*0x411d77)() ();
    0x0040942d call 0x4fd320                                     |     TestDriver<signedchar,signedchar>::findRTest() ();
    0x00409432 call 0x4ff360                                     |     TestDriver<unsigned long,unsigned long>::findRTest() ();
    0x00409437 call 0x5013f0                                     |     TestDriver<BloombergLP::bsltf::TemplateTestFacility_StubClass*,BloombergLP::bsltf::TemplateTestFacility_StubClass*>::findRTest() ();
    0x0040943c call 0x503520                                     |     TestDriver<void(*)(),void(*)()>::findRTest() ();
    0x00409441 call 0x505650                                     |     TestDriver<BloombergLP::bsltf::EnumeratedTestType::Enum,BloombergLP::bsltf::EnumeratedTestType::Enum>::findRTest() ();
    0x00409446 call 0x5076a0                                     |     TestDriver<BloombergLP::bsltf::UnionTestType,BloombergLP::bsltf::UnionTestType>::findRTest() ();
    0x0040944b call 0x509980                                     |     TestDriver<BloombergLP::bsltf::SimpleTestType,BloombergLP::bsltf::SimpleTestType>::findRTest() ();
    0x00409450 call 0x50b9d0                                     |     TestDriver<BloombergLP::bsltf::AllocTestType,BloombergLP::bsltf::AllocTestType>::findRTest() ();
    0x00409455 call 0x50dd10                                     |     TestDriver<BloombergLP::bsltf::BitwiseCopyableTestType,BloombergLP::bsltf::BitwiseCopyableTestType>::findRTest() ();
    0x0040945a call 0x50fd60                                     |     TestDriver<BloombergLP::bsltf::BitwiseMoveableTestType,BloombergLP::bsltf::BitwiseMoveableTestType>::findRTest() ();
    0x0040945f call 0x511db0                                     |     TestDriver<BloombergLP::bsltf::AllocBitwiseMoveableTestType,BloombergLP::bsltf::AllocBitwiseMoveableTestType>::findRTest() ();
    0x00409464 call 0x513f50                                     |     TestDriver<BloombergLP::bsltf::MovableTestType,BloombergLP::bsltf::MovableTestType>::findRTest() ();
    0x00409469 call 0x516170                                     |     TestDriver<BloombergLP::bsltf::MovableAllocTestType,BloombergLP::bsltf::MovableAllocTestType>::findRTest() ();
    0x0040946e call 0x518630                                     |     TestDriver<BloombergLP::bsltf::NonTypicalOverloadsTestType,BloombergLP::bsltf::NonTypicalOverloadsTestType>::findRTest() ();
    0x00409473 call 0x51a680                                     |     TestDriver<int,int(BloombergLP::bsltf::TemplateTestFacility_StubClass::*)()>::findRTest() ();
    0x00409478 call 0x51c9e0                                     |     TestDriver<int,BloombergLP::bsltf::AllocTestType>::findRTest() ();
    0x0040947d call 0x51eaf0                                     |     TestDriver<int,BloombergLP::bsltf::MovableAllocTestType>::findRTest() ();
    0x00409482 call 0x520ca0                                     |     TestDriver<int,BloombergLP::bsltf::SimpleTestType>::findRTest() ();
    0x00409487 jmp 0x411d77                                      |     void (*0x411d77)() ();
    0x0040948c call 0x4eb660                                     |     TestDriver<signedchar,signedchar>::removeAllTest() ();
    0x00409491 call 0x4ec640                                     |     TestDriver<unsigned long,unsigned long>::removeAllTest() ();
    0x00409496 call 0x4ed620                                     |     TestDriver<BloombergLP::bsltf::TemplateTestFacility_StubClass*,BloombergLP::bsltf::TemplateTestFacility_StubClass*>::removeAllTest() ();
    0x0040949b call 0x4ee600                                     |     TestDriver<void(*)(),void(*)()>::removeAllTest() ();
    0x004094a0 call 0x4ef5e0                                     |     TestDriver<BloombergLP::bsltf::EnumeratedTestType::Enum,BloombergLP::bsltf::EnumeratedTestType::Enum>::removeAllTest() ();
    0x004094a5 call 0x4f05c0                                     |     TestDriver<BloombergLP::bsltf::UnionTestType,BloombergLP::bsltf::UnionTestType>::removeAllTest() ();
    0x004094aa call 0x4f15f0                                     |     TestDriver<BloombergLP::bsltf::SimpleTestType,BloombergLP::bsltf::SimpleTestType>::removeAllTest() ();
    0x004094af call 0x4f2610                                     |     TestDriver<BloombergLP::bsltf::AllocTestType,BloombergLP::bsltf::AllocTestType>::removeAllTest() ();
    0x004094b4 call 0x4f3540                                     |     TestDriver<BloombergLP::bsltf::BitwiseCopyableTestType,BloombergLP::bsltf::BitwiseCopyableTestType>::removeAllTest() ();
    0x004094b9 call 0x4f4560                                     |     TestDriver<BloombergLP::bsltf::BitwiseMoveableTestType,BloombergLP::bsltf::BitwiseMoveableTestType>::removeAllTest() ();
    0x004094be call 0x4f5580                                     |     TestDriver<BloombergLP::bsltf::AllocBitwiseMoveableTestType,BloombergLP::bsltf::AllocBitwiseMoveableTestType>::removeAllTest() ();
    0x004094c3 call 0x4f64b0                                     |     TestDriver<BloombergLP::bsltf::MovableTestType,BloombergLP::bsltf::MovableTestType>::removeAllTest() ();
    0x004094c8 call 0x4f73e0                                     |     TestDriver<BloombergLP::bsltf::MovableAllocTestType,BloombergLP::bsltf::MovableAllocTestType>::removeAllTest() ();
    0x004094cd call 0x4f8360                                     |     TestDriver<BloombergLP::bsltf::NonTypicalOverloadsTestType,BloombergLP::bsltf::NonTypicalOverloadsTestType>::removeAllTest() ();
    0x004094d2 call 0x4f9380                                     |     TestDriver<int,int(BloombergLP::bsltf::TemplateTestFacility_StubClass::*)()>::removeAllTest() ();
    0x004094d7 call 0x4fa3e0                                     |     TestDriver<int,BloombergLP::bsltf::AllocTestType>::removeAllTest() ();
    0x004094dc call 0x4fb390                                     |     TestDriver<int,BloombergLP::bsltf::MovableAllocTestType>::removeAllTest() ();
    0x004094e1 call 0x4fc360                                     |     TestDriver<int,BloombergLP::bsltf::SimpleTestType>::removeAllTest() ();
    0x004094e6 jmp 0x411d77                                      |     void (*0x411d77)() ();
    0x004094eb call 0x4bad00                                     |     TestDriver<signedchar,signedchar>::addRTest() ();
    0x004094f0 call 0x4bd710                                     |     TestDriver<unsigned long,unsigned long>::addRTest() ();
    0x004094f5 call 0x4c0210                                     |     TestDriver<BloombergLP::bsltf::TemplateTestFacility_StubClass*,BloombergLP::bsltf::TemplateTestFacility_StubClass*>::addRTest() ();
    0x004094fa call 0x4c2e80                                     |     TestDriver<void(*)(),void(*)()>::addRTest() ();
    0x004094ff call 0x4c5af0                                     |     TestDriver<BloombergLP::bsltf::EnumeratedTestType::Enum,BloombergLP::bsltf::EnumeratedTestType::Enum>::addRTest() ();
    0x00409504 call 0x4c8520                                     |     TestDriver<BloombergLP::bsltf::UnionTestType,BloombergLP::bsltf::UnionTestType>::addRTest() ();
    0x00409509 call 0x4cb160                                     |     TestDriver<BloombergLP::bsltf::SimpleTestType,BloombergLP::bsltf::SimpleTestType>::addRTest() ();
    0x0040950e call 0x4cdd00                                     |     TestDriver<BloombergLP::bsltf::AllocTestType,BloombergLP::bsltf::AllocTestType>::addRTest() ();
    0x00409513 call 0x4d0760                                     |     TestDriver<BloombergLP::bsltf::BitwiseCopyableTestType,BloombergLP::bsltf::BitwiseCopyableTestType>::addRTest() ();
    0x00409518 call 0x4d3300                                     |     TestDriver<BloombergLP::bsltf::BitwiseMoveableTestType,BloombergLP::bsltf::BitwiseMoveableTestType>::addRTest() ();
    0x0040951d call 0x4d5ea0                                     |     TestDriver<BloombergLP::bsltf::AllocBitwiseMoveableTestType,BloombergLP::bsltf::AllocBitwiseMoveableTestType>::addRTest() ();
    0x00409522 call 0x4d88b0                                     |     TestDriver<BloombergLP::bsltf::MovableTestType,BloombergLP::bsltf::MovableTestType>::addRTest() ();
    0x00409527 call 0x4db270                                     |     TestDriver<BloombergLP::bsltf::MovableAllocTestType,BloombergLP::bsltf::MovableAllocTestType>::addRTest() ();
    0x0040952c call 0x4ddf50                                     |     TestDriver<BloombergLP::bsltf::NonTypicalOverloadsTestType,BloombergLP::bsltf::NonTypicalOverloadsTestType>::addRTest() ();
    0x00409531 call 0x4e0af0                                     |     TestDriver<int,int(BloombergLP::bsltf::TemplateTestFacility_StubClass::*)()>::addRTest() ();
    0x00409536 call 0x4e35b0                                     |     TestDriver<int,BloombergLP::bsltf::AllocTestType>::addRTest() ();
    0x0040953b call 0x4e6070                                     |     TestDriver<int,BloombergLP::bsltf::MovableAllocTestType>::addRTest() ();
    0x00409540 call 0x4e8c10                                     |     TestDriver<int,BloombergLP::bsltf::SimpleTestType>::addRTest() ();
    0x00409545 jmp 0x411d77                                      |     void (*0x411d77)() ();
    0x0040954a call 0x4a8000                                     |     TestDriver<signedchar,signedchar>::updateRTest() ();
    0x0040954f call 0x4a8ed0                                     |     TestDriver<unsigned long,unsigned long>::updateRTest() ();
    0x00409554 call 0x4a9e00                                     |     TestDriver<BloombergLP::bsltf::TemplateTestFacility_StubClass*,BloombergLP::bsltf::TemplateTestFacility_StubClass*>::updateRTest() ();
    0x00409559 call 0x4aae20                                     |     TestDriver<void(*)(),void(*)()>::updateRTest() ();
    0x0040955e call 0x4abe40                                     |     TestDriver<BloombergLP::bsltf::EnumeratedTestType::Enum,BloombergLP::bsltf::EnumeratedTestType::Enum>::updateRTest() ();
    0x00409563 call 0x4accf0                                     |     TestDriver<BloombergLP::bsltf::UnionTestType,BloombergLP::bsltf::UnionTestType>::updateRTest() ();
    0x00409568 call 0x4adec0                                     |     TestDriver<BloombergLP::bsltf::SimpleTestType,BloombergLP::bsltf::SimpleTestType>::updateRTest() ();
    0x0040956d call 0x4aee90                                     |     TestDriver<BloombergLP::bsltf::AllocTestType,BloombergLP::bsltf::AllocTestType>::updateRTest() ();
    0x00409572 call 0x4b01a0                                     |     TestDriver<BloombergLP::bsltf::BitwiseCopyableTestType,BloombergLP::bsltf::BitwiseCopyableTestType>::updateRTest() ();
    0x00409577 call 0x4b1170                                     |     TestDriver<BloombergLP::bsltf::BitwiseMoveableTestType,BloombergLP::bsltf::BitwiseMoveableTestType>::updateRTest() ();
    0x0040957c call 0x4b2140                                     |     TestDriver<BloombergLP::bsltf::AllocBitwiseMoveableTestType,BloombergLP::bsltf::AllocBitwiseMoveableTestType>::updateRTest() ();
    0x00409581 call 0x4b30c0                                     |     TestDriver<BloombergLP::bsltf::MovableTestType,BloombergLP::bsltf::MovableTestType>::updateRTest() ();
    0x00409586 call 0x4b43d0                                     |     TestDriver<BloombergLP::bsltf::MovableAllocTestType,BloombergLP::bsltf::MovableAllocTestType>::updateRTest() ();
    0x0040958b call 0x4b56e0                                     |     TestDriver<BloombergLP::bsltf::NonTypicalOverloadsTestType,BloombergLP::bsltf::NonTypicalOverloadsTestType>::updateRTest() ();
    0x00409590 call 0x4b66b0                                     |     TestDriver<int,int(BloombergLP::bsltf::TemplateTestFacility_StubClass::*)()>::updateRTest() ();
    0x00409595 call 0x4b7550                                     |     TestDriver<int,BloombergLP::bsltf::AllocTestType>::updateRTest() ();
    0x0040959a call 0x4b89a0                                     |     TestDriver<int,BloombergLP::bsltf::MovableAllocTestType>::updateRTest() ();
    0x0040959f call 0x4b9df0                                     |     TestDriver<int,BloombergLP::bsltf::SimpleTestType>::updateRTest() ();
    0x004095a4 jmp 0x411d77                                      |     void (*0x411d77)() ();
    0x004095a9 cmp dword [rip + 0x510e28], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x004095b0 je 0x4096f9                                       |         
    0x004095b6 mov rax, qword [rip + 0x510d6b]                   |         rax = std::__1::cout;
    0x004095bd mov esi, 0x91a328                                 |         esi = std::__1::cout;
    0x004095c2 add rsi, qword [rax - 0x18]                       |         rsi += *((rax - 0x18));
    0x004095c6 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x004095ce call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x004095d3 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x004095db mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x004095e0 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x004095e5 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x004095e8 mov rdi, rax                                      |         rdi = rax;
    0x004095eb mov esi, 0xa                                      |         esi = 0xa;
    0x004095f0 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x004095f3 mov ebx, eax                                      |         ebx = eax;
    0x004095f5 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x004095fd call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00409602 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x00409605 mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x0040960a call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040960f mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x00409614 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x00409619 mov edi, 0x91a328                                 |         
    0x0040961e mov esi, 0x67c5e9                                 |         
    0x00409623 mov edx, 0x24                                     |         
    0x00409628 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "Node deallocation thread safety test", 0x24);
    0x0040962d mov rbx, rax                                      |         rbx = rax;
    0x00409630 mov rax, qword [rax]                              |         rax = *(rax);
    0x00409633 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x00409637 add rsi, rbx                                      |         rsi += rbx;
    0x0040963a lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00409642 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00409647 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040964f mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00409654 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00409659 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040965c mov rdi, rax                                      |         rdi = rax;
    0x0040965f mov esi, 0xa                                      |         esi = 0xa;
    0x00409664 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00409667 mov ebp, eax                                      |         
    0x00409669 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00409671 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00409676 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x0040967a mov rdi, rbx                                      |         rdi = rbx;
    0x0040967d call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00409682 mov rdi, rbx                                      |         rdi = rbx;
    0x00409685 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040968a mov esi, 0x67bd7e                                 |         
    0x0040968f mov edx, 0x24                                     |         
    0x00409694 mov rdi, rbx                                      |         
    0x00409697 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rbx, 0x67bd7e, 0x24);
    0x0040969c mov rbx, rax                                      |         rbx = rax;
    0x0040969f mov rax, qword [rax]                              |         rax = *(rax);
    0x004096a2 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x004096a6 add rsi, rbx                                      |         rsi += rbx;
    0x004096a9 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x004096b1 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x004096b6 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x004096be mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x004096c3 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x004096c8 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x004096cb mov rdi, rax                                      |         rdi = rax;
    0x004096ce mov esi, 0xa                                      |         esi = 0xa;
    0x004096d3 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x004096d6 mov ebp, eax                                      |         
    0x004096d8 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x004096e0 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x004096e5 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x004096e9 mov rdi, rbx                                      |         rdi = rbx;
    0x004096ec call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x004096f1 mov rdi, rbx                                      |         rdi = rbx;
    0x004096f4 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x004096f9 xor esi, esi                                      |     
    0x004096fb cmp dword [rip + 0x510cde], 0                     |     
    0x00409702 setne sil                                         |     sil = (*(obj.veryVeryVerbose) != 0) ? 1 : 0;
    0x00409706 lea rbp, [rsp + 0x1f0]                            |     rbp = rsp + 0x1f0;
    0x0040970e mov rdi, rbp                                      |     
    0x00409711 xor edx, edx                                      |     
    0x00409713 call 0x64f1f0                                     |     BloombergLP::bslma::TestAllocator::TestAllocator(bool,BloombergLP::bslma::Allocator*) (rbp, 0, 0);
    0x00409718 lea rdi, [rsp + 0x440]                            |     
    0x00409720 call 0x64a5e0                                     |     BloombergLP::bdlcc::SkipList_RandomLevelGenerator::SkipList_RandomLevelGenerator() (rsp + 0x440);
    0x00409725 mov dword [rsp + 0x448], 0                        |     *((rsp + 0x448)) = 0;
    0x00409730 lea rbx, [rsp + 0x460]                            |     rbx = rsp + 0x460;
    0x00409738 mov rdi, rbx                                      |     rdi = rbx;
    0x0040973b xor esi, esi                                      |     esi = 0;
    0x0040973d call 0x404cc0                                     |     pthread_mutex_init ();
    0x00409742 mov dword [rsp + 0x488], 0                        |     *((rsp + 0x488)) = 0;
    0x0040974d mov qword [rsp + 0x490], 0                        |     *((rsp + 0x490)) = 0;
    0x00409759 mov qword [rsp + 0x498], rbp                      |     *((rsp + 0x498)) = rbp;
    0x00409761 movaps xmm0, xmmword [rip + 0x271398]             |     xmm0 = " 0@P`p";
    0x00409768 movaps xmmword [rsp + 0xc0], xmm0                 |     *((rsp + 0xc0)) = xmm0;
    0x00409770 movaps xmm0, xmmword [rip + 0x271399]             |     xmm0 = *(0x0067ab10);
    0x00409777 movaps xmmword [rsp + 0xd0], xmm0                 |     *((rsp + 0xd0)) = xmm0;
    0x0040977f movaps xmm0, xmmword [rip + 0x27139a]             |     xmm0 = *(0x0067ab20);
    0x00409786 movaps xmmword [rsp + 0xe0], xmm0                 |     *((rsp + 0xe0)) = xmm0;
    0x0040978e movaps xmm0, xmmword [rip + 0x27139b]             |     xmm0 = *(0x0067ab30);
    0x00409795 movaps xmmword [rsp + 0xf0], xmm0                 |     *((rsp + 0xf0)) = xmm0;
    0x0040979d movaps xmm0, xmmword [rip + 0x27139c]             |     xmm0 = *(0x0067ab40);
    0x004097a4 movaps xmmword [rsp + 0x100], xmm0                |     *((rsp + 0x100)) = xmm0;
    0x004097ac movaps xmm0, xmmword [rip + 0x27139d]             |     xmm0 = *(0x0067ab50);
    0x004097b3 movaps xmmword [rsp + 0x110], xmm0                |     *((rsp + 0x110)) = xmm0;
    0x004097bb movaps xmm0, xmmword [rip + 0x27139e]             |     xmm0 = *(0x0067ab60);
    0x004097c2 movaps xmmword [rsp + 0x120], xmm0                |     *((rsp + 0x120)) = xmm0;
    0x004097ca movapd xmm0, xmmword [rip + 0x27139e]             |     __asm ("movapd xmm0, xmmword [0x0067ab70]");
    0x004097d2 movapd xmmword [rsp + 0x130], xmm0                |     __asm ("movapd xmmword [rsp + 0x130], xmm0");
    0x004097db lea rdi, [rsp + 0xc0]                             |     
    0x004097e3 mov esi, 0x20                                     |     
    0x004097e8 mov rdx, rbp                                      |     
    0x004097eb call 0x64aae0                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::createPoolManager(int*,int,BloombergLP::bslma::Allocator*) (rsp + 0xc0, 0x20, rbp);
    0x004097f0 mov qword [rsp + 0x490], rax                      |     *((rsp + 0x490)) = rax;
    0x004097f8 mov rdi, rax                                      |     
    0x004097fb mov esi, 0x1f                                     |     
    0x00409800 call 0x64aa20                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (rax, 0x1f);
    0x00409805 mov qword [rsp + 0x450], rax                      |     *((rsp + 0x450)) = rax;
    0x0040980d mov rdi, qword [rsp + 0x490]                      |     
    0x00409815 mov esi, 0x1f                                     |     
    0x0040981a call 0x64aa20                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x490)), 0x1f);
    0x0040981f mov qword [rsp + 0x458], rax                      |     *((rsp + 0x458)) = rax;
    0x00409827 xor ecx, ecx                                      |     ecx = 0;
    0x00409829 nop dword [rax]                                   |     
                                                                 |     do {
    0x00409830 mov rax, qword [rsp + 0x450]                      |         rax = *((rsp + 0x450));
    0x00409838 mov qword [rax + rcx + 0x18], 0                   |         *((rax + rcx + 0x18)) = 0;
    0x00409841 mov rax, qword [rsp + 0x450]                      |         rax = *((rsp + 0x450));
    0x00409849 mov rdx, qword [rsp + 0x458]                      |         rdx = *((rsp + 0x458));
    0x00409851 mov qword [rax + rcx + 0x10], rdx                 |         *((rax + rcx + 0x10)) = rdx;
    0x00409856 mov rax, qword [rsp + 0x450]                      |         rax = *((rsp + 0x450));
    0x0040985e mov rdx, qword [rsp + 0x458]                      |         rdx = *((rsp + 0x458));
    0x00409866 mov qword [rdx + rcx + 0x18], rax                 |         *((rdx + rcx + 0x18)) = rax;
    0x0040986b mov rax, qword [rsp + 0x458]                      |         rax = *((rsp + 0x458));
    0x00409873 mov qword [rax + rcx + 0x10], 0                   |         *((rax + rcx + 0x10)) = 0;
    0x0040987c add rcx, 0x10                                     |         rcx += 0x10;
    0x00409880 cmp rcx, 0x200                                    |         
    0x00409887 jne 0x409830                                      |         
                                                                 |     } while (rcx != 0x200);
    0x00409889 mov rbp, qword [rsp + 0x450]                      |     rbp = *((rsp + 0x450));
    0x00409891 nop word cs:[rax + rax]                           |     
    0x0040989b nop dword [rax + rax]                             |     
                                                                 |     do {
    0x004098a0 mov rbp, qword [rbp + 0x10]                       |         rbp = *((rbp + 0x10));
    0x004098a4 cmp rbp, qword [rsp + 0x458]                      |         
                                                                 |         if (rbp == *((rsp + 0x458))) {
    0x004098ac je 0x40bc56                                       |             goto label_13;
                                                                 |         }
    0x004098b2 mov rdi, rbp                                      |         
    0x004098b5 call 0x64a560                                     |         BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (rbp);
    0x004098ba jmp 0x4098a0                                      |         
                                                                 |     } while (1);
    0x004098bc cmp dword [rip + 0x510b15], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x004098c3 je 0x409a0c                                       |         
    0x004098c9 mov rax, qword [rip + 0x510a58]                   |         rax = std::__1::cout;
    0x004098d0 mov esi, 0x91a328                                 |         esi = std::__1::cout;
    0x004098d5 add rsi, qword [rax - 0x18]                       |         rsi += *((rax - 0x18));
    0x004098d9 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x004098e1 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x004098e6 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x004098ee mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x004098f3 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x004098f8 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x004098fb mov rdi, rax                                      |         rdi = rax;
    0x004098fe mov esi, 0xa                                      |         esi = 0xa;
    0x00409903 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00409906 mov ebx, eax                                      |         ebx = eax;
    0x00409908 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00409910 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00409915 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x00409918 mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x0040991d call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00409922 mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x00409927 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040992c mov edi, 0x91a328                                 |         
    0x00409931 mov esi, 0x67c54e                                 |         
    0x00409936 mov edx, 0xb                                      |         
    0x0040993b call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "Remove test", 0xb);
    0x00409940 mov rbx, rax                                      |         rbx = rax;
    0x00409943 mov rax, qword [rax]                              |         rax = *(rax);
    0x00409946 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040994a add rsi, rbx                                      |         rsi += rbx;
    0x0040994d lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00409955 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040995a lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00409962 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00409967 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040996c mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040996f mov rdi, rax                                      |         rdi = rax;
    0x00409972 mov esi, 0xa                                      |         esi = 0xa;
    0x00409977 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040997a mov ebp, eax                                      |         
    0x0040997c lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00409984 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00409989 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x0040998d mov rdi, rbx                                      |         rdi = rbx;
    0x00409990 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00409995 mov rdi, rbx                                      |         rdi = rbx;
    0x00409998 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040999d mov esi, 0x67c241                                 |         
    0x004099a2 mov edx, 0xb                                      |         
    0x004099a7 mov rdi, rbx                                      |         
    0x004099aa call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rbx, 0x67c241, 0xb);
    0x004099af mov rbx, rax                                      |         rbx = rax;
    0x004099b2 mov rax, qword [rax]                              |         rax = *(rax);
    0x004099b5 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x004099b9 add rsi, rbx                                      |         rsi += rbx;
    0x004099bc lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x004099c4 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x004099c9 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x004099d1 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x004099d6 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x004099db mov rcx, qword [rax]                              |         rcx = *(rax);
    0x004099de mov rdi, rax                                      |         rdi = rax;
    0x004099e1 mov esi, 0xa                                      |         esi = 0xa;
    0x004099e6 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x004099e9 mov ebp, eax                                      |         
    0x004099eb lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x004099f3 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x004099f8 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x004099fc mov rdi, rbx                                      |         rdi = rbx;
    0x004099ff call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00409a04 mov rdi, rbx                                      |         rdi = rbx;
    0x00409a07 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x00409a0c lea rdi, [rsp + 0x1f0]                            |     
    0x00409a14 xor esi, esi                                      |     
    0x00409a16 call 0x4154f0                                     |     BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>::SkipList(BloombergLP::bslma::Allocator*) (rsp + 0x1f0, 0);
    0x00409a1b mov dword [rsp + 0xc0], 0x3e8                     |     *((rsp + 0xc0)) = 0x3e8;
    0x00409a26 lea r15, [rsp + 0x1f0]                            |     r15 = rsp + 0x1f0;
    0x00409a2e lea rsi, [rsp + 0xc0]                             |     
    0x00409a36 mov rdi, r15                                      |     
    0x00409a39 call 0x415640                                     |     BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>::add(intconst&,(anonymousnamespace)::u::CountedDeleteconst&,bool*) (r15, rsp + 0xc0);
    0x00409a3e lea r14, [rsp + 0x210]                            |     r14 = rsp + 0x210;
    0x00409a46 mov rdi, r14                                      |     rdi = r14;
    0x00409a49 call 0x4052c0                                     |     pthread_mutex_lock ();
    0x00409a4e mov rax, qword [rsp + 0x200]                      |     rax = *((rsp + 0x200));
    0x00409a56 mov r13, qword [rax + 0x10]                       |     r13 = *((rax + 0x10));
    0x00409a5a cmp r13, qword [rsp + 0x208]                      |     
                                                                 |     if (r13 == *((rsp + 0x208))) {
    0x00409a62 je 0x40d3e7                                       |         void (*0x40d3e7)() ();
                                                                 |     }
    0x00409a68 mov rdi, r13                                      |     
    0x00409a6b call 0x64a590                                     |     BloombergLP::bdlcc::SkipList_Control::incrementRefCount() (r13);
    0x00409a70 mov rdi, r14                                      |     rdi = r14;
    0x00409a73 call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x00409a78 test r13, r13                                     |     
                                                                 |     if (r13 != 0) {
    0x00409a7b jne 0x40d41c                                      |         void (*0x40d41c)() ();
                                                                 |     }
    0x00409a81 jmp 0x40d3ef                                      |     void (*0x40d3ef)() ();
    0x00409a86 cmp dword [rip + 0x51094b], 0                     |     
                                                                 |     if (*(obj.verbose) == 0) {
    0x00409a8d je 0x40c9b2                                       |         goto label_14;
                                                                 |     }
    0x00409a93 mov rdi, qword [r15 + 0x10]                       |     
    0x00409a97 xor esi, esi                                      |     
    0x00409a99 mov edx, 0xa                                      |     
    0x00409a9e call 0x404f50                                     |     eax = strtol (*((r15 + 0x10)), 0, 0xa);
    0x00409aa3 test eax, eax                                     |     
    0x00409aa5 mov ecx, 0x14                                     |     ecx = 0x14;
                                                                 |     if (eax != 0) {
    0x00409aaa cmovne ecx, eax                                   |         ecx = eax;
                                                                 |     }
    0x00409aad mov dword [rsp], ecx                              |     *(rsp) = ecx;
    0x00409ab0 mov eax, dword [rip + 0x510926]                   |     eax = veryVerbose;
    0x00409ab6 mov dword [rip + 0x51091c], eax                   |     *(obj.verbose) = eax;
    0x00409abc mov ecx, dword [rip + 0x51091e]                   |     ecx = veryVeryVerbose;
    0x00409ac2 mov dword [rip + 0x510914], ecx                   |     *(obj.veryVerbose) = ecx;
    0x00409ac8 mov ecx, dword [rip + 0x510916]                   |     ecx = veryVeryVeryVerbose;
    0x00409ace mov dword [rip + 0x51090c], ecx                   |     *(obj.veryVeryVerbose) = ecx;
    0x00409ad4 mov dword [rip + 0x510906], 0                     |     *(obj.veryVeryVeryVerbose) = 0;
    0x00409ade test eax, eax                                     |     
                                                                 |     if (eax == 0) {
    0x00409ae0 je 0x40c9b9                                       |         goto label_15;
                                                                 |     }
    0x00409ae6 mov rax, qword [r15 + 0x18]                       |     rax = *((r15 + 0x18));
    0x00409aea mov qword [r15 + 0x10], rax                       |     *((r15 + 0x10)) = rax;
    0x00409aee jmp 0x40c9b9                                      |     goto label_15;
    0x00409af3 cmp dword [rip + 0x5108de], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x00409afa je 0x409c41                                       |         
    0x00409b00 mov rax, qword [rip + 0x510821]                   |         rax = std::__1::cout;
    0x00409b07 mov esi, 0x91a328                                 |         esi = std::__1::cout;
    0x00409b0c add rsi, qword [rax - 0x18]                       |         rsi += *((rax - 0x18));
    0x00409b10 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00409b18 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00409b1d lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00409b25 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00409b2a call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00409b2f mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00409b32 mov rdi, rax                                      |         rdi = rax;
    0x00409b35 mov esi, 0xa                                      |         esi = 0xa;
    0x00409b3a call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00409b3d mov ebx, eax                                      |         ebx = eax;
    0x00409b3f lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00409b47 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00409b4c movsx esi, bl                                     |         esi = (int32_t) bl;
    0x00409b4f mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x00409b54 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00409b59 mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x00409b5e call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x00409b63 mov edi, 0x91a328                                 |         
    0x00409b68 mov esi, 0x67c2e2                                 |         
    0x00409b6d mov edx, 0x1f                                     |         
    0x00409b72 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "addPairReferenceRaw Safety test", 0x1f);
    0x00409b77 mov rbp, rax                                      |         
    0x00409b7a mov rax, qword [rax]                              |         rax = *(rax);
    0x00409b7d mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x00409b81 add rsi, rbp                                      |         rsi += rbp;
    0x00409b84 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00409b8c call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00409b91 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00409b99 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00409b9e call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00409ba3 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00409ba6 mov rdi, rax                                      |         rdi = rax;
    0x00409ba9 mov esi, 0xa                                      |         esi = 0xa;
    0x00409bae call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00409bb1 mov ebx, eax                                      |         ebx = eax;
    0x00409bb3 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00409bbb call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00409bc0 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x00409bc3 mov rdi, rbp                                      |         rdi = rbp;
    0x00409bc6 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00409bcb mov rdi, rbp                                      |         rdi = rbp;
    0x00409bce call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x00409bd3 mov esi, 0x67bd83                                 |         
    0x00409bd8 mov edx, 0x1f                                     |         
    0x00409bdd mov rdi, rbp                                      |         
    0x00409be0 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rbp, 0x67bd83, 0x1f);
    0x00409be5 mov rbp, rax                                      |         
    0x00409be8 mov rax, qword [rax]                              |         rax = *(rax);
    0x00409beb mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x00409bef add rsi, rbp                                      |         rsi += rbp;
    0x00409bf2 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00409bfa call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00409bff lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00409c07 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00409c0c call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00409c11 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00409c14 mov rdi, rax                                      |         rdi = rax;
    0x00409c17 mov esi, 0xa                                      |         esi = 0xa;
    0x00409c1c call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00409c1f mov ebx, eax                                      |         ebx = eax;
    0x00409c21 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x00409c29 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00409c2e movsx esi, bl                                     |         esi = (int32_t) bl;
    0x00409c31 mov rdi, rbp                                      |         rdi = rbp;
    0x00409c34 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00409c39 mov rdi, rbp                                      |         rdi = rbp;
    0x00409c3c call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x00409c41 xor esi, esi                                      |     
    0x00409c43 cmp dword [rip + 0x510796], 0                     |     
    0x00409c4a setne sil                                         |     sil = (*(obj.veryVeryVerbose) != 0) ? 1 : 0;
    0x00409c4e lea rdi, [rsp + 0x1f0]                            |     
    0x00409c56 xor edx, edx                                      |     
    0x00409c58 call 0x64f1f0                                     |     BloombergLP::bslma::TestAllocator::TestAllocator(bool,BloombergLP::bslma::Allocator*) (rsp + 0x1f0, 0, 0);
    0x00409c5d lea rdi, [rsp + 0x1c0]                            |     
    0x00409c65 lea rsi, [rsp + 0x1f0]                            |     
    0x00409c6d call 0x64f040                                     |     BloombergLP::bslma::DefaultAllocatorGuard::DefaultAllocatorGuard(BloombergLP::bslma::Allocator*) (rsp + 0x1c0, rsp + 0x1f0);
    0x00409c72 lea rdi, [rsp + 0xc0]                             |     
    0x00409c7a xor esi, esi                                      |     
    0x00409c7c call 0x64f120                                     |     BloombergLP::bslma::TestAllocator::TestAllocator(BloombergLP::bslma::Allocator*) (rsp + 0xc0, 0);
    0x00409c81 lea rdi, [rsp + 0x440]                            |     
    0x00409c89 lea rsi, [rsp + 0xc0]                             |     
    0x00409c91 call 0x4154f0                                     |     BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>::SkipList(BloombergLP::bslma::Allocator*) (rsp + 0x440, rsp + 0xc0);
    0x00409c96 lea rdi, [rsp + 0x370]                            |     
    0x00409c9e lea rsi, [rsp + 0xc0]                             |     
    0x00409ca6 call 0x6508f0                                     |     BloombergLP::bslmt::ThreadGroup::ThreadGroup(BloombergLP::bslma::Allocator*) (rsp + 0x370, rsp + 0xc0);
    0x00409cab mov dword [rsp + 0x10], 1                         |     *((rsp + 0x10)) = 1;
    0x00409cb3 lea r12, [rsp + 0x440]                            |     r12 = rsp + 0x440;
    0x00409cbb lea rsi, [rsp + 0x10]                             |     
    0x00409cc0 mov rdi, r12                                      |     
    0x00409cc3 call 0x415640                                     |     BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>::add(intconst&,(anonymousnamespace)::u::CountedDeleteconst&,bool*) (r12, rsp + 0x10);
    0x00409cc8 mov r14d, 5                                       |     r14d = 5;
    0x00409cce cmp dword [rip + 0x510703], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x00409cd5 je 0x409d7e                                       |         
    0x00409cdb mov rdi, qword [r15 + 0x10]                       |         
    0x00409cdf xor esi, esi                                      |         
    0x00409ce1 mov edx, 0xa                                      |         
    0x00409ce6 call 0x404f50                                     |         rax = strtol (*((r15 + 0x10)), 0, 0xa);
    0x00409ceb mov r15, rax                                      |         r15 = rax;
    0x00409cee test r15d, r15d                                   |         
                                                                 |         if (r15d == 0) {
    0x00409cf1 je 0x409d7e                                       |             goto label_16;
                                                                 |         }
    0x00409cf7 mov edi, 0x91a328                                 |         
    0x00409cfc mov esi, 0x67c302                                 |         
    0x00409d01 mov edx, 0xd                                      |         
    0x00409d06 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "Running with ", 0xd);
    0x00409d0b mov rdi, rax                                      |         rdi = rax;
    0x00409d0e mov esi, r15d                                     |         esi = r15d;
    0x00409d11 call 0x405010                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x00409d16 mov esi, 0x67c310                                 |         
    0x00409d1b mov edx, 9                                        |         
    0x00409d20 mov rdi, rax                                      |         
    0x00409d23 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, " threads.", 9);
    0x00409d28 mov rbp, rax                                      |         
    0x00409d2b mov rax, qword [rax]                              |         rax = *(rax);
    0x00409d2e mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x00409d32 add rsi, rbp                                      |         rsi += rbp;
    0x00409d35 lea rdi, [rsp + 0x10]                             |         rdi = rsp + 0x10;
    0x00409d3a call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x00409d3f lea rdi, [rsp + 0x10]                             |         rdi = rsp + 0x10;
    0x00409d44 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x00409d49 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x00409d4e mov rcx, qword [rax]                              |         rcx = *(rax);
    0x00409d51 mov rdi, rax                                      |         rdi = rax;
    0x00409d54 mov esi, 0xa                                      |         esi = 0xa;
    0x00409d59 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x00409d5c mov ebx, eax                                      |         ebx = eax;
    0x00409d5e lea rdi, [rsp + 0x10]                             |         rdi = rsp + 0x10;
    0x00409d63 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x00409d68 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x00409d6b mov rdi, rbp                                      |         rdi = rbp;
    0x00409d6e call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x00409d73 mov rdi, rbp                                      |         rdi = rbp;
    0x00409d76 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x00409d7b mov r14d, r15d                                    |         r14d = r15d;
                                                                 |     }
                                                                 | label_16:
    0x00409d7e mov eax, 0xfa0                                    |     eax = 0xfa0;
    0x00409d83 xor edx, edx                                      |     edx = 0;
    0x00409d85 idiv r14d                                         |     eax = edx:eax / r14d;
                                                                 |     edx = edx:eax % r14d;
    0x00409d88 mov qword [rsp + 0x560], 0x4158a0                 |     *((rsp + 0x560)) = method.ReferenceTest.referenceTestFunc_BloombergLP::bdlcc::SkipList_int___anonymous_namespace_::u::CountedDelete___int_;
    0x00409d94 mov qword [rsp + 0x568], r12                      |     *((rsp + 0x568)) = r12;
    0x00409d9c mov dword [rsp + 0x570], eax                      |     *((rsp + 0x570)) = eax;
    0x00409da3 lea rdi, [rsp + 0x78]                             |     
    0x00409da8 call 0x6505a0                                     |     BloombergLP::bslmt::ThreadAttributes::ThreadAttributes() (rsp + 0x78);
    0x00409dad test r14d, r14d                                   |     
                                                                 |     if (r14d <= 0) {
    0x00409db0 jle 0x409e4f                                      |         goto label_17;
                                                                 |     }
    0x00409db6 lea rbx, [rsp + 0x510]                            |     rbx = rsp + 0x510;
    0x00409dbe lea r15, [rsp + 0x78]                             |     r15 = rsp + 0x78;
    0x00409dc3 lea r12, [rsp + 0x560]                            |     r12 = rsp + 0x560;
    0x00409dcb lea r13, [rsp + 0x10]                             |     r13 = rsp + 0x10;
                                                                 |     do {
    0x00409dd0 cmp dword [rsp + 0x78], 0                         |         
                                                                 |         if (*((rsp + 0x78)) != 0) {
    0x00409dd5 je 0x409e1e                                       |             
    0x00409dd7 mov rdi, r13                                      |             
    0x00409dda mov rsi, r15                                      |             
    0x00409ddd xor edx, edx                                      |             
    0x00409ddf call 0x650660                                     |             BloombergLP::bslmt::ThreadAttributes::ThreadAttributes(BloombergLP::bslmt::ThreadAttributesconst&,BloombergLP::bslma::Allocator*) (r13, r15, 0);
    0x00409de4 mov dword [rsp + 0x10], 0                         |             *((rsp + 0x10)) = 0;
    0x00409dec mov rcx, qword [rsp + 0x390]                      |             
    0x00409df4 mov rdi, rbx                                      |             
    0x00409df7 mov rsi, r13                                      |             
    0x00409dfa mov rdx, r12                                      |             
    0x00409dfd call 0x437540                                     |             eax = intBloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil,void(*)(BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>*,int),BloombergLP::bdlf::Bind_BoundTuple2<BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>*,int>>>(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil,void(*)(BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>*,int),BloombergLP::bdlf::Bind_BoundTuple2<BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>*,int>>const&,BloombergLP::bslma::Allocator*) (rbx, r13, r12, *((rsp + 0x390)));
    0x00409e02 mov ebp, eax                                      |             
    0x00409e04 cmp qword [rsp + 0x48], 0x17                      |             
                                                                 |             if (*((rsp + 0x48)) == 0x17) {
    0x00409e0a je 0x409e36                                       |                 goto label_18;
                                                                 |             }
    0x00409e0c mov rsi, qword [rsp + 0x28]                       |             rsi = *((rsp + 0x28));
    0x00409e11 mov rdi, qword [rsp + 0x50]                       |             rdi = *((rsp + 0x50));
    0x00409e16 mov rax, qword [rdi]                              |             rax = *(rdi);
    0x00409e19 call qword [rax + 0x18]                           |             uint64_t (*rax + 0x18)() ();
    0x00409e1c jmp 0x409e36                                      |             
                                                                 |         } else {
    0x00409e1e mov rcx, qword [rsp + 0x390]                      |             
    0x00409e26 mov rdi, rbx                                      |             
    0x00409e29 mov rsi, r15                                      |             
    0x00409e2c mov rdx, r12                                      |             
    0x00409e2f call 0x437540                                     |             eax = intBloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil,void(*)(BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>*,int),BloombergLP::bdlf::Bind_BoundTuple2<BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>*,int>>>(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil,void(*)(BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>*,int),BloombergLP::bdlf::Bind_BoundTuple2<BloombergLP::bdlcc::SkipList<int,(anonymousnamespace)::u::CountedDelete>*,int>>const&,BloombergLP::bslma::Allocator*) (rbx, r15, r12, *((rsp + 0x390)));
    0x00409e34 mov ebp, eax                                      |             
                                                                 |         }
                                                                 | label_18:
    0x00409e36 test ebp, ebp                                     |         
                                                                 |         if (ebp != 0) {
    0x00409e38 jne 0x409e4f                                      |             goto label_17;
                                                                 |         }
    0x00409e3a lea rdi, [rsp + 0x370]                            |         
    0x00409e42 mov rsi, rbx                                      |         
    0x00409e45 call 0x6509a0                                     |         BloombergLP::bslmt::ThreadGroup::addThread(unsigned longconst&) (rsp + 0x370, rbx);
    0x00409e4a dec r14d                                          |         r14d--;
    0x00409e4d jne 0x409dd0                                      |         
                                                                 |     } while (r14d != 0);
                                                                 | label_17:
    0x00409e4f cmp qword [rsp + 0xb0], 0x17                      |     
                                                                 |     if (*((rsp + 0xb0)) != 0x17) {
    0x00409e58 je 0x409e70                                       |         
    0x00409e5a mov rsi, qword [rsp + 0x90]                       |         rsi = *((rsp + 0x90));
    0x00409e62 mov rdi, qword [rsp + 0xb8]                       |         rdi = *((rsp + 0xb8));
    0x00409e6a mov rax, qword [rdi]                              |         rax = *(rdi);
    0x00409e6d call qword [rax + 0x18]                           |         uint64_t (*rax + 0x18)() ();
                                                                 |     }
    0x00409e70 lea rdi, [rsp + 0x370]                            |     
    0x00409e78 call 0x650a10                                     |     BloombergLP::bslmt::ThreadGroup::joinAll() (rsp + 0x370);
    0x00409e7d mov eax, dword [rip + 0x51058d]                   |     eax = ReferenceTest::masterId;
    0x00409e83 cmp eax, 5                                        |     
                                                                 |     if (eax != 5) {
    0x00409e86 je 0x409eaf                                       |         
    0x00409e88 call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00409e8d mov rbx, rax                                      |         rbx = rax;
    0x00409e90 mov rdi, rax                                      |         
    0x00409e93 call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00409e98 mov edi, 0x67c31a                                 |         edi = "k_NUM_THREADS == TC::masterId";
    0x00409e9d mov esi, 0x14ca                                   |         esi = 0x14ca;
    0x00409ea2 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00409ea7 mov rdi, rbx                                      |         
    0x00409eaa call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x00409eaf mov eax, dword [rip + 0x510537]                   |     eax = (anonymous namespace)::u::CountedDelete::s_deleteCount;
    0x00409eb5 test eax, eax                                     |     
                                                                 |     if (eax != 0) {
    0x00409eb7 je 0x409f26                                       |         
    0x00409eb9 call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x00409ebe mov rbx, rax                                      |         rbx = rax;
    0x00409ec1 mov rdi, rax                                      |         
    0x00409ec4 call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x00409ec9 mov edi, 0x91a328                                 |         
    0x00409ece mov esi, 0x67c33d                                 |         
    0x00409ed3 mov edx, 0x22                                     |         
    0x00409ed8 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, 0x67c33d, 0x22);
    0x00409edd mov esi, 0x67b8c6                                 |         
    0x00409ee2 mov edx, 2                                        |         
    0x00409ee7 mov rdi, rax                                      |         
    0x00409eea call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67b8c6, 2);
    0x00409eef mov esi, dword [rip + 0x5104f7]                   |         esi = (anonymous namespace)::u::CountedDelete::s_deleteCount;
    0x00409ef5 mov rdi, rax                                      |         rdi = rax;
    0x00409ef8 call 0x405010                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x00409efd mov esi, 0x696ad0                                 |         
    0x00409f02 mov edx, 1                                        |         
    0x00409f07 mov rdi, rax                                      |         
    0x00409f0a call 0x5bcfd0                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x696ad0, 1);
    0x00409f0f mov edi, 0x67c338                                 |         edi = "0 == u::CountedDelete::getDeleteCount()";
    0x00409f14 mov esi, 0x14cd                                   |         esi = 0x14cd;
    0x00409f19 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x00409f1e mov rdi, rbx                                      |         
    0x00409f21 call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x00409f26 lea rbp, [rsp + 0x460]                            |     rbp = rsp + 0x460;
    0x00409f2e mov rdi, rbp                                      |     rdi = rbp;
    0x00409f31 call 0x4052c0                                     |     pthread_mutex_lock ();
    0x00409f36 mov rax, qword [rsp + 0x450]                      |     rax = *((rsp + 0x450));
    0x00409f3e mov rbx, qword [rax + 0x10]                       |     rbx = *((rax + 0x10));
    0x00409f42 cmp rbx, qword [rsp + 0x458]                      |     
                                                                 |     if (rbx == *((rsp + 0x458))) {
    0x00409f4a je 0x40d97b                                       |         void (*0x40d97b)() ();
                                                                 |     }
    0x00409f50 mov rdi, rbx                                      |     
    0x00409f53 call 0x64a5d0                                     |     eax = BloombergLP::bdlcc::SkipList_Control::level()const (rbx);
    0x00409f58 test eax, eax                                     |     
                                                                 |     if (eax < 0) {
    0x00409f5a js 0x409fea                                       |         goto label_19;
                                                                 |     }
    0x00409f60 mov ecx, eax                                      |     ecx = eax;
    0x00409f62 test al, 1                                        |     
                                                                 |     if ((al & 1) == 0) {
    0x00409f64 jne 0x409f8f                                      |         
    0x00409f66 mov rdx, rcx                                      |         rdx = rcx;
    0x00409f69 shl rdx, 4                                        |         rdx <<= 4;
    0x00409f6d mov rsi, qword [rbx + rdx + 0x10]                 |         rsi = *((rbx + rdx + 0x10));
    0x00409f72 mov rdi, qword [rsp + 0x450]                      |         rdi = *((rsp + 0x450));
    0x00409f7a mov qword [rsi + rdx + 0x18], rdi                 |         *((rsi + rdx + 0x18)) = rdi;
    0x00409f7f mov rdi, qword [rsp + 0x450]                      |         rdi = *((rsp + 0x450));
    0x00409f87 mov qword [rdi + rdx + 0x10], rsi                 |         *((rdi + rdx + 0x10)) = rsi;
    0x00409f8c dec rcx                                           |         rcx--;
                                                                 |     }
    0x00409f8f test eax, eax                                     |     
                                                                 |     if (eax == 0) {
    0x00409f91 je 0x409fea                                       |         goto label_19;
                                                                 |     }
    0x00409f93 lea rax, [rcx + 2]                                |     rax = rcx + 2;
    0x00409f97 shl rcx, 4                                        |     rcx <<= 4;
    0x00409f9b nop dword [rax + rax]                             |     
                                                                 |     do {
    0x00409fa0 mov rdx, qword [rbx + rcx + 0x10]                 |         rdx = *((rbx + rcx + 0x10));
    0x00409fa5 mov rsi, qword [rsp + 0x450]                      |         rsi = *((rsp + 0x450));
    0x00409fad mov qword [rdx + rcx + 0x18], rsi                 |         *((rdx + rcx + 0x18)) = rsi;
    0x00409fb2 mov rsi, qword [rsp + 0x450]                      |         rsi = *((rsp + 0x450));
    0x00409fba mov qword [rsi + rcx + 0x10], rdx                 |         *((rsi + rcx + 0x10)) = rdx;
    0x00409fbf mov rdx, qword [rbx + rcx]                        |         rdx = *((rbx + rcx));
    0x00409fc3 mov rsi, qword [rsp + 0x450]                      |         rsi = *((rsp + 0x450));
    0x00409fcb mov qword [rdx + rcx + 8], rsi                    |         *((rdx + rcx + 8)) = rsi;
    0x00409fd0 mov rsi, qword [rsp + 0x450]                      |         rsi = *((rsp + 0x450));
    0x00409fd8 mov qword [rsi + rcx], rdx                        |         *((rsi + rcx)) = rdx;
    0x00409fdc add rax, 0xfffffffffffffffe                       |         rax += 0xfffffffffffffffe;
    0x00409fe0 add rcx, 0xffffffffffffffe0                       |         rcx += 0xffffffffffffffe0;
    0x00409fe4 cmp rax, 1                                        |         
    0x00409fe8 jg 0x409fa0                                       |         
                                                                 |     } while (rax > 1);
                                                                 | label_19:
    0x00409fea mov qword [rbx + 0x10], 0                         |     *((rbx + 0x10)) = 0;
    0x00409ff2 dec dword [rsp + 0x488]                           |     *((rsp + 0x488))--;
    0x00409ff9 mov rdi, rbp                                      |     rdi = rbp;
    0x00409ffc call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x0040a001 mov rdi, rbx                                      |     
    0x0040a004 call 0x64a560                                     |     eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (rbx);
    0x0040a009 test eax, eax                                     |     
                                                                 |     if (eax != 0) {
    0x0040a00b jne 0x40d983                                      |         void (*0x40d983)() ();
                                                                 |     }
    0x0040a011 cmp byte [rbx + 8], 0                             |     
                                                                 |     if (*((rbx + 8)) == 0) {
    0x0040a015 jne 0x40a01e                                      |         
    0x0040a017 lock inc dword [rip + 0x5103ce]                   |         *(obj._anonymous_namespace_::u::CountedDelete::s_deleteCount)++;
                                                                 |     }
    0x0040a01e mov rdi, qword [rsp + 0x490]                      |     
    0x0040a026 mov rsi, rbx                                      |     
    0x0040a029 call 0x64ab40                                     |     BloombergLP::bdlcc::SkipList_PoolUtil::deallocate(BloombergLP::bdlcc::SkipList_PoolManager*,void*) (*((rsp + 0x490)), rbx);
    0x0040a02e jmp 0x40d983                                      |     void (*0x40d983)() ();
    0x0040a033 call 0x4860d0                                     |     TestDriver<signedchar,signedchar>::skipTest() ();
    0x0040a038 call 0x487e10                                     |     TestDriver<unsigned long,unsigned long>::skipTest() ();
    0x0040a03d call 0x489bc0                                     |     TestDriver<BloombergLP::bsltf::TemplateTestFacility_StubClass*,BloombergLP::bsltf::TemplateTestFacility_StubClass*>::skipTest() ();
    0x0040a042 call 0x48b9b0                                     |     TestDriver<void(*)(),void(*)()>::skipTest() ();
    0x0040a047 call 0x48d7a0                                     |     TestDriver<BloombergLP::bsltf::EnumeratedTestType::Enum,BloombergLP::bsltf::EnumeratedTestType::Enum>::skipTest() ();
    0x0040a04c call 0x48f500                                     |     TestDriver<BloombergLP::bsltf::UnionTestType,BloombergLP::bsltf::UnionTestType>::skipTest() ();
    0x0040a051 call 0x491470                                     |     TestDriver<BloombergLP::bsltf::SimpleTestType,BloombergLP::bsltf::SimpleTestType>::skipTest() ();
    0x0040a056 call 0x4930d0                                     |     TestDriver<BloombergLP::bsltf::AllocTestType,BloombergLP::bsltf::AllocTestType>::skipTest() ();
    0x0040a05b call 0x495180                                     |     TestDriver<BloombergLP::bsltf::BitwiseCopyableTestType,BloombergLP::bsltf::BitwiseCopyableTestType>::skipTest() ();
    0x0040a060 call 0x496de0                                     |     TestDriver<BloombergLP::bsltf::BitwiseMoveableTestType,BloombergLP::bsltf::BitwiseMoveableTestType>::skipTest() ();
    0x0040a065 call 0x498a40                                     |     TestDriver<BloombergLP::bsltf::AllocBitwiseMoveableTestType,BloombergLP::bsltf::AllocBitwiseMoveableTestType>::skipTest() ();
    0x0040a06a call 0x49a680                                     |     TestDriver<BloombergLP::bsltf::MovableTestType,BloombergLP::bsltf::MovableTestType>::skipTest() ();
    0x0040a06f call 0x49c640                                     |     TestDriver<BloombergLP::bsltf::MovableAllocTestType,BloombergLP::bsltf::MovableAllocTestType>::skipTest() ();
    0x0040a074 call 0x49e7d0                                     |     TestDriver<BloombergLP::bsltf::NonTypicalOverloadsTestType,BloombergLP::bsltf::NonTypicalOverloadsTestType>::skipTest() ();
    0x0040a079 call 0x4a0430                                     |     TestDriver<int,int(BloombergLP::bsltf::TemplateTestFacility_StubClass::*)()>::skipTest() ();
    0x0040a07e call 0x4a2360                                     |     TestDriver<int,BloombergLP::bsltf::AllocTestType>::skipTest() ();
    0x0040a083 call 0x4a4240                                     |     TestDriver<int,BloombergLP::bsltf::MovableAllocTestType>::skipTest() ();
    0x0040a088 call 0x4a6190                                     |     TestDriver<int,BloombergLP::bsltf::SimpleTestType>::skipTest() ();
    0x0040a08d jmp 0x411d77                                      |     void (*0x411d77)() ();
    0x0040a092 call 0x455020                                     |     TestDriver<signedchar,signedchar>::valueSemanticTest() ();
    0x0040a097 call 0x457b60                                     |     TestDriver<unsigned long,unsigned long>::valueSemanticTest() ();
    0x0040a09c call 0x45a6d0                                     |     TestDriver<BloombergLP::bsltf::TemplateTestFacility_StubClass*,BloombergLP::bsltf::TemplateTestFacility_StubClass*>::valueSemanticTest() ();
    0x0040a0a1 call 0x45d2c0                                     |     TestDriver<void(*)(),void(*)()>::valueSemanticTest() ();
    0x0040a0a6 call 0x45feb0                                     |     TestDriver<BloombergLP::bsltf::EnumeratedTestType::Enum,BloombergLP::bsltf::EnumeratedTestType::Enum>::valueSemanticTest() ();
    0x0040a0ab call 0x462a00                                     |     TestDriver<BloombergLP::bsltf::UnionTestType,BloombergLP::bsltf::UnionTestType>::valueSemanticTest() ();
    0x0040a0b0 call 0x465750                                     |     TestDriver<BloombergLP::bsltf::SimpleTestType,BloombergLP::bsltf::SimpleTestType>::valueSemanticTest() ();
    0x0040a0b5 call 0x468240                                     |     TestDriver<BloombergLP::bsltf::AllocTestType,BloombergLP::bsltf::AllocTestType>::valueSemanticTest() ();
    0x0040a0ba call 0x46aee0                                     |     TestDriver<BloombergLP::bsltf::BitwiseCopyableTestType,BloombergLP::bsltf::BitwiseCopyableTestType>::valueSemanticTest() ();
    0x0040a0bf call 0x46d9d0                                     |     TestDriver<BloombergLP::bsltf::BitwiseMoveableTestType,BloombergLP::bsltf::BitwiseMoveableTestType>::valueSemanticTest() ();
    0x0040a0c4 call 0x4704c0                                     |     TestDriver<BloombergLP::bsltf::AllocBitwiseMoveableTestType,BloombergLP::bsltf::AllocBitwiseMoveableTestType>::valueSemanticTest() ();
    0x0040a0c9 call 0x472f70                                     |     TestDriver<BloombergLP::bsltf::MovableTestType,BloombergLP::bsltf::MovableTestType>::valueSemanticTest() ();
    0x0040a0ce call 0x475b70                                     |     TestDriver<BloombergLP::bsltf::MovableAllocTestType,BloombergLP::bsltf::MovableAllocTestType>::valueSemanticTest() ();
    0x0040a0d3 call 0x478810                                     |     TestDriver<BloombergLP::bsltf::NonTypicalOverloadsTestType,BloombergLP::bsltf::NonTypicalOverloadsTestType>::valueSemanticTest() ();
    0x0040a0d8 call 0x47b300                                     |     TestDriver<int,int(BloombergLP::bsltf::TemplateTestFacility_StubClass::*)()>::valueSemanticTest() ();
    0x0040a0dd call 0x47dfb0                                     |     TestDriver<int,BloombergLP::bsltf::AllocTestType>::valueSemanticTest() ();
    0x0040a0e2 call 0x480b10                                     |     TestDriver<int,BloombergLP::bsltf::MovableAllocTestType>::valueSemanticTest() ();
    0x0040a0e7 call 0x483670                                     |     TestDriver<int,BloombergLP::bsltf::SimpleTestType>::valueSemanticTest() ();
    0x0040a0ec jmp 0x411d77                                      |     void (*0x411d77)() ();
    0x0040a0f1 cmp dword [rip + 0x5102e0], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040a0f8 je 0x40a181                                       |         
    0x0040a0fe mov edi, 0x91a328                                 |         
    0x0040a103 mov esi, 0x67c227                                 |         
    0x0040a108 mov edx, 0x12                                     |         
    0x0040a10d call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "\nDISTRIBUTION TEST", 0x12);
    0x0040a112 mov esi, 0x67c23a                                 |         
    0x0040a117 mov edx, 0x12                                     |         
    0x0040a11c mov rdi, rax                                      |         
    0x0040a11f call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, "\n=================", 0x12);
    0x0040a124 mov rbx, rax                                      |         rbx = rax;
    0x0040a127 mov rax, qword [rax]                              |         rax = *(rax);
    0x0040a12a mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040a12e add rsi, rbx                                      |         rsi += rbx;
    0x0040a131 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040a139 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040a13e lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040a146 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040a14b call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040a150 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040a153 mov rdi, rax                                      |         rdi = rax;
    0x0040a156 mov esi, 0xa                                      |         esi = 0xa;
    0x0040a15b call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040a15e mov ebp, eax                                      |         
    0x0040a160 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040a168 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040a16d movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x0040a171 mov rdi, rbx                                      |         rdi = rbx;
    0x0040a174 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040a179 mov rdi, rbx                                      |         rdi = rbx;
    0x0040a17c call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x0040a181 lea rdi, [rsp + 0xc0]                             |     
    0x0040a189 call 0x64a5e0                                     |     BloombergLP::bdlcc::SkipList_RandomLevelGenerator::SkipList_RandomLevelGenerator() (rsp + 0xc0);
    0x0040a18e mov dword [rsp + 0xc8], 0                         |     *((rsp + 0xc8)) = 0;
    0x0040a199 lea rbx, [rsp + 0xe0]                             |     rbx = rsp + 0xe0;
    0x0040a1a1 mov rdi, rbx                                      |     rdi = rbx;
    0x0040a1a4 xor esi, esi                                      |     esi = 0;
    0x0040a1a6 call 0x404cc0                                     |     pthread_mutex_init ();
    0x0040a1ab mov dword [rsp + 0x108], 0                        |     *((rsp + 0x108)) = 0;
    0x0040a1b6 mov qword [rsp + 0x110], 0                        |     *((rsp + 0x110)) = 0;
    0x0040a1c2 mov rdx, qword [rip + 0x510977]                   |     rdx = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040a1c9 test rdx, rdx                                     |     
                                                                 |     if (rdx == 0) {
    0x0040a1cc jne 0x40a1d6                                      |         
    0x0040a1ce call 0x64efc0                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x0040a1d3 mov rdx, rax                                      |         
                                                                 |     }
    0x0040a1d6 mov qword [rsp + 0x118], rdx                      |     *((rsp + 0x118)) = rdx;
    0x0040a1de movaps xmm0, xmmword [rip + 0x27091b]             |     xmm0 = " 0@P`p";
    0x0040a1e5 movaps xmmword [rsp + 0x1f0], xmm0                |     *((rsp + 0x1f0)) = xmm0;
    0x0040a1ed movaps xmm0, xmmword [rip + 0x27091c]             |     xmm0 = *(0x0067ab10);
    0x0040a1f4 movaps xmmword [rsp + 0x200], xmm0                |     *((rsp + 0x200)) = xmm0;
    0x0040a1fc movaps xmm0, xmmword [rip + 0x27091d]             |     xmm0 = *(0x0067ab20);
    0x0040a203 movaps xmmword [rsp + 0x210], xmm0                |     *((rsp + 0x210)) = xmm0;
    0x0040a20b movaps xmm0, xmmword [rip + 0x27091e]             |     xmm0 = *(0x0067ab30);
    0x0040a212 movaps xmmword [rsp + 0x220], xmm0                |     *((rsp + 0x220)) = xmm0;
    0x0040a21a movaps xmm0, xmmword [rip + 0x27091f]             |     xmm0 = *(0x0067ab40);
    0x0040a221 movaps xmmword [rsp + 0x230], xmm0                |     *((rsp + 0x230)) = xmm0;
    0x0040a229 movaps xmm0, xmmword [rip + 0x270920]             |     xmm0 = *(0x0067ab50);
    0x0040a230 movaps xmmword [rsp + 0x240], xmm0                |     *((rsp + 0x240)) = xmm0;
    0x0040a238 movaps xmm0, xmmword [rip + 0x270921]             |     xmm0 = *(0x0067ab60);
    0x0040a23f movaps xmmword [rsp + 0x250], xmm0                |     *((rsp + 0x250)) = xmm0;
    0x0040a247 movapd xmm0, xmmword [rip + 0x270921]             |     __asm ("movapd xmm0, xmmword [0x0067ab70]");
    0x0040a24f movapd xmmword [rsp + 0x260], xmm0                |     __asm ("movapd xmmword [rsp + 0x260], xmm0");
    0x0040a258 lea rdi, [rsp + 0x1f0]                            |     
    0x0040a260 mov esi, 0x20                                     |     
    0x0040a265 call 0x64aae0                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::createPoolManager(int*,int,BloombergLP::bslma::Allocator*) (rsp + 0x1f0, 0x20, rax);
    0x0040a26a mov qword [rsp + 0x110], rax                      |     *((rsp + 0x110)) = rax;
    0x0040a272 mov rdi, rax                                      |     
    0x0040a275 mov esi, 0x1f                                     |     
    0x0040a27a call 0x64aa20                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (rax, 0x1f);
    0x0040a27f mov qword [rsp + 0xd0], rax                       |     *((rsp + 0xd0)) = rax;
    0x0040a287 mov rdi, qword [rsp + 0x110]                      |     
    0x0040a28f mov esi, 0x1f                                     |     
    0x0040a294 call 0x64aa20                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x110)), 0x1f);
    0x0040a299 mov qword [rsp + 0xd8], rax                       |     *((rsp + 0xd8)) = rax;
    0x0040a2a1 xor ecx, ecx                                      |     ecx = 0;
    0x0040a2a3 nop word cs:[rax + rax]                           |     
    0x0040a2ad nop dword [rax]                                   |     
                                                                 |     do {
    0x0040a2b0 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x0040a2b8 mov qword [rax + rcx + 0x18], 0                   |         *((rax + rcx + 0x18)) = 0;
    0x0040a2c1 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x0040a2c9 mov rdx, qword [rsp + 0xd8]                       |         rdx = *((rsp + 0xd8));
    0x0040a2d1 mov qword [rax + rcx + 0x10], rdx                 |         *((rax + rcx + 0x10)) = rdx;
    0x0040a2d6 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x0040a2de mov rdx, qword [rsp + 0xd8]                       |         rdx = *((rsp + 0xd8));
    0x0040a2e6 mov qword [rdx + rcx + 0x18], rax                 |         *((rdx + rcx + 0x18)) = rax;
    0x0040a2eb mov rax, qword [rsp + 0xd8]                       |         rax = *((rsp + 0xd8));
    0x0040a2f3 mov qword [rax + rcx + 0x10], 0                   |         *((rax + rcx + 0x10)) = 0;
    0x0040a2fc add rcx, 0x10                                     |         rcx += 0x10;
    0x0040a300 cmp rcx, 0x200                                    |         
    0x0040a307 jne 0x40a2b0                                      |         
                                                                 |     } while (rcx != 0x200);
    0x0040a309 xorpd xmm0, xmm0                                  |     __asm ("xorpd xmm0, xmm0");
    0x0040a30d movapd xmmword [rsp + 0x260], xmm0                |     __asm ("movapd xmmword [rsp + 0x260], xmm0");
    0x0040a316 movapd xmmword [rsp + 0x250], xmm0                |     __asm ("movapd xmmword [rsp + 0x250], xmm0");
    0x0040a31f movapd xmmword [rsp + 0x240], xmm0                |     __asm ("movapd xmmword [rsp + 0x240], xmm0");
    0x0040a328 movapd xmmword [rsp + 0x230], xmm0                |     __asm ("movapd xmmword [rsp + 0x230], xmm0");
    0x0040a331 movapd xmmword [rsp + 0x220], xmm0                |     __asm ("movapd xmmword [rsp + 0x220], xmm0");
    0x0040a33a movapd xmmword [rsp + 0x210], xmm0                |     __asm ("movapd xmmword [rsp + 0x210], xmm0");
    0x0040a343 movapd xmmword [rsp + 0x200], xmm0                |     __asm ("movapd xmmword [rsp + 0x200], xmm0");
    0x0040a34c movapd xmmword [rsp + 0x1f0], xmm0                |     __asm ("movapd xmmword [rsp + 0x1f0], xmm0");
    0x0040a355 mov r12d, 0x927c0                                 |     r12d = 0x927c0;
    0x0040a35b lea r14, [rsp + 0xc0]                             |     r14 = rsp + 0xc0;
    0x0040a363 lea r13, [rsp + 0x10]                             |     r13 = rsp + 0x10;
    0x0040a368 jmp 0x40a379                                      |     
                                                                 |     while (rbx == 0) {
                                                                 | label_0:
    0x0040a370 dec r12d                                          |         r12d--;
                                                                 |         if (r12d == 0) {
    0x0040a373 je 0x40c2c7                                       |             goto label_20;
                                                                 |         }
    0x0040a379 xorpd xmm0, xmm0                                  |         __asm ("xorpd xmm0, xmm0");
    0x0040a37d movapd xmmword [rsp + 0x440], xmm0                |         __asm ("movapd xmmword [rsp + 0x440], xmm0");
    0x0040a386 mov dword [rsp + 0x370], 0                        |         *((rsp + 0x370)) = 0;
    0x0040a391 mov dword [rsp + 0x10], 0                         |         *((rsp + 0x10)) = 0;
    0x0040a399 mov rdi, r14                                      |         
    0x0040a39c lea rsi, [rsp + 0x440]                            |         
    0x0040a3a4 lea rdx, [rsp + 0x370]                            |         
    0x0040a3ac mov rcx, r13                                      |         
    0x0040a3af xor r8d, r8d                                      |         
    0x0040a3b2 call 0x454f60                                     |         BloombergLP::bdlcc::SkipList<int,int>::add(BloombergLP::bdlcc::SkipListPairHandle<int,int>*,intconst&,intconst&,bool*) (r14, rsp + 0x440, rsp + 0x370, r13, 0);
    0x0040a3b7 mov rdi, qword [rsp + 0x448]                      |         
    0x0040a3bf call 0x64a5d0                                     |         eax = BloombergLP::bdlcc::SkipList_Control::level()const (*((rsp + 0x448)));
    0x0040a3c4 mov ebp, eax                                      |         
    0x0040a3c6 test eax, eax                                     |         
                                                                 |         if (eax >= 0) {
    0x0040a3c8 js 0x40a400                                       |             
    0x0040a3ca cmp ebp, 0x20                                     |             
                                                                 |             if (ebp < 0x20) {
    0x0040a3cd jl 0x40a427                                       |                 goto label_21;
                                                                 |             }
    0x0040a3cf call 0x6504b0                                     |             rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040a3d4 mov rbx, rax                                      |             rbx = rax;
    0x0040a3d7 mov rdi, rax                                      |             
    0x0040a3da call 0x650160                                     |             BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040a3df mov edi, 0x67c252                                 |             edi = "l<32";
    0x0040a3e4 mov esi, 0x145a                                   |             esi = 0x145a;
    0x0040a3e9 call 0x405800                                     |             (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040a3ee mov rdi, rbx                                      |             
    0x0040a3f1 call 0x6502b0                                     |             BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040a3f6 jmp 0x40a427                                      |             
                                                                 |         } else {
    0x0040a400 call 0x6504b0                                     |             rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040a405 mov r15, rax                                      |             r15 = rax;
    0x0040a408 mov rdi, rax                                      |             
    0x0040a40b call 0x650160                                     |             BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040a410 mov edi, 0x67c24d                                 |             edi = "l>=0";
    0x0040a415 mov esi, 0x1459                                   |             esi = 0x1459;
    0x0040a41a call 0x405800                                     |             (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040a41f mov rdi, r15                                      |             
    0x0040a422 call 0x6502b0                                     |             BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r15);
                                                                 |         }
                                                                 | label_21:
    0x0040a427 movsxd rax, ebp                                   |         rax = (int64_t) ebp;
    0x0040a42a inc dword [rsp + rax*4 + 0x1f0]                   |         *((rsp + rax*4 + 0x1f0))++;
    0x0040a431 mov rsi, qword [rsp + 0x448]                      |         
    0x0040a439 mov rdi, r14                                      |         
    0x0040a43c call 0x437bf0                                     |         BloombergLP::bdlcc::SkipList<int,int>::remove(BloombergLP::bdlcc::SkipListPair<int,int>const*) (r14, *((rsp + 0x448)));
    0x0040a441 mov rbx, qword [rsp + 0x448]                      |         rbx = *((rsp + 0x448));
    0x0040a449 test rbx, rbx                                     |         
    0x0040a44c je 0x40a370                                       |         
                                                                 |     }
    0x0040a452 mov rbp, qword [rsp + 0x440]                      |     rbp = *((rsp + 0x440));
    0x0040a45a mov rdi, rbx                                      |     
    0x0040a45d call 0x64a560                                     |     eax = BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (rbx);
    0x0040a462 test eax, eax                                     |     
                                                                 |     if (eax != 0) {
    0x0040a464 jne 0x40a370                                      |         goto label_0;
                                                                 |     }
    0x0040a46a mov rdi, qword [rbp + 0x50]                       |     
    0x0040a46e mov rsi, rbx                                      |     
    0x0040a471 call 0x64ab40                                     |     BloombergLP::bdlcc::SkipList_PoolUtil::deallocate(BloombergLP::bdlcc::SkipList_PoolManager*,void*) (*((rbp + 0x50)), rbx);
    0x0040a476 jmp 0x40a370                                      |     goto label_0;
    0x0040a47b cmp dword [rip + 0x50ff56], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040a482 je 0x40a5cb                                       |         
    0x0040a488 mov rax, qword [rip + 0x50fe99]                   |         rax = std::__1::cout;
    0x0040a48f mov esi, 0x91a328                                 |         esi = std::__1::cout;
    0x0040a494 add rsi, qword [rax - 0x18]                       |         rsi += *((rax - 0x18));
    0x0040a498 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040a4a0 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040a4a5 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040a4ad mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040a4b2 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040a4b7 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040a4ba mov rdi, rax                                      |         rdi = rax;
    0x0040a4bd mov esi, 0xa                                      |         esi = 0xa;
    0x0040a4c2 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040a4c5 mov ebx, eax                                      |         ebx = eax;
    0x0040a4c7 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040a4cf call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040a4d4 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x0040a4d7 mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x0040a4dc call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040a4e1 mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x0040a4e6 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040a4eb mov edi, 0x91a328                                 |         
    0x0040a4f0 mov esi, 0x67c0cf                                 |         
    0x0040a4f5 mov edx, 0x22                                     |         
    0x0040a4fa call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "findLowerBound/findUpperBound test", 0x22);
    0x0040a4ff mov rbx, rax                                      |         rbx = rax;
    0x0040a502 mov rax, qword [rax]                              |         rax = *(rax);
    0x0040a505 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040a509 add rsi, rbx                                      |         rsi += rbx;
    0x0040a50c lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040a514 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040a519 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040a521 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040a526 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040a52b mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040a52e mov rdi, rax                                      |         rdi = rax;
    0x0040a531 mov esi, 0xa                                      |         esi = 0xa;
    0x0040a536 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040a539 mov ebp, eax                                      |         
    0x0040a53b lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040a543 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040a548 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x0040a54c mov rdi, rbx                                      |         rdi = rbx;
    0x0040a54f call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040a554 mov rdi, rbx                                      |         rdi = rbx;
    0x0040a557 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040a55c mov esi, 0x67bd80                                 |         
    0x0040a561 mov edx, 0x22                                     |         
    0x0040a566 mov rdi, rbx                                      |         
    0x0040a569 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rbx, 0x67bd80, 0x22);
    0x0040a56e mov rbx, rax                                      |         rbx = rax;
    0x0040a571 mov rax, qword [rax]                              |         rax = *(rax);
    0x0040a574 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040a578 add rsi, rbx                                      |         rsi += rbx;
    0x0040a57b lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040a583 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040a588 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040a590 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040a595 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040a59a mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040a59d mov rdi, rax                                      |         rdi = rax;
    0x0040a5a0 mov esi, 0xa                                      |         esi = 0xa;
    0x0040a5a5 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040a5a8 mov ebp, eax                                      |         
    0x0040a5aa lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040a5b2 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040a5b7 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x0040a5bb mov rdi, rbx                                      |         rdi = rbx;
    0x0040a5be call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040a5c3 mov rdi, rbx                                      |         rdi = rbx;
    0x0040a5c6 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x0040a5cb lea rdi, [rsp + 0x1f0]                            |     
    0x0040a5d3 mov esi, 0x678f80                                 |     
    0x0040a5d8 mov edx, 0x120                                    |     
    0x0040a5dd call 0x4053d0                                     |     memcpy (rsp + 0x1f0, 0x678f80, 0x120);
    0x0040a5e2 xor esi, esi                                      |     
    0x0040a5e4 cmp dword [rip + 0x50fdf5], 0                     |     
    0x0040a5eb setne sil                                         |     sil = (*(obj.veryVeryVerbose) != 0) ? 1 : 0;
    0x0040a5ef lea rbx, [rsp + 0xc0]                             |     rbx = rsp + 0xc0;
    0x0040a5f7 mov rdi, rbx                                      |     
    0x0040a5fa xor edx, edx                                      |     
    0x0040a5fc call 0x64f1f0                                     |     BloombergLP::bslma::TestAllocator::TestAllocator(bool,BloombergLP::bslma::Allocator*) (rbx, 0, 0);
    0x0040a601 xor esi, esi                                      |     
    0x0040a603 cmp dword [rip + 0x50fdd6], 0                     |     
    0x0040a60a setne sil                                         |     sil = (*(obj.veryVeryVerbose) != 0) ? 1 : 0;
    0x0040a60e lea rdi, [rsp + 0x440]                            |     
    0x0040a616 xor edx, edx                                      |     
    0x0040a618 call 0x64f1f0                                     |     BloombergLP::bslma::TestAllocator::TestAllocator(bool,BloombergLP::bslma::Allocator*) (rsp + 0x440, 0, 0);
    0x0040a61d lea rdi, [rsp + 0x560]                            |     
    0x0040a625 lea rsi, [rsp + 0x440]                            |     
    0x0040a62d call 0x64f040                                     |     BloombergLP::bslma::DefaultAllocatorGuard::DefaultAllocatorGuard(BloombergLP::bslma::Allocator*) (rsp + 0x560, rsp + 0x440);
    0x0040a632 lea rdi, [rsp + 0x10]                             |     
    0x0040a637 call 0x64a5e0                                     |     BloombergLP::bdlcc::SkipList_RandomLevelGenerator::SkipList_RandomLevelGenerator() (rsp + 0x10);
    0x0040a63c mov dword [rsp + 0x18], 0                         |     *((rsp + 0x18)) = 0;
    0x0040a644 lea rbp, [rsp + 0x30]                             |     rbp = rsp + 0x30;
    0x0040a649 mov rdi, rbp                                      |     rdi = rbp;
    0x0040a64c xor esi, esi                                      |     esi = 0;
    0x0040a64e call 0x404cc0                                     |     pthread_mutex_init ();
    0x0040a653 mov dword [rsp + 0x58], 0                         |     *((rsp + 0x58)) = 0;
    0x0040a65b mov qword [rsp + 0x60], 0                         |     *((rsp + 0x60)) = 0;
    0x0040a664 mov qword [rsp + 0x68], rbx                       |     *((rsp + 0x68)) = rbx;
    0x0040a669 movaps xmm0, xmmword [rip + 0x270630]             |     xmm0 = *(0x0067aca0);
    0x0040a670 movaps xmmword [rsp + 0x370], xmm0                |     *((rsp + 0x370)) = xmm0;
    0x0040a678 movaps xmm0, xmmword [rip + 0x270631]             |     xmm0 = *(0x0067acb0);
    0x0040a67f movaps xmmword [rsp + 0x380], xmm0                |     *((rsp + 0x380)) = xmm0;
    0x0040a687 movaps xmm0, xmmword [rip + 0x270632]             |     xmm0 = *(0x0067acc0);
    0x0040a68e movaps xmmword [rsp + 0x390], xmm0                |     *((rsp + 0x390)) = xmm0;
    0x0040a696 movaps xmm0, xmmword [rip + 0x270633]             |     xmm0 = *(0x0067acd0);
    0x0040a69d movaps xmmword [rsp + 0x3a0], xmm0                |     *((rsp + 0x3a0)) = xmm0;
    0x0040a6a5 movaps xmm0, xmmword [rip + 0x270634]             |     xmm0 = *(0x0067ace0);
    0x0040a6ac movaps xmmword [rsp + 0x3b0], xmm0                |     *((rsp + 0x3b0)) = xmm0;
    0x0040a6b4 movaps xmm0, xmmword [rip + 0x270635]             |     xmm0 = *(0x0067acf0);
    0x0040a6bb movaps xmmword [rsp + 0x3c0], xmm0                |     *((rsp + 0x3c0)) = xmm0;
    0x0040a6c3 movaps xmm0, xmmword [rip + 0x270636]             |     xmm0 = *(0x0067ad00);
    0x0040a6ca movaps xmmword [rsp + 0x3d0], xmm0                |     *((rsp + 0x3d0)) = xmm0;
    0x0040a6d2 movapd xmm0, xmmword [rip + 0x270636]             |     __asm ("movapd xmm0, xmmword [0x0067ad10]");
    0x0040a6da movapd xmmword [rsp + 0x3e0], xmm0                |     __asm ("movapd xmmword [rsp + 0x3e0], xmm0");
    0x0040a6e3 lea rdi, [rsp + 0x370]                            |     
    0x0040a6eb mov esi, 0x20                                     |     
    0x0040a6f0 mov rdx, rbx                                      |     
    0x0040a6f3 call 0x64aae0                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::createPoolManager(int*,int,BloombergLP::bslma::Allocator*) (rsp + 0x370, 0x20, rbx);
    0x0040a6f8 mov qword [rsp + 0x60], rax                       |     *((rsp + 0x60)) = rax;
    0x0040a6fd mov rdi, rax                                      |     
    0x0040a700 mov esi, 0x1f                                     |     
    0x0040a705 call 0x64aa20                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (rax, 0x1f);
    0x0040a70a mov qword [rsp + 0x20], rax                       |     *((rsp + 0x20)) = rax;
    0x0040a70f mov rdi, qword [rsp + 0x60]                       |     
    0x0040a714 mov esi, 0x1f                                     |     
    0x0040a719 call 0x64aa20                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x60)), 0x1f);
    0x0040a71e mov qword [rsp + 0x28], rax                       |     *((rsp + 0x28)) = rax;
    0x0040a723 xor ecx, ecx                                      |     ecx = 0;
    0x0040a725 nop word cs:[rax + rax]                           |     
    0x0040a72f nop                                               |     
                                                                 |     do {
    0x0040a730 mov rax, qword [rsp + 0x20]                       |         rax = *((rsp + 0x20));
    0x0040a735 mov qword [rax + rcx + 0x48], 0                   |         *((rax + rcx + 0x48)) = 0;
    0x0040a73e mov rax, qword [rsp + 0x20]                       |         rax = *((rsp + 0x20));
    0x0040a743 mov rdx, qword [rsp + 0x28]                       |         rdx = *((rsp + 0x28));
    0x0040a748 mov qword [rax + rcx + 0x40], rdx                 |         *((rax + rcx + 0x40)) = rdx;
    0x0040a74d mov rax, qword [rsp + 0x20]                       |         rax = *((rsp + 0x20));
    0x0040a752 mov rdx, qword [rsp + 0x28]                       |         rdx = *((rsp + 0x28));
    0x0040a757 mov qword [rdx + rcx + 0x48], rax                 |         *((rdx + rcx + 0x48)) = rax;
    0x0040a75c mov rax, qword [rsp + 0x28]                       |         rax = *((rsp + 0x28));
    0x0040a761 mov qword [rax + rcx + 0x40], 0                   |         *((rax + rcx + 0x40)) = 0;
    0x0040a76a add rcx, 0x10                                     |         rcx += 0x10;
    0x0040a76e cmp rcx, 0x200                                    |         
    0x0040a775 jne 0x40a730                                      |         
                                                                 |     } while (rcx != 0x200);
    0x0040a777 lea rbx, [rsp + 0x1f4]                            |     rbx = rsp + 0x1f4;
    0x0040a77f mov r12d, 0xc                                     |     r12d = 0xc;
    0x0040a785 lea r14, [rsp + 0x370]                            |     r14 = rsp + 0x370;
    0x0040a78d lea r15, [rsp + 0x10]                             |     r15 = rsp + 0x10;
    0x0040a792 jmp 0x40a7ad                                      |     
                                                                 |     while (*((rsp + 0x390)) == 0x17) {
                                                                 | label_1:
    0x0040a7a0 add rbx, 0x18                                     |         rbx += 0x18;
    0x0040a7a4 dec r12                                           |         r12--;
                                                                 |         if (r12 == 0) {
    0x0040a7a7 je 0x40bfd6                                       |             goto label_22;
                                                                 |         }
    0x0040a7ad mov rbp, qword [rbx + 4]                          |         rbp = *((rbx + 4));
    0x0040a7b1 mov rax, qword [rip + 0x510388]                   |         rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040a7b8 test rax, rax                                     |         
                                                                 |         if (rax == 0) {
    0x0040a7bb jne 0x40a7c2                                      |             
    0x0040a7bd call 0x64efc0                                     |             rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |         }
    0x0040a7c2 mov qword [rsp + 0x370], 0                        |         *((rsp + 0x370)) = 0;
    0x0040a7ce movapd xmm0, xmmword [rip + 0x2704ba]             |         __asm ("movapd xmm0, xmmword [0x0067ac90]");
    0x0040a7d6 movupd xmmword [rsp + 0x388], xmm0                |         __asm ("movupd xmmword [rsp + 0x388], xmm0");
    0x0040a7df mov qword [rsp + 0x398], rax                      |         *((rsp + 0x398)) = rax;
    0x0040a7e7 mov rdi, rbp                                      |         
    0x0040a7ea call 0x404d40                                     |         rax = strlen (rbp);
    0x0040a7ef mov qword [rsp + 0x388], 0                        |         *((rsp + 0x388)) = 0;
    0x0040a7fb mov ecx, 0x67d6b2                                 |         
    0x0040a800 mov rdi, r14                                      |         
    0x0040a803 mov rsi, rbp                                      |         
    0x0040a806 mov rdx, rax                                      |         
    0x0040a809 call 0x654130                                     |         bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (r14, rbp, rax, "string<...>::assign(char*...): string too long");
    0x0040a80e mov rdi, r15                                      |         
    0x0040a811 call 0x64a5f0                                     |         eax = BloombergLP::bdlcc::SkipList_RandomLevelGenerator::randomLevel() (r15);
    0x0040a816 mov rdi, r15                                      |         
    0x0040a819 mov esi, eax                                      |         
    0x0040a81b mov rdx, rbx                                      |         
    0x0040a81e mov rcx, r14                                      |         
    0x0040a821 call 0x5e9aa0                                     |         rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::allocateNode(int,intconst&,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>const&) (r15, eax, rbx, r14);
    0x0040a826 mov rdi, r15                                      |         
    0x0040a829 xor esi, esi                                      |         
    0x0040a82b mov rdx, rax                                      |         
    0x0040a82e mov ecx, 1                                        |         ecx = 1;
    0x0040a833 call 0x5e9be0                                     |         BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::addNodeImpR(bool*,BloombergLP::bdlcc::SkipList_Node<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,bool) (r15, 0, rax);
    0x0040a838 cmp qword [rsp + 0x390], 0x17                     |         
    0x0040a841 je 0x40a7a0                                       |         
                                                                 |     }
    0x0040a847 mov rsi, qword [rsp + 0x370]                      |     rsi = *((rsp + 0x370));
    0x0040a84f mov rdi, qword [rsp + 0x398]                      |     rdi = *((rsp + 0x398));
    0x0040a857 mov rax, qword [rdi]                              |     rax = *(rdi);
    0x0040a85a call qword [rax + 0x18]                           |     uint64_t (*rax + 0x18)() ();
    0x0040a85d jmp 0x40a7a0                                      |     goto label_1;
    0x0040a862 lea rdi, [rsp + 0x1f0]                            |     
    0x0040a86a mov esi, 0x678e60                                 |     
    0x0040a86f mov edx, 0x120                                    |     
    0x0040a874 call 0x4053d0                                     |     memcpy (rsp + 0x1f0, 0x678e60, 0x120);
    0x0040a879 cmp dword [rip + 0x50fb58], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040a880 je 0x40a9c9                                       |         
    0x0040a886 mov rax, qword [rip + 0x50fa9b]                   |         rax = std::__1::cout;
    0x0040a88d mov esi, 0x91a328                                 |         esi = std::__1::cout;
    0x0040a892 add rsi, qword [rax - 0x18]                       |         rsi += *((rax - 0x18));
    0x0040a896 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040a89e call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040a8a3 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040a8ab mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040a8b0 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040a8b5 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040a8b8 mov rdi, rax                                      |         rdi = rax;
    0x0040a8bb mov esi, 0xa                                      |         esi = 0xa;
    0x0040a8c0 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040a8c3 mov ebx, eax                                      |         ebx = eax;
    0x0040a8c5 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040a8cd call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040a8d2 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x0040a8d5 mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x0040a8da call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040a8df mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x0040a8e4 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040a8e9 mov edi, 0x91a328                                 |         
    0x0040a8ee mov esi, 0x67bdff                                 |         
    0x0040a8f3 mov edx, 0x24                                     |         
    0x0040a8f8 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "findLowerBoundR/findUpperBoundR test", 0x24);
    0x0040a8fd mov rbx, rax                                      |         rbx = rax;
    0x0040a900 mov rax, qword [rax]                              |         rax = *(rax);
    0x0040a903 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040a907 add rsi, rbx                                      |         rsi += rbx;
    0x0040a90a lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040a912 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040a917 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040a91f mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040a924 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040a929 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040a92c mov rdi, rax                                      |         rdi = rax;
    0x0040a92f mov esi, 0xa                                      |         esi = 0xa;
    0x0040a934 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040a937 mov ebp, eax                                      |         
    0x0040a939 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040a941 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040a946 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x0040a94a mov rdi, rbx                                      |         rdi = rbx;
    0x0040a94d call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040a952 mov rdi, rbx                                      |         rdi = rbx;
    0x0040a955 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040a95a mov esi, 0x67bd7e                                 |         
    0x0040a95f mov edx, 0x24                                     |         
    0x0040a964 mov rdi, rbx                                      |         
    0x0040a967 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rbx, 0x67bd7e, 0x24);
    0x0040a96c mov rbx, rax                                      |         rbx = rax;
    0x0040a96f mov rax, qword [rax]                              |         rax = *(rax);
    0x0040a972 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040a976 add rsi, rbx                                      |         rsi += rbx;
    0x0040a979 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040a981 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040a986 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040a98e mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040a993 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040a998 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040a99b mov rdi, rax                                      |         rdi = rax;
    0x0040a99e mov esi, 0xa                                      |         esi = 0xa;
    0x0040a9a3 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040a9a6 mov ebp, eax                                      |         
    0x0040a9a8 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040a9b0 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040a9b5 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x0040a9b9 mov rdi, rbx                                      |         rdi = rbx;
    0x0040a9bc call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040a9c1 mov rdi, rbx                                      |         rdi = rbx;
    0x0040a9c4 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x0040a9c9 xor esi, esi                                      |     
    0x0040a9cb cmp dword [rip + 0x50fa0e], 0                     |     
    0x0040a9d2 setne sil                                         |     sil = (*(obj.veryVeryVerbose) != 0) ? 1 : 0;
    0x0040a9d6 lea rdi, [rsp + 0x440]                            |     
    0x0040a9de xor edx, edx                                      |     
    0x0040a9e0 call 0x64f1f0                                     |     BloombergLP::bslma::TestAllocator::TestAllocator(bool,BloombergLP::bslma::Allocator*) (rsp + 0x440, 0, 0);
    0x0040a9e5 xor esi, esi                                      |     
    0x0040a9e7 cmp dword [rip + 0x50f9f2], 0                     |     
    0x0040a9ee setne sil                                         |     sil = (*(obj.veryVeryVerbose) != 0) ? 1 : 0;
    0x0040a9f2 lea rdi, [rsp + 0x370]                            |     
    0x0040a9fa xor edx, edx                                      |     
    0x0040a9fc call 0x64f1f0                                     |     BloombergLP::bslma::TestAllocator::TestAllocator(bool,BloombergLP::bslma::Allocator*) (rsp + 0x370, 0, 0);
    0x0040aa01 lea rdi, [rsp + 0x558]                            |     
    0x0040aa09 lea rsi, [rsp + 0x370]                            |     
    0x0040aa11 call 0x64f040                                     |     BloombergLP::bslma::DefaultAllocatorGuard::DefaultAllocatorGuard(BloombergLP::bslma::Allocator*) (rsp + 0x558, rsp + 0x370);
    0x0040aa16 lea rdi, [rsp + 0x10]                             |     
    0x0040aa1b call 0x64a5e0                                     |     BloombergLP::bdlcc::SkipList_RandomLevelGenerator::SkipList_RandomLevelGenerator() (rsp + 0x10);
    0x0040aa20 mov dword [rsp + 0x18], 0                         |     *((rsp + 0x18)) = 0;
    0x0040aa28 lea rbx, [rsp + 0x30]                             |     rbx = rsp + 0x30;
    0x0040aa2d mov rdi, rbx                                      |     rdi = rbx;
    0x0040aa30 xor esi, esi                                      |     esi = 0;
    0x0040aa32 call 0x404cc0                                     |     pthread_mutex_init ();
    0x0040aa37 mov dword [rsp + 0x58], 0                         |     *((rsp + 0x58)) = 0;
    0x0040aa3f mov qword [rsp + 0x60], 0                         |     *((rsp + 0x60)) = 0;
    0x0040aa48 lea rdx, [rsp + 0x440]                            |     
    0x0040aa50 mov qword [rsp + 0x68], rdx                       |     *((rsp + 0x68)) = rdx;
    0x0040aa55 movaps xmm0, xmmword [rip + 0x270244]             |     xmm0 = *(0x0067aca0);
    0x0040aa5c movaps xmmword [rsp + 0xc0], xmm0                 |     *((rsp + 0xc0)) = xmm0;
    0x0040aa64 movaps xmm0, xmmword [rip + 0x270245]             |     xmm0 = *(0x0067acb0);
    0x0040aa6b movaps xmmword [rsp + 0xd0], xmm0                 |     *((rsp + 0xd0)) = xmm0;
    0x0040aa73 movaps xmm0, xmmword [rip + 0x270246]             |     xmm0 = *(0x0067acc0);
    0x0040aa7a movaps xmmword [rsp + 0xe0], xmm0                 |     *((rsp + 0xe0)) = xmm0;
    0x0040aa82 movaps xmm0, xmmword [rip + 0x270247]             |     xmm0 = *(0x0067acd0);
    0x0040aa89 movaps xmmword [rsp + 0xf0], xmm0                 |     *((rsp + 0xf0)) = xmm0;
    0x0040aa91 movaps xmm0, xmmword [rip + 0x270248]             |     xmm0 = *(0x0067ace0);
    0x0040aa98 movaps xmmword [rsp + 0x100], xmm0                |     *((rsp + 0x100)) = xmm0;
    0x0040aaa0 movaps xmm0, xmmword [rip + 0x270249]             |     xmm0 = *(0x0067acf0);
    0x0040aaa7 movaps xmmword [rsp + 0x110], xmm0                |     *((rsp + 0x110)) = xmm0;
    0x0040aaaf movaps xmm0, xmmword [rip + 0x27024a]             |     xmm0 = *(0x0067ad00);
    0x0040aab6 movaps xmmword [rsp + 0x120], xmm0                |     *((rsp + 0x120)) = xmm0;
    0x0040aabe movapd xmm0, xmmword [rip + 0x27024a]             |     __asm ("movapd xmm0, xmmword [0x0067ad10]");
    0x0040aac6 movapd xmmword [rsp + 0x130], xmm0                |     __asm ("movapd xmmword [rsp + 0x130], xmm0");
    0x0040aacf lea rdi, [rsp + 0xc0]                             |     
    0x0040aad7 mov esi, 0x20                                     |     
    0x0040aadc call 0x64aae0                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::createPoolManager(int*,int,BloombergLP::bslma::Allocator*) (rsp + 0xc0, 0x20, rsp + 0x440);
    0x0040aae1 mov qword [rsp + 0x60], rax                       |     *((rsp + 0x60)) = rax;
    0x0040aae6 mov rdi, rax                                      |     
    0x0040aae9 mov esi, 0x1f                                     |     
    0x0040aaee call 0x64aa20                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (rax, 0x1f);
    0x0040aaf3 mov qword [rsp + 0x20], rax                       |     *((rsp + 0x20)) = rax;
    0x0040aaf8 mov rdi, qword [rsp + 0x60]                       |     
    0x0040aafd mov esi, 0x1f                                     |     
    0x0040ab02 call 0x64aa20                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x60)), 0x1f);
    0x0040ab07 mov qword [rsp + 0x28], rax                       |     *((rsp + 0x28)) = rax;
    0x0040ab0c xor ecx, ecx                                      |     ecx = 0;
    0x0040ab0e nop                                               |     
                                                                 |     do {
    0x0040ab10 mov rax, qword [rsp + 0x20]                       |         rax = *((rsp + 0x20));
    0x0040ab15 mov qword [rax + rcx + 0x48], 0                   |         *((rax + rcx + 0x48)) = 0;
    0x0040ab1e mov rax, qword [rsp + 0x20]                       |         rax = *((rsp + 0x20));
    0x0040ab23 mov rdx, qword [rsp + 0x28]                       |         rdx = *((rsp + 0x28));
    0x0040ab28 mov qword [rax + rcx + 0x40], rdx                 |         *((rax + rcx + 0x40)) = rdx;
    0x0040ab2d mov rax, qword [rsp + 0x20]                       |         rax = *((rsp + 0x20));
    0x0040ab32 mov rdx, qword [rsp + 0x28]                       |         rdx = *((rsp + 0x28));
    0x0040ab37 mov qword [rdx + rcx + 0x48], rax                 |         *((rdx + rcx + 0x48)) = rax;
    0x0040ab3c mov rax, qword [rsp + 0x28]                       |         rax = *((rsp + 0x28));
    0x0040ab41 mov qword [rax + rcx + 0x40], 0                   |         *((rax + rcx + 0x40)) = 0;
    0x0040ab4a add rcx, 0x10                                     |         rcx += 0x10;
    0x0040ab4e cmp rcx, 0x200                                    |         
    0x0040ab55 jne 0x40ab10                                      |         
                                                                 |     } while (rcx != 0x200);
    0x0040ab57 lea rbx, [rsp + 0x1f4]                            |     rbx = rsp + 0x1f4;
    0x0040ab5f mov r12d, 0xc                                     |     r12d = 0xc;
    0x0040ab65 lea r14, [rsp + 0xc0]                             |     r14 = rsp + 0xc0;
    0x0040ab6d lea r15, [rsp + 0x10]                             |     r15 = rsp + 0x10;
    0x0040ab72 jmp 0x40ab8d                                      |     
                                                                 |     while (*((rsp + 0xe0)) == 0x17) {
                                                                 | label_2:
    0x0040ab80 add rbx, 0x18                                     |         rbx += 0x18;
    0x0040ab84 dec r12                                           |         r12--;
                                                                 |         if (r12 == 0) {
    0x0040ab87 je 0x40c180                                       |             goto label_23;
                                                                 |         }
    0x0040ab8d mov rbp, qword [rbx + 4]                          |         rbp = *((rbx + 4));
    0x0040ab91 mov rax, qword [rip + 0x50ffa8]                   |         rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040ab98 test rax, rax                                     |         
                                                                 |         if (rax == 0) {
    0x0040ab9b jne 0x40aba2                                      |             
    0x0040ab9d call 0x64efc0                                     |             rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |         }
    0x0040aba2 mov qword [rsp + 0xc0], 0                         |         *((rsp + 0xc0)) = 0;
    0x0040abae movapd xmm0, xmmword [rip + 0x2700da]             |         __asm ("movapd xmm0, xmmword [0x0067ac90]");
    0x0040abb6 movupd xmmword [rsp + 0xd8], xmm0                 |         __asm ("movupd xmmword [rsp + 0xd8], xmm0");
    0x0040abbf mov qword [rsp + 0xe8], rax                       |         *((rsp + 0xe8)) = rax;
    0x0040abc7 mov rdi, rbp                                      |         
    0x0040abca call 0x404d40                                     |         rax = strlen (rbp);
    0x0040abcf mov qword [rsp + 0xd8], 0                         |         *((rsp + 0xd8)) = 0;
    0x0040abdb mov ecx, 0x67d6b2                                 |         
    0x0040abe0 mov rdi, r14                                      |         
    0x0040abe3 mov rsi, rbp                                      |         
    0x0040abe6 mov rdx, rax                                      |         
    0x0040abe9 call 0x654130                                     |         bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (r14, rbp, rax, "string<...>::assign(char*...): string too long");
    0x0040abee mov rdi, r15                                      |         
    0x0040abf1 call 0x64a5f0                                     |         eax = BloombergLP::bdlcc::SkipList_RandomLevelGenerator::randomLevel() (r15);
    0x0040abf6 mov rdi, r15                                      |         
    0x0040abf9 mov esi, eax                                      |         
    0x0040abfb mov rdx, rbx                                      |         
    0x0040abfe mov rcx, r14                                      |         
    0x0040ac01 call 0x5e9aa0                                     |         rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::allocateNode(int,intconst&,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>const&) (r15, eax, rbx, r14);
    0x0040ac06 mov rdi, r15                                      |         
    0x0040ac09 xor esi, esi                                      |         
    0x0040ac0b mov rdx, rax                                      |         
    0x0040ac0e mov ecx, 1                                        |         ecx = 1;
    0x0040ac13 call 0x5e9be0                                     |         BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::addNodeImpR(bool*,BloombergLP::bdlcc::SkipList_Node<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,bool) (r15, 0, rax);
    0x0040ac18 cmp qword [rsp + 0xe0], 0x17                      |         
    0x0040ac21 je 0x40ab80                                       |         
                                                                 |     }
    0x0040ac27 mov rsi, qword [rsp + 0xc0]                       |     rsi = *((rsp + 0xc0));
    0x0040ac2f mov rdi, qword [rsp + 0xe8]                       |     rdi = *((rsp + 0xe8));
    0x0040ac37 mov rax, qword [rdi]                              |     rax = *(rdi);
    0x0040ac3a call qword [rax + 0x18]                           |     uint64_t (*rax + 0x18)() ();
    0x0040ac3d jmp 0x40ab80                                      |     goto label_2;
    0x0040ac42 lea rdi, [rsp + 0x1f0]                            |     
    0x0040ac4a mov esi, 0x678d40                                 |     
    0x0040ac4f mov edx, 0x120                                    |     
    0x0040ac54 call 0x4053d0                                     |     memcpy (rsp + 0x1f0, 0x678d40, 0x120);
    0x0040ac59 cmp dword [rip + 0x50f778], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040ac60 je 0x40ada9                                       |         
    0x0040ac66 mov rax, qword [rip + 0x50f6bb]                   |         rax = std::__1::cout;
    0x0040ac6d mov esi, 0x91a328                                 |         esi = std::__1::cout;
    0x0040ac72 add rsi, qword [rax - 0x18]                       |         rsi += *((rax - 0x18));
    0x0040ac76 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040ac7e call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040ac83 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040ac8b mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040ac90 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040ac95 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040ac98 mov rdi, rax                                      |         rdi = rax;
    0x0040ac9b mov esi, 0xa                                      |         esi = 0xa;
    0x0040aca0 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040aca3 mov ebx, eax                                      |         ebx = eax;
    0x0040aca5 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040acad call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040acb2 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x0040acb5 mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x0040acba call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040acbf mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x0040acc4 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040acc9 mov edi, 0x91a328                                 |         
    0x0040acce mov esi, 0x67bc9a                                 |         
    0x0040acd3 mov edx, 0x27                                     |         
    0x0040acd8 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "addR - verify insertion order is stable", 0x27);
    0x0040acdd mov rbx, rax                                      |         rbx = rax;
    0x0040ace0 mov rax, qword [rax]                              |         rax = *(rax);
    0x0040ace3 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040ace7 add rsi, rbx                                      |         rsi += rbx;
    0x0040acea lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040acf2 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040acf7 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040acff mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040ad04 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040ad09 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040ad0c mov rdi, rax                                      |         rdi = rax;
    0x0040ad0f mov esi, 0xa                                      |         esi = 0xa;
    0x0040ad14 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040ad17 mov ebp, eax                                      |         
    0x0040ad19 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040ad21 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040ad26 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x0040ad2a mov rdi, rbx                                      |         rdi = rbx;
    0x0040ad2d call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040ad32 mov rdi, rbx                                      |         rdi = rbx;
    0x0040ad35 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040ad3a mov esi, 0x67bd7b                                 |         
    0x0040ad3f mov edx, 0x27                                     |         
    0x0040ad44 mov rdi, rbx                                      |         
    0x0040ad47 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rbx, 0x67bd7b, 0x27);
    0x0040ad4c mov rbx, rax                                      |         rbx = rax;
    0x0040ad4f mov rax, qword [rax]                              |         rax = *(rax);
    0x0040ad52 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040ad56 add rsi, rbx                                      |         rsi += rbx;
    0x0040ad59 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040ad61 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040ad66 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040ad6e mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040ad73 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040ad78 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040ad7b mov rdi, rax                                      |         rdi = rax;
    0x0040ad7e mov esi, 0xa                                      |         esi = 0xa;
    0x0040ad83 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040ad86 mov ebp, eax                                      |         
    0x0040ad88 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040ad90 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040ad95 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x0040ad99 mov rdi, rbx                                      |         rdi = rbx;
    0x0040ad9c call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040ada1 mov rdi, rbx                                      |         rdi = rbx;
    0x0040ada4 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x0040ada9 xor esi, esi                                      |     
    0x0040adab cmp dword [rip + 0x50f62e], 0                     |     
    0x0040adb2 setne sil                                         |     sil = (*(obj.veryVeryVerbose) != 0) ? 1 : 0;
    0x0040adb6 lea r14, [rsp + 0xc0]                             |     r14 = rsp + 0xc0;
    0x0040adbe mov rdi, r14                                      |     
    0x0040adc1 xor edx, edx                                      |     
    0x0040adc3 call 0x64f1f0                                     |     BloombergLP::bslma::TestAllocator::TestAllocator(bool,BloombergLP::bslma::Allocator*) (r14, 0, 0);
    0x0040adc8 xor esi, esi                                      |     
    0x0040adca cmp dword [rip + 0x50f60f], 0                     |     
    0x0040add1 setne sil                                         |     sil = (*(obj.veryVeryVerbose) != 0) ? 1 : 0;
    0x0040add5 lea rdi, [rsp + 0x440]                            |     
    0x0040addd xor edx, edx                                      |     
    0x0040addf call 0x64f1f0                                     |     BloombergLP::bslma::TestAllocator::TestAllocator(bool,BloombergLP::bslma::Allocator*) (rsp + 0x440, 0, 0);
    0x0040ade4 lea rdi, [rsp + 0x78]                             |     
    0x0040ade9 lea rsi, [rsp + 0x440]                            |     
    0x0040adf1 call 0x64f040                                     |     BloombergLP::bslma::DefaultAllocatorGuard::DefaultAllocatorGuard(BloombergLP::bslma::Allocator*) (rsp + 0x78, rsp + 0x440);
    0x0040adf6 lea rdi, [rsp + 0x10]                             |     
    0x0040adfb call 0x64a5e0                                     |     BloombergLP::bdlcc::SkipList_RandomLevelGenerator::SkipList_RandomLevelGenerator() (rsp + 0x10);
    0x0040ae00 mov dword [rsp + 0x18], 0                         |     *((rsp + 0x18)) = 0;
    0x0040ae08 lea rbx, [rsp + 0x30]                             |     rbx = rsp + 0x30;
    0x0040ae0d mov rdi, rbx                                      |     rdi = rbx;
    0x0040ae10 xor esi, esi                                      |     esi = 0;
    0x0040ae12 call 0x404cc0                                     |     pthread_mutex_init ();
    0x0040ae17 mov dword [rsp + 0x58], 0                         |     *((rsp + 0x58)) = 0;
    0x0040ae1f mov qword [rsp + 0x60], 0                         |     *((rsp + 0x60)) = 0;
    0x0040ae28 mov qword [rsp + 0x68], r14                       |     *((rsp + 0x68)) = r14;
    0x0040ae2d movaps xmm0, xmmword [rip + 0x26fe6c]             |     xmm0 = *(0x0067aca0);
    0x0040ae34 movaps xmmword [rsp + 0x370], xmm0                |     *((rsp + 0x370)) = xmm0;
    0x0040ae3c movaps xmm0, xmmword [rip + 0x26fe6d]             |     xmm0 = *(0x0067acb0);
    0x0040ae43 movaps xmmword [rsp + 0x380], xmm0                |     *((rsp + 0x380)) = xmm0;
    0x0040ae4b movaps xmm0, xmmword [rip + 0x26fe6e]             |     xmm0 = *(0x0067acc0);
    0x0040ae52 movaps xmmword [rsp + 0x390], xmm0                |     *((rsp + 0x390)) = xmm0;
    0x0040ae5a movaps xmm0, xmmword [rip + 0x26fe6f]             |     xmm0 = *(0x0067acd0);
    0x0040ae61 movaps xmmword [rsp + 0x3a0], xmm0                |     *((rsp + 0x3a0)) = xmm0;
    0x0040ae69 movaps xmm0, xmmword [rip + 0x26fe70]             |     xmm0 = *(0x0067ace0);
    0x0040ae70 movaps xmmword [rsp + 0x3b0], xmm0                |     *((rsp + 0x3b0)) = xmm0;
    0x0040ae78 movaps xmm0, xmmword [rip + 0x26fe71]             |     xmm0 = *(0x0067acf0);
    0x0040ae7f movaps xmmword [rsp + 0x3c0], xmm0                |     *((rsp + 0x3c0)) = xmm0;
    0x0040ae87 movaps xmm0, xmmword [rip + 0x26fe72]             |     xmm0 = *(0x0067ad00);
    0x0040ae8e movaps xmmword [rsp + 0x3d0], xmm0                |     *((rsp + 0x3d0)) = xmm0;
    0x0040ae96 movapd xmm0, xmmword [rip + 0x26fe72]             |     __asm ("movapd xmm0, xmmword [0x0067ad10]");
    0x0040ae9e movapd xmmword [rsp + 0x3e0], xmm0                |     __asm ("movapd xmmword [rsp + 0x3e0], xmm0");
    0x0040aea7 lea rdi, [rsp + 0x370]                            |     
    0x0040aeaf mov esi, 0x20                                     |     
    0x0040aeb4 mov rdx, r14                                      |     
    0x0040aeb7 call 0x64aae0                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::createPoolManager(int*,int,BloombergLP::bslma::Allocator*) (rsp + 0x370, 0x20, r14);
    0x0040aebc mov qword [rsp + 0x60], rax                       |     *((rsp + 0x60)) = rax;
    0x0040aec1 mov rdi, rax                                      |     
    0x0040aec4 mov esi, 0x1f                                     |     
    0x0040aec9 call 0x64aa20                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (rax, 0x1f);
    0x0040aece mov qword [rsp + 0x20], rax                       |     *((rsp + 0x20)) = rax;
    0x0040aed3 mov rdi, qword [rsp + 0x60]                       |     
    0x0040aed8 mov esi, 0x1f                                     |     
    0x0040aedd call 0x64aa20                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x60)), 0x1f);
    0x0040aee2 mov qword [rsp + 0x28], rax                       |     *((rsp + 0x28)) = rax;
    0x0040aee7 xor ecx, ecx                                      |     ecx = 0;
    0x0040aee9 nop dword [rax]                                   |     
                                                                 |     do {
    0x0040aef0 mov rax, qword [rsp + 0x20]                       |         rax = *((rsp + 0x20));
    0x0040aef5 mov qword [rax + rcx + 0x48], 0                   |         *((rax + rcx + 0x48)) = 0;
    0x0040aefe mov rax, qword [rsp + 0x20]                       |         rax = *((rsp + 0x20));
    0x0040af03 mov rdx, qword [rsp + 0x28]                       |         rdx = *((rsp + 0x28));
    0x0040af08 mov qword [rax + rcx + 0x40], rdx                 |         *((rax + rcx + 0x40)) = rdx;
    0x0040af0d mov rax, qword [rsp + 0x20]                       |         rax = *((rsp + 0x20));
    0x0040af12 mov rdx, qword [rsp + 0x28]                       |         rdx = *((rsp + 0x28));
    0x0040af17 mov qword [rdx + rcx + 0x48], rax                 |         *((rdx + rcx + 0x48)) = rax;
    0x0040af1c mov rax, qword [rsp + 0x28]                       |         rax = *((rsp + 0x28));
    0x0040af21 mov qword [rax + rcx + 0x40], 0                   |         *((rax + rcx + 0x40)) = 0;
    0x0040af2a add rcx, 0x10                                     |         rcx += 0x10;
    0x0040af2e cmp rcx, 0x200                                    |         
    0x0040af35 jne 0x40aef0                                      |         
                                                                 |     } while (rcx != 0x200);
    0x0040af37 lea rbx, [rsp + 0x1f4]                            |     rbx = rsp + 0x1f4;
    0x0040af3f mov r13d, 0xc                                     |     r13d = 0xc;
    0x0040af45 lea r15, [rsp + 0x370]                            |     r15 = rsp + 0x370;
    0x0040af4d lea r12, [rsp + 0x10]                             |     r12 = rsp + 0x10;
    0x0040af52 jmp 0x40af6d                                      |     
                                                                 |     while (*((rsp + 0x390)) == 0x17) {
                                                                 | label_3:
    0x0040af60 add rbx, 0x18                                     |         rbx += 0x18;
    0x0040af64 dec r13                                           |         r13--;
                                                                 |         if (r13 == 0) {
    0x0040af67 je 0x40c11d                                       |             goto label_24;
                                                                 |         }
    0x0040af6d mov rbp, qword [rbx + 4]                          |         rbp = *((rbx + 4));
    0x0040af71 mov rax, qword [rip + 0x50fbc8]                   |         rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040af78 test rax, rax                                     |         
                                                                 |         if (rax == 0) {
    0x0040af7b jne 0x40af82                                      |             
    0x0040af7d call 0x64efc0                                     |             rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |         }
    0x0040af82 mov qword [rsp + 0x370], 0                        |         *((rsp + 0x370)) = 0;
    0x0040af8e movapd xmm0, xmmword [rip + 0x26fcfa]             |         __asm ("movapd xmm0, xmmword [0x0067ac90]");
    0x0040af96 movupd xmmword [rsp + 0x388], xmm0                |         __asm ("movupd xmmword [rsp + 0x388], xmm0");
    0x0040af9f mov qword [rsp + 0x398], rax                      |         *((rsp + 0x398)) = rax;
    0x0040afa7 mov rdi, rbp                                      |         
    0x0040afaa call 0x404d40                                     |         rax = strlen (rbp);
    0x0040afaf mov qword [rsp + 0x388], 0                        |         *((rsp + 0x388)) = 0;
    0x0040afbb mov ecx, 0x67d6b2                                 |         
    0x0040afc0 mov rdi, r15                                      |         
    0x0040afc3 mov rsi, rbp                                      |         
    0x0040afc6 mov rdx, rax                                      |         
    0x0040afc9 call 0x654130                                     |         bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (r15, rbp, rax, "string<...>::assign(char*...): string too long");
    0x0040afce mov rdi, r12                                      |         
    0x0040afd1 call 0x64a5f0                                     |         eax = BloombergLP::bdlcc::SkipList_RandomLevelGenerator::randomLevel() (r12);
    0x0040afd6 mov rdi, r12                                      |         
    0x0040afd9 mov esi, eax                                      |         
    0x0040afdb mov rdx, rbx                                      |         
    0x0040afde mov rcx, r15                                      |         
    0x0040afe1 call 0x5e9aa0                                     |         rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::allocateNode(int,intconst&,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>const&) (r12, eax, rbx, r15);
    0x0040afe6 mov rdi, r12                                      |         
    0x0040afe9 xor esi, esi                                      |         
    0x0040afeb mov rdx, rax                                      |         
    0x0040afee mov ecx, 1                                        |         ecx = 1;
    0x0040aff3 call 0x5e9be0                                     |         BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::addNodeImpR(bool*,BloombergLP::bdlcc::SkipList_Node<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,bool) (r12, 0, rax);
    0x0040aff8 cmp qword [rsp + 0x390], 0x17                     |         
    0x0040b001 je 0x40af60                                       |         
                                                                 |     }
    0x0040b007 mov rsi, qword [rsp + 0x370]                      |     rsi = *((rsp + 0x370));
    0x0040b00f mov rdi, qword [rsp + 0x398]                      |     rdi = *((rsp + 0x398));
    0x0040b017 mov rax, qword [rdi]                              |     rax = *(rdi);
    0x0040b01a call qword [rax + 0x18]                           |     uint64_t (*rax + 0x18)() ();
    0x0040b01d jmp 0x40af60                                      |     goto label_3;
    0x0040b022 cmp dword [rip + 0x50f3af], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040b029 je 0x40b03f                                       |         
    0x0040b02b mov edi, 0x91a328                                 |         
    0x0040b030 mov esi, 0x67bbc2                                 |         
    0x0040b035 mov edx, 0x3a                                     |         
    0x0040b03a call 0x5bcfd0                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "TESTING 'allocator' ACCESSOR\n============================\n", 0x3a);
                                                                 |     }
    0x0040b03f lea rdi, [rsp + 0xc0]                             |     
    0x0040b047 call 0x64a5e0                                     |     BloombergLP::bdlcc::SkipList_RandomLevelGenerator::SkipList_RandomLevelGenerator() (rsp + 0xc0);
    0x0040b04c mov dword [rsp + 0xc8], 0                         |     *((rsp + 0xc8)) = 0;
    0x0040b057 lea rbx, [rsp + 0xe0]                             |     rbx = rsp + 0xe0;
    0x0040b05f mov rdi, rbx                                      |     rdi = rbx;
    0x0040b062 xor esi, esi                                      |     esi = 0;
    0x0040b064 call 0x404cc0                                     |     pthread_mutex_init ();
    0x0040b069 mov dword [rsp + 0x108], 0                        |     *((rsp + 0x108)) = 0;
    0x0040b074 mov qword [rsp + 0x110], 0                        |     *((rsp + 0x110)) = 0;
    0x0040b080 mov rdx, qword [rip + 0x50fab9]                   |     rdx = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040b087 test rdx, rdx                                     |     
                                                                 |     if (rdx == 0) {
    0x0040b08a jne 0x40b094                                      |         
    0x0040b08c call 0x64efc0                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x0040b091 mov rdx, rax                                      |         
                                                                 |     }
    0x0040b094 mov qword [rsp + 0x118], rdx                      |     *((rsp + 0x118)) = rdx;
    0x0040b09c movaps xmm0, xmmword [rip + 0x26fbfd]             |     xmm0 = *(0x0067aca0);
    0x0040b0a3 movaps xmmword [rsp + 0x1f0], xmm0                |     *((rsp + 0x1f0)) = xmm0;
    0x0040b0ab movaps xmm0, xmmword [rip + 0x26fbfe]             |     xmm0 = *(0x0067acb0);
    0x0040b0b2 movaps xmmword [rsp + 0x200], xmm0                |     *((rsp + 0x200)) = xmm0;
    0x0040b0ba movaps xmm0, xmmword [rip + 0x26fbff]             |     xmm0 = *(0x0067acc0);
    0x0040b0c1 movaps xmmword [rsp + 0x210], xmm0                |     *((rsp + 0x210)) = xmm0;
    0x0040b0c9 movaps xmm0, xmmword [rip + 0x26fc00]             |     xmm0 = *(0x0067acd0);
    0x0040b0d0 movaps xmmword [rsp + 0x220], xmm0                |     *((rsp + 0x220)) = xmm0;
    0x0040b0d8 movaps xmm0, xmmword [rip + 0x26fc01]             |     xmm0 = *(0x0067ace0);
    0x0040b0df movaps xmmword [rsp + 0x230], xmm0                |     *((rsp + 0x230)) = xmm0;
    0x0040b0e7 movaps xmm0, xmmword [rip + 0x26fc02]             |     xmm0 = *(0x0067acf0);
    0x0040b0ee movaps xmmword [rsp + 0x240], xmm0                |     *((rsp + 0x240)) = xmm0;
    0x0040b0f6 movaps xmm0, xmmword [rip + 0x26fc03]             |     xmm0 = *(0x0067ad00);
    0x0040b0fd movaps xmmword [rsp + 0x250], xmm0                |     *((rsp + 0x250)) = xmm0;
    0x0040b105 movapd xmm0, xmmword [rip + 0x26fc03]             |     __asm ("movapd xmm0, xmmword [0x0067ad10]");
    0x0040b10d movapd xmmword [rsp + 0x260], xmm0                |     __asm ("movapd xmmword [rsp + 0x260], xmm0");
    0x0040b116 lea rdi, [rsp + 0x1f0]                            |     
    0x0040b11e mov esi, 0x20                                     |     
    0x0040b123 call 0x64aae0                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::createPoolManager(int*,int,BloombergLP::bslma::Allocator*) (rsp + 0x1f0, 0x20, rax);
    0x0040b128 mov qword [rsp + 0x110], rax                      |     *((rsp + 0x110)) = rax;
    0x0040b130 mov rdi, rax                                      |     
    0x0040b133 mov esi, 0x1f                                     |     
    0x0040b138 call 0x64aa20                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (rax, 0x1f);
    0x0040b13d mov qword [rsp + 0xd0], rax                       |     *((rsp + 0xd0)) = rax;
    0x0040b145 mov rdi, qword [rsp + 0x110]                      |     
    0x0040b14d mov esi, 0x1f                                     |     
    0x0040b152 call 0x64aa20                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x110)), 0x1f);
    0x0040b157 mov qword [rsp + 0xd8], rax                       |     *((rsp + 0xd8)) = rax;
    0x0040b15f xor ecx, ecx                                      |     ecx = 0;
    0x0040b161 nop word cs:[rax + rax]                           |     
    0x0040b16b nop dword [rax + rax]                             |     
                                                                 |     do {
    0x0040b170 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x0040b178 mov qword [rax + rcx + 0x48], 0                   |         *((rax + rcx + 0x48)) = 0;
    0x0040b181 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x0040b189 mov rdx, qword [rsp + 0xd8]                       |         rdx = *((rsp + 0xd8));
    0x0040b191 mov qword [rax + rcx + 0x40], rdx                 |         *((rax + rcx + 0x40)) = rdx;
    0x0040b196 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x0040b19e mov rdx, qword [rsp + 0xd8]                       |         rdx = *((rsp + 0xd8));
    0x0040b1a6 mov qword [rdx + rcx + 0x48], rax                 |         *((rdx + rcx + 0x48)) = rax;
    0x0040b1ab mov rax, qword [rsp + 0xd8]                       |         rax = *((rsp + 0xd8));
    0x0040b1b3 mov qword [rax + rcx + 0x40], 0                   |         *((rax + rcx + 0x40)) = 0;
    0x0040b1bc add rcx, 0x10                                     |         rcx += 0x10;
    0x0040b1c0 cmp rcx, 0x200                                    |         
    0x0040b1c7 jne 0x40b170                                      |         
                                                                 |     } while (rcx != 0x200);
    0x0040b1c9 mov rax, qword [rip + 0x50f970]                   |     rax = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040b1d0 test rax, rax                                     |     
                                                                 |     if (rax == 0) {
    0x0040b1d3 jne 0x40b1da                                      |         
    0x0040b1d5 call 0x64efc0                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
                                                                 |     }
    0x0040b1da cmp rax, qword [rsp + 0x118]                      |     
                                                                 |     if (rax != *((rsp + 0x118))) {
    0x0040b1e2 je 0x40b20b                                       |         
    0x0040b1e4 call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040b1e9 mov rbx, rax                                      |         rbx = rax;
    0x0040b1ec mov rdi, rax                                      |         
    0x0040b1ef call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040b1f4 mov edi, 0x67bbfd                                 |         edi = "bslma::Default::defaultAllocator() == X.allocator()";
    0x0040b1f9 mov esi, 0x129b                                   |         esi = 0x129b;
    0x0040b1fe call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040b203 mov rdi, rbx                                      |         
    0x0040b206 call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040b20b lea rdi, [rsp + 0xc0]                             |     
    0x0040b213 call 0x454570                                     |     BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::~SkipList() (rsp + 0xc0);
    0x0040b218 lea rbx, [rsp + 0x1f0]                            |     rbx = rsp + 0x1f0;
    0x0040b220 mov esi, 0x67bc31                                 |     
    0x0040b225 mov rdi, rbx                                      |     
    0x0040b228 xor edx, edx                                      |     
    0x0040b22a call 0x64f2b0                                     |     BloombergLP::bslma::TestAllocator::TestAllocator(char const*,BloombergLP::bslma::Allocator*) (rbx, "supplied", 0);
    0x0040b22f lea rdi, [rsp + 0x440]                            |     
    0x0040b237 call 0x64a5e0                                     |     BloombergLP::bdlcc::SkipList_RandomLevelGenerator::SkipList_RandomLevelGenerator() (rsp + 0x440);
    0x0040b23c mov dword [rsp + 0x448], 0                        |     *((rsp + 0x448)) = 0;
    0x0040b247 lea rbp, [rsp + 0x460]                            |     rbp = rsp + 0x460;
    0x0040b24f mov rdi, rbp                                      |     rdi = rbp;
    0x0040b252 xor esi, esi                                      |     esi = 0;
    0x0040b254 call 0x404cc0                                     |     pthread_mutex_init ();
    0x0040b259 mov dword [rsp + 0x488], 0                        |     *((rsp + 0x488)) = 0;
    0x0040b264 mov qword [rsp + 0x490], 0                        |     *((rsp + 0x490)) = 0;
    0x0040b270 mov qword [rsp + 0x498], rbx                      |     *((rsp + 0x498)) = rbx;
    0x0040b278 movaps xmm0, xmmword [rip + 0x26fa21]             |     xmm0 = *(0x0067aca0);
    0x0040b27f movaps xmmword [rsp + 0xc0], xmm0                 |     *((rsp + 0xc0)) = xmm0;
    0x0040b287 movaps xmm0, xmmword [rip + 0x26fa22]             |     xmm0 = *(0x0067acb0);
    0x0040b28e movaps xmmword [rsp + 0xd0], xmm0                 |     *((rsp + 0xd0)) = xmm0;
    0x0040b296 movaps xmm0, xmmword [rip + 0x26fa23]             |     xmm0 = *(0x0067acc0);
    0x0040b29d movaps xmmword [rsp + 0xe0], xmm0                 |     *((rsp + 0xe0)) = xmm0;
    0x0040b2a5 movaps xmm0, xmmword [rip + 0x26fa24]             |     xmm0 = *(0x0067acd0);
    0x0040b2ac movaps xmmword [rsp + 0xf0], xmm0                 |     *((rsp + 0xf0)) = xmm0;
    0x0040b2b4 movaps xmm0, xmmword [rip + 0x26fa25]             |     xmm0 = *(0x0067ace0);
    0x0040b2bb movaps xmmword [rsp + 0x100], xmm0                |     *((rsp + 0x100)) = xmm0;
    0x0040b2c3 movaps xmm0, xmmword [rip + 0x26fa26]             |     xmm0 = *(0x0067acf0);
    0x0040b2ca movaps xmmword [rsp + 0x110], xmm0                |     *((rsp + 0x110)) = xmm0;
    0x0040b2d2 movaps xmm0, xmmword [rip + 0x26fa27]             |     xmm0 = *(0x0067ad00);
    0x0040b2d9 movaps xmmword [rsp + 0x120], xmm0                |     *((rsp + 0x120)) = xmm0;
    0x0040b2e1 movapd xmm0, xmmword [rip + 0x26fa27]             |     __asm ("movapd xmm0, xmmword [0x0067ad10]");
    0x0040b2e9 movapd xmmword [rsp + 0x130], xmm0                |     __asm ("movapd xmmword [rsp + 0x130], xmm0");
    0x0040b2f2 lea rdi, [rsp + 0xc0]                             |     
    0x0040b2fa mov esi, 0x20                                     |     
    0x0040b2ff mov rdx, rbx                                      |     
    0x0040b302 call 0x64aae0                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::createPoolManager(int*,int,BloombergLP::bslma::Allocator*) (rsp + 0xc0, 0x20, rbx);
    0x0040b307 mov qword [rsp + 0x490], rax                      |     *((rsp + 0x490)) = rax;
    0x0040b30f mov rdi, rax                                      |     
    0x0040b312 mov esi, 0x1f                                     |     
    0x0040b317 call 0x64aa20                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (rax, 0x1f);
    0x0040b31c mov qword [rsp + 0x450], rax                      |     *((rsp + 0x450)) = rax;
    0x0040b324 mov rdi, qword [rsp + 0x490]                      |     
    0x0040b32c mov esi, 0x1f                                     |     
    0x0040b331 call 0x64aa20                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x490)), 0x1f);
    0x0040b336 mov qword [rsp + 0x458], rax                      |     *((rsp + 0x458)) = rax;
    0x0040b33e xor ecx, ecx                                      |     ecx = 0;
                                                                 |     do {
    0x0040b340 mov rax, qword [rsp + 0x450]                      |         rax = *((rsp + 0x450));
    0x0040b348 mov qword [rax + rcx + 0x48], 0                   |         *((rax + rcx + 0x48)) = 0;
    0x0040b351 mov rax, qword [rsp + 0x450]                      |         rax = *((rsp + 0x450));
    0x0040b359 mov rdx, qword [rsp + 0x458]                      |         rdx = *((rsp + 0x458));
    0x0040b361 mov qword [rax + rcx + 0x40], rdx                 |         *((rax + rcx + 0x40)) = rdx;
    0x0040b366 mov rax, qword [rsp + 0x450]                      |         rax = *((rsp + 0x450));
    0x0040b36e mov rdx, qword [rsp + 0x458]                      |         rdx = *((rsp + 0x458));
    0x0040b376 mov qword [rdx + rcx + 0x48], rax                 |         *((rdx + rcx + 0x48)) = rax;
    0x0040b37b mov rax, qword [rsp + 0x458]                      |         rax = *((rsp + 0x458));
    0x0040b383 mov qword [rax + rcx + 0x40], 0                   |         *((rax + rcx + 0x40)) = 0;
    0x0040b38c add rcx, 0x10                                     |         rcx += 0x10;
    0x0040b390 cmp rcx, 0x200                                    |         
    0x0040b397 jne 0x40b340                                      |         
                                                                 |     } while (rcx != 0x200);
    0x0040b399 cmp rbx, qword [rsp + 0x498]                      |     
                                                                 |     if (rbx != *((rsp + 0x498))) {
    0x0040b3a1 je 0x40b3ca                                       |         
    0x0040b3a3 call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040b3a8 mov rbx, rax                                      |         rbx = rax;
    0x0040b3ab mov rdi, rax                                      |         
    0x0040b3ae call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040b3b3 mov edi, 0x67bc3a                                 |         edi = "&oa == X.allocator()";
    0x0040b3b8 mov esi, 0x12a2                                   |         esi = 0x12a2;
    0x0040b3bd call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040b3c2 mov rdi, rbx                                      |         
    0x0040b3c5 call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040b3ca lea rdi, [rsp + 0x440]                            |     
    0x0040b3d2 call 0x454570                                     |     BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::~SkipList() (rsp + 0x440);
    0x0040b3d7 jmp 0x40da97                                      |     void (*0x40da97)() ();
    0x0040b3dc cmp dword [rip + 0x50eff5], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040b3e3 je 0x40b3f9                                       |         
    0x0040b3e5 mov edi, 0x91a328                                 |         
    0x0040b3ea mov esi, 0x67bb37                                 |         
    0x0040b3ef mov edx, 0x22                                     |         
    0x0040b3f4 call 0x5bcfd0                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "REPRODUCE BUG FROM DRQS 144652915\n", 0x22);
                                                                 |     }
    0x0040b3f9 xor esi, esi                                      |     
    0x0040b3fb cmp dword [rip + 0x50efe2], 0                     |     
    0x0040b402 setne sil                                         |     sil = (*(obj.veryVeryVeryVerbose) != 0) ? 1 : 0;
    0x0040b406 lea r14, [rsp + 0xc0]                             |     r14 = rsp + 0xc0;
    0x0040b40e mov rdi, r14                                      |     
    0x0040b411 xor edx, edx                                      |     
    0x0040b413 call 0x64f1f0                                     |     BloombergLP::bslma::TestAllocator::TestAllocator(bool,BloombergLP::bslma::Allocator*) (r14, 0, 0);
    0x0040b418 lea rbx, [rsp + 0x370]                            |     rbx = rsp + 0x370;
    0x0040b420 mov rdi, rbx                                      |     
    0x0040b423 call 0x64a5e0                                     |     BloombergLP::bdlcc::SkipList_RandomLevelGenerator::SkipList_RandomLevelGenerator() (rbx);
    0x0040b428 mov dword [rsp + 0x378], 0                        |     *((rsp + 0x378)) = 0;
    0x0040b433 lea rdi, [rsp + 0x390]                            |     rdi = rsp + 0x390;
    0x0040b43b xor esi, esi                                      |     esi = 0;
    0x0040b43d call 0x404cc0                                     |     pthread_mutex_init ();
    0x0040b442 mov dword [rsp + 0x3b8], 0                        |     *((rsp + 0x3b8)) = 0;
    0x0040b44d mov qword [rsp + 0x3c0], 0                        |     *((rsp + 0x3c0)) = 0;
    0x0040b459 mov qword [rsp + 0x3c8], r14                      |     *((rsp + 0x3c8)) = r14;
    0x0040b461 movaps xmm0, xmmword [rip + 0x26f7c8]             |     xmm0 = *(0x0067ac30);
    0x0040b468 movaps xmmword [rsp + 0x1f0], xmm0                |     *((rsp + 0x1f0)) = xmm0;
    0x0040b470 movaps xmm0, xmmword [rip + 0x26f7c9]             |     xmm0 = *(0x0067ac40);
    0x0040b477 movaps xmmword [rsp + 0x200], xmm0                |     *((rsp + 0x200)) = xmm0;
    0x0040b47f movaps xmm0, xmmword [rip + 0x26f7ca]             |     xmm0 = *(0x0067ac50);
    0x0040b486 movaps xmmword [rsp + 0x210], xmm0                |     *((rsp + 0x210)) = xmm0;
    0x0040b48e movaps xmm0, xmmword [rip + 0x26f7cb]             |     xmm0 = *(0x0067ac60);
    0x0040b495 movaps xmmword [rsp + 0x220], xmm0                |     *((rsp + 0x220)) = xmm0;
    0x0040b49d movaps xmm0, xmmword [rip + 0x26f7cc]             |     xmm0 = *(0x0067ac70);
    0x0040b4a4 movaps xmmword [rsp + 0x230], xmm0                |     *((rsp + 0x230)) = xmm0;
    0x0040b4ac movaps xmm0, xmmword [rip + 0x26f7cd]             |     xmm0 = *(0x0067ac80);
    0x0040b4b3 movaps xmmword [rsp + 0x240], xmm0                |     *((rsp + 0x240)) = xmm0;
    0x0040b4bb movaps xmm0, xmmword [rip + 0x26f96e]             |     xmm0 = *(0x0067ae30);
    0x0040b4c2 movaps xmmword [rsp + 0x250], xmm0                |     *((rsp + 0x250)) = xmm0;
    0x0040b4ca movapd xmm0, xmmword [rip + 0x26f96e]             |     __asm ("movapd xmm0, xmmword [0x0067ae40]");
    0x0040b4d2 movapd xmmword [rsp + 0x260], xmm0                |     __asm ("movapd xmmword [rsp + 0x260], xmm0");
    0x0040b4db lea rdi, [rsp + 0x1f0]                            |     
    0x0040b4e3 mov esi, 0x20                                     |     
    0x0040b4e8 mov rdx, r14                                      |     
    0x0040b4eb call 0x64aae0                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::createPoolManager(int*,int,BloombergLP::bslma::Allocator*) (rsp + 0x1f0, 0x20, r14);
    0x0040b4f0 mov qword [rsp + 0x3c0], rax                      |     *((rsp + 0x3c0)) = rax;
    0x0040b4f8 mov rdi, rax                                      |     
    0x0040b4fb mov esi, 0x1f                                     |     
    0x0040b500 call 0x64aa20                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (rax, 0x1f);
    0x0040b505 mov qword [rsp + 0x380], rax                      |     *((rsp + 0x380)) = rax;
    0x0040b50d mov rdi, qword [rsp + 0x3c0]                      |     
    0x0040b515 mov esi, 0x1f                                     |     
    0x0040b51a call 0x64aa20                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x3c0)), 0x1f);
    0x0040b51f mov qword [rsp + 0x388], rax                      |     *((rsp + 0x388)) = rax;
    0x0040b527 xor ecx, ecx                                      |     ecx = 0;
    0x0040b529 nop dword [rax]                                   |     
                                                                 |     do {
    0x0040b530 mov rax, qword [rsp + 0x380]                      |         rax = *((rsp + 0x380));
    0x0040b538 mov qword [rax + rcx + 0xa0], 0                   |         *((rax + rcx + 0xa0)) = 0;
    0x0040b544 mov rax, qword [rsp + 0x380]                      |         rax = *((rsp + 0x380));
    0x0040b54c mov rdx, qword [rsp + 0x388]                      |         rdx = *((rsp + 0x388));
    0x0040b554 mov qword [rax + rcx + 0x98], rdx                 |         *((rax + rcx + 0x98)) = rdx;
    0x0040b55c mov rax, qword [rsp + 0x380]                      |         rax = *((rsp + 0x380));
    0x0040b564 mov rdx, qword [rsp + 0x388]                      |         rdx = *((rsp + 0x388));
    0x0040b56c mov qword [rdx + rcx + 0xa0], rax                 |         *((rdx + rcx + 0xa0)) = rax;
    0x0040b574 mov rax, qword [rsp + 0x388]                      |         rax = *((rsp + 0x388));
    0x0040b57c mov qword [rax + rcx + 0x98], 0                   |         *((rax + rcx + 0x98)) = 0;
    0x0040b588 add rcx, 0x10                                     |         rcx += 0x10;
    0x0040b58c cmp rcx, 0x200                                    |         
    0x0040b593 jne 0x40b530                                      |         
                                                                 |     } while (rcx != 0x200);
    0x0040b595 mov qword [rip + 0x50ee7c], rbx                   |     *(obj.SKIPLIST_TEST_CASE_DRQS_144652915::g_skipList_p) = rbx;
    0x0040b59c call 0x6504b0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040b5a1 mov rbx, rax                                      |     rbx = rax;
    0x0040b5a4 mov rdi, rax                                      |     
    0x0040b5a7 call 0x650160                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040b5ac mov edi, 0x91a328                                 |     
    0x0040b5b1 mov esi, 0x67bb5a                                 |     
    0x0040b5b6 mov edx, 0xd                                      |     
    0x0040b5bb call 0x5bcfd0                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "numThreads = ", 0xd);
    0x0040b5c0 mov esi, dword [rip + 0x50bfe2]                   |     esi = SKIPLIST_TEST_CASE_DRQS_144652915::numThreads;
    0x0040b5c6 mov rdi, rax                                      |     rdi = rax;
    0x0040b5c9 call 0x405010                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040b5ce mov esi, 0x67c275                                 |     
    0x0040b5d3 mov edx, 2                                        |     
    0x0040b5d8 mov rdi, rax                                      |     
    0x0040b5db call 0x5bcfd0                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67c275, 2);
    0x0040b5e0 mov rdi, rax                                      |     rdi = rax;
    0x0040b5e3 call 0x405040                                     |     std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040b5e8 mov rdi, rbx                                      |     
    0x0040b5eb call 0x6502b0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040b5f0 call 0x6504b0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040b5f5 mov r15, rax                                      |     r15 = rax;
    0x0040b5f8 mov rdi, rax                                      |     
    0x0040b5fb call 0x650160                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040b600 mov edi, 0x91a328                                 |     
    0x0040b605 mov esi, 0x67bb68                                 |     
    0x0040b60a mov edx, 0x14                                     |     
    0x0040b60f call 0x5bcfd0                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "numNodesPerThread = ", 0x14);
    0x0040b614 mov esi, dword [rip + 0x50bf92]                   |     esi = SKIPLIST_TEST_CASE_DRQS_144652915::numNodesPerThread;
    0x0040b61a mov rdi, rax                                      |     rdi = rax;
    0x0040b61d call 0x405010                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040b622 mov rbp, rax                                      |     
    0x0040b625 mov rax, qword [rax]                              |     rax = *(rax);
    0x0040b628 mov rsi, qword [rax - 0x18]                       |     rsi = *((rax - 0x18));
    0x0040b62c add rsi, rbp                                      |     rsi += rbp;
    0x0040b62f lea rdi, [rsp + 0x1f0]                            |     rdi = rsp + 0x1f0;
    0x0040b637 call 0x405070                                     |     std::_1::ios_base::getloc()const ();
    0x0040b63c lea rdi, [rsp + 0x1f0]                            |     rdi = rsp + 0x1f0;
    0x0040b644 mov esi, 0x91a270                                 |     esi = obj.std::__1::ctype_char_::id;
    0x0040b649 call 0x4051a0                                     |     rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040b64e mov rcx, qword [rax]                              |     rcx = *(rax);
    0x0040b651 mov rdi, rax                                      |     rdi = rax;
    0x0040b654 mov esi, 0xa                                      |     esi = 0xa;
    0x0040b659 call qword [rcx + 0x38]                           |     eax = uint64_t (*rcx + 0x38)() ();
    0x0040b65c mov ebx, eax                                      |     ebx = eax;
    0x0040b65e lea rdi, [rsp + 0x1f0]                            |     rdi = rsp + 0x1f0;
    0x0040b666 call 0x405240                                     |     std::_1::locale::~locale() ();
    0x0040b66b movsx esi, bl                                     |     esi = (int32_t) bl;
    0x0040b66e mov rdi, rbp                                      |     rdi = rbp;
    0x0040b671 call 0x404e30                                     |     std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040b676 mov rdi, rbp                                      |     rdi = rbp;
    0x0040b679 call 0x405040                                     |     std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040b67e mov rdi, r15                                      |     
    0x0040b681 call 0x6502b0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r15);
    0x0040b686 mov qword [rsp + 0x1f0], 0x67bb7d                 |     *((rsp + 0x1f0)) = "Main Thread";
    0x0040b692 mov qword [rsp + 0x1f8], 0xb                      |     *((rsp + 0x1f8)) = 0xb;
    0x0040b69e lea rdi, [rsp + 0x1f0]                            |     
    0x0040b6a6 call 0x650e70                                     |     BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::setThreadName(BloombergLP::bslstl::StringRefImp<char>const&) (rsp + 0x1f0);
    0x0040b6ab xorpd xmm0, xmm0                                  |     __asm ("xorpd xmm0, xmm0");
    0x0040b6af movapd xmmword [rsp + 0x560], xmm0                |     __asm ("movapd xmmword [rsp + 0x560], xmm0");
    0x0040b6b8 mov qword [rsp + 0x570], 0                        |     *((rsp + 0x570)) = 0;
    0x0040b6c4 mov qword [rsp + 0x578], r14                      |     *((rsp + 0x578)) = r14;
    0x0040b6cc mov ebx, dword [rip + 0x50bed6]                   |     ebx = SKIPLIST_TEST_CASE_DRQS_144652915::numThreads;
    0x0040b6d2 lea rdi, [rsp + 0x440]                            |     rdi = rsp + 0x440;
    0x0040b6da xor esi, esi                                      |     esi = 0;
    0x0040b6dc call 0x404cc0                                     |     pthread_mutex_init ();
    0x0040b6e1 lea rdi, [rsp + 0x468]                            |     
    0x0040b6e9 xor esi, esi                                      |     
    0x0040b6eb call 0x650060                                     |     BloombergLP::bslmt::ConditionImpl<BloombergLP::bslmt::Platform::PosixThreads>::ConditionImpl(BloombergLP::bsls::SystemClockType::Enum) (rsp + 0x468, 0);
    0x0040b6f0 mov dword [rsp + 0x4a0], ebx                      |     *((rsp + 0x4a0)) = ebx;
    0x0040b6f7 xorpd xmm0, xmm0                                  |     __asm ("xorpd xmm0, xmm0");
    0x0040b6fb movupd xmmword [rsp + 0x4a4], xmm0                |     __asm ("movupd xmmword [rsp + 0x4a4], xmm0");
    0x0040b704 cmp dword [rip + 0x50be9d], 0                     |     
                                                                 |     if (*(obj.SKIPLIST_TEST_CASE_DRQS_144652915::numThreads) <= 0) {
    0x0040b70b jle 0x40c7f2                                      |         goto label_25;
                                                                 |     }
    0x0040b711 lea r15, [rsp + 0x1f8]                            |     r15 = rsp + 0x1f8;
    0x0040b719 xor r13d, r13d                                    |     r13d = 0;
    0x0040b71c lea rbp, [rsp + 0x10]                             |     rbp = rsp + 0x10;
    0x0040b721 lea r14, [rsp + 0x78]                             |     r14 = rsp + 0x78;
    0x0040b726 jmp 0x40b742                                      |     
                                                                 |     while (*((rsp + 0x48)) == 0x17) {
                                                                 | label_4:
    0x0040b730 inc r13d                                          |         r13d++;
    0x0040b733 mov eax, dword [rip + 0x50be6f]                   |         eax = SKIPLIST_TEST_CASE_DRQS_144652915::numThreads;
    0x0040b739 cmp r13d, eax                                     |         
                                                                 |         if (r13d >= eax) {
    0x0040b73c jge 0x40c7c2                                      |             goto label_26;
                                                                 |         }
    0x0040b742 mov rbx, rbp                                      |         rbx = rbp;
    0x0040b745 mov rdi, rbp                                      |         rdi = rbp;
    0x0040b748 lea rbp, [rsp + 0xc0]                             |         rbp = rsp + 0xc0;
    0x0040b750 mov rsi, rbp                                      |         
    0x0040b753 call 0x650600                                     |         BloombergLP::bslmt::ThreadAttributes::ThreadAttributes(BloombergLP::bslma::Allocator*) (rdi, rbp);
    0x0040b758 mov qword [rsp + 0x78], rbp                       |         *((rsp + 0x78)) = rbp;
    0x0040b75d mov qword [rsp + 0x278], 0x916cb8                 |         *((rsp + 0x278)) = 0x916cb8;
    0x0040b769 mov rdi, r15                                      |         
    0x0040b76c mov esi, 0x10                                     |         
    0x0040b771 mov rdx, r14                                      |         
    0x0040b774 call 0x5e9660                                     |         bsl::basic_stringbuf<char,std::_1::char_traits<char>,bsl::allocator<char>>::basic_stringbuf(unsignedint,bsl::allocator<char>const&) (r15, 0x10, r14);
    0x0040b779 mov qword [rsp + 0x1f0], 0x67f260                 |         *((rsp + sym.imp.std::__1::basic_ostream_char__std::__1::char_traits_char___::basic_ostream__)) = 0x67f260;
    0x0040b785 mov qword [rsp + 0x278], 0x67f288                 |         *((rsp + sym.imp.virtual_thunk_to_std::__1::basic_ostream_char__std::__1::char_traits_char___::basic_ostream__)) = 0x67f288;
    0x0040b791 lea rdi, [rsp + 0x278]                            |         rdi = rsp + 0x278;
    0x0040b799 mov rsi, r15                                      |         rsi = r15;
    0x0040b79c call 0x404cd0                                     |         std::_1::ios_base::init(void*) ();
    0x0040b7a1 mov qword [rsp + 0x300], 0                        |         *((rsp + 0x300)) = 0;
    0x0040b7ad mov dword [rsp + 0x308], 0xffffffff               |         *((rsp + 0x308)) = 0xffffffff;
    0x0040b7b8 mov qword [rsp + 0x1f0], 0x67f1f0                 |         *((rsp + sym.bsl::basic_ostringstream_char__std::__1::char_traits_char___bsl::allocator_char___::basic_ostringstream__)) = 0x67f1f0;
    0x0040b7c4 mov qword [rsp + 0x278], 0x67f218                 |         *((rsp + method.virtual_thunk_to_bsl::basic_ostringstream_char__std::__1::char_traits_char___bsl::allocator_char___.basic_ostringstream__)) = 0x67f218;
    0x0040b7d0 mov esi, 0x67bb89                                 |         
    0x0040b7d5 mov edx, 7                                        |         
    0x0040b7da lea rdi, [rsp + 0x1f0]                            |         
    0x0040b7e2 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rsp + 0x1f0, "Thread ", 7);
    0x0040b7e7 mov rdi, rax                                      |         rdi = rax;
    0x0040b7ea mov esi, r13d                                     |         esi = r13d;
    0x0040b7ed call 0x405010                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040b7f2 mov rdi, r14                                      |         
    0x0040b7f5 mov rsi, r15                                      |         
    0x0040b7f8 call 0x5e9750                                     |         bsl::basic_stringbuf<char,std::_1::char_traits<char>,bsl::allocator<char>>::str()const (r14, r15);
    0x0040b7fd cmp qword [rsp + 0x98], 0x17                      |         
    0x0040b806 mov rsi, r14                                      |         rsi = r14;
                                                                 |         if (*((rsp + 0x98)) != 0x17) {
    0x0040b809 je 0x40b810                                       |             
    0x0040b80b mov rsi, qword [rsp + 0x78]                       |             
                                                                 |         }
    0x0040b810 mov rdx, qword [rsp + 0x90]                       |         
    0x0040b818 mov rbp, qword [rsp + 0x40]                       |         rbp = *((rsp + 0x40));
    0x0040b81d mov qword [rsp + 0x40], 0                         |         *((rsp + 0x40)) = 0;
    0x0040b826 mov ecx, 0x67c868                                 |         
    0x0040b82b lea rdi, [rsp + 0x28]                             |         
    0x0040b830 call 0x654130                                     |         bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rsp + 0x28, *((rsp + 0x78)), *((rsp + 0x90)), "string<>::operator=(basic_string_view&): string too long");
    0x0040b835 cmp qword [rsp + 0x98], 0x17                      |         
                                                                 |         if (*((rsp + 0x98)) != 0x17) {
    0x0040b83e je 0x40b853                                       |             
    0x0040b840 mov rsi, qword [rsp + 0x78]                       |             rsi = *((rsp + 0x78));
    0x0040b845 mov rdi, qword [rsp + 0xa0]                       |             rdi = *((rsp + 0xa0));
    0x0040b84d mov rax, qword [rdi]                              |             rax = *(rdi);
    0x0040b850 call qword [rax + 0x18]                           |             uint64_t (*rax + 0x18)() ();
                                                                 |         }
    0x0040b853 mov qword [rsp + 0x78], 0x4059e0                  |         *((rsp + 0x78)) = method.SKIPLIST_TEST_CASE_DRQS_144652915.addNodes_BloombergLP::bslmt::Barrier_;
    0x0040b85c lea rax, [rsp + 0x440]                            |         rax = rsp + 0x440;
    0x0040b864 mov qword [rsp + 0x80], rax                       |         *((rsp + 0x80)) = rax;
    0x0040b86c mov rax, qword [rip + 0x50f2d5]                   |         rax = BloombergLP::bslma::Default::s_globalAllocator;
    0x0040b873 test rax, rax                                     |         
    0x0040b876 mov rbp, rbx                                      |         
                                                                 |         if (rax == 0) {
    0x0040b879 jne 0x40b880                                      |             
    0x0040b87b call 0x64f090                                     |             rax = BloombergLP::bslma::NewDeleteAllocator::singleton() ();
                                                                 |         }
    0x0040b880 lea rdi, [rsp + 0x510]                            |         
    0x0040b888 mov rsi, rbp                                      |         
    0x0040b88b mov rdx, r14                                      |         
    0x0040b88e mov rcx, rax                                      |         
    0x0040b891 call 0x5e9860                                     |         eax = intBloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil,void(*)(BloombergLP::bslmt::Barrier*),BloombergLP::bdlf::Bind_BoundTuple1<BloombergLP::bslmt::Barrier*>>>(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil,void(*)(BloombergLP::bslmt::Barrier*),BloombergLP::bdlf::Bind_BoundTuple1<BloombergLP::bslmt::Barrier*>>const&,BloombergLP::bslma::Allocator*) (rsp + 0x510, rbp, r14, rax);
    0x0040b896 test eax, eax                                     |         
                                                                 |         if (eax != 0) {
    0x0040b898 je 0x40b8c1                                       |             
    0x0040b89a call 0x6504b0                                     |             rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040b89f mov r12, rax                                      |             r12 = rax;
    0x0040b8a2 mov rdi, rax                                      |             
    0x0040b8a5 call 0x650160                                     |             BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040b8aa mov edi, 0x67bb91                                 |             edi = "0 == rc";
    0x0040b8af mov esi, 0x1277                                   |             esi = 0x1277;
    0x0040b8b4 call 0x405800                                     |             (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040b8b9 mov rdi, r12                                      |             
    0x0040b8bc call 0x6502b0                                     |             BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r12);
                                                                 |         }
    0x0040b8c1 lea rdi, [rsp + 0x560]                            |         
    0x0040b8c9 lea rsi, [rsp + 0x510]                            |         
    0x0040b8d1 call 0x669bf0                                     |         bsl::vector<unsigned long,bsl::allocator<unsigned long>>::push_back(unsigned longconst&) (rsp + 0x560, rsp + 0x510);
    0x0040b8d6 mov esi, 0x67f230                                 |         esi = 0x67f230;
    0x0040b8db lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040b8e3 call 0x4052b0                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::~basic_ostream() ();
    0x0040b8e8 mov qword [rsp + 0x1f8], 0x67f380                 |         *((rsp + method.bsl::basic_stringbuf_char__std::__1::char_traits_char___bsl::allocator_char___.virtual_0)) = 0x67f380;
    0x0040b8f4 cmp qword [rsp + 0x258], 0x17                     |         
                                                                 |         if (*((rsp + 0x258)) != 0x17) {
    0x0040b8fd je 0x40b915                                       |             
    0x0040b8ff mov rsi, qword [rsp + 0x238]                      |             rsi = *((rsp + 0x238));
    0x0040b907 mov rdi, qword [rsp + 0x260]                      |             rdi = *((rsp + 0x260));
    0x0040b90f mov rax, qword [rdi]                              |             rax = *(rdi);
    0x0040b912 call qword [rax + 0x18]                           |             uint64_t (*rax + 0x18)() ();
                                                                 |         }
    0x0040b915 mov qword [rsp + 0x250], 0xffffffffffffffff       |         *((rsp + 0x250)) = 0xffffffffffffffff;
    0x0040b921 mov rdi, r15                                      |         rdi = r15;
    0x0040b924 call 0x404ba0                                     |         std::_1::basic_streambuf<char,std::_1::char_traits<char>>::~basic_streambuf() ();
    0x0040b929 lea rdi, [rsp + 0x278]                            |         rdi = rsp + 0x278;
    0x0040b931 call 0x404aa0                                     |         std::_1::basic_ios<char,std::_1::char_traits<char>>::~basic_ios() ();
    0x0040b936 cmp qword [rsp + 0x48], 0x17                      |         
    0x0040b93c je 0x40b730                                       |         
                                                                 |     }
    0x0040b942 mov rsi, qword [rsp + 0x28]                       |     rsi = *((rsp + 0x28));
    0x0040b947 mov rdi, qword [rsp + 0x50]                       |     rdi = *((rsp + 0x50));
    0x0040b94c mov rax, qword [rdi]                              |     rax = *(rdi);
    0x0040b94f call qword [rax + 0x18]                           |     uint64_t (*rax + 0x18)() ();
    0x0040b952 jmp 0x40b730                                      |     goto label_4;
    0x0040b957 cmp dword [rip + 0x50ea7a], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040b95e je 0x40b974                                       |         
    0x0040b960 mov edi, 0x91a328                                 |         
    0x0040b965 mov esi, 0x67badc                                 |         
    0x0040b96a mov edx, 0x5a                                     |         
    0x0040b96f call 0x5bcfd0                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "REPRODUCE BUG / VERIFY FIX OF DRQS 145745492\n============================================\n", 0x5a);
                                                                 |     }
    0x0040b974 lea rdi, [rsp + 0xc0]                             |     
    0x0040b97c call 0x64a5e0                                     |     BloombergLP::bdlcc::SkipList_RandomLevelGenerator::SkipList_RandomLevelGenerator() (rsp + 0xc0);
    0x0040b981 mov dword [rsp + 0xc8], 0                         |     *((rsp + 0xc8)) = 0;
    0x0040b98c lea rbx, [rsp + 0xe0]                             |     rbx = rsp + 0xe0;
    0x0040b994 mov rdi, rbx                                      |     rdi = rbx;
    0x0040b997 xor esi, esi                                      |     esi = 0;
    0x0040b999 call 0x404cc0                                     |     pthread_mutex_init ();
    0x0040b99e mov dword [rsp + 0x108], 0                        |     *((rsp + 0x108)) = 0;
    0x0040b9a9 mov qword [rsp + 0x110], 0                        |     *((rsp + 0x110)) = 0;
    0x0040b9b5 mov rdx, qword [rip + 0x50f184]                   |     rdx = BloombergLP::bslma::Default::s_defaultAllocator;
    0x0040b9bc test rdx, rdx                                     |     
                                                                 |     if (rdx == 0) {
    0x0040b9bf jne 0x40b9c9                                      |         
    0x0040b9c1 call 0x64efc0                                     |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x0040b9c6 mov rdx, rax                                      |         
                                                                 |     }
    0x0040b9c9 mov qword [rsp + 0x118], rdx                      |     *((rsp + 0x118)) = rdx;
    0x0040b9d1 movaps xmm0, xmmword [rip + 0x26f128]             |     xmm0 = " 0@P`p";
    0x0040b9d8 movaps xmmword [rsp + 0x1f0], xmm0                |     *((rsp + 0x1f0)) = xmm0;
    0x0040b9e0 movaps xmm0, xmmword [rip + 0x26f129]             |     xmm0 = *(0x0067ab10);
    0x0040b9e7 movaps xmmword [rsp + 0x200], xmm0                |     *((rsp + 0x200)) = xmm0;
    0x0040b9ef movaps xmm0, xmmword [rip + 0x26f12a]             |     xmm0 = *(0x0067ab20);
    0x0040b9f6 movaps xmmword [rsp + 0x210], xmm0                |     *((rsp + 0x210)) = xmm0;
    0x0040b9fe movaps xmm0, xmmword [rip + 0x26f12b]             |     xmm0 = *(0x0067ab30);
    0x0040ba05 movaps xmmword [rsp + 0x220], xmm0                |     *((rsp + 0x220)) = xmm0;
    0x0040ba0d movaps xmm0, xmmword [rip + 0x26f12c]             |     xmm0 = *(0x0067ab40);
    0x0040ba14 movaps xmmword [rsp + 0x230], xmm0                |     *((rsp + 0x230)) = xmm0;
    0x0040ba1c movaps xmm0, xmmword [rip + 0x26f12d]             |     xmm0 = *(0x0067ab50);
    0x0040ba23 movaps xmmword [rsp + 0x240], xmm0                |     *((rsp + 0x240)) = xmm0;
    0x0040ba2b movaps xmm0, xmmword [rip + 0x26f12e]             |     xmm0 = *(0x0067ab60);
    0x0040ba32 movaps xmmword [rsp + 0x250], xmm0                |     *((rsp + 0x250)) = xmm0;
    0x0040ba3a movapd xmm0, xmmword [rip + 0x26f12e]             |     __asm ("movapd xmm0, xmmword [0x0067ab70]");
    0x0040ba42 movapd xmmword [rsp + 0x260], xmm0                |     __asm ("movapd xmmword [rsp + 0x260], xmm0");
    0x0040ba4b lea rdi, [rsp + 0x1f0]                            |     
    0x0040ba53 mov esi, 0x20                                     |     
    0x0040ba58 call 0x64aae0                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::createPoolManager(int*,int,BloombergLP::bslma::Allocator*) (rsp + 0x1f0, 0x20, rax);
    0x0040ba5d mov qword [rsp + 0x110], rax                      |     *((rsp + 0x110)) = rax;
    0x0040ba65 mov rdi, rax                                      |     
    0x0040ba68 mov esi, 0x1f                                     |     
    0x0040ba6d call 0x64aa20                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (rax, 0x1f);
    0x0040ba72 mov qword [rsp + 0xd0], rax                       |     *((rsp + 0xd0)) = rax;
    0x0040ba7a mov rdi, qword [rsp + 0x110]                      |     
    0x0040ba82 mov esi, 0x1f                                     |     
    0x0040ba87 call 0x64aa20                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x110)), 0x1f);
    0x0040ba8c mov qword [rsp + 0xd8], rax                       |     *((rsp + 0xd8)) = rax;
    0x0040ba94 xor ecx, ecx                                      |     ecx = 0;
    0x0040ba96 nop word cs:[rax + rax]                           |     
                                                                 |     do {
    0x0040baa0 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x0040baa8 mov qword [rax + rcx + 0x18], 0                   |         *((rax + rcx + 0x18)) = 0;
    0x0040bab1 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x0040bab9 mov rdx, qword [rsp + 0xd8]                       |         rdx = *((rsp + 0xd8));
    0x0040bac1 mov qword [rax + rcx + 0x10], rdx                 |         *((rax + rcx + 0x10)) = rdx;
    0x0040bac6 mov rax, qword [rsp + 0xd0]                       |         rax = *((rsp + 0xd0));
    0x0040bace mov rdx, qword [rsp + 0xd8]                       |         rdx = *((rsp + 0xd8));
    0x0040bad6 mov qword [rdx + rcx + 0x18], rax                 |         *((rdx + rcx + 0x18)) = rax;
    0x0040badb mov rax, qword [rsp + 0xd8]                       |         rax = *((rsp + 0xd8));
    0x0040bae3 mov qword [rax + rcx + 0x10], 0                   |         *((rax + rcx + 0x10)) = 0;
    0x0040baec add rcx, 0x10                                     |         rcx += 0x10;
    0x0040baf0 cmp rcx, 0x200                                    |         
    0x0040baf7 jne 0x40baa0                                      |         
                                                                 |     } while (rcx != 0x200);
    0x0040baf9 mov rbp, qword [rsp + 0xd0]                       |     rbp = *((rsp + 0xd0));
    0x0040bb01 nop word cs:[rax + rax]                           |     
    0x0040bb0b nop dword [rax + rax]                             |     
                                                                 |     do {
    0x0040bb10 mov rbp, qword [rbp + 0x10]                       |         rbp = *((rbp + 0x10));
    0x0040bb14 cmp rbp, qword [rsp + 0xd8]                       |         
                                                                 |         if (rbp == *((rsp + 0xd8))) {
    0x0040bb1c je 0x40bc3c                                       |             goto label_27;
                                                                 |         }
    0x0040bb22 mov rdi, rbp                                      |         
    0x0040bb25 call 0x64a560                                     |         BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (rbp);
    0x0040bb2a jmp 0x40bb10                                      |         
                                                                 |     } while (1);
    0x0040bb2c cmp dword [rip + 0x50e8a5], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040bb33 je 0x40bb66                                       |         
    0x0040bb35 mov edi, 0x91a328                                 |         
    0x0040bb3a mov esi, 0x67ba2f                                 |         
    0x0040bb3f mov edx, 0x44                                     |         
    0x0040bb44 call 0x5bcfd0                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "THOROUGH SINGLE-THREADED ADD TEST\n=================================\n", 0x44);
    0x0040bb49 cmp dword [rip + 0x50e888], 0                     |         
                                                                 |         if (*(obj.verbose) == 0) {
    0x0040bb50 je 0x40bb66                                       |             goto label_28;
                                                                 |         }
    0x0040bb52 mov edi, 0x91a328                                 |         
    0x0040bb57 mov esi, 0x67ba74                                 |         
    0x0040bb5c mov edx, 0x39                                     |         
    0x0040bb61 call 0x5bcfd0                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "\ntestIndependentAddFunctions\n---------------------------\n", 0x39);
                                                                 |     }
                                                                 | label_28:
    0x0040bb66 call 0x43f430                                     |     TestDriver<signedchar,signedchar>::testIndependentAddFunctions() ();
    0x0040bb6b call 0x43fdc0                                     |     TestDriver<unsigned long,unsigned long>::testIndependentAddFunctions() ();
    0x0040bb70 call 0x440750                                     |     TestDriver<BloombergLP::bsltf::TemplateTestFacility_StubClass*,BloombergLP::bsltf::TemplateTestFacility_StubClass*>::testIndependentAddFunctions() ();
    0x0040bb75 call 0x4410e0                                     |     TestDriver<void(*)(),void(*)()>::testIndependentAddFunctions() ();
    0x0040bb7a call 0x441a70                                     |     TestDriver<BloombergLP::bsltf::EnumeratedTestType::Enum,BloombergLP::bsltf::EnumeratedTestType::Enum>::testIndependentAddFunctions() ();
    0x0040bb7f call 0x442400                                     |     TestDriver<BloombergLP::bsltf::UnionTestType,BloombergLP::bsltf::UnionTestType>::testIndependentAddFunctions() ();
    0x0040bb84 call 0x442da0                                     |     TestDriver<BloombergLP::bsltf::SimpleTestType,BloombergLP::bsltf::SimpleTestType>::testIndependentAddFunctions() ();
    0x0040bb89 call 0x4436b0                                     |     TestDriver<BloombergLP::bsltf::AllocTestType,BloombergLP::bsltf::AllocTestType>::testIndependentAddFunctions() ();
    0x0040bb8e call 0x443fc0                                     |     TestDriver<BloombergLP::bsltf::BitwiseCopyableTestType,BloombergLP::bsltf::BitwiseCopyableTestType>::testIndependentAddFunctions() ();
    0x0040bb93 call 0x4448d0                                     |     TestDriver<BloombergLP::bsltf::BitwiseMoveableTestType,BloombergLP::bsltf::BitwiseMoveableTestType>::testIndependentAddFunctions() ();
    0x0040bb98 call 0x4451e0                                     |     TestDriver<BloombergLP::bsltf::AllocBitwiseMoveableTestType,BloombergLP::bsltf::AllocBitwiseMoveableTestType>::testIndependentAddFunctions() ();
    0x0040bb9d call 0x445af0                                     |     TestDriver<BloombergLP::bsltf::MovableTestType,BloombergLP::bsltf::MovableTestType>::testIndependentAddFunctions() ();
    0x0040bba2 call 0x446400                                     |     TestDriver<BloombergLP::bsltf::MovableAllocTestType,BloombergLP::bsltf::MovableAllocTestType>::testIndependentAddFunctions() ();
    0x0040bba7 call 0x446d10                                     |     TestDriver<BloombergLP::bsltf::NonTypicalOverloadsTestType,BloombergLP::bsltf::NonTypicalOverloadsTestType>::testIndependentAddFunctions() ();
    0x0040bbac call 0x447620                                     |     TestDriver<int,int(BloombergLP::bsltf::TemplateTestFacility_StubClass::*)()>::testIndependentAddFunctions() ();
    0x0040bbb1 call 0x447fc0                                     |     TestDriver<int,BloombergLP::bsltf::AllocTestType>::testIndependentAddFunctions() ();
    0x0040bbb6 call 0x4488e0                                     |     TestDriver<int,BloombergLP::bsltf::MovableAllocTestType>::testIndependentAddFunctions() ();
    0x0040bbbb call 0x449200                                     |     TestDriver<int,BloombergLP::bsltf::SimpleTestType>::testIndependentAddFunctions() ();
    0x0040bbc0 cmp dword [rip + 0x50e811], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040bbc7 je 0x40bbdd                                       |         
    0x0040bbc9 mov edi, 0x91a328                                 |         
    0x0040bbce mov esi, 0x67baae                                 |         
    0x0040bbd3 mov edx, 0x2d                                     |         
    0x0040bbd8 call 0x5bcfd0                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "\ntestMultiAddFunctions\n---------------------\n", 0x2d);
                                                                 |     }
    0x0040bbdd call 0x449b20                                     |     TestDriver<signedchar,signedchar>::testMultiAddFunctions() ();
    0x0040bbe2 call 0x44a4d0                                     |     TestDriver<unsigned long,unsigned long>::testMultiAddFunctions() ();
    0x0040bbe7 call 0x44ae80                                     |     TestDriver<BloombergLP::bsltf::TemplateTestFacility_StubClass*,BloombergLP::bsltf::TemplateTestFacility_StubClass*>::testMultiAddFunctions() ();
    0x0040bbec call 0x44b830                                     |     TestDriver<void(*)(),void(*)()>::testMultiAddFunctions() ();
    0x0040bbf1 call 0x44c1e0                                     |     TestDriver<BloombergLP::bsltf::EnumeratedTestType::Enum,BloombergLP::bsltf::EnumeratedTestType::Enum>::testMultiAddFunctions() ();
    0x0040bbf6 call 0x44cb90                                     |     TestDriver<BloombergLP::bsltf::UnionTestType,BloombergLP::bsltf::UnionTestType>::testMultiAddFunctions() ();
    0x0040bbfb call 0x44d560                                     |     TestDriver<BloombergLP::bsltf::SimpleTestType,BloombergLP::bsltf::SimpleTestType>::testMultiAddFunctions() ();
    0x0040bc00 call 0x44dea0                                     |     TestDriver<BloombergLP::bsltf::AllocTestType,BloombergLP::bsltf::AllocTestType>::testMultiAddFunctions() ();
    0x0040bc05 call 0x44e7e0                                     |     TestDriver<BloombergLP::bsltf::BitwiseCopyableTestType,BloombergLP::bsltf::BitwiseCopyableTestType>::testMultiAddFunctions() ();
    0x0040bc0a call 0x44f120                                     |     TestDriver<BloombergLP::bsltf::BitwiseMoveableTestType,BloombergLP::bsltf::BitwiseMoveableTestType>::testMultiAddFunctions() ();
    0x0040bc0f call 0x44fa60                                     |     TestDriver<BloombergLP::bsltf::AllocBitwiseMoveableTestType,BloombergLP::bsltf::AllocBitwiseMoveableTestType>::testMultiAddFunctions() ();
    0x0040bc14 call 0x4503a0                                     |     TestDriver<BloombergLP::bsltf::MovableTestType,BloombergLP::bsltf::MovableTestType>::testMultiAddFunctions() ();
    0x0040bc19 call 0x450ce0                                     |     TestDriver<BloombergLP::bsltf::MovableAllocTestType,BloombergLP::bsltf::MovableAllocTestType>::testMultiAddFunctions() ();
    0x0040bc1e call 0x451620                                     |     TestDriver<BloombergLP::bsltf::NonTypicalOverloadsTestType,BloombergLP::bsltf::NonTypicalOverloadsTestType>::testMultiAddFunctions() ();
    0x0040bc23 call 0x451f60                                     |     TestDriver<int,int(BloombergLP::bsltf::TemplateTestFacility_StubClass::*)()>::testMultiAddFunctions() ();
    0x0040bc28 call 0x452920                                     |     TestDriver<int,BloombergLP::bsltf::AllocTestType>::testMultiAddFunctions() ();
    0x0040bc2d call 0x453270                                     |     TestDriver<int,BloombergLP::bsltf::MovableAllocTestType>::testMultiAddFunctions() ();
    0x0040bc32 call 0x453bc0                                     |     TestDriver<int,BloombergLP::bsltf::SimpleTestType>::testMultiAddFunctions() ();
    0x0040bc37 jmp 0x411d77                                      |     void (*0x411d77)() ();
                                                                 | label_27:
    0x0040bc3c mov rsi, qword [rsp + 0x110]                      |     
    0x0040bc44 mov rdi, qword [rsp + 0x118]                      |     
    0x0040bc4c call 0x64aba0                                     |     BloombergLP::bdlcc::SkipList_PoolUtil::deletePoolManager(BloombergLP::bslma::Allocator*,BloombergLP::bdlcc::SkipList_PoolManager*) (*((rsp + 0x118)), *((rsp + 0x110)));
    0x0040bc51 jmp 0x40e3dd                                      |     void (*0x40e3dd)() ();
                                                                 | label_13:
    0x0040bc56 mov rsi, qword [rsp + 0x490]                      |     
    0x0040bc5e mov rdi, qword [rsp + 0x498]                      |     
    0x0040bc66 call 0x64aba0                                     |     BloombergLP::bdlcc::SkipList_PoolUtil::deletePoolManager(BloombergLP::bslma::Allocator*,BloombergLP::bdlcc::SkipList_PoolManager*) (*((rsp + 0x498)), *((rsp + 0x490)));
    0x0040bc6b lea rdi, [rsp + 0x460]                            |     rdi = rsp + 0x460;
    0x0040bc73 call 0x650110                                     |     BloombergLP::bslmt::MutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::~MutexImpl() ();
    0x0040bc78 mov rax, qword [rsp + 0x218]                      |     rax = *((rsp + 0x218));
    0x0040bc80 test rax, rax                                     |     
                                                                 |     if (rax <= 0) {
    0x0040bc83 jg 0x40bcac                                       |         
    0x0040bc85 call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040bc8a mov rbx, rax                                      |         rbx = rax;
    0x0040bc8d mov rdi, rax                                      |         
    0x0040bc90 call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040bc95 mov edi, 0x67c388                                 |         edi = "0 < ta.numAllocations()";
    0x0040bc9a mov esi, 0x1599                                   |         esi = 0x1599;
    0x0040bc9f call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040bca4 mov rdi, rbx                                      |         
    0x0040bca7 call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040bcac mov rax, qword [rsp + 0x240]                      |     rax = *((rsp + 0x240));
    0x0040bcb4 test rax, rax                                     |     
                                                                 |     if (rax == 0) {
    0x0040bcb7 je 0x40da97                                       |         void (*0x40da97)() ();
                                                                 |     }
    0x0040bcbd call 0x6504b0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040bcc2 mov rbx, rax                                      |     rbx = rax;
    0x0040bcc5 mov rdi, rax                                      |     
    0x0040bcc8 call 0x650160                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040bccd mov edi, 0x67bde7                                 |     edi = "0 == ta.numBytesInUse()";
    0x0040bcd2 mov esi, 0x159a                                   |     esi = 0x159a;
    0x0040bcd7 call 0x405800                                     |     (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040bcdc mov rdi, rbx                                      |     
    0x0040bcdf call 0x6502b0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040bce4 jmp 0x40da97                                      |     void (*0x40da97)() ();
                                                                 | label_11:
    0x0040bce9 mov rdi, r14                                      |     rdi = r14;
    0x0040bcec call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x0040bcf1 call 0x64b230                                     |     rax = BloombergLP::bdlt::DatetimeImpUtil::epoch_1970_01_01() ();
    0x0040bcf6 mov rbx, rax                                      |     rbx = rax;
    0x0040bcf9 mov rax, qword [rip + 0x50dd60]                   |     rax = BloombergLP::bdlt::CurrentTime::s_currenttimeCallback_p;
    0x0040bd00 call rax                                          |     rax = void (*rax)() ();
    0x0040bd02 mov r14, rax                                      |     r14 = rax;
    0x0040bd05 mov ebp, edx                                      |     
    0x0040bd07 mov rbx, qword [rbx]                              |     rbx = *(rbx);
    0x0040bd0a test rbx, rbx                                     |     
                                                                 |     if (rbx >= 0) {
    0x0040bd0d jns 0x411fca                                      |         void (*0x411fca)() ();
                                                                 |     }
    0x0040bd13 and r13, rbx                                      |     r13 &= rbx;
    0x0040bd16 movabs rax, 0xffffffebe228a000                    |     rax = 0xffffffebe228a000;
    0x0040bd20 add r13, rax                                      |     r13 += rax;
    0x0040bd23 mov rax, rbx                                      |     rax = rbx;
    0x0040bd26 shr rax, 0x25                                     |     rax >>= 0x25;
    0x0040bd2a and eax, 0x3ffffff                                |     eax &= 0x3ffffff;
    0x0040bd2f movabs rdi, 0x141dd76000                          |     rdi = 0x141dd76000;
    0x0040bd39 imul rax, rdi                                     |     rax *= rdi;
    0x0040bd3d and r15, rbx                                      |     r15 &= rbx;
    0x0040bd40 xor edx, edx                                      |     edx = 0;
    0x0040bd42 mov ecx, 0xd693a400                               |     ecx = 0xd693a400;
    0x0040bd47 cmp r13, rcx                                      |     
                                                                 |     if (r13 >= rcx) {
    0x0040bd4a cmovae rdx, r15                                   |         rdx = r15;
                                                                 |     }
    0x0040bd4e add rdx, rax                                      |     rdx += rax;
    0x0040bd51 imul rax, r14, 0xf4240                            |     rax = r14 * 0xf4240;
    0x0040bd58 movsxd rcx, ebp                                   |     rcx = (int64_t) ebp;
    0x0040bd5b imul rcx, rcx, 0x10624dd3                         |     rcx *= 0x10624dd3;
    0x0040bd62 mov rsi, rcx                                      |     rsi = rcx;
    0x0040bd65 shr rsi, 0x3f                                     |     rsi >>= 0x3f;
    0x0040bd69 sar rcx, 0x26                                     |     rcx >>= 0x26;
    0x0040bd6d add ecx, esi                                      |     ecx += esi;
    0x0040bd6f movsxd rcx, ecx                                   |     rcx = (int64_t) ecx;
    0x0040bd72 add rcx, rax                                      |     rcx += rax;
    0x0040bd75 add rcx, rdx                                      |     rcx += rdx;
    0x0040bd78 mov rax, rcx                                      |     rax = rcx;
    0x0040bd7b movabs rdx, 0x32e73fb956a1b897                    |     rdx = 0x32e73fb956a1b897;
    0x0040bd85 mul rdx                                           |     rdx:rax = rax * rdx;
    0x0040bd88 shr rdx, 0x22                                     |     rdx >>= 0x22;
    0x0040bd8c mov rax, rdx                                      |     rax = rdx;
    0x0040bd8f shl rax, 0x25                                     |     rax <<= 0x25;
    0x0040bd93 imul rdx, rdi                                     |     rdx *= rdi;
    0x0040bd97 sub rcx, rdx                                      |     rcx -= rdx;
    0x0040bd9a or rcx, rax                                       |     rcx |= rax;
    0x0040bd9d movabs rax, 0x8000000000000000                    |     rax = 0x8000000000000000;
    0x0040bda7 or rcx, rax                                       |     rcx |= rax;
    0x0040bdaa mov qword [rsp + 0x78], rcx                       |     *((rsp + 0x78)) = rcx;
    0x0040bdaf cmp dword [rip + 0x50e626], 0                     |     
                                                                 |     if (*(obj.veryVerbose) != 0) {
    0x0040bdb6 je 0x40be36                                       |         
    0x0040bdb8 mov edi, 0x91a328                                 |         
    0x0040bdbd mov esi, 0x67c65c                                 |         
    0x0040bdc2 mov edx, 0xc                                      |         
    0x0040bdc7 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "Finish:     ", 0xc);
    0x0040bdcc lea rsi, [rsp + 0x78]                             |         
    0x0040bdd1 mov rdi, rax                                      |         
    0x0040bdd4 call 0x64b200                                     |         rax = BloombergLP::bdlt::operator << (std::_1::basic_ostream<char,std::_1::char_traits<char>>&,BloombergLP::bdlt::Datetimeconst&) (rax, rsp + 0x78);
    0x0040bdd9 mov rbx, rax                                      |         rbx = rax;
    0x0040bddc mov rax, qword [rax]                              |         rax = *(rax);
    0x0040bddf mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040bde3 add rsi, rbx                                      |         rsi += rbx;
    0x0040bde6 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040bdee call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040bdf3 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040bdfb mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040be00 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040be05 mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040be08 mov rdi, rax                                      |         rdi = rax;
    0x0040be0b mov esi, 0xa                                      |         esi = 0xa;
    0x0040be10 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040be13 mov ebp, eax                                      |         
    0x0040be15 lea rdi, [rsp + 0xc0]                             |         rdi = rsp + 0xc0;
    0x0040be1d call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040be22 movsx esi, bpl                                    |         esi = (int32_t) bpl;
    0x0040be26 mov rdi, rbx                                      |         rdi = rbx;
    0x0040be29 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040be2e mov rdi, rbx                                      |         rdi = rbx;
    0x0040be31 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x0040be36 mov rax, qword [rsp + 0x440]                      |     rax = *((rsp + 0x440));
    0x0040be3e mov rcx, qword [rsp + 0x448]                      |     rcx = *((rsp + 0x448));
    0x0040be46 sub rcx, rax                                      |     rcx -= rax;
    0x0040be49 cmp rcx, 0xc                                      |     
                                                                 |     if (rcx != 0xc) {
    0x0040be4d je 0x40be7e                                       |         
    0x0040be4f call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040be54 mov rbx, rax                                      |         rbx = rax;
    0x0040be57 mov rdi, rax                                      |         
    0x0040be5a call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040be5f mov edi, 0x67c669                                 |         edi = "3 == values.size()";
    0x0040be64 mov esi, 0x167a                                   |         esi = 0x167a;
    0x0040be69 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040be6e mov rdi, rbx                                      |         
    0x0040be71 call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040be76 mov rax, qword [rsp + 0x440]                      |         rax = *((rsp + 0x440));
                                                                 |     }
    0x0040be7e cmp dword [rax], 0                                |     
                                                                 |     if (*(rax) != 0) {
    0x0040be81 je 0x40beb2                                       |         
    0x0040be83 call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040be88 mov rbx, rax                                      |         rbx = rax;
    0x0040be8b mov rdi, rax                                      |         
    0x0040be8e call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040be93 mov edi, 0x67c67c                                 |         edi = "0 == values[0]";
    0x0040be98 mov esi, 0x167b                                   |         esi = 0x167b;
    0x0040be9d call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040bea2 mov rdi, rbx                                      |         
    0x0040bea5 call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040beaa mov rax, qword [rsp + 0x440]                      |         rax = *((rsp + 0x440));
                                                                 |     }
    0x0040beb2 cmp dword [rax + 4], 1                            |     
                                                                 |     if (*((rax + 4)) != 1) {
    0x0040beb6 je 0x40bee7                                       |         
    0x0040beb8 call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040bebd mov rbx, rax                                      |         rbx = rax;
    0x0040bec0 mov rdi, rax                                      |         
    0x0040bec3 call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040bec8 mov edi, 0x67c68b                                 |         edi = "1 == values[1]";
    0x0040becd mov esi, 0x167c                                   |         esi = 0x167c;
    0x0040bed2 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040bed7 mov rdi, rbx                                      |         
    0x0040beda call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040bedf mov rax, qword [rsp + 0x440]                      |         rax = *((rsp + 0x440));
                                                                 |     }
    0x0040bee7 cmp dword [rax + 8], 2                            |     
                                                                 |     if (*((rax + 8)) != 2) {
    0x0040beeb je 0x40bf14                                       |         
    0x0040beed call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040bef2 mov rbx, rax                                      |         rbx = rax;
    0x0040bef5 mov rdi, rax                                      |         
    0x0040bef8 call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040befd mov edi, 0x67c69a                                 |         edi = "2 == values[2]";
    0x0040bf02 mov esi, 0x167d                                   |         esi = 0x167d;
    0x0040bf07 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040bf0c mov rdi, rbx                                      |         
    0x0040bf0f call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040bf14 lea rdi, [rsp + 0xc0]                             |     
    0x0040bf1c lea rsi, [rsp + 0x78]                             |     
    0x0040bf21 lea rdx, [rsp + 0x370]                            |     
    0x0040bf29 call 0x5b9e00                                     |     BloombergLP::bdlt::operator-(BloombergLP::bdlt::Datetimeconst&,BloombergLP::bdlt::Datetimeconst&) (rsp + 0xc0, rsp + 0x78, rsp + 0x370);
    0x0040bf2e mov rsi, qword [rsp + 0xc8]                       |     rsi = *((rsp + 0xc8));
    0x0040bf36 movabs rcx, 0x431bde82d7b634db                    |     rcx = 0x431bde82d7b634db;
    0x0040bf40 mov rax, rsi                                      |     rax = rsi;
    0x0040bf43 imul rcx                                          |     rdx:rax = rax * rcx;
    0x0040bf46 mov rcx, rdx                                      |     rcx = rdx;
    0x0040bf49 movsxd rbp, dword [rsp + 0xc0]                    |     rbp = *((rsp + 0xc0));
    0x0040bf51 movabs rbx, 0x20c49ba5e353f7cf                    |     rbx = 0x20c49ba5e353f7cf;
    0x0040bf5b mov rax, rsi                                      |     rax = rsi;
    0x0040bf5e imul rbx                                          |     rdx:rax = rax * rbx;
    0x0040bf61 mov rdi, rdx                                      |     rdi = rdx;
    0x0040bf64 imul rbp, rbp, 0x15180                            |     rbp *= 0x15180;
    0x0040bf6b mov rax, rdx                                      |     rax = rdx;
    0x0040bf6e shr rax, 0x3f                                     |     rax >>= 0x3f;
    0x0040bf72 sar rdi, 7                                        |     rdi >>= 7;
    0x0040bf76 add rdi, rax                                      |     rdi += rax;
    0x0040bf79 mov rax, rdi                                      |     rax = rdi;
    0x0040bf7c imul rbx                                          |     rdx:rax = rax * rbx;
    0x0040bf7f mov rax, rcx                                      |     rax = rcx;
    0x0040bf82 shr rax, 0x3f                                     |     rax >>= 0x3f;
    0x0040bf86 sar rcx, 0x12                                     |     rcx >>= 0x12;
    0x0040bf8a add rcx, rax                                      |     rcx += rax;
    0x0040bf8d mov rax, rdx                                      |     rax = rdx;
    0x0040bf90 shr rax, 0x3f                                     |     rax >>= 0x3f;
    0x0040bf94 shr rdx, 7                                        |     rdx >>= 7;
    0x0040bf98 add edx, eax                                      |     edx += eax;
    0x0040bf9a imul eax, edx, 0x3e8                              |     eax = edx * 0x3e8;
    0x0040bfa0 imul edx, edi, 0x3e8                              |     edx = edi * 0x3e8;
    0x0040bfa6 sub edi, eax                                      |     edi -= eax;
    0x0040bfa8 imul edi, edi, 0xf4240                            |     edi *= 0xf4240;
    0x0040bfae sub esi, edx                                      |     esi -= edx;
    0x0040bfb0 imul eax, esi, 0x3e8                              |     eax = esi * 0x3e8;
    0x0040bfb6 add eax, edi                                      |     eax += edi;
    0x0040bfb8 add rcx, rbp                                      |     rcx += rbp;
                                                                 |     if (rcx <= 0) {
    0x0040bfbb jle 0x40daa9                                      |         void (*0x40daa9)() ();
                                                                 |     }
    0x0040bfc1 test eax, eax                                     |     
                                                                 |     if (eax >= 0) {
    0x0040bfc3 jns 0x40daba                                      |         void (*0x40daba)() ();
                                                                 |     }
    0x0040bfc9 dec rcx                                           |     rcx--;
    0x0040bfcc add eax, 0x3b9aca00                               |     eax += 0x3b9aca00;
    0x0040bfd1 jmp 0x40daba                                      |     void (*0x40daba)() ();
                                                                 | label_22:
    0x0040bfd6 xorpd xmm0, xmm0                                  |     __asm ("xorpd xmm0, xmm0");
    0x0040bfda movapd xmmword [rsp + 0x370], xmm0                |     __asm ("movapd xmmword [rsp + 0x370], xmm0");
    0x0040bfe3 mov dword [rsp + 0x78], 0xa                       |     *((rsp + 0x78)) = 0xa;
    0x0040bfeb lea rdi, [rsp + 0x10]                             |     
    0x0040bff0 lea rsi, [rsp + 0x370]                            |     
    0x0040bff8 lea rdx, [rsp + 0x78]                             |     
    0x0040bffd call 0x454dd0                                     |     eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findLowerBound(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 0x10, rsp + 0x370, rsp + 0x78);
    0x0040c002 test eax, eax                                     |     
                                                                 |     if (eax == 0) {
    0x0040c004 jne 0x40c02d                                      |         
    0x0040c006 call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040c00b mov rbx, rax                                      |         rbx = rax;
    0x0040c00e mov rdi, rax                                      |         
    0x0040c011 call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040c016 mov edi, 0x67c0f2                                 |         edi = "mX.findLowerBound(&h, 10)";
    0x0040c01b mov esi, 0x140b                                   |         esi = 0x140b;
    0x0040c020 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040c025 mov rdi, rbx                                      |         
    0x0040c028 call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040c02d mov dword [rsp + 0x78], 0xa                       |     *((rsp + 0x78)) = 0xa;
    0x0040c035 lea rdi, [rsp + 0x10]                             |     
    0x0040c03a lea rsi, [rsp + 0x370]                            |     
    0x0040c042 lea rdx, [rsp + 0x78]                             |     
    0x0040c047 call 0x454c40                                     |     eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findUpperBound(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 0x10, rsp + 0x370, rsp + 0x78);
    0x0040c04c test eax, eax                                     |     
                                                                 |     if (eax == 0) {
    0x0040c04e jne 0x40c077                                      |         
    0x0040c050 call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040c055 mov rbx, rax                                      |         rbx = rax;
    0x0040c058 mov rdi, rax                                      |         
    0x0040c05b call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040c060 mov edi, 0x67c10c                                 |         edi = "mX.findUpperBound(&h, 10)";
    0x0040c065 mov esi, 0x140c                                   |         esi = 0x140c;
    0x0040c06a call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040c06f mov rdi, rbx                                      |         
    0x0040c072 call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040c077 mov dword [rsp + 0x78], 0xffffffff                |     *((rsp + 0x78)) = 0xffffffff;
    0x0040c07f lea rdi, [rsp + 0x10]                             |     
    0x0040c084 lea rsi, [rsp + 0x370]                            |     
    0x0040c08c lea rdx, [rsp + 0x78]                             |     
    0x0040c091 call 0x454dd0                                     |     eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findLowerBound(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 0x10, rsp + 0x370, rsp + 0x78);
    0x0040c096 test eax, eax                                     |     
                                                                 |     if (eax != 0) {
    0x0040c098 je 0x40c0c1                                       |         
    0x0040c09a call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040c09f mov rbx, rax                                      |         rbx = rax;
    0x0040c0a2 mov rdi, rax                                      |         
    0x0040c0a5 call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040c0aa mov edi, 0x67c126                                 |         edi = "!mX.findLowerBound(&h,-1)";
    0x0040c0af mov esi, 0x1410                                   |         esi = 0x1410;
    0x0040c0b4 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040c0b9 mov rdi, rbx                                      |         
    0x0040c0bc call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040c0c1 mov rax, qword [rsp + 0x378]                      |     rax = *((rsp + 0x378));
    0x0040c0c9 cmp dword [rax + 0x38], 0                         |     
                                                                 |     if (*((rax + 0x38)) != 0) {
    0x0040c0cd je 0x40c0fe                                       |         
    0x0040c0cf call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040c0d4 mov rbx, rax                                      |         rbx = rax;
    0x0040c0d7 mov rdi, rax                                      |         
    0x0040c0da call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040c0df mov edi, 0x67bcc2                                 |         edi = "h.key() == 0";
    0x0040c0e4 mov esi, 0x1411                                   |         esi = 0x1411;
    0x0040c0e9 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040c0ee mov rdi, rbx                                      |         
    0x0040c0f1 call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040c0f6 mov rax, qword [rsp + 0x378]                      |         rax = *((rsp + 0x378));
                                                                 |     }
    0x0040c0fe cmp qword [rax + 0x20], 1                         |     
                                                                 |     if (*((rax + 0x20)) != 1) {
    0x0040c103 jne 0x40e5a0                                      |         void (*0x40e5a0)() ();
                                                                 |     }
    0x0040c109 cmp qword [rax + 0x28], 0x17                      |     
                                                                 |     if (*((rax + 0x28)) == 0x17) {
    0x0040c10e je 0x40e597                                       |         void (*0x40e597)() ();
                                                                 |     }
    0x0040c114 mov rax, qword [rax + 8]                          |     rax = *((rax + 8));
    0x0040c118 jmp 0x40e59b                                      |     void (*0x40e59b)() ();
                                                                 | label_24:
    0x0040c11d lea r15, [rsp + 0x10]                             |     r15 = rsp + 0x10;
    0x0040c122 mov rdi, r15                                      |     
    0x0040c125 call 0x5e9de0                                     |     rax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::popFrontImp() (r15);
    0x0040c12a mov r13, rax                                      |     r13 = rax;
    0x0040c12d test rax, rax                                     |     
                                                                 |     if (rax == 0) {
    0x0040c130 cmove r15, rax                                    |         r15 = rax;
                                                                 |     }
    0x0040c134 cmp dword [rax + 0x38], 0                         |     
                                                                 |     if (*((rax + 0x38)) != 0) {
    0x0040c138 je 0x40c161                                       |         
    0x0040c13a call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040c13f mov rbx, rax                                      |         rbx = rax;
    0x0040c142 mov rdi, rax                                      |         
    0x0040c145 call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040c14a mov edi, 0x67bcc2                                 |         edi = "h.key() == 0";
    0x0040c14f mov esi, 0x12cc                                   |         esi = 0x12cc;
    0x0040c154 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040c159 mov rdi, rbx                                      |         
    0x0040c15c call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040c161 cmp qword [r13 + 0x20], 1                         |     
                                                                 |     if (*((r13 + 0x20)) != 1) {
    0x0040c166 jne 0x40e3f8                                      |         void (*0x40e3f8)() ();
                                                                 |     }
    0x0040c16c cmp qword [r13 + 0x28], 0x17                      |     
                                                                 |     if (*((r13 + 0x28)) == 0x17) {
    0x0040c171 je 0x40e3ef                                       |         void (*0x40e3ef)() ();
                                                                 |     }
    0x0040c177 mov rax, qword [r13 + 8]                          |     rax = *((r13 + 8));
    0x0040c17b jmp 0x40e3f3                                      |     void (*0x40e3f3)() ();
                                                                 | label_23:
    0x0040c180 xorpd xmm0, xmm0                                  |     __asm ("xorpd xmm0, xmm0");
    0x0040c184 movapd xmmword [rsp + 0xc0], xmm0                 |     __asm ("movapd xmmword [rsp + 0xc0], xmm0");
    0x0040c18d mov dword [rsp + 0x78], 0xa                       |     *((rsp + 0x78)) = 0xa;
    0x0040c195 lea rdi, [rsp + 0x10]                             |     
    0x0040c19a lea rsi, [rsp + 0xc0]                             |     
    0x0040c1a2 lea rdx, [rsp + 0x78]                             |     
    0x0040c1a7 call 0x454940                                     |     eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findLowerBoundR(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 0x10, rsp + 0xc0, rsp + 0x78);
    0x0040c1ac test eax, eax                                     |     
                                                                 |     if (eax == 0) {
    0x0040c1ae jne 0x40c1d7                                      |         
    0x0040c1b0 call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040c1b5 mov rbx, rax                                      |         rbx = rax;
    0x0040c1b8 mov rdi, rax                                      |         
    0x0040c1bb call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040c1c0 mov edi, 0x67be24                                 |         edi = "mX.findLowerBoundR(&h, 10)";
    0x0040c1c5 mov esi, 0x1336                                   |         esi = 0x1336;
    0x0040c1ca call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040c1cf mov rdi, rbx                                      |         
    0x0040c1d2 call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040c1d7 mov dword [rsp + 0x78], 0xa                       |     *((rsp + 0x78)) = 0xa;
    0x0040c1df lea rdi, [rsp + 0x10]                             |     
    0x0040c1e4 lea rsi, [rsp + 0xc0]                             |     
    0x0040c1ec lea rdx, [rsp + 0x78]                             |     
    0x0040c1f1 call 0x454ac0                                     |     eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findUpperBoundR(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 0x10, rsp + 0xc0, rsp + 0x78);
    0x0040c1f6 test eax, eax                                     |     
                                                                 |     if (eax == 0) {
    0x0040c1f8 jne 0x40c221                                      |         
    0x0040c1fa call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040c1ff mov rbx, rax                                      |         rbx = rax;
    0x0040c202 mov rdi, rax                                      |         
    0x0040c205 call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040c20a mov edi, 0x67be3f                                 |         edi = "mX.findUpperBoundR(&h, 10)";
    0x0040c20f mov esi, 0x1337                                   |         esi = 0x1337;
    0x0040c214 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040c219 mov rdi, rbx                                      |         
    0x0040c21c call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040c221 mov dword [rsp + 0x78], 0xffffffff                |     *((rsp + 0x78)) = 0xffffffff;
    0x0040c229 lea rdi, [rsp + 0x10]                             |     
    0x0040c22e lea rsi, [rsp + 0xc0]                             |     
    0x0040c236 lea rdx, [rsp + 0x78]                             |     
    0x0040c23b call 0x454940                                     |     eax = BloombergLP::bdlcc::SkipList<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>::findLowerBoundR(BloombergLP::bdlcc::SkipListPairHandle<int,bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>>*,intconst&)const (rsp + 0x10, rsp + 0xc0, rsp + 0x78);
    0x0040c240 test eax, eax                                     |     
                                                                 |     if (eax != 0) {
    0x0040c242 je 0x40c26b                                       |         
    0x0040c244 call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040c249 mov rbx, rax                                      |         rbx = rax;
    0x0040c24c mov rdi, rax                                      |         
    0x0040c24f call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040c254 mov edi, 0x67be5a                                 |         edi = "!mX.findLowerBoundR(&h,-1)";
    0x0040c259 mov esi, 0x133b                                   |         esi = 0x133b;
    0x0040c25e call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040c263 mov rdi, rbx                                      |         
    0x0040c266 call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040c26b mov rax, qword [rsp + 0xc8]                       |     rax = *((rsp + 0xc8));
    0x0040c273 cmp dword [rax + 0x38], 0                         |     
                                                                 |     if (*((rax + 0x38)) != 0) {
    0x0040c277 je 0x40c2a8                                       |         
    0x0040c279 call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040c27e mov rbx, rax                                      |         rbx = rax;
    0x0040c281 mov rdi, rax                                      |         
    0x0040c284 call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040c289 mov edi, 0x67bcc2                                 |         edi = "h.key() == 0";
    0x0040c28e mov esi, 0x133c                                   |         esi = 0x133c;
    0x0040c293 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040c298 mov rdi, rbx                                      |         
    0x0040c29b call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040c2a0 mov rax, qword [rsp + 0xc8]                       |         rax = *((rsp + 0xc8));
                                                                 |     }
    0x0040c2a8 cmp qword [rax + 0x20], 1                         |     
                                                                 |     if (*((rax + 0x20)) != 1) {
    0x0040c2ad jne 0x40e676                                      |         void (*0x40e676)() ();
                                                                 |     }
    0x0040c2b3 cmp qword [rax + 0x28], 0x17                      |     
                                                                 |     if (*((rax + 0x28)) == 0x17) {
    0x0040c2b8 je 0x40e66d                                       |         void (*0x40e66d)() ();
                                                                 |     }
    0x0040c2be mov rax, qword [rax + 8]                          |     rax = *((rax + 8));
    0x0040c2c2 jmp 0x40e671                                      |     void (*0x40e671)() ();
                                                                 | label_20:
    0x0040c2c7 movsd xmm0, qword [rip + 0x26ee99]                |     xmm0 = *(0x0067b168);
    0x0040c2cf movsd xmm1, qword [rip + 0x26ee99]                |     xmm1 = *(0x0067b170);
    0x0040c2d7 movsd qword [rsp + 0x70], xmm1                    |     *((rsp + 0x70)) = xmm1;
    0x0040c2dd xor r12d, r12d                                    |     r12d = 0;
    0x0040c2e0 mov r15d, 0xfffffefb                              |     r15d = 0xfffffefb;
    0x0040c2e6 jmp 0x40c321                                      |     
                                                                 |     while (ecx >= 0) {
                                                                 | label_5:
    0x0040c2f0 movsd xmm1, qword [rsp + 0x1e0]                   |         xmm1 = *((rsp + 0x1e0));
    0x0040c2f9 mulsd xmm1, qword [rip + 0x26ee8f]                |         __asm ("mulsd xmm1, qword [0x0067b190]");
    0x0040c301 inc r12                                           |         r12++;
    0x0040c304 movsd xmm0, qword [rsp]                           |         xmm0 = *(rsp);
    0x0040c309 mulsd xmm0, qword [rip + 0x26ee87]                |         __asm ("mulsd xmm0, qword [0x0067b198]");
    0x0040c311 movsd qword [rsp + 0x70], xmm1                    |         *((rsp + 0x70)) = xmm1;
    0x0040c317 cmp r12, 0x20                                     |         
                                                                 |         if (r12 == 0x20) {
    0x0040c31b je 0x40c782                                       |             goto label_29;
                                                                 |         }
    0x0040c321 mov r14d, dword [rsp + r12*4 + 0x1f0]             |         r14d = *((rsp + r12*4 + 0x1f0));
    0x0040c329 xorps xmm4, xmm4                                  |         __asm ("xorps xmm4, xmm4");
    0x0040c32c cvtsi2sd xmm4, r14d                               |         __asm ("cvtsi2sd xmm4, r14d");
    0x0040c331 movapd xmm3, xmm0                                 |         __asm ("movapd xmm3, xmm0");
    0x0040c335 movapd xmm0, xmm4                                 |         __asm ("movapd xmm0, xmm4");
    0x0040c339 subsd xmm0, xmm3                                  |         __asm ("subsd xmm0, xmm3");
    0x0040c33d movapd xmm1, xmm0                                 |         __asm ("movapd xmm1, xmm0");
    0x0040c341 xorpd xmm1, xmmword [rip + 0x26ead7]              |         __asm ("xorpd xmm1, xmmword [0x0067ae20]");
    0x0040c349 movapd xmm2, xmm0                                 |         __asm ("movapd xmm2, xmm0");
    0x0040c34d cmpltsd xmm2, qword [0x67b1a0]                    |         __asm ("cmpltsd xmm2, qword [0x67b1a0]");
    0x0040c357 andpd xmm1, xmm2                                  |         __asm ("andpd xmm1, xmm2");
    0x0040c35b andnpd xmm2, xmm0                                 |         __asm ("andnpd xmm2, xmm0");
    0x0040c35f orpd xmm2, xmm1                                   |         __asm ("orpd xmm2, xmm1");
    0x0040c363 mulsd xmm2, qword [rip + 0x26ee0d]                |         __asm ("mulsd xmm2, qword [0x0067b178]");
    0x0040c36b divsd xmm2, xmm3                                  |         __asm ("divsd xmm2, xmm3");
    0x0040c36f addsd xmm2, qword [rip + 0x26ee09]                |         __asm ("addsd xmm2, qword [0x0067b180]");
    0x0040c377 cvttsd2si eax, xmm2                               |         __asm ("cvttsd2si eax, xmm2");
    0x0040c37b mov ebx, eax                                      |         ebx = eax;
    0x0040c37d neg ebx                                           |         ebx = -ebx;
    0x0040c37f movsd qword [rsp], xmm3                           |         *(rsp) = xmm3;
    0x0040c384 movsd qword [rsp + 0x1e8], xmm4                   |         *((rsp + 0x1e8)) = xmm4;
    0x0040c38d ucomisd xmm4, xmm3                                |         __asm ("ucomisd xmm4, xmm3");
                                                                 |         if (r12 > 0x20) {
    0x0040c391 cmova ebx, eax                                    |             ebx = eax;
                                                                 |         }
    0x0040c394 cmp dword [rip + 0x50e03d], 0                     |         
                                                                 |         if (*(obj.verbose) != 0) {
    0x0040c39b je 0x40c533                                       |             
    0x0040c3a1 mov edi, 0x91a328                                 |             
    0x0040c3a6 mov esi, 0x67c257                                 |             
    0x0040c3ab mov edx, 3                                        |             
    0x0040c3b0 call 0x5bcfd0                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, 0x67c257, 3);
    0x0040c3b5 mov rcx, qword [rax]                              |             rcx = *(rax);
    0x0040c3b8 mov rcx, qword [rcx - 0x18]                       |             rcx = *((rcx - 0x18));
    0x0040c3bc mov qword [rax + rcx + 0x18], 2                   |             *((rax + rcx + 0x18)) = 2;
    0x0040c3c5 mov rdi, rax                                      |             rdi = rax;
    0x0040c3c8 mov esi, r12d                                     |             esi = r12d;
    0x0040c3cb call 0x405010                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040c3d0 mov esi, 0x67c275                                 |             
    0x0040c3d5 mov edx, 2                                        |             
    0x0040c3da mov rdi, rax                                      |             
    0x0040c3dd call 0x5bcfd0                                     |             std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67c275, 2);
    0x0040c3e2 mov rax, qword [rip + 0x50df3f]                   |             rax = std::__1::cout;
    0x0040c3e9 mov rax, qword [rax - 0x18]                       |             rax = *((rax - 0x18));
    0x0040c3ed mov ebp, dword [rax + 0x91a330]                   |             ebp = *((rax + 0x91a330));
    0x0040c3f3 mov qword [rax + 0x91a338], 4                     |             *((rax + 0x91a338)) = 4;
    0x0040c3fe mov rax, qword [rip + 0x50df23]                   |             rax = std::__1::cout;
    0x0040c405 mov rax, qword [rax - 0x18]                       |             rax = *((rax - 0x18));
    0x0040c409 mov ecx, dword [rax + 0x91a330]                   |             ecx = *((rax + 0x91a330));
    0x0040c40f and ecx, r15d                                     |             ecx &= r15d;
    0x0040c412 or ecx, 0x100                                     |             ecx |= 0x100;
    0x0040c418 mov dword [rax + 0x91a330], ecx                   |             *((rax + 0x91a330)) = ecx;
    0x0040c41e mov edi, 0x91a328                                 |             
    0x0040c423 mov esi, 0x67c25b                                 |             
    0x0040c428 mov edx, 5                                        |             
    0x0040c42d call 0x5bcfd0                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "exp: ", 5);
    0x0040c432 mov rcx, qword [rax]                              |             rcx = *(rax);
    0x0040c435 mov rcx, qword [rcx - 0x18]                       |             rcx = *((rcx - 0x18));
    0x0040c439 mov qword [rax + rcx + 0x18], 6                   |             *((rax + rcx + 0x18)) = 6;
    0x0040c442 mov rdi, rax                                      |             rdi = rax;
    0x0040c445 movsd xmm0, qword [rsp]                           |             xmm0 = *(rsp);
    0x0040c44a call 0x405270                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (double) ();
    0x0040c44f mov esi, 0x67c275                                 |             
    0x0040c454 mov edx, 2                                        |             
    0x0040c459 mov rdi, rax                                      |             
    0x0040c45c call 0x5bcfd0                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67c275, 2);
    0x0040c461 mov esi, 0x67c261                                 |             
    0x0040c466 mov edx, 6                                        |             
    0x0040c46b mov rdi, rax                                      |             
    0x0040c46e call 0x5bcfd0                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, "n[i]: ", 6);
    0x0040c473 mov rcx, qword [rax]                              |             rcx = *(rax);
    0x0040c476 mov rcx, qword [rcx - 0x18]                       |             rcx = *((rcx - 0x18));
    0x0040c47a mov qword [rax + rcx + 0x18], 6                   |             *((rax + rcx + 0x18)) = 6;
    0x0040c483 mov rdi, rax                                      |             rdi = rax;
    0x0040c486 mov esi, r14d                                     |             esi = r14d;
    0x0040c489 call 0x405010                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040c48e mov esi, 0x67c275                                 |             
    0x0040c493 mov edx, 2                                        |             
    0x0040c498 mov rdi, rax                                      |             
    0x0040c49b call 0x5bcfd0                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67c275, 2);
    0x0040c4a0 mov esi, 0x67c268                                 |             
    0x0040c4a5 mov edx, 0xb                                      |             
    0x0040c4aa mov rdi, rax                                      |             
    0x0040c4ad call 0x5bcfd0                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, "tolerance: ", 0xb);
    0x0040c4b2 mov rcx, qword [rax]                              |             rcx = *(rax);
    0x0040c4b5 mov rcx, qword [rcx - 0x18]                       |             rcx = *((rcx - 0x18));
    0x0040c4b9 mov qword [rax + rcx + 0x18], 6                   |             *((rax + rcx + 0x18)) = 6;
    0x0040c4c2 mov rdi, rax                                      |             rdi = rax;
    0x0040c4c5 movsd xmm0, qword [rsp + 0x70]                    |             xmm0 = *((rsp + 0x70));
    0x0040c4cb call 0x405270                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (double) ();
    0x0040c4d0 mov esi, 0x67c274                                 |             
    0x0040c4d5 mov edx, 3                                        |             
    0x0040c4da mov rdi, rax                                      |             
    0x0040c4dd call 0x5bcfd0                                     |             std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67c274, 3);
    0x0040c4e2 mov rax, qword [rip + 0x50de3f]                   |             rax = std::__1::cout;
    0x0040c4e9 mov rax, qword [rax - 0x18]                       |             rax = *((rax - 0x18));
    0x0040c4ed mov dword [rax + 0x91a330], ebp                   |             *((rax + 0x91a330)) = ebp;
    0x0040c4f3 mov edi, 0x91a328                                 |             
    0x0040c4f8 mov esi, 0x67c278                                 |             
    0x0040c4fd mov edx, 6                                        |             
    0x0040c502 call 0x5bcfd0                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "miss: ", 6);
    0x0040c507 mov rcx, qword [rax]                              |             rcx = *(rax);
    0x0040c50a mov rcx, qword [rcx - 0x18]                       |             rcx = *((rcx - 0x18));
    0x0040c50e mov qword [rax + rcx + 0x18], 4                   |             *((rax + rcx + 0x18)) = 4;
    0x0040c517 mov rdi, rax                                      |             rdi = rax;
    0x0040c51a mov esi, ebx                                      |             esi = ebx;
    0x0040c51c call 0x405010                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040c521 mov esi, 0x67c27f                                 |             
    0x0040c526 mov edx, 2                                        |             
    0x0040c52b mov rdi, rax                                      |             
    0x0040c52e call 0x5bcfd0                                     |             std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67c27f, 2);
                                                                 |         }
    0x0040c533 movsd xmm0, qword [rsp + 0x70]                    |         xmm0 = *((rsp + 0x70));
    0x0040c539 divsd xmm0, qword [rip + 0x26ec37]                |         __asm ("divsd xmm0, qword [0x0067b178]");
    0x0040c541 movsd qword [rsp + 0x1e0], xmm0                   |         *((rsp + 0x1e0)) = xmm0;
    0x0040c54a addsd xmm0, qword [rip + 0x26ec36]                |         __asm ("addsd xmm0, qword [0x0067b188]");
    0x0040c552 mulsd xmm0, qword [rsp]                           |         __asm ("mulsd xmm0, qword [rsp]");
    0x0040c557 roundsd xmm0, xmm0, 0xa                           |         __asm ("roundsd xmm0, xmm0, 0xa");
    0x0040c55d ucomisd xmm0, qword [rsp + 0x1e8]                 |         __asm ("ucomisd xmm0, qword [rsp + 0x1e8]");
                                                                 |         if (ecx < 0) {
    0x0040c566 jae 0x40c65d                                      |             
    0x0040c56c call 0x6504b0                                     |             rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040c571 mov rbx, rax                                      |             rbx = rax;
    0x0040c574 mov rdi, rax                                      |             
    0x0040c577 call 0x650160                                     |             BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040c57c mov edi, 0x91a328                                 |             
    0x0040c581 mov esi, 0x67c282                                 |             
    0x0040c586 mov edx, 3                                        |             
    0x0040c58b call 0x5bcfd0                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, 0x67c282, 3);
    0x0040c590 mov esi, 0x67b8c6                                 |             
    0x0040c595 mov edx, 2                                        |             
    0x0040c59a mov rdi, rax                                      |             
    0x0040c59d call 0x5bcfd0                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67b8c6, 2);
    0x0040c5a2 mov rdi, rax                                      |             rdi = rax;
    0x0040c5a5 movsd xmm0, qword [rsp]                           |             xmm0 = *(rsp);
    0x0040c5aa call 0x405270                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (double) ();
    0x0040c5af mov esi, 0x696b93                                 |             
    0x0040c5b4 mov edx, 1                                        |             
    0x0040c5b9 mov rdi, rax                                      |             
    0x0040c5bc call 0x5bcfd0                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x696b93, 1);
    0x0040c5c1 mov esi, 0x67c286                                 |             
    0x0040c5c6 mov edx, 4                                        |             
    0x0040c5cb mov rdi, rax                                      |             
    0x0040c5ce call 0x5bcfd0                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, "n[i]", 4);
    0x0040c5d3 mov esi, 0x67b8c6                                 |             
    0x0040c5d8 mov edx, 2                                        |             
    0x0040c5dd mov rdi, rax                                      |             
    0x0040c5e0 call 0x5bcfd0                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67b8c6, 2);
    0x0040c5e5 mov rdi, rax                                      |             rdi = rax;
    0x0040c5e8 mov esi, r14d                                     |             esi = r14d;
    0x0040c5eb call 0x405010                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040c5f0 mov esi, 0x696b93                                 |             
    0x0040c5f5 mov edx, 1                                        |             
    0x0040c5fa mov rdi, rax                                      |             
    0x0040c5fd call 0x5bcfd0                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x696b93, 1);
    0x0040c602 mov esi, 0x67c28b                                 |             
    0x0040c607 mov edx, 0xa                                      |             
    0x0040c60c mov rdi, rax                                      |             
    0x0040c60f call 0x5bcfd0                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, "tolPercent", 0xa);
    0x0040c614 mov esi, 0x67b8c6                                 |             
    0x0040c619 mov edx, 2                                        |             
    0x0040c61e mov rdi, rax                                      |             
    0x0040c621 call 0x5bcfd0                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67b8c6, 2);
    0x0040c626 mov rdi, rax                                      |             rdi = rax;
    0x0040c629 movsd xmm0, qword [rsp + 0x70]                    |             xmm0 = *((rsp + 0x70));
    0x0040c62f call 0x405270                                     |             rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (double) ();
    0x0040c634 mov esi, 0x696ad0                                 |             
    0x0040c639 mov edx, 1                                        |             
    0x0040c63e mov rdi, rax                                      |             
    0x0040c641 call 0x5bcfd0                                     |             std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x696ad0, 1);
    0x0040c646 mov edi, 0x67c296                                 |             edi = "n[i] <= bsl::ceil( exp * (1.0 + tol))";
    0x0040c64b mov esi, 0x1478                                   |             esi = 0x1478;
    0x0040c650 call 0x405800                                     |             (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040c655 mov rdi, rbx                                      |             
    0x0040c658 call 0x6502b0                                     |             BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |         }
    0x0040c65d movsd xmm0, qword [rip + 0x26eb23]                |         xmm0 = *(0x0067b188);
    0x0040c665 subsd xmm0, qword [rsp + 0x1e0]                   |         __asm ("subsd xmm0, qword [rsp + 0x1e0]");
    0x0040c66e mulsd xmm0, qword [rsp]                           |         __asm ("mulsd xmm0, qword [rsp]");
    0x0040c673 roundsd xmm0, xmm0, 9                             |         __asm ("roundsd xmm0, xmm0, 9");
    0x0040c679 movsd xmm1, qword [rsp + 0x1e8]                   |         xmm1 = *((rsp + 0x1e8));
    0x0040c682 ucomisd xmm1, xmm0                                |         __asm ("ucomisd xmm1, xmm0");
    0x0040c686 jae 0x40c2f0                                      |         
                                                                 |     }
    0x0040c68c call 0x6504b0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040c691 mov rbx, rax                                      |     rbx = rax;
    0x0040c694 mov rdi, rax                                      |     
    0x0040c697 call 0x650160                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040c69c mov edi, 0x91a328                                 |     
    0x0040c6a1 mov esi, 0x67c282                                 |     
    0x0040c6a6 mov edx, 3                                        |     
    0x0040c6ab call 0x5bcfd0                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, 0x67c282, 3);
    0x0040c6b0 mov esi, 0x67b8c6                                 |     
    0x0040c6b5 mov edx, 2                                        |     
    0x0040c6ba mov rdi, rax                                      |     
    0x0040c6bd call 0x5bcfd0                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67b8c6, 2);
    0x0040c6c2 mov rdi, rax                                      |     rdi = rax;
    0x0040c6c5 movsd xmm0, qword [rsp]                           |     xmm0 = *(rsp);
    0x0040c6ca call 0x405270                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (double) ();
    0x0040c6cf mov esi, 0x696b93                                 |     
    0x0040c6d4 mov edx, 1                                        |     
    0x0040c6d9 mov rdi, rax                                      |     
    0x0040c6dc call 0x5bcfd0                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x696b93, 1);
    0x0040c6e1 mov esi, 0x67c286                                 |     
    0x0040c6e6 mov edx, 4                                        |     
    0x0040c6eb mov rdi, rax                                      |     
    0x0040c6ee call 0x5bcfd0                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, "n[i]", 4);
    0x0040c6f3 mov esi, 0x67b8c6                                 |     
    0x0040c6f8 mov edx, 2                                        |     
    0x0040c6fd mov rdi, rax                                      |     
    0x0040c700 call 0x5bcfd0                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67b8c6, 2);
    0x0040c705 mov rdi, rax                                      |     rdi = rax;
    0x0040c708 mov esi, r14d                                     |     esi = r14d;
    0x0040c70b call 0x405010                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040c710 mov esi, 0x696b93                                 |     
    0x0040c715 mov edx, 1                                        |     
    0x0040c71a mov rdi, rax                                      |     
    0x0040c71d call 0x5bcfd0                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x696b93, 1);
    0x0040c722 mov esi, 0x67c28b                                 |     
    0x0040c727 mov edx, 0xa                                      |     
    0x0040c72c mov rdi, rax                                      |     
    0x0040c72f call 0x5bcfd0                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, "tolPercent", 0xa);
    0x0040c734 mov esi, 0x67b8c6                                 |     
    0x0040c739 mov edx, 2                                        |     
    0x0040c73e mov rdi, rax                                      |     
    0x0040c741 call 0x5bcfd0                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67b8c6, 2);
    0x0040c746 mov rdi, rax                                      |     rdi = rax;
    0x0040c749 movsd xmm0, qword [rsp + 0x70]                    |     xmm0 = *((rsp + 0x70));
    0x0040c74f call 0x405270                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (double) ();
    0x0040c754 mov esi, 0x696ad0                                 |     
    0x0040c759 mov edx, 1                                        |     
    0x0040c75e mov rdi, rax                                      |     
    0x0040c761 call 0x5bcfd0                                     |     std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x696ad0, 1);
    0x0040c766 mov edi, 0x67c2bc                                 |     edi = "n[i] >= bsl::floor(exp * (1.0 - tol))";
    0x0040c76b mov esi, 0x147a                                   |     esi = 0x147a;
    0x0040c770 call 0x405800                                     |     (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040c775 mov rdi, rbx                                      |     
    0x0040c778 call 0x6502b0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040c77d jmp 0x40c2f0                                      |     goto label_5;
                                                                 | label_29:
    0x0040c782 mov rbx, qword [rsp + 0xd0]                       |     rbx = *((rsp + 0xd0));
    0x0040c78a nop word [rax + rax]                              |     
                                                                 |     do {
    0x0040c790 mov rbx, qword [rbx + 0x10]                       |         rbx = *((rbx + 0x10));
    0x0040c794 cmp rbx, qword [rsp + 0xd8]                       |         
                                                                 |         if (rbx == *((rsp + 0xd8))) {
    0x0040c79c je 0x40c7a8                                       |             goto label_30;
                                                                 |         }
    0x0040c79e mov rdi, rbx                                      |         
    0x0040c7a1 call 0x64a560                                     |         BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (rbx);
    0x0040c7a6 jmp 0x40c790                                      |         
                                                                 |     } while (1);
                                                                 | label_30:
    0x0040c7a8 mov rsi, qword [rsp + 0x110]                      |     
    0x0040c7b0 mov rdi, qword [rsp + 0x118]                      |     
    0x0040c7b8 call 0x64aba0                                     |     eax = BloombergLP::bdlcc::SkipList_PoolUtil::deletePoolManager(BloombergLP::bslma::Allocator*,BloombergLP::bdlcc::SkipList_PoolManager*) (*((rsp + 0x118)), *((rsp + 0x110)));
    0x0040c7bd jmp 0x40e3dd                                      |     void (*0x40e3dd)() ();
                                                                 | label_26:
    0x0040c7c2 test eax, eax                                     |     
                                                                 |     if (eax <= 0) {
    0x0040c7c4 jle 0x40c7f2                                      |         goto label_25;
                                                                 |     }
    0x0040c7c6 xor ebx, ebx                                      |     ebx = 0;
    0x0040c7c8 nop dword [rax + rax]                             |     
                                                                 |     do {
    0x0040c7d0 mov rax, qword [rsp + 0x560]                      |         rax = *((rsp + 0x560));
    0x0040c7d8 mov rdi, qword [rax + rbx*8]                      |         
    0x0040c7dc xor esi, esi                                      |         
    0x0040c7de call 0x404e80                                     |         pthread_join (*((rax + rbx*8)), 0);
    0x0040c7e3 inc rbx                                           |         rbx++;
    0x0040c7e6 movsxd rax, dword [rip + 0x50adbb]                |         rax = *(obj.SKIPLIST_TEST_CASE_DRQS_144652915::numThreads);
    0x0040c7ed cmp rbx, rax                                      |         
    0x0040c7f0 jl 0x40c7d0                                       |         
                                                                 |     } while (rbx < rax);
                                                                 | label_25:
    0x0040c7f2 call 0x6504b0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040c7f7 mov r15, rax                                      |     r15 = rax;
    0x0040c7fa mov rdi, rax                                      |     
    0x0040c7fd call 0x650160                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040c802 mov edi, 0x91a328                                 |     
    0x0040c807 mov esi, 0x67bb99                                 |     
    0x0040c80c mov edx, 0x14                                     |     
    0x0040c811 call 0x5bcfd0                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "skipList.length() = ", 0x14);
    0x0040c816 mov rbp, rax                                      |     
    0x0040c819 lea r14, [rsp + 0x390]                            |     r14 = rsp + 0x390;
    0x0040c821 mov rdi, r14                                      |     rdi = r14;
    0x0040c824 call 0x4052c0                                     |     pthread_mutex_lock ();
    0x0040c829 mov ebx, dword [rsp + 0x3b8]                      |     ebx = *((rsp + 0x3b8));
    0x0040c830 mov rdi, r14                                      |     rdi = r14;
    0x0040c833 call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x0040c838 mov rdi, rbp                                      |     rdi = rbp;
    0x0040c83b mov esi, ebx                                      |     esi = ebx;
    0x0040c83d call 0x405010                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040c842 mov rbp, rax                                      |     
    0x0040c845 mov rax, qword [rax]                              |     rax = *(rax);
    0x0040c848 mov rsi, qword [rax - 0x18]                       |     rsi = *((rax - 0x18));
    0x0040c84c add rsi, rbp                                      |     rsi += rbp;
    0x0040c84f lea rdi, [rsp + 0x1f0]                            |     rdi = rsp + 0x1f0;
    0x0040c857 call 0x405070                                     |     std::_1::ios_base::getloc()const ();
    0x0040c85c lea rdi, [rsp + 0x1f0]                            |     rdi = rsp + 0x1f0;
    0x0040c864 mov esi, 0x91a270                                 |     esi = obj.std::__1::ctype_char_::id;
    0x0040c869 call 0x4051a0                                     |     rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040c86e mov rcx, qword [rax]                              |     rcx = *(rax);
    0x0040c871 mov rdi, rax                                      |     rdi = rax;
    0x0040c874 mov esi, 0xa                                      |     esi = 0xa;
    0x0040c879 call qword [rcx + 0x38]                           |     eax = uint64_t (*rcx + 0x38)() ();
    0x0040c87c mov ebx, eax                                      |     ebx = eax;
    0x0040c87e lea rdi, [rsp + 0x1f0]                            |     rdi = rsp + 0x1f0;
    0x0040c886 call 0x405240                                     |     std::_1::locale::~locale() ();
    0x0040c88b movsx esi, bl                                     |     esi = (int32_t) bl;
    0x0040c88e mov rdi, rbp                                      |     rdi = rbp;
    0x0040c891 call 0x404e30                                     |     std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040c896 mov rdi, rbp                                      |     rdi = rbp;
    0x0040c899 call 0x405040                                     |     std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040c89e mov rdi, r15                                      |     
    0x0040c8a1 call 0x6502b0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r15);
    0x0040c8a6 call 0x6504b0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040c8ab mov r15, rax                                      |     r15 = rax;
    0x0040c8ae mov rdi, rax                                      |     
    0x0040c8b1 call 0x650160                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040c8b6 mov edi, 0x91a328                                 |     
    0x0040c8bb mov esi, 0x67bbae                                 |     
    0x0040c8c0 mov edx, 0x13                                     |     
    0x0040c8c5 call 0x5bcfd0                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "ta.numBytesMax() = ", 0x13);
    0x0040c8ca mov rsi, qword [rsp + 0x120]                      |     rsi = *((rsp + 0x120));
    0x0040c8d2 mov rdi, rax                                      |     rdi = rax;
    0x0040c8d5 call 0x405130                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (long long) ();
    0x0040c8da mov rbp, rax                                      |     
    0x0040c8dd mov rax, qword [rax]                              |     rax = *(rax);
    0x0040c8e0 mov rsi, qword [rax - 0x18]                       |     rsi = *((rax - 0x18));
    0x0040c8e4 add rsi, rbp                                      |     rsi += rbp;
    0x0040c8e7 lea rdi, [rsp + 0x1f0]                            |     rdi = rsp + 0x1f0;
    0x0040c8ef call 0x405070                                     |     std::_1::ios_base::getloc()const ();
    0x0040c8f4 lea rdi, [rsp + 0x1f0]                            |     rdi = rsp + 0x1f0;
    0x0040c8fc mov esi, 0x91a270                                 |     esi = obj.std::__1::ctype_char_::id;
    0x0040c901 call 0x4051a0                                     |     rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040c906 mov rcx, qword [rax]                              |     rcx = *(rax);
    0x0040c909 mov rdi, rax                                      |     rdi = rax;
    0x0040c90c mov esi, 0xa                                      |     esi = 0xa;
    0x0040c911 call qword [rcx + 0x38]                           |     eax = uint64_t (*rcx + 0x38)() ();
    0x0040c914 mov ebx, eax                                      |     ebx = eax;
    0x0040c916 lea rdi, [rsp + 0x1f0]                            |     rdi = rsp + 0x1f0;
    0x0040c91e call 0x405240                                     |     std::_1::locale::~locale() ();
    0x0040c923 movsx esi, bl                                     |     esi = (int32_t) bl;
    0x0040c926 mov rdi, rbp                                      |     rdi = rbp;
    0x0040c929 call 0x404e30                                     |     std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040c92e mov rdi, rbp                                      |     rdi = rbp;
    0x0040c931 call 0x405040                                     |     std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040c936 mov rdi, r15                                      |     
    0x0040c939 call 0x6502b0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r15);
    0x0040c93e lea rdi, [rsp + 0x440]                            |     
    0x0040c946 call 0x64fe90                                     |     BloombergLP::bslmt::Barrier::~Barrier() (rsp + 0x440);
    0x0040c94b mov rsi, qword [rsp + 0x560]                      |     rsi = *((rsp + 0x560));
    0x0040c953 test rsi, rsi                                     |     
                                                                 |     if (rsi != 0) {
    0x0040c956 je 0x40c966                                       |         
    0x0040c958 mov rdi, qword [rsp + 0x578]                      |         rdi = *((rsp + 0x578));
    0x0040c960 mov rax, qword [rdi]                              |         rax = *(rdi);
    0x0040c963 call qword [rax + 0x18]                           |         uint64_t (*rax + 0x18)() ();
                                                                 |     }
    0x0040c966 mov rbx, qword [rsp + 0x380]                      |     rbx = *((rsp + 0x380));
    0x0040c96e nop                                               |     
                                                                 |     do {
    0x0040c970 mov rbx, qword [rbx + 0x98]                       |         rbx = *((rbx + 0x98));
    0x0040c977 cmp rbx, qword [rsp + 0x388]                      |         
                                                                 |         if (rbx == *((rsp + 0x388))) {
    0x0040c97f je 0x40c98b                                       |             goto label_31;
                                                                 |         }
    0x0040c981 mov rdi, rbx                                      |         
    0x0040c984 call 0x64a560                                     |         BloombergLP::bdlcc::SkipList_Control::decrementRefCount() (rbx);
    0x0040c989 jmp 0x40c970                                      |         
                                                                 |     } while (1);
                                                                 | label_31:
    0x0040c98b mov rsi, qword [rsp + 0x3c0]                      |     
    0x0040c993 mov rdi, qword [rsp + 0x3c8]                      |     
    0x0040c99b call 0x64aba0                                     |     BloombergLP::bdlcc::SkipList_PoolUtil::deletePoolManager(BloombergLP::bslma::Allocator*,BloombergLP::bdlcc::SkipList_PoolManager*) (*((rsp + 0x3c8)), *((rsp + 0x3c0)));
    0x0040c9a0 lea rdi, [rsp + 0x390]                            |     rdi = rsp + 0x390;
    0x0040c9a8 call 0x650110                                     |     BloombergLP::bslmt::MutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::~MutexImpl() ();
    0x0040c9ad jmp 0x411b96                                      |     void (*0x411b96)() ();
                                                                 | label_14:
    0x0040c9b2 mov dword [rsp], 0x14                             |     *(rsp) = 0x14;
                                                                 | label_15:
    0x0040c9b9 lea rbx, [rsp + 0x370]                            |     rbx = rsp + 0x370;
    0x0040c9c1 mov rdi, rbx                                      |     rdi = rbx;
    0x0040c9c4 xor esi, esi                                      |     esi = 0;
    0x0040c9c6 call 0x404cc0                                     |     pthread_mutex_init ();
    0x0040c9cb lea rdi, [rsp + 0x398]                            |     
    0x0040c9d3 xor esi, esi                                      |     
    0x0040c9d5 call 0x650060                                     |     BloombergLP::bslmt::ConditionImpl<BloombergLP::bslmt::Platform::PosixThreads>::ConditionImpl(BloombergLP::bsls::SystemClockType::Enum) (rsp + 0x398, 0);
    0x0040c9da mov eax, dword [rsp]                              |     eax = *(rsp);
    0x0040c9dd mov dword [rsp + 0x3d0], eax                      |     *((rsp + 0x3d0)) = eax;
    0x0040c9e4 xorpd xmm0, xmm0                                  |     __asm ("xorpd xmm0, xmm0");
    0x0040c9e8 movupd xmmword [rsp + 0x3d4], xmm0                |     __asm ("movupd xmmword [rsp + 0x3d4], xmm0");
    0x0040c9f1 mov qword [rip + 0x50da08], rbx                   |     *(obj.RemoveAllSafetyTest::barrier_p) = rbx;
    0x0040c9f8 cmp dword [rip + 0x50d9d9], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040c9ff je 0x40cb59                                       |         
    0x0040ca05 mov rdi, qword [r15 + 0x10]                       |         
    0x0040ca09 xor esi, esi                                      |         
    0x0040ca0b mov edx, 0xa                                      |         
    0x0040ca10 call 0x404f50                                     |         eax = strtol (*((r15 + 0x10)), 0, 0xa);
    0x0040ca15 test eax, eax                                     |         
    0x0040ca17 mov r14d, 0x3e8                                   |         r14d = 0x3e8;
                                                                 |         if (eax != 0) {
    0x0040ca1d cmovne r14d, eax                                  |             r14d = eax;
                                                                 |         }
    0x0040ca21 mov eax, dword [rip + 0x50d9b5]                   |         eax = veryVerbose;
    0x0040ca27 mov dword [rip + 0x50d9ab], eax                   |         *(obj.verbose) = eax;
    0x0040ca2d mov ecx, dword [rip + 0x50d9ad]                   |         ecx = veryVeryVerbose;
    0x0040ca33 mov dword [rip + 0x50d9a3], ecx                   |         *(obj.veryVerbose) = ecx;
    0x0040ca39 mov dword [rip + 0x50d99d], 0                     |         *(obj.veryVeryVerbose) = 0;
    0x0040ca43 test eax, eax                                     |         
                                                                 |         if (eax == 0) {
    0x0040ca45 je 0x40cb5f                                       |             goto label_32;
                                                                 |         }
    0x0040ca4b mov edi, 0x91a328                                 |         
    0x0040ca50 mov esi, 0x67c3a0                                 |         
    0x0040ca55 mov edx, 0x17                                     |         
    0x0040ca5a call 0x5bcfd0                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "RemoveAll Safety test: ", 0x17);
    0x0040ca5f call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040ca64 mov rbx, rax                                      |         rbx = rax;
    0x0040ca67 mov rdi, rax                                      |         
    0x0040ca6a call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040ca6f mov edi, 0x91a328                                 |         
    0x0040ca74 mov esi, 0x67bb5a                                 |         
    0x0040ca79 mov edx, 0xd                                      |         
    0x0040ca7e call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "numThreads = ", 0xd);
    0x0040ca83 mov rdi, rax                                      |         rdi = rax;
    0x0040ca86 mov esi, dword [rsp]                              |         esi = *(rsp);
    0x0040ca89 call 0x405010                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040ca8e mov esi, 0x67c275                                 |         
    0x0040ca93 mov edx, 2                                        |         
    0x0040ca98 mov rdi, rax                                      |         
    0x0040ca9b call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67c275, 2);
    0x0040caa0 mov rdi, rax                                      |         rdi = rax;
    0x0040caa3 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040caa8 mov rdi, rbx                                      |         
    0x0040caab call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040cab0 call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040cab5 mov r15, rax                                      |         r15 = rax;
    0x0040cab8 mov rdi, rax                                      |         
    0x0040cabb call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040cac0 mov edi, 0x91a328                                 |         
    0x0040cac5 mov esi, 0x67c3b8                                 |         
    0x0040caca mov edx, 0x10                                     |         
    0x0040cacf call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "numIterations = ", 0x10);
    0x0040cad4 mov rdi, rax                                      |         rdi = rax;
    0x0040cad7 mov esi, r14d                                     |         esi = r14d;
    0x0040cada call 0x405010                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040cadf mov rbp, rax                                      |         
    0x0040cae2 mov rax, qword [rax]                              |         rax = *(rax);
    0x0040cae5 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040cae9 add rsi, rbp                                      |         rsi += rbp;
    0x0040caec lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040caf4 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040caf9 lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040cb01 mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040cb06 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040cb0b mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040cb0e mov rdi, rax                                      |         rdi = rax;
    0x0040cb11 mov esi, 0xa                                      |         esi = 0xa;
    0x0040cb16 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040cb19 mov ebx, eax                                      |         ebx = eax;
    0x0040cb1b lea rdi, [rsp + 0x1f0]                            |         rdi = rsp + 0x1f0;
    0x0040cb23 call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040cb28 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x0040cb2b mov rdi, rbp                                      |         rdi = rbp;
    0x0040cb2e call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040cb33 mov rdi, rbp                                      |         rdi = rbp;
    0x0040cb36 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040cb3b mov rdi, r15                                      |         
    0x0040cb3e call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r15);
    0x0040cb43 mov edi, 0x91a328                                 |         
    0x0040cb48 mov esi, 0x67c3c9                                 |         
    0x0040cb4d mov edx, 0x37                                     |         
    0x0040cb52 call 0x5bcfd0                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "======================================================\n", 0x37);
    0x0040cb57 jmp 0x40cb5f                                      |         
                                                                 |     } else {
    0x0040cb59 mov r14d, 0x3e8                                   |         r14d = 0x3e8;
                                                                 |     }
                                                                 | label_32:
    0x0040cb5f xorpd xmm0, xmm0                                  |     __asm ("xorpd xmm0, xmm0");
    0x0040cb63 movapd xmmword [rsp + 0x510], xmm0                |     __asm ("movapd xmmword [rsp + 0x510], xmm0");
    0x0040cb6c movapd xmmword [rsp + 0x530], xmm0                |     __asm ("movapd xmmword [rsp + 0x530], xmm0");
    0x0040cb75 movupd xmmword [rsp + 0x53a], xmm0                |     __asm ("movupd xmmword [rsp + 0x53a], xmm0");
    0x0040cb7e call 0x651dd0                                     |     BloombergLP::bsls::TimeUtil::initialize() ();
    0x0040cb83 xorpd xmm0, xmm0                                  |     __asm ("xorpd xmm0, xmm0");
    0x0040cb87 movapd xmmword [rsp + 0x520], xmm0                |     __asm ("movapd xmmword [rsp + 0x520], xmm0");
    0x0040cb90 cmp dword [rip + 0x50d841], 0                     |     
                                                                 |     if (*(obj.verbose) != 0) {
    0x0040cb97 je 0x40cbc0                                       |         
    0x0040cb99 cmp byte [rsp + 0x548], 0                         |         
                                                                 |         if (*((rsp + 0x548)) != 0) {
    0x0040cba1 jne 0x40cbc0                                      |             goto label_33;
                                                                 |         }
    0x0040cba3 lea rdi, [rsp + 0x520]                            |         
    0x0040cbab mov byte [rsp + 0x549], 0                         |         *((rsp + 0x549)) = 0;
    0x0040cbb3 call 0x651e20                                     |         BloombergLP::bsls::TimeUtil::getTimerRaw(timespec*) (rsp + 0x520);
    0x0040cbb8 mov byte [rsp + 0x548], 1                         |         *((rsp + 0x548)) = 1;
                                                                 |     }
                                                                 | label_33:
    0x0040cbc0 xor esi, esi                                      |     
    0x0040cbc2 cmp dword [rip + 0x50d817], 0                     |     
    0x0040cbc9 setne sil                                         |     sil = (*(obj.veryVeryVerbose) != 0) ? 1 : 0;
    0x0040cbcd lea rdi, [rsp + 0x1f0]                            |     
    0x0040cbd5 xor edx, edx                                      |     
    0x0040cbd7 call 0x64f1f0                                     |     BloombergLP::bslma::TestAllocator::TestAllocator(bool,BloombergLP::bslma::Allocator*) (rsp + 0x1f0, 0, 0);
    0x0040cbdc lea rdi, [rsp + 8]                                |     
    0x0040cbe1 lea rsi, [rsp + 0x1f0]                            |     
    0x0040cbe9 call 0x64f040                                     |     BloombergLP::bslma::DefaultAllocatorGuard::DefaultAllocatorGuard(BloombergLP::bslma::Allocator*) (rsp + 8, rsp + 0x1f0);
    0x0040cbee lea rbp, [rsp + 0xc0]                             |     rbp = rsp + 0xc0;
    0x0040cbf6 mov rdi, rbp                                      |     
    0x0040cbf9 xor esi, esi                                      |     
    0x0040cbfb call 0x64f120                                     |     BloombergLP::bslma::TestAllocator::TestAllocator(BloombergLP::bslma::Allocator*) (rbp, 0);
    0x0040cc00 mov qword [rip + 0x50d801], rbp                   |     *(obj.RemoveAllSafetyTest::alloc_p) = rbp;
    0x0040cc07 lea rdi, [rsp + 0x10]                             |     
    0x0040cc0c call 0x64a5e0                                     |     BloombergLP::bdlcc::SkipList_RandomLevelGenerator::SkipList_RandomLevelGenerator() (rsp + 0x10);
    0x0040cc11 mov dword [rsp + 0x18], 0                         |     *((rsp + 0x18)) = 0;
    0x0040cc19 lea rbx, [rsp + 0x30]                             |     rbx = rsp + 0x30;
    0x0040cc1e mov rdi, rbx                                      |     rdi = rbx;
    0x0040cc21 xor esi, esi                                      |     esi = 0;
    0x0040cc23 call 0x404cc0                                     |     pthread_mutex_init ();
    0x0040cc28 mov dword [rsp + 0x58], 0                         |     *((rsp + 0x58)) = 0;
    0x0040cc30 mov qword [rsp + 0x60], 0                         |     *((rsp + 0x60)) = 0;
    0x0040cc39 mov qword [rsp + 0x68], rbp                       |     *((rsp + 0x68)) = rbp;
    0x0040cc3e movaps xmm0, xmmword [rip + 0x26e15b]             |     xmm0 = "8HXhx";
    0x0040cc45 movaps xmmword [rsp + 0x440], xmm0                |     *((rsp + 0x440)) = xmm0;
    0x0040cc4d movaps xmm0, xmmword [rip + 0x26e15c]             |     xmm0 = *(0x0067adb0);
    0x0040cc54 movaps xmmword [rsp + 0x450], xmm0                |     *((rsp + 0x450)) = xmm0;
    0x0040cc5c movaps xmm0, xmmword [rip + 0x26e15d]             |     xmm0 = *(0x0067adc0);
    0x0040cc63 movaps xmmword [rsp + 0x460], xmm0                |     *((rsp + 0x460)) = xmm0;
    0x0040cc6b movaps xmm0, xmmword [rip + 0x26e15e]             |     xmm0 = *(0x0067add0);
    0x0040cc72 movaps xmmword [rsp + 0x470], xmm0                |     *((rsp + 0x470)) = xmm0;
    0x0040cc7a movaps xmm0, xmmword [rip + 0x26e15f]             |     xmm0 = *(0x0067ade0);
    0x0040cc81 movaps xmmword [rsp + 0x480], xmm0                |     *((rsp + 0x480)) = xmm0;
    0x0040cc89 movaps xmm0, xmmword [rip + 0x26e160]             |     xmm0 = *(0x0067adf0);
    0x0040cc90 movaps xmmword [rsp + 0x490], xmm0                |     *((rsp + 0x490)) = xmm0;
    0x0040cc98 movaps xmm0, xmmword [rip + 0x26e161]             |     xmm0 = *(0x0067ae00);
    0x0040cc9f movaps xmmword [rsp + 0x4a0], xmm0                |     *((rsp + 0x4a0)) = xmm0;
    0x0040cca7 movapd xmm0, xmmword [rip + 0x26e161]             |     __asm ("movapd xmm0, xmmword [0x0067ae10]");
    0x0040ccaf movapd xmmword [rsp + 0x4b0], xmm0                |     __asm ("movapd xmmword [rsp + 0x4b0], xmm0");
    0x0040ccb8 lea rdi, [rsp + 0x440]                            |     
    0x0040ccc0 mov esi, 0x20                                     |     
    0x0040ccc5 mov rdx, rbp                                      |     
    0x0040ccc8 call 0x64aae0                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::createPoolManager(int*,int,BloombergLP::bslma::Allocator*) (rsp + 0x440, 0x20, rbp);
    0x0040cccd mov qword [rsp + 0x60], rax                       |     *((rsp + 0x60)) = rax;
    0x0040ccd2 mov rdi, rax                                      |     
    0x0040ccd5 mov esi, 0x1f                                     |     
    0x0040ccda call 0x64aa20                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (rax, 0x1f);
    0x0040ccdf mov qword [rsp + 0x20], rax                       |     *((rsp + 0x20)) = rax;
    0x0040cce4 mov rdi, qword [rsp + 0x60]                       |     
    0x0040cce9 mov esi, 0x1f                                     |     
    0x0040ccee call 0x64aa20                                     |     rax = BloombergLP::bdlcc::SkipList_PoolUtil::allocate(BloombergLP::bdlcc::SkipList_PoolManager*,int) (*((rsp + 0x60)), 0x1f);
    0x0040ccf3 mov qword [rsp + 0x28], rax                       |     *((rsp + 0x28)) = rax;
    0x0040ccf8 xor ecx, ecx                                      |     ecx = 0;
    0x0040ccfa nop word [rax + rax]                              |     
                                                                 |     do {
    0x0040cd00 mov rax, qword [rsp + 0x20]                       |         rax = *((rsp + 0x20));
    0x0040cd05 mov qword [rax + rcx + 0x30], 0                   |         *((rax + rcx + 0x30)) = 0;
    0x0040cd0e mov rax, qword [rsp + 0x20]                       |         rax = *((rsp + 0x20));
    0x0040cd13 mov rdx, qword [rsp + 0x28]                       |         rdx = *((rsp + 0x28));
    0x0040cd18 mov qword [rax + rcx + 0x28], rdx                 |         *((rax + rcx + 0x28)) = rdx;
    0x0040cd1d mov rax, qword [rsp + 0x20]                       |         rax = *((rsp + 0x20));
    0x0040cd22 mov rdx, qword [rsp + 0x28]                       |         rdx = *((rsp + 0x28));
    0x0040cd27 mov qword [rdx + rcx + 0x30], rax                 |         *((rdx + rcx + 0x30)) = rax;
    0x0040cd2c mov rax, qword [rsp + 0x28]                       |         rax = *((rsp + 0x28));
    0x0040cd31 mov qword [rax + rcx + 0x28], 0                   |         *((rax + rcx + 0x28)) = 0;
    0x0040cd3a add rcx, 0x10                                     |         rcx += 0x10;
    0x0040cd3e cmp rcx, 0x200                                    |         
    0x0040cd45 jne 0x40cd00                                      |         
                                                                 |     } while (rcx != 0x200);
    0x0040cd47 lea rdi, [rsp + 0x440]                            |     
    0x0040cd4f lea rsi, [rsp + 0xc0]                             |     
    0x0040cd57 call 0x6508f0                                     |     BloombergLP::bslmt::ThreadGroup::ThreadGroup(BloombergLP::bslma::Allocator*) (rsp + 0x440, rsp + 0xc0);
    0x0040cd5c mov qword [rsp + 0x1e8], r14                      |     *((rsp + 0x1e8)) = r14;
    0x0040cd64 mov eax, r14d                                     |     eax = r14d;
    0x0040cd67 imul eax, dword [rsp]                             |     eax *= *(rsp);
    0x0040cd6b mov dword [rsp + 0x70], eax                       |     *((rsp + 0x70)) = eax;
    0x0040cd6f xor r15d, r15d                                    |     r15d = 0;
    0x0040cd72 lea r12, [rsp + 0x558]                            |     r12 = rsp + 0x558;
    0x0040cd7a lea r14, [rsp + 0x78]                             |     r14 = rsp + 0x78;
    0x0040cd7f mov dword [rsp + 0x1e0], 0                        |     *((rsp + 0x1e0)) = 0;
    0x0040cd8a jmp 0x40cda4                                      |     goto label_34;
                                                                 | label_6:
    0x0040cd90 add dword [rsp + 0x1e0], ebp                      |     *((rsp + 0x1e0)) += ebp;
    0x0040cd97 inc r15d                                          |     r15d++;
    0x0040cd9a cmp r15d, 0x19                                    |     
                                                                 |     if (r15d == 0x19) {
    0x0040cd9e je 0x40d2e0                                       |         goto label_35;
                                                                 |     }
                                                                 | label_34:
    0x0040cda4 cmp dword [rip + 0x50d631], 0                     |     
                                                                 |     if (*(obj.veryVerbose) != 0) {
    0x0040cdab je 0x40ce07                                       |         
    0x0040cdad mov edi, 0x91a328                                 |         edi = std::__1::cout;
    0x0040cdb2 mov esi, r15d                                     |         esi = r15d;
    0x0040cdb5 call 0x415ae0                                     |         rax = operator << (std::_1::basic_ostream<char,std::_1::char_traits<char>>&,(anonymousnamespace)::u::AddMode) ();
    0x0040cdba mov rbp, rax                                      |         
    0x0040cdbd mov rax, qword [rax]                              |         rax = *(rax);
    0x0040cdc0 mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040cdc4 add rsi, rbp                                      |         rsi += rbp;
    0x0040cdc7 mov rdi, r14                                      |         rdi = r14;
    0x0040cdca call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040cdcf mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040cdd4 mov rdi, r14                                      |         rdi = r14;
    0x0040cdd7 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040cddc mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040cddf mov rdi, rax                                      |         rdi = rax;
    0x0040cde2 mov esi, 0xa                                      |         esi = 0xa;
    0x0040cde7 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040cdea mov ebx, eax                                      |         ebx = eax;
    0x0040cdec mov rdi, r14                                      |         rdi = r14;
    0x0040cdef call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040cdf4 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x0040cdf7 mov rdi, rbp                                      |         rdi = rbp;
    0x0040cdfa call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040cdff mov rdi, rbp                                      |         rdi = rbp;
    0x0040ce02 call 0x405040                                     |         eax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
                                                                 |     }
    0x0040ce07 xor eax, eax                                      |     eax = 0;
    0x0040ce09 xchg dword [rip + 0x50d5e5], eax                  |     tmp_0 = obj.RemoveAllSafetyTest::masterId;
                                                                 |     obj.RemoveAllSafetyTest::masterId = eax;
                                                                 |     eax = tmp_0;
    0x0040ce0f xor eax, eax                                      |     eax = 0;
    0x0040ce11 xchg dword [rip + 0x50d5e1], eax                  |     tmp_1 = obj.RemoveAllSafetyTest::collisions;
                                                                 |     obj.RemoveAllSafetyTest::collisions = eax;
                                                                 |     eax = tmp_1;
    0x0040ce17 xor eax, eax                                      |     eax = 0;
    0x0040ce19 xchg dword [rip + 0x50d5dd], eax                  |     tmp_2 = obj.RemoveAllSafetyTest::removed;
                                                                 |     obj.RemoveAllSafetyTest::removed = eax;
                                                                 |     eax = tmp_2;
    0x0040ce1f mov qword [rsp + 0x1c0], 0x415b40                 |     *((rsp + 0x1c0)) = method.RemoveAllSafetyTest.removeAllSafetyFunc_BloombergLP::bdlcc::SkipList_int__BloombergLP::bsltf::AllocTestType___int___anonymous_namespace_::u::AddMode_;
    0x0040ce2b lea rax, [rsp + 0x10]                             |     rax = rsp + 0x10;
    0x0040ce30 mov qword [rsp + 0x1c8], rax                      |     *((rsp + 0x1c8)) = rax;
    0x0040ce38 mov rax, qword [rsp + 0x1e8]                      |     rax = *((rsp + 0x1e8));
    0x0040ce40 mov dword [rsp + 0x1d0], eax                      |     *((rsp + 0x1d0)) = eax;
    0x0040ce47 mov dword [rsp + 0x1d4], r15d                     |     *((rsp + 0x1d4)) = r15d;
    0x0040ce4f lea rdi, [rsp + 0x560]                            |     
    0x0040ce57 call 0x6505a0                                     |     rax = BloombergLP::bslmt::ThreadAttributes::ThreadAttributes() (rsp + 0x560);
    0x0040ce5c cmp dword [rsp], 0                                |     
                                                                 |     if (*(rsp) <= 0) {
    0x0040ce60 jle 0x40cf1e                                      |         goto label_36;
                                                                 |     }
    0x0040ce66 mov ebp, dword [rsp]                              |     ebp = *(rsp);
    0x0040ce69 nop dword [rax]                                   |     
                                                                 |     do {
    0x0040ce70 cmp dword [rsp + 0x560], 0                        |         
                                                                 |         if (*((rsp + 0x560)) != 0) {
    0x0040ce78 je 0x40cee0                                       |             
    0x0040ce7a mov rdi, r14                                      |             
    0x0040ce7d lea rsi, [rsp + 0x560]                            |             
    0x0040ce85 xor edx, edx                                      |             
    0x0040ce87 call 0x650660                                     |             BloombergLP::bslmt::ThreadAttributes::ThreadAttributes(BloombergLP::bslmt::ThreadAttributesconst&,BloombergLP::bslma::Allocator*) (r14, rsp + 0x560, 0);
    0x0040ce8c mov dword [rsp + 0x78], 0                         |             *((rsp + 0x78)) = 0;
    0x0040ce94 mov rcx, qword [rsp + 0x460]                      |             
    0x0040ce9c mov rdi, r12                                      |             
    0x0040ce9f mov rsi, r14                                      |             
    0x0040cea2 lea rdx, [rsp + 0x1c0]                            |             
    0x0040ceaa call 0x437780                                     |             eax = intBloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil,void(*)(BloombergLP::bdlcc::SkipList<int,BloombergLP::bsltf::AllocTestType>*,int,(anonymousnamespace)::u::AddMode),BloombergLP::bdlf::Bind_BoundTuple3<BloombergLP::bdlcc::SkipList<int,BloombergLP::bsltf::AllocTestType>*,int,(anonymousnamespace)::u::AddMode>>>(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil,void(*)(BloombergLP::bdlcc::SkipList<int,BloombergLP::bsltf::AllocTestType>*,int,(anonymousnamespace)::u::AddMode),BloombergLP::bdlf::Bind_BoundTuple3<BloombergLP::bdlcc::SkipList<int,BloombergLP::bsltf::AllocTestType>*,int,(anonymousnamespace)::u::AddMode>>const&,BloombergLP::bslma::Allocator*) (r12, r14, rsp + 0x1c0, *((rsp + 0x460)));
    0x0040ceaf mov ebx, eax                                      |             ebx = eax;
    0x0040ceb1 cmp qword [rsp + 0xb0], 0x17                      |             
                                                                 |             if (*((rsp + 0xb0)) == 0x17) {
    0x0040ceba je 0x40cf02                                       |                 goto label_37;
                                                                 |             }
    0x0040cebc mov rsi, qword [rsp + 0x90]                       |             rsi = *((rsp + 0x90));
    0x0040cec4 mov rdi, qword [rsp + 0xb8]                       |             rdi = *((rsp + 0xb8));
    0x0040cecc mov rax, qword [rdi]                              |             rax = *(rdi);
    0x0040cecf call qword [rax + 0x18]                           |             uint64_t (*rax + 0x18)() ();
    0x0040ced2 jmp 0x40cf02                                      |             
                                                                 |         } else {
    0x0040cee0 mov rcx, qword [rsp + 0x460]                      |             
    0x0040cee8 mov rdi, r12                                      |             
    0x0040ceeb lea rsi, [rsp + 0x560]                            |             
    0x0040cef3 lea rdx, [rsp + 0x1c0]                            |             
    0x0040cefb call 0x437780                                     |             eax = intBloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil,void(*)(BloombergLP::bdlcc::SkipList<int,BloombergLP::bsltf::AllocTestType>*,int,(anonymousnamespace)::u::AddMode),BloombergLP::bdlf::Bind_BoundTuple3<BloombergLP::bdlcc::SkipList<int,BloombergLP::bsltf::AllocTestType>*,int,(anonymousnamespace)::u::AddMode>>>(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil,void(*)(BloombergLP::bdlcc::SkipList<int,BloombergLP::bsltf::AllocTestType>*,int,(anonymousnamespace)::u::AddMode),BloombergLP::bdlf::Bind_BoundTuple3<BloombergLP::bdlcc::SkipList<int,BloombergLP::bsltf::AllocTestType>*,int,(anonymousnamespace)::u::AddMode>>const&,BloombergLP::bslma::Allocator*) (r12, rsp + 0x560, rsp + 0x1c0, *((rsp + 0x460)));
    0x0040cf00 mov ebx, eax                                      |             ebx = eax;
                                                                 |         }
                                                                 | label_37:
    0x0040cf02 test ebx, ebx                                     |         
                                                                 |         if (ebx != 0) {
    0x0040cf04 jne 0x40cf1e                                      |             goto label_36;
                                                                 |         }
    0x0040cf06 lea rdi, [rsp + 0x440]                            |         
    0x0040cf0e mov rsi, r12                                      |         
    0x0040cf11 call 0x6509a0                                     |         BloombergLP::bslmt::ThreadGroup::addThread(unsigned longconst&) (rsp + 0x440, r12);
    0x0040cf16 dec ebp                                           |         ebp--;
    0x0040cf18 jne 0x40ce70                                      |         
                                                                 |     } while (ebp != 0);
                                                                 | label_36:
    0x0040cf1e cmp qword [rsp + 0x598], 0x17                     |     
                                                                 |     if (*((rsp + 0x598)) != 0x17) {
    0x0040cf27 je 0x40cf3f                                       |         
    0x0040cf29 mov rsi, qword [rsp + 0x578]                      |         rsi = *((rsp + 0x578));
    0x0040cf31 mov rdi, qword [rsp + 0x5a0]                      |         rdi = *((rsp + 0x5a0));
    0x0040cf39 mov rax, qword [rdi]                              |         rax = *(rdi);
    0x0040cf3c call qword [rax + 0x18]                           |         uint64_t (*rax + 0x18)() ();
                                                                 |     }
    0x0040cf3f lea rdi, [rsp + 0x440]                            |     
    0x0040cf47 call 0x650a10                                     |     BloombergLP::bslmt::ThreadGroup::joinAll() (rsp + 0x440);
    0x0040cf4c lea r13, [rsp + 0x30]                             |     r13 = rsp + 0x30;
    0x0040cf51 mov rdi, r13                                      |     rdi = r13;
    0x0040cf54 call 0x4052c0                                     |     pthread_mutex_lock ();
    0x0040cf59 mov rax, qword [rsp + 0x20]                       |     rax = *((rsp + 0x20));
    0x0040cf5e mov rbx, qword [rsp + 0x28]                       |     rbx = *((rsp + 0x28));
    0x0040cf63 mov rbp, qword [rax + 0x28]                       |     rbp = *((rax + 0x28));
    0x0040cf67 mov rdi, r13                                      |     rdi = r13;
    0x0040cf6a call 0x4053c0                                     |     pthread_mutex_unlock ();
    0x0040cf6f cmp rbx, rbp                                      |     
                                                                 |     if (rbx != rbp) {
    0x0040cf72 je 0x40cf9b                                       |         
    0x0040cf74 call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040cf79 mov rbx, rax                                      |         rbx = rax;
    0x0040cf7c mov rdi, rax                                      |         
    0x0040cf7f call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040cf84 mov edi, 0x67c401                                 |         edi = "mX.isEmpty()";
    0x0040cf89 mov esi, 0x1520                                   |         esi = 0x1520;
    0x0040cf8e call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040cf93 mov rdi, rbx                                      |         
    0x0040cf96 call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040cf9b mov eax, dword [rip + 0x50d453]                   |     eax = RemoveAllSafetyTest::masterId;
    0x0040cfa1 cmp eax, dword [rsp]                              |     
                                                                 |     if (eax != *(rsp)) {
    0x0040cfa4 je 0x40cfcd                                       |         
    0x0040cfa6 call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040cfab mov rbx, rax                                      |         rbx = rax;
    0x0040cfae mov rdi, rax                                      |         
    0x0040cfb1 call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040cfb6 mov edi, 0x67c40e                                 |         edi = "TC::masterId == numThreads";
    0x0040cfbb mov esi, 0x1521                                   |         esi = 0x1521;
    0x0040cfc0 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040cfc5 mov rdi, rbx                                      |         
    0x0040cfc8 call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040cfcd mov eax, dword [rip + 0x50d429]                   |     eax = RemoveAllSafetyTest::removed;
    0x0040cfd3 mov ecx, dword [rip + 0x50d41f]                   |     ecx = RemoveAllSafetyTest::collisions;
    0x0040cfd9 add ecx, eax                                      |     ecx += eax;
    0x0040cfdb cmp ecx, dword [rsp + 0x70]                       |     
                                                                 |     if (ecx != *((rsp + 0x70))) {
    0x0040cfdf je 0x40d165                                       |         
    0x0040cfe5 call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040cfea mov r13, rax                                      |         r13 = rax;
    0x0040cfed mov rdi, rax                                      |         
    0x0040cff0 call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040cff5 mov edi, 0x91a328                                 |         
    0x0040cffa mov esi, 0x67cee1                                 |         
    0x0040cfff mov edx, 4                                        |         
    0x0040d004 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, 0x67cee1, 4);
    0x0040d009 mov esi, 0x67b8c6                                 |         
    0x0040d00e mov edx, 2                                        |         
    0x0040d013 mov rdi, rax                                      |         
    0x0040d016 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67b8c6, 2);
    0x0040d01b mov rdi, rax                                      |         rdi = rax;
    0x0040d01e mov esi, r15d                                     |         esi = r15d;
    0x0040d021 call 0x415ae0                                     |         rax = operator << (std::_1::basic_ostream<char,std::_1::char_traits<char>>&,(anonymousnamespace)::u::AddMode) ();
    0x0040d026 mov esi, 0x696b93                                 |         
    0x0040d02b mov edx, 1                                        |         
    0x0040d030 mov rdi, rax                                      |         
    0x0040d033 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x696b93, 1);
    0x0040d038 mov esi, 0x67c429                                 |         
    0x0040d03d mov edx, 0xb                                      |         
    0x0040d042 mov rdi, rax                                      |         
    0x0040d045 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, "TC::removed", 0xb);
    0x0040d04a mov esi, 0x67b8c6                                 |         
    0x0040d04f mov edx, 2                                        |         
    0x0040d054 mov rdi, rax                                      |         
    0x0040d057 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67b8c6, 2);
    0x0040d05c mov esi, dword [rip + 0x50d39a]                   |         esi = RemoveAllSafetyTest::removed;
    0x0040d062 mov rdi, rax                                      |         rdi = rax;
    0x0040d065 call 0x405010                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040d06a mov esi, 0x696b93                                 |         
    0x0040d06e add byte [rdx + 1], bh                            |         *((rdx + 1)) += bh;
    0x0040d074 mov rdi, rax                                      |         
    0x0040d077 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x696b93, rdx);
    0x0040d07c mov esi, 0x67c443                                 |         
    0x0040d081 mov edx, 0xe                                      |         
    0x0040d086 mov rdi, rax                                      |         
    0x0040d089 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67c443, 0xe);
    0x0040d08e mov esi, 0x67b8c6                                 |         
    0x0040d093 mov edx, 2                                        |         
    0x0040d098 mov rdi, rax                                      |         
    0x0040d09b call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67b8c6, 2);
    0x0040d0a0 mov esi, dword [rip + 0x50d352]                   |         esi = RemoveAllSafetyTest::collisions;
    0x0040d0a6 mov rdi, rax                                      |         rdi = rax;
    0x0040d0a9 call 0x405010                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040d0ae mov esi, 0x696b93                                 |         
    0x0040d0b3 mov edx, 1                                        |         
    0x0040d0b8 mov rdi, rax                                      |         
    0x0040d0bb call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x696b93, 1);
    0x0040d0c0 mov esi, 0x67c435                                 |         
    0x0040d0c5 mov edx, 0x1c                                     |         
    0x0040d0ca mov rdi, rax                                      |         
    0x0040d0cd call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, "TC::removed + TC::collisions", 0x1c);
    0x0040d0d2 mov esi, 0x67b8c6                                 |         
    0x0040d0d7 mov edx, 2                                        |         
    0x0040d0dc mov rdi, rax                                      |         
    0x0040d0df call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67b8c6, 2);
    0x0040d0e4 mov ecx, dword [rip + 0x50d312]                   |         ecx = RemoveAllSafetyTest::removed;
    0x0040d0ea mov esi, dword [rip + 0x50d308]                   |         esi = RemoveAllSafetyTest::collisions;
    0x0040d0f0 add esi, ecx                                      |         esi += ecx;
    0x0040d0f2 mov rdi, rax                                      |         rdi = rax;
    0x0040d0f5 call 0x405010                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040d0fa mov esi, 0x696b93                                 |         
    0x0040d0ff mov edx, 1                                        |         
    0x0040d104 mov rdi, rax                                      |         
    0x0040d107 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x696b93, 1);
    0x0040d10c mov esi, 0x67c472                                 |         
    0x0040d111 mov edx, 0x1a                                     |         
    0x0040d116 mov rdi, rax                                      |         
    0x0040d119 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67c472, 0x1a);
    0x0040d11e mov esi, 0x67b8c6                                 |         
    0x0040d123 mov edx, 2                                        |         
    0x0040d128 mov rdi, rax                                      |         
    0x0040d12b call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67b8c6, 2);
    0x0040d130 mov rdi, rax                                      |         rdi = rax;
    0x0040d133 mov esi, dword [rsp + 0x70]                       |         esi = *((rsp + 0x70));
    0x0040d137 call 0x405010                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040d13c mov esi, 0x696ad0                                 |         
    0x0040d141 mov edx, 1                                        |         
    0x0040d146 mov rdi, rax                                      |         
    0x0040d149 call 0x5bcfd0                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x696ad0, 1);
    0x0040d14e mov edi, 0x67c452                                 |         edi = "TC::removed + TC::collisions == numThreads * numIterations";
    0x0040d153 mov esi, 0x1525                                   |         esi = 0x1525;
    0x0040d158 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040d15d mov rdi, r13                                      |         
    0x0040d160 call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r13);
                                                                 |     }
    0x0040d165 lea eax, [r15 - 0xc]                              |     eax = r15 - 0xc;
    0x0040d169 cmp eax, 0xb                                      |     
                                                                 |     if (eax <= 0xb) {
    0x0040d16c ja 0x40d260                                       |         
    0x0040d172 cmp dword [rsp], 0x14                             |         
                                                                 |         if (*(rsp) <= 0x14) {
    0x0040d176 jg 0x40d185                                       |             
    0x0040d178 cmp dword [rip + 0x50d259], 0                     |             
                                                                 |             if (*(obj.verbose) == 0) {
    0x0040d17f je 0x40d291                                       |                 goto label_38;
                                                                 |             }
                                                                 |         }
    0x0040d185 call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040d18a mov rbx, rax                                      |         rbx = rax;
    0x0040d18d mov rdi, rax                                      |         
    0x0040d190 call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040d195 mov edi, 0x91a328                                 |         
    0x0040d19a mov esi, 0x67c48d                                 |         
    0x0040d19f mov edx, 0x11                                     |         
    0x0040d1a4 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "TC::collisions = ", 0x11);
    0x0040d1a9 mov esi, dword [rip + 0x50d249]                   |         esi = RemoveAllSafetyTest::collisions;
    0x0040d1af mov rdi, rax                                      |         rdi = rax;
    0x0040d1b2 call 0x405010                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>::operator << (int) ();
    0x0040d1b7 mov esi, 0x67c275                                 |         
    0x0040d1bc mov edx, 2                                        |         
    0x0040d1c1 mov rdi, rax                                      |         
    0x0040d1c4 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (rax, 0x67c275, 2);
    0x0040d1c9 mov rdi, rax                                      |         rdi = rax;
    0x0040d1cc call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040d1d1 mov rdi, rbx                                      |         
    0x0040d1d4 call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040d1d9 call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040d1de mov r13, rax                                      |         r13 = rax;
    0x0040d1e1 mov rdi, rax                                      |         
    0x0040d1e4 call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040d1e9 mov edi, 0x91a328                                 |         
    0x0040d1ee mov esi, 0x67c49f                                 |         
    0x0040d1f3 mov edx, 7                                        |         
    0x0040d1f8 call 0x5bcfd0                                     |         rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, "mode = ", 7);
    0x0040d1fd mov rdi, rax                                      |         rdi = rax;
    0x0040d200 mov esi, r15d                                     |         esi = r15d;
    0x0040d203 call 0x415ae0                                     |         rax = operator << (std::_1::basic_ostream<char,std::_1::char_traits<char>>&,(anonymousnamespace)::u::AddMode) ();
    0x0040d208 mov rbp, rax                                      |         
    0x0040d20b mov rax, qword [rax]                              |         rax = *(rax);
    0x0040d20e mov rsi, qword [rax - 0x18]                       |         rsi = *((rax - 0x18));
    0x0040d212 add rsi, rbp                                      |         rsi += rbp;
    0x0040d215 mov rdi, r14                                      |         rdi = r14;
    0x0040d218 call 0x405070                                     |         std::_1::ios_base::getloc()const ();
    0x0040d21d mov esi, 0x91a270                                 |         esi = obj.std::__1::ctype_char_::id;
    0x0040d222 mov rdi, r14                                      |         rdi = r14;
    0x0040d225 call 0x4051a0                                     |         rax = std::_1::locale::use_facet(std::_1::locale::id&)const ();
    0x0040d22a mov rcx, qword [rax]                              |         rcx = *(rax);
    0x0040d22d mov rdi, rax                                      |         rdi = rax;
    0x0040d230 mov esi, 0xa                                      |         esi = 0xa;
    0x0040d235 call qword [rcx + 0x38]                           |         eax = uint64_t (*rcx + 0x38)() ();
    0x0040d238 mov ebx, eax                                      |         ebx = eax;
    0x0040d23a mov rdi, r14                                      |         rdi = r14;
    0x0040d23d call 0x405240                                     |         std::_1::locale::~locale() ();
    0x0040d242 movsx esi, bl                                     |         esi = (int32_t) bl;
    0x0040d245 mov rdi, rbp                                      |         rdi = rbp;
    0x0040d248 call 0x404e30                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::put(char) ();
    0x0040d24d mov rdi, rbp                                      |         rdi = rbp;
    0x0040d250 call 0x405040                                     |         std::_1::basic_ostream<char,std::_1::char_traits<char>>::flush() ();
    0x0040d255 mov rdi, r13                                      |         
    0x0040d258 call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (r13);
    0x0040d25d jmp 0x40d291                                      |         
                                                                 |     } else {
    0x0040d260 mov eax, dword [rip + 0x50d192]                   |         eax = RemoveAllSafetyTest::collisions;
    0x0040d266 test eax, eax                                     |         
                                                                 |         if (eax == 0) {
    0x0040d268 je 0x40d291                                       |             goto label_38;
                                                                 |         }
    0x0040d26a call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040d26f mov rbx, rax                                      |         rbx = rax;
    0x0040d272 mov rdi, rax                                      |         
    0x0040d275 call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040d27a mov edi, 0x67c4a7                                 |         edi = "0 == TC::collisions";
    0x0040d27f mov esi, 0x1539                                   |         esi = 0x1539;
    0x0040d284 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040d289 mov rdi, rbx                                      |         
    0x0040d28c call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
                                                                 | label_38:
    0x0040d291 mov ebp, dword [rip + 0x50d161]                   |     ebp = RemoveAllSafetyTest::collisions;
    0x0040d297 mov rax, qword [rsp + 0x218]                      |     rax = *((rsp + 0x218));
    0x0040d29f cmp r15d, 0x18                                    |     
    0x0040d2a3 setne cl                                          |     cl = (r15d != 0x18) ? 1 : 0;
    0x0040d2a6 test rax, rax                                     |     
    0x0040d2a9 setg al                                           |     al = (rax > 0) ? 1 : 0;
    0x0040d2ac xor al, cl                                        |     al ^= cl;
                                                                 |     if (rax != 0) {
    0x0040d2ae jne 0x40cd90                                      |         goto label_6;
                                                                 |     }
    0x0040d2b4 call 0x6504b0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040d2b9 mov rbx, rax                                      |     rbx = rax;
    0x0040d2bc mov rdi, rax                                      |     
    0x0040d2bf call 0x650160                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040d2c4 mov edi, 0x67c4bb                                 |     edi = "(u::e_ADD_WITH_REMOVEALL_HANDLES == mode) == (0 < da.numAllocations())";
    0x0040d2c9 mov esi, 0x1545                                   |     esi = 0x1545;
    0x0040d2ce call 0x405800                                     |     (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040d2d3 mov rdi, rbx                                      |     
    0x0040d2d6 call 0x6502b0                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
    0x0040d2db jmp 0x40cd90                                      |     goto label_6;
                                                                 | label_35:
    0x0040d2e0 mov rax, qword [rsp + 0xe8]                       |     rax = *((rsp + 0xe8));
    0x0040d2e8 test rax, rax                                     |     
    0x0040d2eb mov rbp, qword [rsp + 0x1e8]                      |     rbp = *((rsp + 0x1e8));
    0x0040d2f3 mov r14d, dword [rsp + 0x1e0]                     |     r14d = *((rsp + 0x1e0));
                                                                 |     if (rax <= 0) {
    0x0040d2fb jg 0x40d324                                       |         
    0x0040d2fd call 0x6504b0                                     |         rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040d302 mov rbx, rax                                      |         rbx = rax;
    0x0040d305 mov rdi, rax                                      |         
    0x0040d308 call 0x650160                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040d30d mov edi, 0x67c388                                 |         edi = "0 < ta.numAllocations()";
    0x0040d312 mov esi, 0x1548                                   |         esi = 0x1548;
    0x0040d317 call 0x405800                                     |         (anonymousnamespace)::aSsErT(int,char const*,int) ();
    0x0040d31c mov rdi, rbx                                      |         
    0x0040d31f call 0x6502b0                                     |         BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::unlock() (rbx);
                                                                 |     }
    0x0040d324 lea eax, [rbp + 3]                                |     eax = rbp + 3;
    0x0040d327 test ebp, ebp                                     |     
    0x0040d329 cmovns eax, ebp                                   |     __asm ("cmovns eax, ebp");
    0x0040d32c cmp dword [rsp], 0x28                             |     
                                                                 |     if (*(rsp) < 0x28) {
    0x0040d330 jl 0x40d3ac                                       |         void (*0x40d3ac)() ();
                                                                 |     }
    0x0040d332 cmp ebp, 0x3e8                                    |     
                                                                 |     if (ebp < 0x3e8) {
    0x0040d338 jl 0x40d3ac                                       |         void (*0x40d3ac)() ();
                                                                 |     }
    0x0040d33a sar eax, 2                                        |     eax >>= 2;
    0x0040d33d cmp eax, r14d                                     |     
                                                                 |     if (eax <= r14d) {
    0x0040d340 jle 0x40d3ac                                      |         void (*0x40d3ac)() ();
                                                                 |     }
    0x0040d342 call 0x6504b0                                     |     rax = BloombergLP::bslmt::TestUtil_Guard::singletonMutex() ();
    0x0040d347 mov rbx, rax                                      |     rbx = rax;
    0x0040d34a mov rdi, rax                                      |     
    0x0040d34d call 0x650160                                     |     BloombergLP::bslmt::RecursiveMutexImpl<BloombergLP::bslmt::Platform::PosixThreads>::lock() (rax);
    0x0040d352 mov edi, 0x91a328                                 |     
    0x0040d357 mov esi, 0x67c517                                 |     
    0x0040d35c mov edx, 0xf                                      |     
    0x0040d361 call 0x5bcfd0                                     |     rax = std::_1::basic_ostream<char,std::_1::char_traits<char>>&std::_1::_put_character_sequence<char,std::_1::char_traits<char>>(std::_1::basic_ostream<char,std::_1::char_traits<char>>&,char const*,unsigned long) (obj.std::__1::cout, 0x67c517, 0xf);
    0x0040d366 mov esi, 0x67b8c6                                 |     esi = 0x67b8c6;
    0x0040d36c add al, byte [rax]                                |     al += *(rax);
                                                                 | }
