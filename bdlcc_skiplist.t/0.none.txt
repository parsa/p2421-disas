    ; assembly                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                 | /* bdlcc_skiplist.t/none @ 0x64aae0 */
                                                                                                                                 | #include <stdint.h>
                                                                                                                                 |  
    ; (fcn) method.BloombergLP::bdlcc::SkipList_PoolUtil.createPoolManager_int__int__BloombergLP::bslma::Allocator_ ()           | int64_t method_BloombergLP::bdlcc::SkipList_PoolUtil_createPoolManager_int_int_BloombergLP::bslma::Allocator_ (uint32_t arg3, int64_t arg2, char * arg1) {
                                                                                                                                 |     rdx = arg3;
                                                                                                                                 |     rsi = arg2;
                                                                                                                                 |     rdi = arg1;
                                                                                                                                 |     /* BloombergLP::bdlcc::SkipList_PoolUtil::createPoolManager(int*, int, BloombergLP::bslma::Allocator*) */
    0x0064aae0 push rbp                                                                                                          |     
    0x0064aae1 push r15                                                                                                          |     
    0x0064aae3 push r14                                                                                                          |     
    0x0064aae5 push rbx                                                                                                          |     
    0x0064aae6 push rax                                                                                                          |     
    0x0064aae7 mov rbx, rdx                                                                                                      |     rbx = rdx;
    0x0064aaea mov r15d, esi                                                                                                     |     r15d = esi;
    0x0064aaed mov rbp, rdi                                                                                                      |     
    0x0064aaf0 mov rax, qword [rdx]                                                                                              |     rax = *(rdx);
    0x0064aaf3 mov esi, 0x338                                                                                                    |     esi = 0x338;
    0x0064aaf8 mov rdi, rdx                                                                                                      |     rdi = rdx;
    0x0064aafb call qword [rax + 0x10]                                                                                           |     rax = uint64_t (*rax + 0x10)(void, void, void, void) (rax, rbx, r14, r15);
    0x0064aafe mov r14, rax                                                                                                      |     r14 = rax;
    0x0064ab01 mov rdi, rax                                                                                                      |     
    0x0064ab04 mov rsi, rbp                                                                                                      |     
    0x0064ab07 mov edx, r15d                                                                                                     |     
    0x0064ab0a mov rcx, rbx                                                                                                      |     
    0x0064ab0d call 0x64a650                                                                                                     |     BloombergLP::bdlcc::SkipList_PoolManager::SkipList_PoolManager(int*,int,BloombergLP::bslma::Allocator*) (rax, rbp, r15d, rbx);
    0x0064ab12 mov rax, r14                                                                                                      |     rax = r14;
    0x0064ab15 add rsp, 8                                                                                                        |     
    0x0064ab19 pop rbx                                                                                                           |     
    0x0064ab1a pop r14                                                                                                           |     
    0x0064ab1c pop r15                                                                                                           |     
    0x0064ab1e pop rbp                                                                                                           |     
    0x0064ab1f ret                                                                                                               |     return rax;
                                                                                                                                 | }
