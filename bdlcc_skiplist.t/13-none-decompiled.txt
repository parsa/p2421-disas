    ; assembly                                                                                                                                                                                                                                                                       | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                     | /* bdlcc_skiplist.t/none @ 0x5bc2f0 */
                                                                                                                                                                                                                                                                                     | #include <stdint.h>
                                                                                                                                                                                                                                                                                     |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void__USAGE::SimpleScheduler::_____BloombergLP::bdlf::Bind_BoundTuple1_USAGE::SimpleScheduler______unsigned_long__BloombergLP::bdlf::Bind_Bl ()           | uint64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf_Nil_void_USAGE::SimpleScheduler::_BloombergLP::bdlf::Bind_BoundTuple1_USAGE::SimpleScheduler_unsigned_long_BloombergLP::bdlf::Bind_Bl (int64_t arg3, int64_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                     |     int64_t var_18h;
                                                                                                                                                                                                                                                                                     |     uint32_t var_38h;
                                                                                                                                                                                                                                                                                     |     int64_t var_40h;
                                                                                                                                                                                                                                                                                     |     rdx = arg3;
                                                                                                                                                                                                                                                                                     |     rsi = arg2;
                                                                                                                                                                                                                                                                                     |     rdi = arg1;
                                                                                                                                                                                                                                                                                     |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (USAGE::SimpleScheduler::*)(), BloombergLP::bdlf::Bind_BoundTuple1<USAGE::SimpleScheduler*> > >(unsigned long*, BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (USAGE::SimpleScheduler::*)(), BloombergLP::bdlf::Bind_BoundTuple1<USAGE::SimpleScheduler*> > const&, BloombergLP::bslma::Allocator*) */
    0x005bc2f0 push rbp                                                                                                                                                                                                                                                              |     
    0x005bc2f1 push r15                                                                                                                                                                                                                                                              |     
    0x005bc2f3 push r14                                                                                                                                                                                                                                                              |     
    0x005bc2f5 push rbx                                                                                                                                                                                                                                                              |     
    0x005bc2f6 sub rsp, 0x48                                                                                                                                                                                                                                                         |     
    0x005bc2fa mov r14, rdx                                                                                                                                                                                                                                                          |     r14 = rdx;
    0x005bc2fd mov rbp, rsi                                                                                                                                                                                                                                                          |     
    0x005bc300 mov r15, rdi                                                                                                                                                                                                                                                          |     r15 = rdi;
    0x005bc303 test rdx, rdx                                                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                                                     |     if (rdx == 0) {
    0x005bc306 jne 0x5bc31c                                                                                                                                                                                                                                                          |         
    0x005bc308 mov r14, qword [rip + 0x35e831]                                                                                                                                                                                                                                       |         r14 = BloombergLP::bslma::Default::s_defaultAllocator;
    0x005bc30f test r14, r14                                                                                                                                                                                                                                                         |         
                                                                                                                                                                                                                                                                                     |         if (r14 != 0) {
    0x005bc312 jne 0x5bc31c                                                                                                                                                                                                                                                          |             goto label_0;
                                                                                                                                                                                                                                                                                     |         }
    0x005bc314 call 0x64efc0                                                                                                                                                                                                                                                         |         rax = BloombergLP::bslma::Default::determineAndReturnDefaultAllocator() ();
    0x005bc319 mov r14, rax                                                                                                                                                                                                                                                          |         r14 = rax;
                                                                                                                                                                                                                                                                                     |     }
                                                                                                                                                                                                                                                                                     | label_0:
    0x005bc31c mov rax, qword [r14]                                                                                                                                                                                                                                                  |     rax = *(r14);
    0x005bc31f mov esi, 0x50                                                                                                                                                                                                                                                         |     esi = 0x50;
    0x005bc324 mov rdi, r14                                                                                                                                                                                                                                                          |     rdi = r14;
    0x005bc327 call qword [rax + 0x10]                                                                                                                                                                                                                                               |     rax = uint64_t (*rax + 0x10)() ();
    0x005bc32a mov rbx, rax                                                                                                                                                                                                                                                          |     rbx = rax;
    0x005bc32d mov qword [rax], 0x5bc480                                                                                                                                                                                                                                             |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void__USAGE::SimpleScheduler::_____BloombergLP::bdlf::Bind_BoundTuple1_USAGE::SimpleScheduler_____::invokerFunction_void_;
    0x005bc334 movups xmm0, xmmword [rbp]                                                                                                                                                                                                                                            |     __asm ("movups xmm0, xmmword [rbp]");
    0x005bc338 movups xmmword [rax + 8], xmm0                                                                                                                                                                                                                                        |     __asm ("movups xmmword [rax + 8], xmm0");
    0x005bc33c mov rax, qword [rbp + 0x10]                                                                                                                                                                                                                                           |     rax = *((rbp + 0x10));
    0x005bc340 mov qword [rbx + 0x18], rax                                                                                                                                                                                                                                           |     *((rbx + 0x18)) = rax;
    0x005bc344 lea rdi, [rbx + 0x20]                                                                                                                                                                                                                                                 |     
    0x005bc348 mov qword [rbx + 0x20], 0                                                                                                                                                                                                                                             |     *((rbx + 0x20)) = 0;
    0x005bc350 mov qword [rbx + 0x48], r14                                                                                                                                                                                                                                           |     *((rbx + 0x48)) = r14;
    0x005bc354 movaps xmm0, xmmword [rip + 0xbe935]                                                                                                                                                                                                                                  |     xmm0 = .comment;
    0x005bc35b movups xmmword [rbx + 0x38], xmm0                                                                                                                                                                                                                                     |     __asm ("movups xmmword [rbx + 0x38], xmm0");
    0x005bc35f mov ecx, 0x67cb5d                                                                                                                                                                                                                                                     |     
    0x005bc364 xor esi, esi                                                                                                                                                                                                                                                          |     
    0x005bc366 xor edx, edx                                                                                                                                                                                                                                                          |     
    0x005bc368 call 0x654130                                                                                                                                                                                                                                                         |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x20, 0, 0, "string<...>::assign<Iter>(i,j): string too long");
    0x005bc36d mov rdi, rsp                                                                                                                                                                                                                                                          |     
    0x005bc370 call 0x6505a0                                                                                                                                                                                                                                                         |     BloombergLP::bslmt::ThreadAttributes::ThreadAttributes() (rsp);
    0x005bc375 mov rsi, rsp                                                                                                                                                                                                                                                          |     
    0x005bc378 mov edx, 0x650100                                                                                                                                                                                                                                                     |     
    0x005bc37d mov rdi, r15                                                                                                                                                                                                                                                          |     
    0x005bc380 mov rcx, rbx                                                                                                                                                                                                                                                          |     
    0x005bc383 call 0x650a90                                                                                                                                                                                                                                                         |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (r15, rsp, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x005bc388 mov ebp, eax                                                                                                                                                                                                                                                          |     
    0x005bc38a cmp qword [rsp + 0x38], 0x17                                                                                                                                                                                                                                          |     
                                                                                                                                                                                                                                                                                     |     if (*((rsp + 0x38)) != 0x17) {
    0x005bc390 je 0x5bc3a2                                                                                                                                                                                                                                                           |         
    0x005bc392 mov rsi, qword [rsp + 0x18]                                                                                                                                                                                                                                           |         rsi = *((rsp + 0x18));
    0x005bc397 mov rdi, qword [rsp + 0x40]                                                                                                                                                                                                                                           |         rdi = *((rsp + 0x40));
    0x005bc39c mov rax, qword [rdi]                                                                                                                                                                                                                                                  |         rax = *(rdi);
    0x005bc39f call qword [rax + 0x18]                                                                                                                                                                                                                                               |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |     }
    0x005bc3a2 test ebp, ebp                                                                                                                                                                                                                                                         |     
                                                                                                                                                                                                                                                                                     |     if (ebp != 0) {
    0x005bc3a4 je 0x5bc3cf                                                                                                                                                                                                                                                           |         
    0x005bc3a6 cmp qword [rbx + 0x40], 0x17                                                                                                                                                                                                                                          |         
                                                                                                                                                                                                                                                                                     |         if (*((rbx + 0x40)) != 0x17) {
    0x005bc3ab je 0x5bc3bb                                                                                                                                                                                                                                                           |             
    0x005bc3ad mov rsi, qword [rbx + 0x20]                                                                                                                                                                                                                                           |             rsi = *((rbx + 0x20));
    0x005bc3b1 mov rdi, qword [rbx + 0x48]                                                                                                                                                                                                                                           |             rdi = *((rbx + 0x48));
    0x005bc3b5 mov rax, qword [rdi]                                                                                                                                                                                                                                                  |             rax = *(rdi);
    0x005bc3b8 call qword [rax + 0x18]                                                                                                                                                                                                                                               |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |         }
    0x005bc3bb mov qword [rbx + 0x38], 0xffffffffffffffff                                                                                                                                                                                                                            |         *((rbx + 0x38)) = 0xffffffffffffffff;
    0x005bc3c3 mov rax, qword [r14]                                                                                                                                                                                                                                                  |         rax = *(r14);
    0x005bc3c6 mov rdi, r14                                                                                                                                                                                                                                                          |         rdi = r14;
    0x005bc3c9 mov rsi, rbx                                                                                                                                                                                                                                                          |         rsi = rbx;
    0x005bc3cc call qword [rax + 0x18]                                                                                                                                                                                                                                               |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                     |     }
    0x005bc3cf mov eax, ebp                                                                                                                                                                                                                                                          |     eax = ebp;
    0x005bc3d1 add rsp, 0x48                                                                                                                                                                                                                                                         |     
    0x005bc3d5 pop rbx                                                                                                                                                                                                                                                               |     
    0x005bc3d6 pop r14                                                                                                                                                                                                                                                               |     
    0x005bc3d8 pop r15                                                                                                                                                                                                                                                               |     
    0x005bc3da pop rbp                                                                                                                                                                                                                                                               |     
    0x005bc3db ret                                                                                                                                                                                                                                                                   |     return rax;
                                                                                                                                                                                                                                                                                     | }
