    ; assembly                                                                                                                                                                                                                                                                   | /* r2dec pseudo code output */
                                                                                                                                                                                                                                                                                 | /* bdlcc_skiplist.t/assume @ 0x5c0f80 */
                                                                                                                                                                                                                                                                                 | #include <stdint.h>
                                                                                                                                                                                                                                                                                 |  
    ; (fcn) method.int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::SkipList_unsigned_long__unsigned_long___BloombergLP::bsls::AtomicInt__BloombergLP::bslmt::Barrier___BloombergLP ()        | int64_t method_int_BloombergLP::bslmt::ThreadUtil::createWithAllocator_BloombergLP::bdlf::Bind_BloombergLP::bslmf_Nil_void_BloombergLP::bdlcc::SkipList_unsigned_long_unsigned_long_BloombergLP::bsls::AtomicInt_BloombergLP::bslmt::Barrier_BloombergLP (int64_t arg4, int64_t arg3, uint32_t arg2, int64_t arg1) {
                                                                                                                                                                                                                                                                                 |     rcx = arg4;
                                                                                                                                                                                                                                                                                 |     rdx = arg3;
                                                                                                                                                                                                                                                                                 |     rsi = arg2;
                                                                                                                                                                                                                                                                                 |     rdi = arg1;
                                                                                                                                                                                                                                                                                 |     /* int BloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::SkipList<unsigned long, unsigned long>*, BloombergLP::bsls::AtomicInt*, BloombergLP::bslmt::Barrier*), BloombergLP::bdlf::Bind_BoundTuple3<BloombergLP::bdlcc::SkipList<unsigned long, unsigned long>*, BloombergLP::bsls::AtomicInt*, BloombergLP::bslmt::Barrier*> > >(unsigned long*, BloombergLP::bslmt::ThreadAttributes const&, BloombergLP::bdlf::Bind<BloombergLP::bslmf::Nil, void (*)(BloombergLP::bdlcc::SkipList<unsigned long, unsigned long>*, BloombergLP::bsls::AtomicInt*, BloombergLP::bslmt::Barrier*), BloombergLP::bdlf::Bind_BoundTuple3<BloombergLP::bdlcc::SkipList<unsigned long, unsigned long>*, BloombergLP::bsls::AtomicInt*, BloombergLP::bslmt::Barrier*> > const&, BloombergLP::bslma::Allocator*) */
    0x005c0f80 push rbp                                                                                                                                                                                                                                                          |     
    0x005c0f81 push r15                                                                                                                                                                                                                                                          |     
    0x005c0f83 push r14                                                                                                                                                                                                                                                          |     
    0x005c0f85 push r13                                                                                                                                                                                                                                                          |     
    0x005c0f87 push r12                                                                                                                                                                                                                                                          |     
    0x005c0f89 push rbx                                                                                                                                                                                                                                                          |     
    0x005c0f8a push rax                                                                                                                                                                                                                                                          |     
    0x005c0f8b mov r14, rcx                                                                                                                                                                                                                                                      |     r14 = rcx;
    0x005c0f8e mov r12, rdx                                                                                                                                                                                                                                                      |     r12 = rdx;
    0x005c0f91 mov r15, rsi                                                                                                                                                                                                                                                      |     r15 = rsi;
    0x005c0f94 mov qword [rsp], rdi                                                                                                                                                                                                                                              |     *(rsp) = rdi;
    0x005c0f98 mov r13, qword [rsi + 0x30]                                                                                                                                                                                                                                       |     r13 = *((rsi + 0x30));
    0x005c0f9c cmp qword [rsi + 0x38], 0x17                                                                                                                                                                                                                                      |     
                                                                                                                                                                                                                                                                                 |     if (*((rsi + 0x38)) != 0x17) {
    0x005c0fa1 je 0x5c0fa9                                                                                                                                                                                                                                                       |         
    0x005c0fa3 mov rbp, qword [r15 + 0x18]                                                                                                                                                                                                                                       |         rbp = *((r15 + 0x18));
    0x005c0fa7 jmp 0x5c0fad                                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |     } else {
    0x005c0fa9 lea rbp, [r15 + 0x18]                                                                                                                                                                                                                                             |         rbp = r15 + 0x18;
                                                                                                                                                                                                                                                                                 |     }
    0x005c0fad mov rax, qword [r14]                                                                                                                                                                                                                                              |     rax = *(r14);
    0x005c0fb0 mov esi, 0x58                                                                                                                                                                                                                                                     |     esi = 0x58;
    0x005c0fb5 mov rdi, r14                                                                                                                                                                                                                                                      |     rdi = r14;
    0x005c0fb8 call qword [rax + 0x10]                                                                                                                                                                                                                                           |     rax = uint64_t (*rax + 0x10)() ();
    0x005c0fbb mov rbx, rax                                                                                                                                                                                                                                                      |     rbx = rax;
    0x005c0fbe mov qword [rax], 0x5c10e0                                                                                                                                                                                                                                         |     *(rax) = method.BloombergLP::bslmt::EntryPointFunctorAdapter_BloombergLP::bdlf::Bind_BloombergLP::bslmf.Nil__void____BloombergLP::bdlcc::SkipList_unsigned_long__unsigned_long___BloombergLP::bsls::AtomicInt__BloombergLP::bslmt::Barrier___BloombergLP::bdlf::Bin;
    0x005c0fc5 mov rax, qword [r12]                                                                                                                                                                                                                                              |     rax = *(r12);
    0x005c0fc9 mov qword [rbx + 8], rax                                                                                                                                                                                                                                          |     *((rbx + 8)) = rax;
    0x005c0fcd mov rax, qword [r12 + 8]                                                                                                                                                                                                                                          |     rax = *((r12 + 8));
    0x005c0fd2 mov qword [rbx + 0x10], rax                                                                                                                                                                                                                                       |     *((rbx + 0x10)) = rax;
    0x005c0fd6 mov rax, qword [r12 + 0x10]                                                                                                                                                                                                                                       |     rax = *((r12 + 0x10));
    0x005c0fdb mov qword [rbx + 0x18], rax                                                                                                                                                                                                                                       |     *((rbx + 0x18)) = rax;
    0x005c0fdf mov rax, qword [r12 + 0x18]                                                                                                                                                                                                                                       |     rax = *((r12 + 0x18));
    0x005c0fe4 mov qword [rbx + 0x20], rax                                                                                                                                                                                                                                       |     *((rbx + 0x20)) = rax;
    0x005c0fe8 lea rdi, [rbx + 0x28]                                                                                                                                                                                                                                             |     
    0x005c0fec mov qword [rbx + 0x28], 0                                                                                                                                                                                                                                         |     *((rbx + 0x28)) = 0;
    0x005c0ff4 mov qword [rbx + 0x50], r14                                                                                                                                                                                                                                       |     *((rbx + 0x50)) = r14;
    0x005c0ff8 movaps xmm0, xmmword [rip + 0xb93c1]                                                                                                                                                                                                                              |     xmm0 = .comment;
    0x005c0fff movups xmmword [rbx + 0x40], xmm0                                                                                                                                                                                                                                 |     __asm ("movups xmmword [rbx + 0x40], xmm0");
    0x005c1003 mov ecx, 0x67c28f                                                                                                                                                                                                                                                 |     
    0x005c1008 mov rsi, rbp                                                                                                                                                                                                                                                      |     
    0x005c100b mov rdx, r13                                                                                                                                                                                                                                                      |     
    0x005c100e call 0x653850                                                                                                                                                                                                                                                     |     bsl::basic_string<char,std::_1::char_traits<char>,bsl::allocator<char>>::privateAppend(char const*,unsigned long,char const*) (rbx + 0x28, rbp, r13, "string<...>::assign<Iter>(i,j): string too long");
    0x005c1013 mov edx, 0x64f840                                                                                                                                                                                                                                                 |     
    0x005c1018 mov rdi, qword [rsp]                                                                                                                                                                                                                                              |     
    0x005c101c mov rsi, r15                                                                                                                                                                                                                                                      |     
    0x005c101f mov rcx, rbx                                                                                                                                                                                                                                                      |     
    0x005c1022 call 0x6501d0                                                                                                                                                                                                                                                     |     eax = BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt::Platform::PosixThreads>::create(unsigned long*,BloombergLP::bslmt::ThreadAttributesconst&,void*(*)(void*),void*) (*(rsp), r15, sym.bslmt_EntryPointFunctorAdapter_invoker, rbx);
    0x005c1027 mov ebp, eax                                                                                                                                                                                                                                                      |     
    0x005c1029 test eax, eax                                                                                                                                                                                                                                                     |     
                                                                                                                                                                                                                                                                                 |     if (eax != 0) {
    0x005c102b je 0x5c1056                                                                                                                                                                                                                                                       |         
    0x005c102d cmp qword [rbx + 0x48], 0x17                                                                                                                                                                                                                                      |         
                                                                                                                                                                                                                                                                                 |         if (*((rbx + 0x48)) != 0x17) {
    0x005c1032 je 0x5c1042                                                                                                                                                                                                                                                       |             
    0x005c1034 mov rsi, qword [rbx + 0x28]                                                                                                                                                                                                                                       |             rsi = *((rbx + 0x28));
    0x005c1038 mov rdi, qword [rbx + 0x50]                                                                                                                                                                                                                                       |             rdi = *((rbx + 0x50));
    0x005c103c mov rax, qword [rdi]                                                                                                                                                                                                                                              |             rax = *(rdi);
    0x005c103f call qword [rax + 0x18]                                                                                                                                                                                                                                           |             uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |         }
    0x005c1042 mov qword [rbx + 0x40], 0xffffffffffffffff                                                                                                                                                                                                                        |         *((rbx + 0x40)) = 0xffffffffffffffff;
    0x005c104a mov rax, qword [r14]                                                                                                                                                                                                                                              |         rax = *(r14);
    0x005c104d mov rdi, r14                                                                                                                                                                                                                                                      |         rdi = r14;
    0x005c1050 mov rsi, rbx                                                                                                                                                                                                                                                      |         rsi = rbx;
    0x005c1053 call qword [rax + 0x18]                                                                                                                                                                                                                                           |         uint64_t (*rax + 0x18)() ();
                                                                                                                                                                                                                                                                                 |     }
    0x005c1056 mov eax, ebp                                                                                                                                                                                                                                                      |     eax = ebp;
    0x005c1058 add rsp, 8                                                                                                                                                                                                                                                        |     
    0x005c105c pop rbx                                                                                                                                                                                                                                                           |     
    0x005c105d pop r12                                                                                                                                                                                                                                                           |     
    0x005c105f pop r13                                                                                                                                                                                                                                                           |     
    0x005c1061 pop r14                                                                                                                                                                                                                                                           |     
    0x005c1063 pop r15                                                                                                                                                                                                                                                           |     
    0x005c1065 pop rbp                                                                                                                                                                                                                                                           |     
    0x005c1066 ret                                                                                                                                                                                                                                                               |     return rax;
                                                                                                                                                                                                                                                                                 | }
