0000000000437ad0 <int BloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bin   |	0000000000437540 <int BloombergLP::bslmt::ThreadUtil::createWithAllocator<BloombergLP::bdlf::Bin
0000000000000000: 01	pushq	%rbp									0000000000000000: 01	pushq	%rbp
0000000000000001: 02	pushq	%r15									0000000000000001: 02	pushq	%r15
0000000000000003: 02	pushq	%r14									0000000000000003: 02	pushq	%r14
0000000000000005: 02	pushq	%r13									0000000000000005: 02	pushq	%r13
0000000000000007: 02	pushq	%r12									0000000000000007: 02	pushq	%r12
0000000000000009: 01	pushq	%rbx									0000000000000009: 01	pushq	%rbx
000000000000000a: 01	pushq	%rax									000000000000000a: 01	pushq	%rax
000000000000000b: 03	movq	%rcx, %r14								000000000000000b: 03	movq	%rcx, %r14
000000000000000e: 03	movq	%rdx, %r12								000000000000000e: 03	movq	%rdx, %r12
0000000000000011: 03	movq	%rsi, %r15								0000000000000011: 03	movq	%rsi, %r15
0000000000000014: 04	movq	%rdi, (%rsp)								0000000000000014: 04	movq	%rdi, (%rsp)
0000000000000018: 04	movq	48(%rsi), %r13							   |	0000000000000018: 05	cmpq	$23, 56(%rsi)
000000000000001c: 05	cmpq	$23, 56(%rsi)							   |	000000000000001d: 02	je	0x437565 <int BloombergLP::bslmt::ThreadUtil::createWithAllocato
0000000000000021: 02	je	0x437af9 <int BloombergLP::bslmt::ThreadUtil::createWithAllocato   |	000000000000001f: 04	movq	24(%r15), %r13
0000000000000023: 04	movq	24(%r15), %rbp							   |	0000000000000023: 02	jmp	0x437569 <int BloombergLP::bslmt::ThreadUtil::createWithAllocato
0000000000000027: 02	jmp	0x437afd <int BloombergLP::bslmt::ThreadUtil::createWithAllocato   |	0000000000000025: 04	leaq	24(%r15), %r13
0000000000000029: 04	leaq	24(%r15), %rbp							   |	0000000000000029: 04	movq	48(%r15), %rbp
000000000000002d: 03	movq	(%r14), %rax							   |	000000000000002d: 03	testq	%r14, %r14
0000000000000030: 05	movl	$80, %esi							   |	0000000000000030: 02	jne	0x437586 <int BloombergLP::bslmt::ThreadUtil::createWithAllocato
0000000000000035: 03	movq	%r14, %rdi							   |	0000000000000032: 07	movq	5125575(%rip), %r14  # 91ab40 <BloombergLP::bslma::Default::s_de
0000000000000038: 03	callq	*16(%rax)							   |	0000000000000039: 03	testq	%r14, %r14
000000000000003b: 03	movq	%rax, %rbx							   |	000000000000003c: 02	jne	0x437586 <int BloombergLP::bslmt::ThreadUtil::createWithAllocato
000000000000003e: 07	movq	$4422704, (%rax)						   |	000000000000003e: 05	callq	0x64efc0 <BloombergLP::bslma::Default::determineAndReturnDefault
0000000000000045: 04	movq	(%r12), %rax							   |	0000000000000043: 03	movq	%rax, %r14
0000000000000049: 04	movq	%rax, 8(%rbx)							   |	0000000000000046: 03	movq	(%r14), %rax
000000000000004d: 05	movq	8(%r12), %rax							   |	0000000000000049: 05	movl	$80, %esi
0000000000000052: 04	movq	%rax, 16(%rbx)							   |	000000000000004e: 03	movq	%r14, %rdi
0000000000000056: 05	movl	16(%r12), %eax							   |	0000000000000051: 03	callq	*16(%rax)
000000000000005b: 03	movl	%eax, 24(%rbx)							   |	0000000000000054: 03	movq	%rax, %rbx
000000000000005e: 04	leaq	32(%rbx), %rdi							   |	0000000000000057: 07	movq	$4421296, (%rax)
0000000000000062: 08	movq	$0, 32(%rbx)							   |	000000000000005e: 04	movq	(%r12), %rax
000000000000006a: 04	movq	%r14, 72(%rbx)							   |	0000000000000062: 04	movq	%rax, 8(%rbx)
000000000000006e: 07	movaps	2369659(%rip), %xmm0  # 67a3c0 <(anonymous namespace)::u::DATA+0   |	0000000000000066: 05	movq	8(%r12), %rax
0000000000000075: 04	movups	%xmm0, 56(%rbx)							   |	000000000000006b: 04	movq	%rax, 16(%rbx)
0000000000000079: 05	movl	$6800015, %ecx							   |	000000000000006f: 05	movl	16(%r12), %eax
000000000000007e: 03	movq	%rbp, %rsi							   |	0000000000000074: 03	movl	%eax, 24(%rbx)
0000000000000081: 03	movq	%r13, %rdx							   |	0000000000000077: 04	leaq	32(%rbx), %rdi
0000000000000084: 05	callq	0x653850 <bsl::basic_string<char, std::__1::char_traits<char>, b   |	000000000000007b: 08	movq	$0, 32(%rbx)
0000000000000089: 05	movl	$6617152, %edx							   |	0000000000000083: 04	movq	%r14, 72(%rbx)
000000000000008e: 04	movq	(%rsp), %rdi							   |	0000000000000087: 07	movaps	2373314(%rip), %xmm0  # 67ac90 <(anonymous namespace)::u::DATA+0
0000000000000092: 03	movq	%r15, %rsi							   |	000000000000008e: 04	movups	%xmm0, 56(%rbx)
0000000000000095: 03	movq	%rbx, %rcx							   |	0000000000000092: 05	movl	$6802269, %ecx
0000000000000098: 05	callq	0x6501d0 <BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt:   |	0000000000000097: 03	movq	%r13, %rsi
000000000000009d: 02	movl	%eax, %ebp							   |	000000000000009a: 03	movq	%rbp, %rdx
000000000000009f: 02	testl	%eax, %eax							   |	000000000000009d: 05	callq	0x654130 <bsl::basic_string<char, std::__1::char_traits<char>, b
00000000000000a1: 02	je	0x437b9c <int BloombergLP::bslmt::ThreadUtil::createWithAllocato   |	00000000000000a2: 05	movl	$6619392, %edx
00000000000000a3: 05	cmpq	$23, 64(%rbx)							   |	00000000000000a7: 04	movq	(%rsp), %rdi
00000000000000a8: 02	je	0x437b88 <int BloombergLP::bslmt::ThreadUtil::createWithAllocato   |	00000000000000ab: 03	movq	%r15, %rsi
00000000000000aa: 04	movq	32(%rbx), %rsi							   |	00000000000000ae: 03	movq	%rbx, %rcx
00000000000000ae: 04	movq	72(%rbx), %rdi							   |	00000000000000b1: 05	callq	0x650a90 <BloombergLP::bslmt::ThreadUtilImpl<BloombergLP::bslmt:
00000000000000b2: 03	movq	(%rdi), %rax							   |	00000000000000b6: 02	movl	%eax, %ebp
00000000000000b5: 03	callq	*24(%rax)							   |	00000000000000b8: 02	testl	%eax, %eax
00000000000000b8: 08	movq	$-1, 56(%rbx)							   |	00000000000000ba: 02	je	0x437625 <int BloombergLP::bslmt::ThreadUtil::createWithAllocato
00000000000000c0: 03	movq	(%r14), %rax							   |	00000000000000bc: 05	cmpq	$23, 64(%rbx)
00000000000000c3: 03	movq	%r14, %rdi							   |	00000000000000c1: 02	je	0x437611 <int BloombergLP::bslmt::ThreadUtil::createWithAllocato
00000000000000c6: 03	movq	%rbx, %rsi							   |	00000000000000c3: 04	movq	32(%rbx), %rsi
00000000000000c9: 03	callq	*24(%rax)							   |	00000000000000c7: 04	movq	72(%rbx), %rdi
00000000000000cc: 02	movl	%ebp, %eax							   |	00000000000000cb: 03	movq	(%rdi), %rax
00000000000000ce: 04	addq	$8, %rsp							   |	00000000000000ce: 03	callq	*24(%rax)
00000000000000d2: 01	popq	%rbx								   |	00000000000000d1: 08	movq	$-1, 56(%rbx)
00000000000000d3: 02	popq	%r12								   |	00000000000000d9: 03	movq	(%r14), %rax
00000000000000d5: 02	popq	%r13								   |	00000000000000dc: 03	movq	%r14, %rdi
00000000000000d7: 02	popq	%r14								   |	00000000000000df: 03	movq	%rbx, %rsi
00000000000000d9: 02	popq	%r15								   |	00000000000000e2: 03	callq	*24(%rax)
00000000000000db: 01	popq	%rbp								   |	00000000000000e5: 02	movl	%ebp, %eax
00000000000000dc: 01	retq									   |	00000000000000e7: 04	addq	$8, %rsp
00000000000000dd: 03	movq	%rax, %rdi							   |	00000000000000eb: 01	popq	%rbx
00000000000000e0: 05	callq	0x5b9fb0 <__clang_call_terminate>				   |	00000000000000ec: 02	popq	%r12
00000000000000e5: 03	movq	%rax, %rdi							   |	00000000000000ee: 02	popq	%r13
00000000000000e8: 05	callq	0x5b9fb0 <__clang_call_terminate>				   |	00000000000000f0: 02	popq	%r14
00000000000000ed: 03	movq	%rax, %r15							   |	00000000000000f2: 02	popq	%r15
00000000000000f0: 05	cmpq	$23, 64(%rbx)							   |	00000000000000f4: 01	popq	%rbp
00000000000000f5: 02	je	0x437bd5 <int BloombergLP::bslmt::ThreadUtil::createWithAllocato   |	00000000000000f5: 01	retq	
00000000000000f7: 04	movq	32(%rbx), %rsi							   |	00000000000000f6: 03	movq	%rax, %rdi
00000000000000fb: 04	movq	72(%rbx), %rdi							   |	00000000000000f9: 05	callq	0x5ba160 <__clang_call_terminate>
00000000000000ff: 03	movq	(%rdi), %rax							   |	00000000000000fe: 03	movq	%rax, %rdi
0000000000000102: 03	callq	*24(%rax)							   |	0000000000000101: 05	callq	0x5ba160 <__clang_call_terminate>
0000000000000105: 08	movq	$-1, 56(%rbx)							   |	0000000000000106: 03	movq	%rax, %rbp
000000000000010d: 03	movq	(%r14), %rax							   |	0000000000000109: 05	cmpq	$23, 64(%rbx)
0000000000000110: 03	movq	%r14, %rdi							   |	000000000000010e: 02	je	0x43765e <int BloombergLP::bslmt::ThreadUtil::createWithAllocato
0000000000000113: 03	movq	%rbx, %rsi							   |	0000000000000110: 04	movq	32(%rbx), %rsi
0000000000000116: 03	callq	*24(%rax)							   |	0000000000000114: 04	movq	72(%rbx), %rdi
0000000000000119: 02	jmp	0x437c12 <int BloombergLP::bslmt::ThreadUtil::createWithAllocato   |	0000000000000118: 03	movq	(%rdi), %rax
000000000000011b: 03	movq	%rax, %rdi							   |	000000000000011b: 03	callq	*24(%rax)
000000000000011e: 05	callq	0x5b9fb0 <__clang_call_terminate>				   |	000000000000011e: 08	movq	$-1, 56(%rbx)
0000000000000123: 03	movq	%rax, %rdi							   |	0000000000000126: 03	movq	(%r14), %rax
0000000000000126: 05	callq	0x5b9fb0 <__clang_call_terminate>				   |	0000000000000129: 03	movq	%r14, %rdi
000000000000012b: 03	movq	%rax, %r15							   |	000000000000012c: 03	movq	%rbx, %rsi
000000000000012e: 08	movq	$0, 56(%rbx)							   |	000000000000012f: 03	callq	*24(%rax)
0000000000000136: 03	movq	(%r14), %rax							   |	0000000000000132: 02	jmp	0x43769b <int BloombergLP::bslmt::ThreadUtil::createWithAllocato
0000000000000139: 03	movq	%r14, %rdi							   |	0000000000000134: 03	movq	%rax, %rdi
000000000000013c: 03	movq	%rbx, %rsi							   |	0000000000000137: 05	callq	0x5ba160 <__clang_call_terminate>
000000000000013f: 03	callq	*24(%rax)							   |	000000000000013c: 03	movq	%rax, %rdi
0000000000000142: 03	movq	%r15, %rdi							   |	000000000000013f: 05	callq	0x5ba160 <__clang_call_terminate>
0000000000000145: 05	callq	0x405360 <_Unwind_Resume@plt>					   |	0000000000000144: 03	movq	%rax, %rbp
000000000000014a: 03	movq	%rax, %rdi							   |	0000000000000147: 08	movq	$0, 56(%rbx)
000000000000014d: 05	callq	0x5b9fb0 <__clang_call_terminate>				   |	000000000000014f: 03	movq	(%r14), %rax
0000000000000152: 10	nopw	%cs:(%rax,%rax)							   |	0000000000000152: 03	movq	%r14, %rdi
000000000000015c: 04	nopl	(%rax)								   |	0000000000000155: 03	movq	%rbx, %rsi
												   >	0000000000000158: 03	callq	*24(%rax)
												   >	000000000000015b: 03	movq	%rbp, %rdi
												   >	000000000000015e: 05	callq	0x405360 <_Unwind_Resume@plt>
												   >	0000000000000163: 03	movq	%rax, %rdi
												   >	0000000000000166: 05	callq	0x5ba160 <__clang_call_terminate>
												   >	000000000000016b: 05	nopl	(%rax,%rax)
